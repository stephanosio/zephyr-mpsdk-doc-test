<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__sensor__interface" kind="group">
    <compoundname>sensor_interface</compoundname>
    <title>Sensor Interface</title>
    <innerclass refid="structsensor__value" prot="public">sensor_value</innerclass>
    <innerclass refid="structsensor__trigger" prot="public">sensor_trigger</innerclass>
    <innerclass refid="structsensor__driver__api" prot="public">sensor_driver_api</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__sensor__interface_1gaaa1b502bc029b10d7b23b0a25ef4e934" prot="public" static="no" strong="no">
        <type></type>
        <name>sensor_channel</name>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934afa9238082f000350530ca77b2f513d4c" prot="public">
          <name>SENSOR_CHAN_ACCEL_X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Acceleration on the X axis, in m/s^2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a61c145468f01916c1a547fb38a1be9a8" prot="public">
          <name>SENSOR_CHAN_ACCEL_Y</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Acceleration on the Y axis, in m/s^2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a78e06bb48cfe06e42829816ad4cb5a0f" prot="public">
          <name>SENSOR_CHAN_ACCEL_Z</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Acceleration on the Z axis, in m/s^2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a16c05784ae15a4952ea708c2f11a2ae9" prot="public">
          <name>SENSOR_CHAN_ACCEL_XYZ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Acceleration on the X, Y and Z axes. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934ac5709b77f0eb69972ccc055f927e5015" prot="public">
          <name>SENSOR_CHAN_GYRO_X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Angular velocity around the X axis, in radians/s. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a4a9533172105fd2e55d96e0122a48847" prot="public">
          <name>SENSOR_CHAN_GYRO_Y</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Angular velocity around the Y axis, in radians/s. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a9b6b9d13cd8d82449823d65779a87a39" prot="public">
          <name>SENSOR_CHAN_GYRO_Z</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Angular velocity around the Z axis, in radians/s. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a1d36b89ab3761e9bc86effc839f8db0e" prot="public">
          <name>SENSOR_CHAN_GYRO_XYZ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Angular velocity around the X, Y and Z axes. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a171f37ba152d34f75ff745cb848b3240" prot="public">
          <name>SENSOR_CHAN_MAGN_X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Magnetic field on the X axis, in Gauss. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a2b4f1764f47428c528447347d7730942" prot="public">
          <name>SENSOR_CHAN_MAGN_Y</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Magnetic field on the Y axis, in Gauss. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a2a2115051ded019a57ece5a00f86ea61" prot="public">
          <name>SENSOR_CHAN_MAGN_Z</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Magnetic field on the Z axis, in Gauss. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a5d1f48466f6f600503af18427fa3da32" prot="public">
          <name>SENSOR_CHAN_MAGN_XYZ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Magnetic field on the X, Y and Z axes. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a0a8828f51fe15335ad857d136f197ee1" prot="public">
          <name>SENSOR_CHAN_DIE_TEMP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Device die temperature in degrees Celsius. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a5bf9c4a677405c4a4df3bc3acd116c7c" prot="public">
          <name>SENSOR_CHAN_AMBIENT_TEMP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Ambient temperature in degrees Celsius. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a14cd68844542e23d1b641a2bc54132a9" prot="public">
          <name>SENSOR_CHAN_PRESS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Pressure in kilopascal. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934abaec2c1347ef0035221dd4d9c34a4774" prot="public">
          <name>SENSOR_CHAN_PROX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Proximity. Adimensional. A value of 1 indicates that an object is close. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934ad08ddb6c9cd71c853a121f426fcea042" prot="public">
          <name>SENSOR_CHAN_HUMIDITY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Humidity, in percent. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a6e91196c11d080c3f5df55fda190e19d" prot="public">
          <name>SENSOR_CHAN_LIGHT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Illuminance in visible spectrum, in lux. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934ad725fe5778f000a17f93f83dab31132c" prot="public">
          <name>SENSOR_CHAN_IR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Illuminance in infra-red spectrum, in lux. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934af22c8ef66f4871efe5a22863d7f434aa" prot="public">
          <name>SENSOR_CHAN_RED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Illuminance in red spectrum, in lux. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a216a3b2b77d7a92f94547aeb889ae378" prot="public">
          <name>SENSOR_CHAN_GREEN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Illuminance in green spectrum, in lux. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a6e66f95d73d05c2b3511e2db506844f5" prot="public">
          <name>SENSOR_CHAN_BLUE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Illuminance in blue spectrum, in lux. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934af5ba63bfef1c64c8a96ae7fba4f35512" prot="public">
          <name>SENSOR_CHAN_ALTITUDE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Altitude, in meters </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a08f0c21c33008292b0b58defe5c06815" prot="public">
          <name>SENSOR_CHAN_PM_1_0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1.0 micro-meters Particulate Matter, in ug/m^3 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a3398fdc51964aa06c9a01096d2fac945" prot="public">
          <name>SENSOR_CHAN_PM_2_5</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>2.5 micro-meters Particulate Matter, in ug/m^3 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934aa450541bde278aefcc9b53bd0826e225" prot="public">
          <name>SENSOR_CHAN_PM_10</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>10 micro-meters Particulate Matter, in ug/m^3 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934ad46d1495990a86fa7e2ab5bbe5338e08" prot="public">
          <name>SENSOR_CHAN_DISTANCE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Distance. From sensor to target, in meters </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a7a23e3e869c5e9a39f6a7bfa28737133" prot="public">
          <name>SENSOR_CHAN_CO2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CO2 level, in parts per million (ppm) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934affee34c60c95398b67ec59644d647f8e" prot="public">
          <name>SENSOR_CHAN_VOC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>VOC level, in parts per billion (ppb) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934acf250a87d2d175f99179a5b54cb7ba01" prot="public">
          <name>SENSOR_CHAN_GAS_RES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Gas sensor resistance in ohms. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a69dd8a737a0cb6f03fa5f60c92840e6d" prot="public">
          <name>SENSOR_CHAN_VOLTAGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Voltage, in volts </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a1a001ba3ca5ad37308fb7be81f11c950" prot="public">
          <name>SENSOR_CHAN_CURRENT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Current, in amps </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a33607371060fca93c3555e8e10d5b177" prot="public">
          <name>SENSOR_CHAN_POWER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Power in watts </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a34ba555026ff976881142512cc8a616b" prot="public">
          <name>SENSOR_CHAN_RESISTANCE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Resistance , in Ohm </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a551ffe08a9b1206e3c051f207b92aabf" prot="public">
          <name>SENSOR_CHAN_ROTATION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Angular rotation, in degrees </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934aa00b7a857e33c925c910661a91389517" prot="public">
          <name>SENSOR_CHAN_POS_DX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Position change on the X axis, in points. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a974327ca88ea6d22731cd03afeacef76" prot="public">
          <name>SENSOR_CHAN_POS_DY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Position change on the Y axis, in points. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934aeaf49aa075947a160f21ae19cf8c39b9" prot="public">
          <name>SENSOR_CHAN_POS_DZ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Position change on the Z axis, in points. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a655a576a72cbd6641abc698a3f4304d1" prot="public">
          <name>SENSOR_CHAN_RPM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Revolutions per minute, in RPM. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934ab942649ce1507fb081a77b4bcfc1a57d" prot="public">
          <name>SENSOR_CHAN_GAUGE_VOLTAGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Voltage, in volts </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a4272c1256cde47006d424c5523d26bf8" prot="public">
          <name>SENSOR_CHAN_GAUGE_AVG_CURRENT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Average current, in amps </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a5e6b87cacfe3e4703b963a2177d35cc8" prot="public">
          <name>SENSOR_CHAN_GAUGE_STDBY_CURRENT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Standy current, in amps </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a603335f6a91846c5089a2a541d9053cf" prot="public">
          <name>SENSOR_CHAN_GAUGE_MAX_LOAD_CURRENT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Max load current, in amps </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a8cac65c812b3a1fcb55a53f18d827214" prot="public">
          <name>SENSOR_CHAN_GAUGE_TEMP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Gauge temperature <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a7d67d6842ee787fcc8a4d9ee2cbea139" prot="public">
          <name>SENSOR_CHAN_GAUGE_STATE_OF_CHARGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>State of charge measurement in % </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a54a6be68e09b9f8ca4d349e3d1445649" prot="public">
          <name>SENSOR_CHAN_GAUGE_FULL_CHARGE_CAPACITY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Full Charge Capacity in mAh </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934aaaea6433c82f7b563f86fa53c95ad0ad" prot="public">
          <name>SENSOR_CHAN_GAUGE_REMAINING_CHARGE_CAPACITY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Remaining Charge Capacity in mAh </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934af9b0ac69fd87a68e7e8d97e52b41304a" prot="public">
          <name>SENSOR_CHAN_GAUGE_NOM_AVAIL_CAPACITY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Nominal Available Capacity in mAh </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a688287fa1587944424a2eda13b8d98e8" prot="public">
          <name>SENSOR_CHAN_GAUGE_FULL_AVAIL_CAPACITY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Full Available Capacity in mAh </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934aa24f9e12f20a716dd152cf889cb51228" prot="public">
          <name>SENSOR_CHAN_GAUGE_AVG_POWER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Average power in mW </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a0613c39397f06d11f4350f8cbcc24cf6" prot="public">
          <name>SENSOR_CHAN_GAUGE_STATE_OF_HEALTH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>State of health measurement in % </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934aa3755e9fcd8c90fef5185082edb29b65" prot="public">
          <name>SENSOR_CHAN_GAUGE_TIME_TO_EMPTY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Time to empty in minutes </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a14d4c802805e1e07c9b4e47ccaff0eeb" prot="public">
          <name>SENSOR_CHAN_GAUGE_TIME_TO_FULL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Time to full in minutes </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a8834978858c2b62b5e923d06cfcb1a46" prot="public">
          <name>SENSOR_CHAN_GAUGE_CYCLE_COUNT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Cycle count (total number of charge/discharge cycles) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a6f96ba4db6cf812b223f9a09f2a287d0" prot="public">
          <name>SENSOR_CHAN_GAUGE_DESIGN_VOLTAGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Design voltage of cell in V (max voltage) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a2c33a7f11d5b3996e95167698a2056cf" prot="public">
          <name>SENSOR_CHAN_GAUGE_DESIRED_VOLTAGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Desired voltage of cell in V (nominal voltage) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934a4aa8bba1b260e1994542383d8e2e908f" prot="public">
          <name>SENSOR_CHAN_GAUGE_DESIRED_CHARGING_CURRENT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Desired charging current in mA </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934ab275027eb550b2b075c44917634eca2c" prot="public">
          <name>SENSOR_CHAN_ALL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>All channels. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934abb2893ccb71c9e1eeb155d7cbd539303" prot="public">
          <name>SENSOR_CHAN_COMMON_COUNT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Number of all common sensor channels. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934ac1f260296289d93a13c5686ca11bdc12" prot="public">
          <name>SENSOR_CHAN_PRIV_START</name>
          <initializer>= SENSOR_CHAN_COMMON_COUNT</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This and higher values are sensor specific. Refer to the sensor header file. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1ggaaa1b502bc029b10d7b23b0a25ef4e934ad842035a01166417d90cd5d7630733b1" prot="public">
          <name>SENSOR_CHAN_MAX</name>
          <initializer>= INT16_MAX</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Maximum value describing a sensor channel type. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Sensor channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="53" column="1" bodyfile="include/drivers/sensor.h" bodystart="53" bodyend="198"/>
      </memberdef>
      <memberdef kind="enum" id="group__sensor__interface_1ga08215279400e8c9eb05ce4e4f0898ffd" prot="public" static="no" strong="no">
        <type></type>
        <name>sensor_trigger_type</name>
        <enumvalue id="group__sensor__interface_1gga08215279400e8c9eb05ce4e4f0898ffdabf92b196394726ec90f1d61586a7f023" prot="public">
          <name>SENSOR_TRIG_TIMER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Timer-based trigger, useful when the sensor does not have an interrupt line. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga08215279400e8c9eb05ce4e4f0898ffdaf7c161e309c267a7dd6daf2ad176f44f" prot="public">
          <name>SENSOR_TRIG_DATA_READY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger fires whenever new data is ready. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga08215279400e8c9eb05ce4e4f0898ffda3bb90a3334bcf613c9efbdf2ed05f855" prot="public">
          <name>SENSOR_TRIG_DELTA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger fires when the selected channel varies significantly. This includes any-motion detection when the channel is acceleration or gyro. If detection is based on slope between successive channel readings, the slope threshold is configured via the <ref refid="group__sensor__interface_1gga0dcb6842bc969492bd1c9eb49708940bac4538665a244cb7f18fc053c40134302" kindref="member">SENSOR_ATTR_SLOPE_TH</ref> and <ref refid="group__sensor__interface_1gga0dcb6842bc969492bd1c9eb49708940baf510b32b2e2395bbcf1c8fd7159ed2a1" kindref="member">SENSOR_ATTR_SLOPE_DUR</ref> attributes. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga08215279400e8c9eb05ce4e4f0898ffda448226d83b28c2862c353a8cda7be0d5" prot="public">
          <name>SENSOR_TRIG_NEAR_FAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger fires when a near/far event is detected. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga08215279400e8c9eb05ce4e4f0898ffda8f875f881b6540eebc28e3d6a7d46606" prot="public">
          <name>SENSOR_TRIG_THRESHOLD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger fires when channel reading transitions configured thresholds. The thresholds are configured via the <ref refid="group__sensor__interface_1gga0dcb6842bc969492bd1c9eb49708940baee644485ab5f64e7c5273bbe562deaaa" kindref="member">SENSOR_ATTR_LOWER_THRESH</ref>, <ref refid="group__sensor__interface_1gga0dcb6842bc969492bd1c9eb49708940ba5af51bd0640a87a94476eee112a4460b" kindref="member">SENSOR_ATTR_UPPER_THRESH</ref>, and <ref refid="group__sensor__interface_1gga0dcb6842bc969492bd1c9eb49708940ba044e67bfc04e8ddc2de7d2058fffbc94" kindref="member">SENSOR_ATTR_HYSTERESIS</ref> attributes. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga08215279400e8c9eb05ce4e4f0898ffdae49a25e6400f0753f6bac8a7d136200d" prot="public">
          <name>SENSOR_TRIG_TAP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger fires when a single tap is detected. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga08215279400e8c9eb05ce4e4f0898ffdab95e52584a6bc3343181f495cd4cb2ef" prot="public">
          <name>SENSOR_TRIG_DOUBLE_TAP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger fires when a double tap is detected. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga08215279400e8c9eb05ce4e4f0898ffda4943ffb4afaf4cbae39e85693bd4374c" prot="public">
          <name>SENSOR_TRIG_FREEFALL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger fires when a free fall is detected. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga08215279400e8c9eb05ce4e4f0898ffda8d1f2621fad4fd685d56cca3f9b042f5" prot="public">
          <name>SENSOR_TRIG_COMMON_COUNT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Number of all common sensor triggers. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga08215279400e8c9eb05ce4e4f0898ffda5e1a94f21fee67ee98296153ea640921" prot="public">
          <name>SENSOR_TRIG_PRIV_START</name>
          <initializer>= SENSOR_TRIG_COMMON_COUNT</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This and higher values are sensor specific. Refer to the sensor header file. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga08215279400e8c9eb05ce4e4f0898ffda9de566f44de519f94c59c58df1efc4c4" prot="public">
          <name>SENSOR_TRIG_MAX</name>
          <initializer>= INT16_MAX</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Maximum value describing a sensor trigger type. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Sensor trigger types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="203" column="1" bodyfile="include/drivers/sensor.h" bodystart="203" bodyend="254"/>
      </memberdef>
      <memberdef kind="enum" id="group__sensor__interface_1ga0dcb6842bc969492bd1c9eb49708940b" prot="public" static="no" strong="no">
        <type></type>
        <name>sensor_attribute</name>
        <enumvalue id="group__sensor__interface_1gga0dcb6842bc969492bd1c9eb49708940bacb07e3508ea5503dbcdceee3f17d2291" prot="public">
          <name>SENSOR_ATTR_SAMPLING_FREQUENCY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sensor sampling frequency, i.e. how many times a second the sensor takes a measurement. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga0dcb6842bc969492bd1c9eb49708940baee644485ab5f64e7c5273bbe562deaaa" prot="public">
          <name>SENSOR_ATTR_LOWER_THRESH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Lower threshold for trigger. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga0dcb6842bc969492bd1c9eb49708940ba5af51bd0640a87a94476eee112a4460b" prot="public">
          <name>SENSOR_ATTR_UPPER_THRESH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Upper threshold for trigger. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga0dcb6842bc969492bd1c9eb49708940bac4538665a244cb7f18fc053c40134302" prot="public">
          <name>SENSOR_ATTR_SLOPE_TH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Threshold for any-motion (slope) trigger. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga0dcb6842bc969492bd1c9eb49708940baf510b32b2e2395bbcf1c8fd7159ed2a1" prot="public">
          <name>SENSOR_ATTR_SLOPE_DUR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Duration for which the slope values needs to be outside the threshold for the trigger to fire. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga0dcb6842bc969492bd1c9eb49708940ba044e67bfc04e8ddc2de7d2058fffbc94" prot="public">
          <name>SENSOR_ATTR_HYSTERESIS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga0dcb6842bc969492bd1c9eb49708940ba3d32987f75284d80d3f64bf44f5c6ccd" prot="public">
          <name>SENSOR_ATTR_OVERSAMPLING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Oversampling factor </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga0dcb6842bc969492bd1c9eb49708940bad30df3100fb6b285a6a786fdc77234d3" prot="public">
          <name>SENSOR_ATTR_FULL_SCALE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sensor range, in SI units. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga0dcb6842bc969492bd1c9eb49708940ba332935dcb6f7e228cb9c595a545079fd" prot="public">
          <name>SENSOR_ATTR_OFFSET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The sensor value returned will be altered by the amount indicated by offset: final_value = <ref refid="structsensor__value" kindref="compound">sensor_value</ref> + offset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga0dcb6842bc969492bd1c9eb49708940ba3043381b539610a8b424f12d76474bdf" prot="public">
          <name>SENSOR_ATTR_CALIB_TARGET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Calibration target. This will be used by the internal chip&apos;s algorithms to calibrate itself on a certain axis, or all of them. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga0dcb6842bc969492bd1c9eb49708940ba75cd3aca26859fd7c10c83d86e3471e9" prot="public">
          <name>SENSOR_ATTR_CONFIGURATION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Configure the operating modes of a sensor. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga0dcb6842bc969492bd1c9eb49708940ba843d1e79573c634987e5e839ba9e965e" prot="public">
          <name>SENSOR_ATTR_CALIBRATION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Set a calibration value needed by a sensor. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga0dcb6842bc969492bd1c9eb49708940ba1f8d2242fa9d63a13c6a48fe3a1cbe52" prot="public">
          <name>SENSOR_ATTR_FEATURE_MASK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable/disable sensor features </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga0dcb6842bc969492bd1c9eb49708940baaedf76e63224adc3fa266d35666e0a3a" prot="public">
          <name>SENSOR_ATTR_ALERT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Alert threshold or alert enable/disable </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga0dcb6842bc969492bd1c9eb49708940ba99ceedef81217614ada0c8a469f91eb8" prot="public">
          <name>SENSOR_ATTR_COMMON_COUNT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Number of all common sensor attributes. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga0dcb6842bc969492bd1c9eb49708940bafb4b5859bc369f817f60eaa161bcefc3" prot="public">
          <name>SENSOR_ATTR_PRIV_START</name>
          <initializer>= SENSOR_ATTR_COMMON_COUNT</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This and higher values are sensor specific. Refer to the sensor header file. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__sensor__interface_1gga0dcb6842bc969492bd1c9eb49708940baf6bd0b33ca2117ef329692c291f6384b" prot="public">
          <name>SENSOR_ATTR_MAX</name>
          <initializer>= INT16_MAX</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Maximum value describing a sensor attribute type. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Sensor attribute types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="269" column="1" bodyfile="include/drivers/sensor.h" bodystart="269" bodyend="326"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__sensor__interface_1ga66f7113ea7209626e17883e9fcbe72b7" prot="public" static="no">
        <type>void(*</type>
        <definition>sensor_trigger_handler_t</definition>
        <argsstring>)(const struct device *dev, const struct sensor_trigger *trigger)</argsstring>
        <name>sensor_trigger_handler_t</name>
        <briefdescription>
<para>Callback API upon firing of a trigger. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the sensor device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>The trigger </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="335" column="9" bodyfile="include/drivers/sensor.h" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__sensor__interface_1ga0ec8d3268962b051febedf98c4b8f616" prot="public" static="no">
        <type>int(*</type>
        <definition>sensor_attr_set_t</definition>
        <argsstring>)(const struct device *dev, enum sensor_channel chan, enum sensor_attribute attr, const struct sensor_value *val)</argsstring>
        <name>sensor_attr_set_t</name>
        <briefdescription>
<para>Callback API upon setting a sensor&apos;s attributes. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="group__sensor__interface_1gafbf65226a227e9f8824908bc38e336f5" kindref="member">sensor_attr_set()</ref> for argument description </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="344" column="9" bodyfile="include/drivers/sensor.h" bodystart="344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__sensor__interface_1ga4088d038e6dd9d9f41c47e0f5bc720fa" prot="public" static="no">
        <type>int(*</type>
        <definition>sensor_attr_get_t</definition>
        <argsstring>)(const struct device *dev, enum sensor_channel chan, enum sensor_attribute attr, struct sensor_value *val)</argsstring>
        <name>sensor_attr_get_t</name>
        <briefdescription>
<para>Callback API upon getting a sensor&apos;s attributes. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="group__sensor__interface_1gaedfdfc71dce702dc1fb1c6e60ff0f73a" kindref="member">sensor_attr_get()</ref> for argument description </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="355" column="9" bodyfile="include/drivers/sensor.h" bodystart="355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__sensor__interface_1gabee4f73fdc39b40f6c607e58dcaf2a87" prot="public" static="no">
        <type>int(*</type>
        <definition>sensor_trigger_set_t</definition>
        <argsstring>)(const struct device *dev, const struct sensor_trigger *trig, sensor_trigger_handler_t handler)</argsstring>
        <name>sensor_trigger_set_t</name>
        <briefdescription>
<para>Callback API for setting a sensor&apos;s trigger and handler. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="group__sensor__interface_1ga7c72aca732e0641612d2f9437c2e41b7" kindref="member">sensor_trigger_set()</ref> for argument description </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="366" column="9" bodyfile="include/drivers/sensor.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__sensor__interface_1ga272df5be62808cf350f3dd25671bd222" prot="public" static="no">
        <type>int(*</type>
        <definition>sensor_sample_fetch_t</definition>
        <argsstring>)(const struct device *dev, enum sensor_channel chan)</argsstring>
        <name>sensor_sample_fetch_t</name>
        <briefdescription>
<para>Callback API for fetching data from a sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="group__sensor__interface_1gaa75e25d93ee7cac0bf38399f3c006dff" kindref="member">sensor_sample_fetch()</ref> for argument description </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="375" column="9" bodyfile="include/drivers/sensor.h" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__sensor__interface_1gab62a0c4d5cba677d35f7f53a727e6550" prot="public" static="no">
        <type>int(*</type>
        <definition>sensor_channel_get_t</definition>
        <argsstring>)(const struct device *dev, enum sensor_channel chan, struct sensor_value *val)</argsstring>
        <name>sensor_channel_get_t</name>
        <briefdescription>
<para>Callback API for getting a reading from a sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="group__sensor__interface_1ga9e0e6c1408d32c52267984bae7cb268d" kindref="member">sensor_channel_get()</ref> for argument description </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="383" column="9" bodyfile="include/drivers/sensor.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__sensor__interface_1gafbf65226a227e9f8824908bc38e336f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sensor_attr_set</definition>
        <argsstring>(const struct device *dev, enum sensor_channel chan, enum sensor_attribute attr, const struct sensor_value *val)</argsstring>
        <name>sensor_attr_set</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__sensor__interface_1gaaa1b502bc029b10d7b23b0a25ef4e934" kindref="member">sensor_channel</ref></type>
          <declname>chan</declname>
        </param>
        <param>
          <type>enum <ref refid="group__sensor__interface_1ga0dcb6842bc969492bd1c9eb49708940b" kindref="member">sensor_attribute</ref></type>
          <declname>attr</declname>
        </param>
        <param>
          <type>const struct <ref refid="structsensor__value" kindref="compound">sensor_value</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set an attribute for a sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the sensor device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel the attribute belongs to, if any. Some attributes may only be set for all channels of a device, depending on device capabilities. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The attribute to set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the attribute to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, negative errno code if failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="407" column="6" declfile="include/drivers/sensor.h" declline="407" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__sensor__interface_1gaedfdfc71dce702dc1fb1c6e60ff0f73a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sensor_attr_get</definition>
        <argsstring>(const struct device *dev, enum sensor_channel chan, enum sensor_attribute attr, struct sensor_value *val)</argsstring>
        <name>sensor_attr_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__sensor__interface_1gaaa1b502bc029b10d7b23b0a25ef4e934" kindref="member">sensor_channel</ref></type>
          <declname>chan</declname>
        </param>
        <param>
          <type>enum <ref refid="group__sensor__interface_1ga0dcb6842bc969492bd1c9eb49708940b" kindref="member">sensor_attribute</ref></type>
          <declname>attr</declname>
        </param>
        <param>
          <type>struct <ref refid="structsensor__value" kindref="compound">sensor_value</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get an attribute for a sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the sensor device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel the attribute belongs to, if any. Some attributes may only be set for all channels of a device, depending on device capabilities. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The attribute to get </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to where to store the attribute</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, negative errno code if failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="439" column="6" declfile="include/drivers/sensor.h" declline="439" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__sensor__interface_1ga7c72aca732e0641612d2f9437c2e41b7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int sensor_trigger_set</definition>
        <argsstring>(const struct device *dev, const struct sensor_trigger *trig, sensor_trigger_handler_t handler)</argsstring>
        <name>sensor_trigger_set</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structsensor__trigger" kindref="compound">sensor_trigger</ref> *</type>
          <declname>trig</declname>
        </param>
        <param>
          <type><ref refid="group__sensor__interface_1ga66f7113ea7209626e17883e9fcbe72b7" kindref="member">sensor_trigger_handler_t</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Activate a sensor&apos;s trigger and set the trigger handler. </para>
        </briefdescription>
        <detaileddescription>
<para>The handler will be called from a thread, so I2C or SPI operations are safe. However, the thread&apos;s stack is limited and defined by the driver. It is currently up to the caller to ensure that the handler does not overflow the stack.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> supervisor </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_supervisor`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the sensor device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trig</parametername>
</parameternamelist>
<parameterdescription>
<para>The trigger to activate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>The function that should be called when the trigger fires</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, negative errno code if failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="476" column="19" bodyfile="include/drivers/sensor.h" bodystart="476" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="group__sensor__interface_1gaa75e25d93ee7cac0bf38399f3c006dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sensor_sample_fetch</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>sensor_sample_fetch</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Fetch a sample from the sensor and store it in an internal driver buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Read all of a sensor&apos;s active channels and, if necessary, perform any additional operations necessary to make the values useful. The user may then get individual channel values by calling <ref refid="group__sensor__interface_1ga9e0e6c1408d32c52267984bae7cb268d" kindref="member">sensor_channel_get</ref>.</para>
<para>Since the function communicates with the sensor device, it is unsafe to call it in an ISR if the device is connected via I2C or SPI.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the sensor device</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, negative errno code if failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="506" column="6" declfile="include/drivers/sensor.h" declline="506" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__sensor__interface_1gac16192826432438a15274cf28d66e8a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sensor_sample_fetch_chan</definition>
        <argsstring>(const struct device *dev, enum sensor_channel type)</argsstring>
        <name>sensor_sample_fetch_chan</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__sensor__interface_1gaaa1b502bc029b10d7b23b0a25ef4e934" kindref="member">sensor_channel</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Fetch a sample from the sensor and store it in an internal driver buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Read and compute compensation for one type of sensor data (magnetometer, accelerometer, etc). The user may then get individual channel values by calling <ref refid="group__sensor__interface_1ga9e0e6c1408d32c52267984bae7cb268d" kindref="member">sensor_channel_get</ref>.</para>
<para>This is mostly implemented by multi function devices enabling reading at different sampling rates.</para>
<para>Since the function communicates with the sensor device, it is unsafe to call it in an ISR if the device is connected via I2C or SPI.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the sensor device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel that needs updated</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, negative errno code if failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="535" column="6" declfile="include/drivers/sensor.h" declline="535" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__sensor__interface_1ga9e0e6c1408d32c52267984bae7cb268d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sensor_channel_get</definition>
        <argsstring>(const struct device *dev, enum sensor_channel chan, struct sensor_value *val)</argsstring>
        <name>sensor_channel_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__sensor__interface_1gaaa1b502bc029b10d7b23b0a25ef4e934" kindref="member">sensor_channel</ref></type>
          <declname>chan</declname>
        </param>
        <param>
          <type>struct <ref refid="structsensor__value" kindref="compound">sensor_value</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get a reading from a sensor device. </para>
        </briefdescription>
        <detaileddescription>
<para>Return a useful value for a particular channel, from the driver&apos;s internal data. Before calling this function, a sample must be obtained by calling <ref refid="group__sensor__interface_1gaa75e25d93ee7cac0bf38399f3c006dff" kindref="member">sensor_sample_fetch</ref> or <ref refid="group__sensor__interface_1gac16192826432438a15274cf28d66e8a6" kindref="member">sensor_sample_fetch_chan</ref>. It is guaranteed that two subsequent calls of this function for the same channels will yield the same value, if <ref refid="group__sensor__interface_1gaa75e25d93ee7cac0bf38399f3c006dff" kindref="member">sensor_sample_fetch</ref> or <ref refid="group__sensor__interface_1gac16192826432438a15274cf28d66e8a6" kindref="member">sensor_sample_fetch_chan</ref> has not been called in the meantime.</para>
<para>For vectorial data samples you can request all axes in just one call by passing the specific channel with _XYZ suffix. The sample will be returned at val[0], val[1] and val[2] (X, Y and Z in that order).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the sensor device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, negative errno code if failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="568" column="6" declfile="include/drivers/sensor.h" declline="568" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__sensor__interface_1gab797f2f578b1c9cc44f54ab5d503bbf8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
        <definition>static int32_t sensor_ms2_to_g</definition>
        <argsstring>(const struct sensor_value *ms2)</argsstring>
        <name>sensor_ms2_to_g</name>
        <param>
          <type>const struct <ref refid="structsensor__value" kindref="compound">sensor_value</ref> *</type>
          <declname>ms2</declname>
        </param>
        <briefdescription>
<para>Helper function to convert acceleration from m/s^2 to Gs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ms2</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="structsensor__value" kindref="compound">sensor_value</ref> struct holding the acceleration, in m/s^2.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The converted value, in Gs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="600" column="23" bodyfile="include/drivers/sensor.h" bodystart="600" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="group__sensor__interface_1ga6ab9ce9c6ee2e52d197e5cb4ccd88979" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sensor_g_to_ms2</definition>
        <argsstring>(int32_t g, struct sensor_value *ms2)</argsstring>
        <name>sensor_g_to_ms2</name>
        <param>
          <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
          <declname>g</declname>
        </param>
        <param>
          <type>struct <ref refid="structsensor__value" kindref="compound">sensor_value</ref> *</type>
          <declname>ms2</declname>
        </param>
        <briefdescription>
<para>Helper function to convert acceleration from Gs to m/s^2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>The G value to be converted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ms2</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="structsensor__value" kindref="compound">sensor_value</ref> struct, where the result is stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="617" column="20" bodyfile="include/drivers/sensor.h" bodystart="617" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="group__sensor__interface_1ga040a907c8934baab66d27b8dfb1ea220" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
        <definition>static int32_t sensor_rad_to_degrees</definition>
        <argsstring>(const struct sensor_value *rad)</argsstring>
        <name>sensor_rad_to_degrees</name>
        <param>
          <type>const struct <ref refid="structsensor__value" kindref="compound">sensor_value</ref> *</type>
          <declname>rad</declname>
        </param>
        <briefdescription>
<para>Helper function for converting radians to degrees. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rad</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="structsensor__value" kindref="compound">sensor_value</ref> struct, holding the value in radians.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The converted value, in degrees. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="630" column="23" bodyfile="include/drivers/sensor.h" bodystart="630" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="group__sensor__interface_1ga39d4b84f5d792e27b2d6d5eb6a2ccb0d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sensor_degrees_to_rad</definition>
        <argsstring>(int32_t d, struct sensor_value *rad)</argsstring>
        <name>sensor_degrees_to_rad</name>
        <param>
          <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type>struct <ref refid="structsensor__value" kindref="compound">sensor_value</ref> *</type>
          <declname>rad</declname>
        </param>
        <briefdescription>
<para>Helper function for converting degrees to radians. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>The value (in degrees) to be converted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rad</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="structsensor__value" kindref="compound">sensor_value</ref> struct, where the result is stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="647" column="20" bodyfile="include/drivers/sensor.h" bodystart="647" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="group__sensor__interface_1ga29223b754dc436ab1e97ce6209a3ea06" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>static double sensor_value_to_double</definition>
        <argsstring>(const struct sensor_value *val)</argsstring>
        <name>sensor_value_to_double</name>
        <param>
          <type>const struct <ref refid="structsensor__value" kindref="compound">sensor_value</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Helper function for converting struct <ref refid="structsensor__value" kindref="compound">sensor_value</ref> to double. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="structsensor__value" kindref="compound">sensor_value</ref> struct. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The converted value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="659" column="22" bodyfile="include/drivers/sensor.h" bodystart="659" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="group__sensor__interface_1gaf01bbb251ad0c7f6c55c5b702e8a4048" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int sensor_value_from_double</definition>
        <argsstring>(struct sensor_value *val, double inp)</argsstring>
        <name>sensor_value_from_double</name>
        <param>
          <type>struct <ref refid="structsensor__value" kindref="compound">sensor_value</ref> *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inp</declname>
        </param>
        <briefdescription>
<para>Helper function for converting double to struct <ref refid="structsensor__value" kindref="compound">sensor_value</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="structsensor__value" kindref="compound">sensor_value</ref> struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inp</parametername>
</parameternamelist>
<parameterdescription>
<para>The converted value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, negative errno code if failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="671" column="19" bodyfile="include/drivers/sensor.h" bodystart="671" bodyend="687"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__sensor__interface_1ga0066e049c4f084305ca2b978e5c7454d" prot="public" static="no">
        <name>SENSOR_G</name>
        <initializer>9806650LL</initializer>
        <briefdescription>
<para>The value of gravitational constant in micro m/s^2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="585" column="9" bodyfile="include/drivers/sensor.h" bodystart="585" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sensor__interface_1ga6ebdc2f6942334de3cc248a53db7df33" prot="public" static="no">
        <name>SENSOR_PI</name>
        <initializer>3141592LL</initializer>
        <briefdescription>
<para>The value of constant PI in micros. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/sensor.h" line="590" column="9" bodyfile="include/drivers/sensor.h" bodystart="590" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Sensor Interface. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
