<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="byteorder_8h" kind="file" language="C++">
    <compoundname>byteorder.h</compoundname>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes local="no">stddef.h</includes>
    <includes refid="____assert_8h" local="no">sys/__assert.h</includes>
    <includes refid="toolchain_8h" local="no">toolchain.h</includes>
    <includedby refid="ots_8h" local="no">include/bluetooth/services/ots.h</includedby>
    <includedby refid="dns__sd_8h" local="no">include/net/dns_sd.h</includedby>
    <includedby refid="net__ip_8h" local="no">include/net/net_ip.h</includedby>
    <includedby refid="byteorder_8c" local="no">tests/kernel/common/src/byteorder.c</includedby>
    <incdepgraph>
      <node id="5">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/sys/byteorder.h</label>
        <link refid="byteorder_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="2">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="4">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="9">
        <label>stdarg.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/bluetooth/services/ots.h</label>
        <link refid="ots_8h"/>
      </node>
      <node id="40">
        <label>include/net/bt.h</label>
        <link refid="bt_8h"/>
      </node>
      <node id="5">
        <label>include/net/can.h</label>
        <link refid="net_2can_8h"/>
      </node>
      <node id="6">
        <label>include/net/coap.h</label>
        <link refid="coap_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>include/net/dns_resolve.h</label>
        <link refid="dns__resolve_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/net/dns_sd.h</label>
        <link refid="dns__sd_8h"/>
      </node>
      <node id="45">
        <label>include/net/dsa.h</label>
        <link refid="dsa_8h"/>
      </node>
      <node id="31">
        <label>include/net/dummy.h</label>
        <link refid="dummy_8h"/>
      </node>
      <node id="21">
        <label>include/net/ethernet.h</label>
        <link refid="ethernet_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>include/net/ethernet_mgmt.h</label>
        <link refid="ethernet__mgmt_8h"/>
      </node>
      <node id="24">
        <label>include/net/http_client.h</label>
        <link refid="http__client_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>include/net/ieee802154.h</label>
        <link refid="ieee802154_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>include/net/ieee802154_mgmt.h</label>
        <link refid="ieee802154__mgmt_8h"/>
      </node>
      <node id="32">
        <label>include/net/ieee802154_radio.h</label>
        <link refid="ieee802154__radio_8h"/>
      </node>
      <node id="27">
        <label>include/net/igmp.h</label>
        <link refid="igmp_8h"/>
      </node>
      <node id="7">
        <label>include/net/lwm2m.h</label>
        <link refid="lwm2m_8h"/>
      </node>
      <node id="26">
        <label>include/net/mqtt.h</label>
        <link refid="mqtt_8h"/>
      </node>
      <node id="46">
        <label>include/net/net_config.h</label>
        <link refid="net__config_8h"/>
      </node>
      <node id="28">
        <label>include/net/net_context.h</label>
        <link refid="net__context_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>include/net/net_event.h</label>
        <link refid="net__event_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>include/net/net_if.h</label>
        <link refid="net__if_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>include/net/net_ip.h</label>
        <link refid="net__ip_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>include/net/net_mgmt.h</label>
        <link refid="net__mgmt_8h"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>include/net/net_offload.h</label>
        <link refid="net__offload_8h"/>
      </node>
      <node id="30">
        <label>include/net/net_pkt.h</label>
        <link refid="net__pkt_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>include/net/net_pkt_filter.h</label>
        <link refid="net__pkt__filter_8h"/>
      </node>
      <node id="43">
        <label>include/net/net_stats.h</label>
        <link refid="net__stats_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>include/net/openthread.h</label>
        <link refid="openthread_8h"/>
      </node>
      <node id="33">
        <label>include/net/ppp.h</label>
        <link refid="ppp_8h"/>
      </node>
      <node id="34">
        <label>include/net/promiscuous.h</label>
        <link refid="promiscuous_8h"/>
      </node>
      <node id="19">
        <label>include/net/sntp.h</label>
        <link refid="sntp_8h"/>
      </node>
      <node id="9">
        <label>include/net/socket.h</label>
        <link refid="net_2socket_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>include/net/socket_can.h</label>
        <link refid="socket__can_8h"/>
      </node>
      <node id="49">
        <label>include/net/socket_net_mgmt.h</label>
        <link refid="socket__net__mgmt_8h"/>
      </node>
      <node id="10">
        <label>include/net/socket_offload.h</label>
        <link refid="socket__offload_8h"/>
      </node>
      <node id="15">
        <label>include/net/socketutils.h</label>
        <link refid="socketutils_8h"/>
      </node>
      <node id="11">
        <label>include/net/tftp.h</label>
        <link refid="tftp_8h"/>
      </node>
      <node id="35">
        <label>include/net/udp.h</label>
        <link refid="udp_8h"/>
      </node>
      <node id="36">
        <label>include/net/virtual.h</label>
        <link refid="virtual_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>include/net/virtual_mgmt.h</label>
        <link refid="virtual__mgmt_8h"/>
      </node>
      <node id="25">
        <label>include/net/websocket.h</label>
        <link refid="websocket_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>include/net/wifi_mgmt.h</label>
        <link refid="wifi__mgmt_8h"/>
      </node>
      <node id="12">
        <label>include/posix/arpa/inet.h</label>
        <link refid="inet_8h"/>
      </node>
      <node id="13">
        <label>include/posix/net/if.h</label>
        <link refid="if_8h"/>
      </node>
      <node id="14">
        <label>include/posix/netdb.h</label>
        <link refid="netdb_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>include/posix/netinet/in.h</label>
        <link refid="in_8h"/>
      </node>
      <node id="17">
        <label>include/posix/netinet/tcp.h</label>
        <link refid="tcp_8h"/>
      </node>
      <node id="18">
        <label>include/posix/poll.h</label>
        <link refid="poll_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>include/posix/sys/socket.h</label>
        <link refid="posix_2sys_2socket_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/sys/byteorder.h</label>
        <link refid="byteorder_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>tests/kernel/common/src/byteorder.c</label>
        <link refid="byteorder_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="byteorder_8h_1ae4176f3e082f21488dedcd02b406cb43" prot="public" static="no">
        <name>sys_le16_to_cpu</name>
        <param><defname>val</defname></param>
        <initializer>(val)</initializer>
        <briefdescription>
<para>Convert 16-bit integer from little-endian to host endianness. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit integer in little-endian format.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>16-bit integer in host endianness. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="172" column="9" bodyfile="include/sys/byteorder.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="byteorder_8h_1ae7f653c0bca81809b53d8a91854ca4c9" prot="public" static="no">
        <name>sys_cpu_to_le16</name>
        <param><defname>val</defname></param>
        <initializer>(val)</initializer>
        <briefdescription>
<para>Convert 16-bit integer from host endianness to little-endian. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit integer in host endianness.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>16-bit integer in little-endian format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="173" column="9" bodyfile="include/sys/byteorder.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="byteorder_8h_1a0e7342005eb6840186a59c006a719c0d" prot="public" static="no">
        <name>sys_le24_to_cpu</name>
        <param><defname>val</defname></param>
        <initializer>(val)</initializer>
        <briefdescription>
<para>Convert 24-bit integer from little-endian to host endianness. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>24-bit integer in little-endian format.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>24-bit integer in host endianness. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="174" column="9" bodyfile="include/sys/byteorder.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="byteorder_8h_1a85bae5c9bd6e58923d97ef41b7fd2055" prot="public" static="no">
        <name>sys_cpu_to_le24</name>
        <param><defname>val</defname></param>
        <initializer>(val)</initializer>
        <briefdescription>
<para>Convert 24-bit integer from host endianness to little-endian. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>24-bit integer in host endianness.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>24-bit integer in little-endian format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="175" column="9" bodyfile="include/sys/byteorder.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="byteorder_8h_1aa713ea0f2e2c64c05bd4a3596e44ce4e" prot="public" static="no">
        <name>sys_le32_to_cpu</name>
        <param><defname>val</defname></param>
        <initializer>(val)</initializer>
        <briefdescription>
<para>Convert 32-bit integer from little-endian to host endianness. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>32-bit integer in little-endian format.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>32-bit integer in host endianness. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="176" column="9" bodyfile="include/sys/byteorder.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="byteorder_8h_1a8cdffcb0ce27f2871e1f1d05dcc31b7b" prot="public" static="no">
        <name>sys_cpu_to_le32</name>
        <param><defname>val</defname></param>
        <initializer>(val)</initializer>
        <briefdescription>
<para>Convert 32-bit integer from host endianness to little-endian. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>32-bit integer in host endianness.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>32-bit integer in little-endian format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="177" column="9" bodyfile="include/sys/byteorder.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="byteorder_8h_1ae34388c412959f7af9e233dbe81fbbe0" prot="public" static="no">
        <name>sys_le48_to_cpu</name>
        <param><defname>val</defname></param>
        <initializer>(val)</initializer>
        <briefdescription>
<para>Convert 48-bit integer from little-endian to host endianness. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>48-bit integer in little-endian format.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>48-bit integer in host endianness. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="178" column="9" bodyfile="include/sys/byteorder.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="byteorder_8h_1ad9f886d1a9ffe95fc5e1e9eb4e39c532" prot="public" static="no">
        <name>sys_cpu_to_le48</name>
        <param><defname>val</defname></param>
        <initializer>(val)</initializer>
        <briefdescription>
<para>Convert 48-bit integer from host endianness to little-endian. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>48-bit integer in host endianness.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>48-bit integer in little-endian format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="179" column="9" bodyfile="include/sys/byteorder.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="byteorder_8h_1a3d4737fab89f1762e518630090db8368" prot="public" static="no">
        <name>sys_le64_to_cpu</name>
        <param><defname>val</defname></param>
        <initializer>(val)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="180" column="9" bodyfile="include/sys/byteorder.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="byteorder_8h_1a8730241a4c5701f689ac0ac1255331c7" prot="public" static="no">
        <name>sys_cpu_to_le64</name>
        <param><defname>val</defname></param>
        <initializer>(val)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="181" column="9" bodyfile="include/sys/byteorder.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="byteorder_8h_1a840037a5fd3d36817dc92a44469df704" prot="public" static="no">
        <name>sys_be16_to_cpu</name>
        <param><defname>val</defname></param>
        <initializer>__bswap_16(val)</initializer>
        <briefdescription>
<para>Convert 16-bit integer from big-endian to host endianness. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit integer in big-endian format.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>16-bit integer in host endianness. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="182" column="9" bodyfile="include/sys/byteorder.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="byteorder_8h_1a9e2c7b19bbba5343ee8c5f9740484a56" prot="public" static="no">
        <name>sys_cpu_to_be16</name>
        <param><defname>val</defname></param>
        <initializer>__bswap_16(val)</initializer>
        <briefdescription>
<para>Convert 16-bit integer from host endianness to big-endian. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit integer in host endianness.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>16-bit integer in big-endian format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="183" column="9" bodyfile="include/sys/byteorder.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="byteorder_8h_1afbe8be1a0842354ab076b2530ef9a041" prot="public" static="no">
        <name>sys_be24_to_cpu</name>
        <param><defname>val</defname></param>
        <initializer>__bswap_24(val)</initializer>
        <briefdescription>
<para>Convert 24-bit integer from big-endian to host endianness. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>24-bit integer in big-endian format.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>24-bit integer in host endianness. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="184" column="9" bodyfile="include/sys/byteorder.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="byteorder_8h_1ab441316429ce3604ec359f2a20c76431" prot="public" static="no">
        <name>sys_cpu_to_be24</name>
        <param><defname>val</defname></param>
        <initializer>__bswap_24(val)</initializer>
        <briefdescription>
<para>Convert 24-bit integer from host endianness to big-endian. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>24-bit integer in host endianness.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>24-bit integer in big-endian format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="185" column="9" bodyfile="include/sys/byteorder.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="byteorder_8h_1aee4cefae7f089197e77c487faafda269" prot="public" static="no">
        <name>sys_be32_to_cpu</name>
        <param><defname>val</defname></param>
        <initializer>__bswap_32(val)</initializer>
        <briefdescription>
<para>Convert 32-bit integer from big-endian to host endianness. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>32-bit integer in big-endian format.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>32-bit integer in host endianness. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="186" column="9" bodyfile="include/sys/byteorder.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="byteorder_8h_1a508d3b125adf1d30e8411381827c4f05" prot="public" static="no">
        <name>sys_cpu_to_be32</name>
        <param><defname>val</defname></param>
        <initializer>__bswap_32(val)</initializer>
        <briefdescription>
<para>Convert 32-bit integer from host endianness to big-endian. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>32-bit integer in host endianness.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>32-bit integer in big-endian format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="187" column="9" bodyfile="include/sys/byteorder.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="byteorder_8h_1a93e948095f79ab51368f193472d5b030" prot="public" static="no">
        <name>sys_be48_to_cpu</name>
        <param><defname>val</defname></param>
        <initializer>__bswap_48(val)</initializer>
        <briefdescription>
<para>Convert 48-bit integer from big-endian to host endianness. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>48-bit integer in big-endian format.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>48-bit integer in host endianness. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="188" column="9" bodyfile="include/sys/byteorder.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="byteorder_8h_1abb089029e2e84ce70bee82b18341273d" prot="public" static="no">
        <name>sys_cpu_to_be48</name>
        <param><defname>val</defname></param>
        <initializer>__bswap_48(val)</initializer>
        <briefdescription>
<para>Convert 48-bit integer from host endianness to big-endian. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>48-bit integer in host endianness.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>48-bit integer in big-endian format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="189" column="9" bodyfile="include/sys/byteorder.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="byteorder_8h_1abb4d263f2b9b1cbf1c8fbaec714fc411" prot="public" static="no">
        <name>sys_be64_to_cpu</name>
        <param><defname>val</defname></param>
        <initializer>__bswap_64(val)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="190" column="9" bodyfile="include/sys/byteorder.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="byteorder_8h_1a6ac423744c21c1e40aabd7ecb9b9e8d5" prot="public" static="no">
        <name>sys_cpu_to_be64</name>
        <param><defname>val</defname></param>
        <initializer>__bswap_64(val)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="191" column="9" bodyfile="include/sys/byteorder.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="byteorder_8h_1a68df8f14dfc0d8715d16ac87dd4c73d2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_put_be16</definition>
        <argsstring>(uint16_t val, uint8_t dst[2])</argsstring>
        <name>sys_put_be16</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>dst</declname>
          <array>[2]</array>
        </param>
        <briefdescription>
<para>Put a 16-bit integer as big-endian to arbitrary location. </para>
        </briefdescription>
        <detaileddescription>
<para>Put a 16-bit integer, originally in host endianness, to a potentially unaligned memory location in big-endian format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit integer in host endianness. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination memory address to store the result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="226" column="20" bodyfile="include/sys/byteorder.h" bodystart="226" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="byteorder_8h_1a7aa82f69d08ebde8077fc3d2ebfbc53b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_put_be24</definition>
        <argsstring>(uint32_t val, uint8_t dst[3])</argsstring>
        <name>sys_put_be24</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>dst</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
<para>Put a 24-bit integer as big-endian to arbitrary location. </para>
        </briefdescription>
        <detaileddescription>
<para>Put a 24-bit integer, originally in host endianness, to a potentially unaligned memory location in big-endian format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>24-bit integer in host endianness. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination memory address to store the result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="241" column="20" bodyfile="include/sys/byteorder.h" bodystart="241" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="byteorder_8h_1a21f25ff68591217034f3414594425286" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_put_be32</definition>
        <argsstring>(uint32_t val, uint8_t dst[4])</argsstring>
        <name>sys_put_be32</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>dst</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Put a 32-bit integer as big-endian to arbitrary location. </para>
        </briefdescription>
        <detaileddescription>
<para>Put a 32-bit integer, originally in host endianness, to a potentially unaligned memory location in big-endian format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>32-bit integer in host endianness. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination memory address to store the result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="256" column="20" bodyfile="include/sys/byteorder.h" bodystart="256" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="byteorder_8h_1abe8d617e8a5469c303a512fe94a55443" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_put_be48</definition>
        <argsstring>(uint64_t val, uint8_t dst[6])</argsstring>
        <name>sys_put_be48</name>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>dst</declname>
          <array>[6]</array>
        </param>
        <briefdescription>
<para>Put a 48-bit integer as big-endian to arbitrary location. </para>
        </briefdescription>
        <detaileddescription>
<para>Put a 48-bit integer, originally in host endianness, to a potentially unaligned memory location in big-endian format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>48-bit integer in host endianness. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination memory address to store the result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="271" column="20" bodyfile="include/sys/byteorder.h" bodystart="271" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="byteorder_8h_1a3e0d2e4e85249497011f5f9ea0d2987c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_put_be64</definition>
        <argsstring>(uint64_t val, uint8_t dst[8])</argsstring>
        <name>sys_put_be64</name>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>dst</declname>
          <array>[8]</array>
        </param>
        <briefdescription>
<para>Put a 64-bit integer as big-endian to arbitrary location. </para>
        </briefdescription>
        <detaileddescription>
<para>Put a 64-bit integer, originally in host endianness, to a potentially unaligned memory location in big-endian format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>64-bit integer in host endianness. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination memory address to store the result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="286" column="20" bodyfile="include/sys/byteorder.h" bodystart="286" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="byteorder_8h_1af8f30219c861bb07d097374204d386dd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_put_le16</definition>
        <argsstring>(uint16_t val, uint8_t dst[2])</argsstring>
        <name>sys_put_le16</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>dst</declname>
          <array>[2]</array>
        </param>
        <briefdescription>
<para>Put a 16-bit integer as little-endian to arbitrary location. </para>
        </briefdescription>
        <detaileddescription>
<para>Put a 16-bit integer, originally in host endianness, to a potentially unaligned memory location in little-endian format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit integer in host endianness. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination memory address to store the result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="301" column="20" bodyfile="include/sys/byteorder.h" bodystart="301" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="byteorder_8h_1a10bdc6fccf288e1d5215dba9c031c730" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_put_le24</definition>
        <argsstring>(uint32_t val, uint8_t dst[3])</argsstring>
        <name>sys_put_le24</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>dst</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
<para>Put a 24-bit integer as little-endian to arbitrary location. </para>
        </briefdescription>
        <detaileddescription>
<para>Put a 24-bit integer, originally in host endianness, to a potentially unaligned memory location in littel-endian format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>24-bit integer in host endianness. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination memory address to store the result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="316" column="20" bodyfile="include/sys/byteorder.h" bodystart="316" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="byteorder_8h_1aff60d0dcda6a48df4ea248f898a92de0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_put_le32</definition>
        <argsstring>(uint32_t val, uint8_t dst[4])</argsstring>
        <name>sys_put_le32</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>dst</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Put a 32-bit integer as little-endian to arbitrary location. </para>
        </briefdescription>
        <detaileddescription>
<para>Put a 32-bit integer, originally in host endianness, to a potentially unaligned memory location in little-endian format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>32-bit integer in host endianness. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination memory address to store the result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="331" column="20" bodyfile="include/sys/byteorder.h" bodystart="331" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="byteorder_8h_1aa6950654cc7fd67ab4f83235da59665a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_put_le48</definition>
        <argsstring>(uint64_t val, uint8_t dst[6])</argsstring>
        <name>sys_put_le48</name>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>dst</declname>
          <array>[6]</array>
        </param>
        <briefdescription>
<para>Put a 48-bit integer as little-endian to arbitrary location. </para>
        </briefdescription>
        <detaileddescription>
<para>Put a 48-bit integer, originally in host endianness, to a potentially unaligned memory location in little-endian format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>48-bit integer in host endianness. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination memory address to store the result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="346" column="20" bodyfile="include/sys/byteorder.h" bodystart="346" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="byteorder_8h_1a7d89d4b4b278fefa3e65fc6c3894a70c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_put_le64</definition>
        <argsstring>(uint64_t val, uint8_t dst[8])</argsstring>
        <name>sys_put_le64</name>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>dst</declname>
          <array>[8]</array>
        </param>
        <briefdescription>
<para>Put a 64-bit integer as little-endian to arbitrary location. </para>
        </briefdescription>
        <detaileddescription>
<para>Put a 64-bit integer, originally in host endianness, to a potentially unaligned memory location in little-endian format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>64-bit integer in host endianness. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination memory address to store the result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="361" column="20" bodyfile="include/sys/byteorder.h" bodystart="361" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="byteorder_8h_1a91fae25b12126c2b35d240f56866184d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>static uint16_t sys_get_be16</definition>
        <argsstring>(const uint8_t src[2])</argsstring>
        <name>sys_get_be16</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>src</declname>
          <array>[2]</array>
        </param>
        <briefdescription>
<para>Get a 16-bit integer stored in big-endian format. </para>
        </briefdescription>
        <detaileddescription>
<para>Get a 16-bit integer, stored in big-endian format in a potentially unaligned memory location, and convert it to the host endianness.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Location of the big-endian 16-bit integer to get.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>16-bit integer in host endianness. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="377" column="24" bodyfile="include/sys/byteorder.h" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="byteorder_8h_1ac65e83f46ef042862b675995f74fcd9b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t sys_get_be24</definition>
        <argsstring>(const uint8_t src[3])</argsstring>
        <name>sys_get_be24</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>src</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
<para>Get a 24-bit integer stored in big-endian format. </para>
        </briefdescription>
        <detaileddescription>
<para>Get a 24-bit integer, stored in big-endian format in a potentially unaligned memory location, and convert it to the host endianness.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Location of the big-endian 24-bit integer to get.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>24-bit integer in host endianness. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="392" column="24" bodyfile="include/sys/byteorder.h" bodystart="392" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="byteorder_8h_1a4db31229c7a8a80dace3870664b6442d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t sys_get_be32</definition>
        <argsstring>(const uint8_t src[4])</argsstring>
        <name>sys_get_be32</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>src</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Get a 32-bit integer stored in big-endian format. </para>
        </briefdescription>
        <detaileddescription>
<para>Get a 32-bit integer, stored in big-endian format in a potentially unaligned memory location, and convert it to the host endianness.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Location of the big-endian 32-bit integer to get.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>32-bit integer in host endianness. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="407" column="24" bodyfile="include/sys/byteorder.h" bodystart="407" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="byteorder_8h_1acf0fa9761998529910e022b80126ff6b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>static uint64_t sys_get_be48</definition>
        <argsstring>(const uint8_t src[6])</argsstring>
        <name>sys_get_be48</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>src</declname>
          <array>[6]</array>
        </param>
        <briefdescription>
<para>Get a 48-bit integer stored in big-endian format. </para>
        </briefdescription>
        <detaileddescription>
<para>Get a 48-bit integer, stored in big-endian format in a potentially unaligned memory location, and convert it to the host endianness.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Location of the big-endian 48-bit integer to get.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>48-bit integer in host endianness. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="422" column="24" bodyfile="include/sys/byteorder.h" bodystart="422" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="byteorder_8h_1ad8e00ff5c0b9e394291936d1a570c215" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>static uint64_t sys_get_be64</definition>
        <argsstring>(const uint8_t src[8])</argsstring>
        <name>sys_get_be64</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>src</declname>
          <array>[8]</array>
        </param>
        <briefdescription>
<para>Get a 64-bit integer stored in big-endian format. </para>
        </briefdescription>
        <detaileddescription>
<para>Get a 64-bit integer, stored in big-endian format in a potentially unaligned memory location, and convert it to the host endianness.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Location of the big-endian 64-bit integer to get.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>64-bit integer in host endianness. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="437" column="24" bodyfile="include/sys/byteorder.h" bodystart="437" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="byteorder_8h_1a5c2c537b960a29bdd29133f902a67f6a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>static uint16_t sys_get_le16</definition>
        <argsstring>(const uint8_t src[2])</argsstring>
        <name>sys_get_le16</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>src</declname>
          <array>[2]</array>
        </param>
        <briefdescription>
<para>Get a 16-bit integer stored in little-endian format. </para>
        </briefdescription>
        <detaileddescription>
<para>Get a 16-bit integer, stored in little-endian format in a potentially unaligned memory location, and convert it to the host endianness.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Location of the little-endian 16-bit integer to get.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>16-bit integer in host endianness. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="452" column="24" bodyfile="include/sys/byteorder.h" bodystart="452" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="byteorder_8h_1aa75ded65c52f8308de46670b78339b7c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t sys_get_le24</definition>
        <argsstring>(const uint8_t src[3])</argsstring>
        <name>sys_get_le24</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>src</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
<para>Get a 24-bit integer stored in big-endian format. </para>
        </briefdescription>
        <detaileddescription>
<para>Get a 24-bit integer, stored in big-endian format in a potentially unaligned memory location, and convert it to the host endianness.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Location of the big-endian 24-bit integer to get.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>24-bit integer in host endianness. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="467" column="24" bodyfile="include/sys/byteorder.h" bodystart="467" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="byteorder_8h_1aa7422f922db351d2da1d52195d43b8a4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t sys_get_le32</definition>
        <argsstring>(const uint8_t src[4])</argsstring>
        <name>sys_get_le32</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>src</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Get a 32-bit integer stored in little-endian format. </para>
        </briefdescription>
        <detaileddescription>
<para>Get a 32-bit integer, stored in little-endian format in a potentially unaligned memory location, and convert it to the host endianness.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Location of the little-endian 32-bit integer to get.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>32-bit integer in host endianness. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="482" column="24" bodyfile="include/sys/byteorder.h" bodystart="482" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="byteorder_8h_1a601c3cefbdfd8befa336339a87fd70fd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>static uint64_t sys_get_le48</definition>
        <argsstring>(const uint8_t src[6])</argsstring>
        <name>sys_get_le48</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>src</declname>
          <array>[6]</array>
        </param>
        <briefdescription>
<para>Get a 48-bit integer stored in little-endian format. </para>
        </briefdescription>
        <detaileddescription>
<para>Get a 48-bit integer, stored in little-endian format in a potentially unaligned memory location, and convert it to the host endianness.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Location of the little-endian 48-bit integer to get.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>48-bit integer in host endianness. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="497" column="24" bodyfile="include/sys/byteorder.h" bodystart="497" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="byteorder_8h_1a678b08370e157ce5eb7117832aa86408" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>static uint64_t sys_get_le64</definition>
        <argsstring>(const uint8_t src[8])</argsstring>
        <name>sys_get_le64</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>src</declname>
          <array>[8]</array>
        </param>
        <briefdescription>
<para>Get a 64-bit integer stored in little-endian format. </para>
        </briefdescription>
        <detaileddescription>
<para>Get a 64-bit integer, stored in little-endian format in a potentially unaligned memory location, and convert it to the host endianness.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Location of the little-endian 64-bit integer to get.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>64-bit integer in host endianness. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="512" column="24" bodyfile="include/sys/byteorder.h" bodystart="512" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="byteorder_8h_1a00935c7276235df4c16dd0f9ef524e67" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_memcpy_swap</definition>
        <argsstring>(void *dst, const void *src, size_t length)</argsstring>
        <name>sys_memcpy_swap</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Swap one buffer content into another. </para>
        </briefdescription>
        <detaileddescription>
<para>Copy the content of src buffer into dst buffer in reversed order, i.e.: src[n] will be put in dst[end-n] Where n is an index and &apos;end&apos; the last index in both arrays. The 2 memory pointers must be pointing to different areas, and have a minimum size of given length.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a memory area where to copy the data in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a memory area where to copy the data from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of both dst and src memory areas </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="530" column="20" bodyfile="include/sys/byteorder.h" bodystart="530" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="byteorder_8h_1ae86b6050e71ec755abb284be3a02d28a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_mem_swap</definition>
        <argsstring>(void *buf, size_t length)</argsstring>
        <name>sys_mem_swap</name>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Swap buffer content. </para>
        </briefdescription>
        <detaileddescription>
<para>In-place memory swap, where final content will be reversed. I.e.: buf[n] will be put in buf[end-n] Where n is an index and &apos;end&apos; the last index of buf.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a memory area to swap </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of buf memory area </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/byteorder.h" line="556" column="20" bodyfile="include/sys/byteorder.h" bodystart="556" bodyend="566"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Byte order helpers. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2016,<sp/>Intel<sp/>Corporation.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_SYS_BYTEORDER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_SYS_BYTEORDER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="____assert_8h" kindref="compound">sys/__assert.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="toolchain_8h" kindref="compound">toolchain.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Internal<sp/>helpers<sp/>only<sp/>used<sp/>by<sp/>the<sp/>sys_*<sp/>APIs<sp/>further<sp/>below<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__bswap_16(x)<sp/>((uint16_t)<sp/>((((x)<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff)<sp/>|<sp/>(((x)<sp/>&amp;<sp/>0xff)<sp/>&lt;&lt;<sp/>8)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__bswap_24(x)<sp/>((uint32_t)<sp/>((((x)<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((x))<sp/>&amp;<sp/>0xff00)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((x)<sp/>&amp;<sp/>0xff)<sp/>&lt;&lt;<sp/>16)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__bswap_32(x)<sp/>((uint32_t)<sp/>((((x)<sp/>&gt;&gt;<sp/>24)<sp/>&amp;<sp/>0xff)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((x)<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff00)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((x)<sp/>&amp;<sp/>0xff00)<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((x)<sp/>&amp;<sp/>0xff)<sp/>&lt;&lt;<sp/>24)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__bswap_48(x)<sp/>((uint64_t)<sp/>((((x)<sp/>&gt;&gt;<sp/>40)<sp/>&amp;<sp/>0xff)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((x)<sp/>&gt;&gt;<sp/>24)<sp/>&amp;<sp/>0xff00)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((x)<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff0000)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((x)<sp/>&amp;<sp/>0xff0000)<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((x)<sp/>&amp;<sp/>0xff00)<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((x)<sp/>&amp;<sp/>0xff)<sp/>&lt;&lt;<sp/>40)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__bswap_64(x)<sp/>((uint64_t)<sp/>((((x)<sp/>&gt;&gt;<sp/>56)<sp/>&amp;<sp/>0xff)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((x)<sp/>&gt;&gt;<sp/>40)<sp/>&amp;<sp/>0xff00)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((x)<sp/>&gt;&gt;<sp/>24)<sp/>&amp;<sp/>0xff0000)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((x)<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff000000)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((x)<sp/>&amp;<sp/>0xff000000)<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((x)<sp/>&amp;<sp/>0xff0000)<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((x)<sp/>&amp;<sp/>0xff00)<sp/>&lt;&lt;<sp/>40)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((x)<sp/>&amp;<sp/>0xff)<sp/>&lt;&lt;<sp/>56)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__BYTE_ORDER__<sp/>==<sp/>__ORDER_LITTLE_ENDIAN__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="byteorder_8h_1ae4176f3e082f21488dedcd02b406cb43" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_le16_to_cpu(val)<sp/>(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="byteorder_8h_1ae7f653c0bca81809b53d8a91854ca4c9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_cpu_to_le16(val)<sp/>(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="byteorder_8h_1a0e7342005eb6840186a59c006a719c0d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_le24_to_cpu(val)<sp/>(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="byteorder_8h_1a85bae5c9bd6e58923d97ef41b7fd2055" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_cpu_to_le24(val)<sp/>(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="byteorder_8h_1aa713ea0f2e2c64c05bd4a3596e44ce4e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_le32_to_cpu(val)<sp/>(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="byteorder_8h_1a8cdffcb0ce27f2871e1f1d05dcc31b7b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_cpu_to_le32(val)<sp/>(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="byteorder_8h_1ae34388c412959f7af9e233dbe81fbbe0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_le48_to_cpu(val)<sp/>(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="byteorder_8h_1ad9f886d1a9ffe95fc5e1e9eb4e39c532" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_cpu_to_le48(val)<sp/>(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="byteorder_8h_1a3d4737fab89f1762e518630090db8368" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_le64_to_cpu(val)<sp/>(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="byteorder_8h_1a8730241a4c5701f689ac0ac1255331c7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_cpu_to_le64(val)<sp/>(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="byteorder_8h_1a840037a5fd3d36817dc92a44469df704" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_be16_to_cpu(val)<sp/>__bswap_16(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="byteorder_8h_1a9e2c7b19bbba5343ee8c5f9740484a56" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_cpu_to_be16(val)<sp/>__bswap_16(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="byteorder_8h_1afbe8be1a0842354ab076b2530ef9a041" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_be24_to_cpu(val)<sp/>__bswap_24(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="byteorder_8h_1ab441316429ce3604ec359f2a20c76431" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_cpu_to_be24(val)<sp/>__bswap_24(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="byteorder_8h_1aee4cefae7f089197e77c487faafda269" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_be32_to_cpu(val)<sp/>__bswap_32(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="byteorder_8h_1a508d3b125adf1d30e8411381827c4f05" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_cpu_to_be32(val)<sp/>__bswap_32(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="byteorder_8h_1a93e948095f79ab51368f193472d5b030" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_be48_to_cpu(val)<sp/>__bswap_48(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="byteorder_8h_1abb089029e2e84ce70bee82b18341273d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_cpu_to_be48(val)<sp/>__bswap_48(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="byteorder_8h_1abb4d263f2b9b1cbf1c8fbaec714fc411" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_be64_to_cpu(val)<sp/>__bswap_64(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="byteorder_8h_1a6ac423744c21c1e40aabd7ecb9b9e8d5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_cpu_to_be64(val)<sp/>__bswap_64(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__BYTE_ORDER__<sp/>==<sp/>__ORDER_BIG_ENDIAN__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_le16_to_cpu(val)<sp/>__bswap_16(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_cpu_to_le16(val)<sp/>__bswap_16(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_le24_to_cpu(val)<sp/>__bswap_24(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_cpu_to_le24(val)<sp/>__bswap_24(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_le32_to_cpu(val)<sp/>__bswap_32(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_cpu_to_le32(val)<sp/>__bswap_32(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_le48_to_cpu(val)<sp/>__bswap_48(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_cpu_to_le48(val)<sp/>__bswap_48(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_le64_to_cpu(val)<sp/>__bswap_64(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_cpu_to_le64(val)<sp/>__bswap_64(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_be16_to_cpu(val)<sp/>(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_cpu_to_be16(val)<sp/>(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_be24_to_cpu(val)<sp/>(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_cpu_to_be24(val)<sp/>(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_be32_to_cpu(val)<sp/>(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_cpu_to_be32(val)<sp/>(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_be48_to_cpu(val)<sp/>(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_cpu_to_be48(val)<sp/>(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_be64_to_cpu(val)<sp/>(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_cpu_to_be64(val)<sp/>(val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Unknown<sp/>byte<sp/>order&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="byteorder_8h_1a68df8f14dfc0d8715d16ac87dd4c73d2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="byteorder_8h_1a68df8f14dfc0d8715d16ac87dd4c73d2" kindref="member">sys_put_be16</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>val,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>dst[2])</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[0]<sp/>=<sp/>val<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[1]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="byteorder_8h_1a7aa82f69d08ebde8077fc3d2ebfbc53b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="byteorder_8h_1a7aa82f69d08ebde8077fc3d2ebfbc53b" kindref="member">sys_put_be24</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>val,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>dst[3])</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[0]<sp/>=<sp/>val<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="byteorder_8h_1a68df8f14dfc0d8715d16ac87dd4c73d2" kindref="member">sys_put_be16</ref>(val,<sp/>&amp;dst[1]);</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="256" refid="byteorder_8h_1a21f25ff68591217034f3414594425286" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="byteorder_8h_1a21f25ff68591217034f3414594425286" kindref="member">sys_put_be32</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>val,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>dst[4])</highlight></codeline>
<codeline lineno="257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="byteorder_8h_1a68df8f14dfc0d8715d16ac87dd4c73d2" kindref="member">sys_put_be16</ref>(val<sp/>&gt;&gt;<sp/>16,<sp/>dst);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="byteorder_8h_1a68df8f14dfc0d8715d16ac87dd4c73d2" kindref="member">sys_put_be16</ref>(val,<sp/>&amp;dst[2]);</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="byteorder_8h_1abe8d617e8a5469c303a512fe94a55443" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="byteorder_8h_1abe8d617e8a5469c303a512fe94a55443" kindref="member">sys_put_be48</ref>(<ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>val,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>dst[6])</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="byteorder_8h_1a68df8f14dfc0d8715d16ac87dd4c73d2" kindref="member">sys_put_be16</ref>(val<sp/>&gt;&gt;<sp/>32,<sp/>dst);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="byteorder_8h_1a21f25ff68591217034f3414594425286" kindref="member">sys_put_be32</ref>(val,<sp/>&amp;dst[2]);</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="byteorder_8h_1a3e0d2e4e85249497011f5f9ea0d2987c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="byteorder_8h_1a3e0d2e4e85249497011f5f9ea0d2987c" kindref="member">sys_put_be64</ref>(<ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>val,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>dst[8])</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="byteorder_8h_1a21f25ff68591217034f3414594425286" kindref="member">sys_put_be32</ref>(val<sp/>&gt;&gt;<sp/>32,<sp/>dst);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="byteorder_8h_1a21f25ff68591217034f3414594425286" kindref="member">sys_put_be32</ref>(val,<sp/>&amp;dst[4]);</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="byteorder_8h_1af8f30219c861bb07d097374204d386dd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="byteorder_8h_1af8f30219c861bb07d097374204d386dd" kindref="member">sys_put_le16</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>val,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>dst[2])</highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[0]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[1]<sp/>=<sp/>val<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="byteorder_8h_1a10bdc6fccf288e1d5215dba9c031c730" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="byteorder_8h_1a10bdc6fccf288e1d5215dba9c031c730" kindref="member">sys_put_le24</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>val,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>dst[3])</highlight></codeline>
<codeline lineno="317"><highlight class="normal">{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="byteorder_8h_1af8f30219c861bb07d097374204d386dd" kindref="member">sys_put_le16</ref>(val,<sp/>dst);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[2]<sp/>=<sp/>val<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="byteorder_8h_1aff60d0dcda6a48df4ea248f898a92de0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="byteorder_8h_1aff60d0dcda6a48df4ea248f898a92de0" kindref="member">sys_put_le32</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>val,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>dst[4])</highlight></codeline>
<codeline lineno="332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="byteorder_8h_1af8f30219c861bb07d097374204d386dd" kindref="member">sys_put_le16</ref>(val,<sp/>dst);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="byteorder_8h_1af8f30219c861bb07d097374204d386dd" kindref="member">sys_put_le16</ref>(val<sp/>&gt;&gt;<sp/>16,<sp/>&amp;dst[2]);</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="byteorder_8h_1aa6950654cc7fd67ab4f83235da59665a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="byteorder_8h_1aa6950654cc7fd67ab4f83235da59665a" kindref="member">sys_put_le48</ref>(<ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>val,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>dst[6])</highlight></codeline>
<codeline lineno="347"><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="byteorder_8h_1aff60d0dcda6a48df4ea248f898a92de0" kindref="member">sys_put_le32</ref>(val,<sp/>dst);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="byteorder_8h_1af8f30219c861bb07d097374204d386dd" kindref="member">sys_put_le16</ref>(val<sp/>&gt;&gt;<sp/>32,<sp/>&amp;dst[4]);</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="361" refid="byteorder_8h_1a7d89d4b4b278fefa3e65fc6c3894a70c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="byteorder_8h_1a7d89d4b4b278fefa3e65fc6c3894a70c" kindref="member">sys_put_le64</ref>(<ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>val,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>dst[8])</highlight></codeline>
<codeline lineno="362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="byteorder_8h_1aff60d0dcda6a48df4ea248f898a92de0" kindref="member">sys_put_le32</ref>(val,<sp/>dst);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="byteorder_8h_1aff60d0dcda6a48df4ea248f898a92de0" kindref="member">sys_put_le32</ref>(val<sp/>&gt;&gt;<sp/>32,<sp/>&amp;dst[4]);</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="377" refid="byteorder_8h_1a91fae25b12126c2b35d240f56866184d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="byteorder_8h_1a91fae25b12126c2b35d240f56866184d" kindref="member">sys_get_be16</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>src[2])</highlight></codeline>
<codeline lineno="378"><highlight class="normal">{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref>)src[0]<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>src[1];</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="392" refid="byteorder_8h_1ac65e83f46ef042862b675995f74fcd9b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="byteorder_8h_1ac65e83f46ef042862b675995f74fcd9b" kindref="member">sys_get_be24</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>src[3])</highlight></codeline>
<codeline lineno="393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref>)src[0]<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/><ref refid="byteorder_8h_1a91fae25b12126c2b35d240f56866184d" kindref="member">sys_get_be16</ref>(&amp;src[1]);</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="407" refid="byteorder_8h_1a4db31229c7a8a80dace3870664b6442d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="byteorder_8h_1a4db31229c7a8a80dace3870664b6442d" kindref="member">sys_get_be32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>src[4])</highlight></codeline>
<codeline lineno="408"><highlight class="normal">{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref>)<ref refid="byteorder_8h_1a91fae25b12126c2b35d240f56866184d" kindref="member">sys_get_be16</ref>(&amp;src[0])<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/><ref refid="byteorder_8h_1a91fae25b12126c2b35d240f56866184d" kindref="member">sys_get_be16</ref>(&amp;src[2]);</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="byteorder_8h_1acf0fa9761998529910e022b80126ff6b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="byteorder_8h_1acf0fa9761998529910e022b80126ff6b" kindref="member">sys_get_be48</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>src[6])</highlight></codeline>
<codeline lineno="423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref>)<ref refid="byteorder_8h_1a4db31229c7a8a80dace3870664b6442d" kindref="member">sys_get_be32</ref>(&amp;src[0])<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/><ref refid="byteorder_8h_1a91fae25b12126c2b35d240f56866184d" kindref="member">sys_get_be16</ref>(&amp;src[4]);</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="437" refid="byteorder_8h_1ad8e00ff5c0b9e394291936d1a570c215" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="byteorder_8h_1ad8e00ff5c0b9e394291936d1a570c215" kindref="member">sys_get_be64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>src[8])</highlight></codeline>
<codeline lineno="438"><highlight class="normal">{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref>)<ref refid="byteorder_8h_1a4db31229c7a8a80dace3870664b6442d" kindref="member">sys_get_be32</ref>(&amp;src[0])<sp/>&lt;&lt;<sp/>32)<sp/>|<sp/><ref refid="byteorder_8h_1a4db31229c7a8a80dace3870664b6442d" kindref="member">sys_get_be32</ref>(&amp;src[4]);</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="byteorder_8h_1a5c2c537b960a29bdd29133f902a67f6a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="byteorder_8h_1a5c2c537b960a29bdd29133f902a67f6a" kindref="member">sys_get_le16</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>src[2])</highlight></codeline>
<codeline lineno="453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref>)src[1]<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>src[0];</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="467" refid="byteorder_8h_1aa75ded65c52f8308de46670b78339b7c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="byteorder_8h_1aa75ded65c52f8308de46670b78339b7c" kindref="member">sys_get_le24</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>src[3])</highlight></codeline>
<codeline lineno="468"><highlight class="normal">{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref>)src[2]<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/><ref refid="byteorder_8h_1a5c2c537b960a29bdd29133f902a67f6a" kindref="member">sys_get_le16</ref>(&amp;src[0]);</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="482" refid="byteorder_8h_1aa7422f922db351d2da1d52195d43b8a4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="byteorder_8h_1aa7422f922db351d2da1d52195d43b8a4" kindref="member">sys_get_le32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>src[4])</highlight></codeline>
<codeline lineno="483"><highlight class="normal">{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref>)<ref refid="byteorder_8h_1a5c2c537b960a29bdd29133f902a67f6a" kindref="member">sys_get_le16</ref>(&amp;src[2])<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/><ref refid="byteorder_8h_1a5c2c537b960a29bdd29133f902a67f6a" kindref="member">sys_get_le16</ref>(&amp;src[0]);</highlight></codeline>
<codeline lineno="485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="497" refid="byteorder_8h_1a601c3cefbdfd8befa336339a87fd70fd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="byteorder_8h_1a601c3cefbdfd8befa336339a87fd70fd" kindref="member">sys_get_le48</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>src[6])</highlight></codeline>
<codeline lineno="498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref>)<ref refid="byteorder_8h_1aa7422f922db351d2da1d52195d43b8a4" kindref="member">sys_get_le32</ref>(&amp;src[2])<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/><ref refid="byteorder_8h_1a5c2c537b960a29bdd29133f902a67f6a" kindref="member">sys_get_le16</ref>(&amp;src[0]);</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="512" refid="byteorder_8h_1a678b08370e157ce5eb7117832aa86408" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="byteorder_8h_1a678b08370e157ce5eb7117832aa86408" kindref="member">sys_get_le64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>src[8])</highlight></codeline>
<codeline lineno="513"><highlight class="normal">{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref>)<ref refid="byteorder_8h_1aa7422f922db351d2da1d52195d43b8a4" kindref="member">sys_get_le32</ref>(&amp;src[4])<sp/>&lt;&lt;<sp/>32)<sp/>|<sp/><ref refid="byteorder_8h_1aa7422f922db351d2da1d52195d43b8a4" kindref="member">sys_get_le32</ref>(&amp;src[0]);</highlight></codeline>
<codeline lineno="515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="530" refid="byteorder_8h_1a00935c7276235df4c16dd0f9ef524e67" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="byteorder_8h_1a00935c7276235df4c16dd0f9ef524e67" kindref="member">sys_memcpy_swap</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="531"><highlight class="normal">{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*pdst<sp/>=<sp/>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*)dst;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*psrc<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*)src;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT(((psrc<sp/>&lt;<sp/>pdst<sp/>&amp;&amp;<sp/>(psrc<sp/>+<sp/>length)<sp/>&lt;=<sp/>pdst)<sp/>||</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(psrc<sp/>&gt;<sp/>pdst<sp/>&amp;&amp;<sp/>(pdst<sp/>+<sp/>length)<sp/>&lt;=<sp/>psrc)),</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Source<sp/>and<sp/>destination<sp/>buffers<sp/>must<sp/>not<sp/>overlap&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psrc<sp/>+=<sp/>length<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>length<sp/>&gt;<sp/>0;<sp/>length--)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pdst++<sp/>=<sp/>*psrc--;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="556" refid="byteorder_8h_1ae86b6050e71ec755abb284be3a02d28a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="byteorder_8h_1ae86b6050e71ec755abb284be3a02d28a" kindref="member">sys_mem_swap</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="557"><highlight class="normal">{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(length/2);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>tmp<sp/>=<sp/>((<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*)buf)[i];</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*)buf)[i]<sp/>=<sp/>((<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*)buf)[length<sp/>-<sp/>1<sp/>-<sp/>i];</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*)buf)[length<sp/>-<sp/>1<sp/>-<sp/>i]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_SYS_BYTEORDER_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/sys/byteorder.h"/>
  </compounddef>
</doxygen>
