<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__nvs__high__level__api" kind="group">
    <compoundname>nvs_high_level_api</compoundname>
    <title>Non-volatile Storage APIs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nvs__high__level__api_1gab932ea2d6e933825c2378bef8c30b065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvs_mount</definition>
        <argsstring>(struct nvs_fs *fs)</argsstring>
        <name>nvs_mount</name>
        <param>
          <type>struct <ref refid="structnvs__fs" kindref="compound">nvs_fs</ref> *</type>
          <declname>fs</declname>
        </param>
        <briefdescription>
<para>nvs_mount </para>
        </briefdescription>
        <detaileddescription>
<para>Mount a NVS file system onto the flash device specified in <computeroutput>fs</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fs</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to file system </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ERRNO</parametername>
</parameternamelist>
<parameterdescription>
<para>errno code if error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/nvs.h" line="80" column="5" declfile="include/fs/nvs.h" declline="80" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__nvs__high__level__api_1ga42ee9fd0d98f89dcabc5888f8b4600f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvs_clear</definition>
        <argsstring>(struct nvs_fs *fs)</argsstring>
        <name>nvs_clear</name>
        <param>
          <type>struct <ref refid="structnvs__fs" kindref="compound">nvs_fs</ref> *</type>
          <declname>fs</declname>
        </param>
        <briefdescription>
<para>nvs_clear </para>
        </briefdescription>
        <detaileddescription>
<para>Clears the NVS file system from flash. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fs</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to file system </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ERRNO</parametername>
</parameternamelist>
<parameterdescription>
<para>errno code if error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/nvs.h" line="90" column="5" declfile="include/fs/nvs.h" declline="90" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__nvs__high__level__api_1ga34d40e9f63ba514d7915b72c4fef0b82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref></type>
        <definition>ssize_t nvs_write</definition>
        <argsstring>(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)</argsstring>
        <name>nvs_write</name>
        <param>
          <type>struct <ref refid="structnvs__fs" kindref="compound">nvs_fs</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>nvs_write </para>
        </briefdescription>
        <detaileddescription>
<para>Write an entry to the file system.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fs</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to file system </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the entry to be written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be written</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes written. On success, it will be equal to the number of bytes requested to be written. When a rewrite of the same data already stored is attempted, nothing is written to flash, thus 0 is returned. On error, returns negative value of <ref refid="errno_8h" kindref="compound">errno.h</ref> defined error codes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/nvs.h" line="106" column="9" declfile="include/fs/nvs.h" declline="106" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__nvs__high__level__api_1ga5fd4175a4976e6d3ee8621ed95e0ee9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvs_delete</definition>
        <argsstring>(struct nvs_fs *fs, uint16_t id)</argsstring>
        <name>nvs_delete</name>
        <param>
          <type>struct <ref refid="structnvs__fs" kindref="compound">nvs_fs</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>nvs_delete </para>
        </briefdescription>
        <detaileddescription>
<para>Delete an entry from the file system</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fs</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to file system </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the entry to be deleted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ERRNO</parametername>
</parameternamelist>
<parameterdescription>
<para>errno code if error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/nvs.h" line="118" column="5" declfile="include/fs/nvs.h" declline="118" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__nvs__high__level__api_1ga341fd2ad029709cbb6eafde1ae88603f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref></type>
        <definition>ssize_t nvs_read</definition>
        <argsstring>(struct nvs_fs *fs, uint16_t id, void *data, size_t len)</argsstring>
        <name>nvs_read</name>
        <param>
          <type>struct <ref refid="structnvs__fs" kindref="compound">nvs_fs</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>nvs_read </para>
        </briefdescription>
        <detaileddescription>
<para>Read an entry from the file system.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fs</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to file system </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the entry to be read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes read. On success, it will be equal to the number of bytes requested to be read. When the return value is larger than the number of bytes requested to read this indicates not all bytes were read, and more data is available. On error, returns negative value of <ref refid="errno_8h" kindref="compound">errno.h</ref> defined error codes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/nvs.h" line="135" column="9" declfile="include/fs/nvs.h" declline="135" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__nvs__high__level__api_1ga8e525038e353045ad6cd90607e887b0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref></type>
        <definition>ssize_t nvs_read_hist</definition>
        <argsstring>(struct nvs_fs *fs, uint16_t id, void *data, size_t len, uint16_t cnt)</argsstring>
        <name>nvs_read_hist</name>
        <param>
          <type>struct <ref refid="structnvs__fs" kindref="compound">nvs_fs</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
<para>nvs_read_hist </para>
        </briefdescription>
        <detaileddescription>
<para>Read a history entry from the file system.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fs</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to file system </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the entry to be read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>History counter: 0: latest entry, 1: one before latest ...</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes read. On success, it will be equal to the number of bytes requested to be read. When the return value is larger than the number of bytes requested to read this indicates not all bytes were read, and more data is available. On error, returns negative value of <ref refid="errno_8h" kindref="compound">errno.h</ref> defined error codes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/nvs.h" line="153" column="9" declfile="include/fs/nvs.h" declline="153" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__nvs__high__level__api_1ga37e5a55f0b9209c7c0c95db9e1e84715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref></type>
        <definition>ssize_t nvs_calc_free_space</definition>
        <argsstring>(struct nvs_fs *fs)</argsstring>
        <name>nvs_calc_free_space</name>
        <param>
          <type>struct <ref refid="structnvs__fs" kindref="compound">nvs_fs</ref> *</type>
          <declname>fs</declname>
        </param>
        <briefdescription>
<para>nvs_calc_free_space </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the available free space in the file system.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fs</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to file system</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes free. On success, it will be equal to the number of bytes that can still be written to the file system. Calculating the free space is a time consuming operation, especially on spi flash. On error, returns negative value of <ref refid="errno_8h" kindref="compound">errno.h</ref> defined error codes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/nvs.h" line="166" column="9" declfile="include/fs/nvs.h" declline="166" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__nvs__high__level__api_1ga7f17dc517f55d39ba1ef07d38cf4879b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int nvs_init</definition>
        <argsstring>(struct nvs_fs *fs, const char *dev_name)</argsstring>
        <name>nvs_init</name>
        <param>
          <type>struct <ref refid="structnvs__fs" kindref="compound">nvs_fs</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>dev_name</declname>
        </param>
        <briefdescription>
<para>nvs_init </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes a NVS file system in flash.</para>
<para><xrefsect id="deprecated_1_deprecated000004"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__nvs__high__level__api_1gab932ea2d6e933825c2378bef8c30b065" kindref="member">nvs_mount()</ref> instead.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fs</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to file system </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to flash device name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ERRNO</parametername>
</parameternamelist>
<parameterdescription>
<para>errno code if error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/nvs.h" line="180" column="20" bodyfile="include/fs/nvs.h" bodystart="180" bodyend="188"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Non-volatile Storage APIs. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
