<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structfs__littlefs" kind="struct" language="C++" prot="public">
    <compoundname>fs_littlefs</compoundname>
    <includes refid="littlefs_8h" local="no">littlefs.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structfs__littlefs_1ab9b4cd8ce0aedfd071ea184d92b1224a" prot="public" static="no" mutable="no">
        <type>struct lfs_config</type>
        <definition>struct lfs_config fs_littlefs::cfg</definition>
        <argsstring></argsstring>
        <name>cfg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/littlefs.h" line="23" column="17" bodyfile="include/fs/littlefs.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfs__littlefs_1ac1b102a94e6db2dfb4ca0d0bee5a561e" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
        <definition>uint8_t* fs_littlefs::read_buffer</definition>
        <argsstring></argsstring>
        <name>read_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/littlefs.h" line="26" column="9" bodyfile="include/fs/littlefs.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfs__littlefs_1a239d1ac90cc0de3a9cca766d41180def" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
        <definition>uint8_t* fs_littlefs::prog_buffer</definition>
        <argsstring></argsstring>
        <name>prog_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/littlefs.h" line="29" column="9" bodyfile="include/fs/littlefs.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfs__littlefs_1a7cd0dcd14e83138ba2ed698f55377e49" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
        <definition>uint32_t* fs_littlefs::lookahead_buffer[CONFIG_FS_LITTLEFS_LOOKAHEAD_SIZE/sizeof(uint32_t)]</definition>
        <argsstring>[CONFIG_FS_LITTLEFS_LOOKAHEAD_SIZE/sizeof(uint32_t)]</argsstring>
        <name>lookahead_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/littlefs.h" line="34" column="10" bodyfile="include/fs/littlefs.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfs__littlefs_1a3a1902a64f78b65743786d154b435439" prot="public" static="no" mutable="no">
        <type>struct lfs</type>
        <definition>struct lfs fs_littlefs::lfs</definition>
        <argsstring></argsstring>
        <name>lfs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/littlefs.h" line="37" column="10" bodyfile="include/fs/littlefs.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfs__littlefs_1a0ebbf427f161722fc269573d86e562c5" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* fs_littlefs::backend</definition>
        <argsstring></argsstring>
        <name>backend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/littlefs.h" line="38" column="6" bodyfile="include/fs/littlefs.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfs__littlefs_1a337c24352a8f39c1d1f55682126341b5" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__mutex" kindref="compound">k_mutex</ref></type>
        <definition>struct k_mutex fs_littlefs::mutex</definition>
        <argsstring></argsstring>
        <name>mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/littlefs.h" line="39" column="14" bodyfile="include/fs/littlefs.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Filesystem info structure for LittleFS mount. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="7">
        <label>__thread_entry</label>
      </node>
      <node id="6">
        <label>_callee_saved</label>
      </node>
      <node id="9">
        <label>_mem_domain_info</label>
      </node>
      <node id="14">
        <label>_thread_arch</label>
      </node>
      <node id="5">
        <label>_thread_base</label>
      </node>
      <node id="8">
        <label>_thread_stack_info</label>
      </node>
      <node id="3">
        <label>_wait_q_t</label>
      </node>
      <node id="1">
        <label>fs_littlefs</label>
        <link refid="structfs__littlefs"/>
        <childnode refid="2" relation="usage">
          <edgelabel>mutex</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>k_heap</label>
        <link refid="structk__heap"/>
        <childnode refid="12" relation="usage">
          <edgelabel>heap</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>wait_q</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>lock</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>k_mutex</label>
        <link refid="structk__mutex"/>
        <childnode refid="3" relation="usage">
          <edgelabel>wait_q</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>k_spinlock</label>
        <link refid="structk__spinlock"/>
      </node>
      <node id="4">
        <label>k_thread</label>
        <link refid="structk__thread"/>
        <childnode refid="5" relation="usage">
          <edgelabel>base</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>callee_saved</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>join_queue</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>entry</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>next_thread</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>stack_info</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>mem_domain_info</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>stack_obj</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>resource_pool</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>arch</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>sys_heap</label>
        <link refid="structsys__heap"/>
      </node>
      <node id="10">
        <label>z_thread_stack_element</label>
      </node>
    </collaborationgraph>
    <location file="include/fs/littlefs.h" line="21" column="1" bodyfile="include/fs/littlefs.h" bodystart="21" bodyend="40"/>
    <listofallmembers>
      <member refid="structfs__littlefs_1a0ebbf427f161722fc269573d86e562c5" prot="public" virt="non-virtual"><scope>fs_littlefs</scope><name>backend</name></member>
      <member refid="structfs__littlefs_1ab9b4cd8ce0aedfd071ea184d92b1224a" prot="public" virt="non-virtual"><scope>fs_littlefs</scope><name>cfg</name></member>
      <member refid="structfs__littlefs_1a3a1902a64f78b65743786d154b435439" prot="public" virt="non-virtual"><scope>fs_littlefs</scope><name>lfs</name></member>
      <member refid="structfs__littlefs_1a7cd0dcd14e83138ba2ed698f55377e49" prot="public" virt="non-virtual"><scope>fs_littlefs</scope><name>lookahead_buffer</name></member>
      <member refid="structfs__littlefs_1a337c24352a8f39c1d1f55682126341b5" prot="public" virt="non-virtual"><scope>fs_littlefs</scope><name>mutex</name></member>
      <member refid="structfs__littlefs_1a239d1ac90cc0de3a9cca766d41180def" prot="public" virt="non-virtual"><scope>fs_littlefs</scope><name>prog_buffer</name></member>
      <member refid="structfs__littlefs_1ac1b102a94e6db2dfb4ca0d0bee5a561e" prot="public" virt="non-virtual"><scope>fs_littlefs</scope><name>read_buffer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
