<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__gpio__emul" kind="group">
    <compoundname>gpio_emul</compoundname>
    <title>Emulated GPIO</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__gpio__emul_1gaa7eae6a0f85d0f0fb6a8aa41329f4709" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpio_emul_input_set_masked</definition>
        <argsstring>(const struct device *port, gpio_port_pins_t pins, gpio_port_value_t values)</argsstring>
        <name>gpio_emul_input_set_masked</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref></type>
          <declname>pins</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" kindref="member">gpio_port_value_t</ref></type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Modify the values of one or more emulated GPIO input <computeroutput>pins</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The emulated GPIO port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pins</parametername>
</parameternamelist>
<parameterdescription>
<para>The mask of pins that have changed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>New values to assign to <computeroutput>pins</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EINVAL if an invalid argument is provided </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio/gpio_emul.h" line="56" column="5" declfile="include/drivers/gpio/gpio_emul.h" declline="56" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__emul_1ga3962e337bc22e532f2c181724621fcf8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpio_emul_input_set</definition>
        <argsstring>(const struct device *port, gpio_pin_t pin, int value)</argsstring>
        <name>gpio_emul_input_set</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref></type>
          <declname>pin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Modify the value of one emulated GPIO input <computeroutput>pin</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The emulated GPIO port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>The pin to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>New values to assign to <computeroutput>pin</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EINVAL if an invalid argument is provided </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio/gpio_emul.h" line="69" column="19" bodyfile="include/drivers/gpio/gpio_emul.h" bodystart="69" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__emul_1gaa6e4c5c2c53d421e9635c0a977172205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpio_emul_output_get_masked</definition>
        <argsstring>(const struct device *port, gpio_port_pins_t pins, gpio_port_value_t *values)</argsstring>
        <name>gpio_emul_output_get_masked</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref></type>
          <declname>pins</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" kindref="member">gpio_port_value_t</ref> *</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Read the value of one or more emulated GPIO output <computeroutput>pins</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The emulated GPIO port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pins</parametername>
</parameternamelist>
<parameterdescription>
<para>The mask of pins that have changed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to where the value of <computeroutput>pins</computeroutput> will be stored</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EINVAL if an invalid argument is provided </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio/gpio_emul.h" line="85" column="5" declfile="include/drivers/gpio/gpio_emul.h" declline="85" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__emul_1gaa62613aa6eb442d2c4e436893316124f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpio_emul_output_get</definition>
        <argsstring>(const struct device *port, gpio_pin_t pin)</argsstring>
        <name>gpio_emul_output_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref></type>
          <declname>pin</declname>
        </param>
        <briefdescription>
<para>Read the value of one emulated GPIO output <computeroutput>pin</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The emulated GPIO port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>The pin to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 or 1 on success </para>
</simplesect>
<simplesect kind="return"><para>-EINVAL if an invalid argument is provided </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio/gpio_emul.h" line="97" column="19" bodyfile="include/drivers/gpio/gpio_emul.h" bodystart="97" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__emul_1ga86bd5ff4f557e4d520a4f760fb74cdd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpio_emul_flags_get</definition>
        <argsstring>(const struct device *port, gpio_pin_t pin, gpio_flags_t *flags)</argsstring>
        <name>gpio_emul_flags_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref></type>
          <declname>pin</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga5f5cb5e7dae6d58e072bb450af029d2e" kindref="member">gpio_flags_t</ref> *</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Get <computeroutput>flags</computeroutput> for a given emulated GPIO <computeroutput>pin</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>For more information on available flags, see <ref refid="group__gpio__interface" kindref="compound">GPIO Driver APIs</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The emulated GPIO port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>The pin to retrieve <computeroutput>flags</computeroutput> for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to where the flags for <computeroutput>pin</computeroutput> will be stored</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EINVAL if an invalid argument is provided </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio/gpio_emul.h" line="122" column="5" declfile="include/drivers/gpio/gpio_emul.h" declline="122" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Emulated GPIO backend API. </para>
    </briefdescription>
    <detaileddescription>
<para>Behaviour of emulated GPIO is application-defined. As-such, each application may</para>
<para><itemizedlist>
<listitem><para>define a Device Tree overlay file to indicate the number of GPIO controllers as well as the number of pins for each controller</para>
</listitem><listitem><para>register a callback with the GPIO controller using <ref refid="group__gpio__interface_1ga05fd15af20386d69f9332354285b0cca" kindref="member">gpio_add_callback</ref> to emulate &quot;wiring&quot;</para>
</listitem><listitem><para>asynchronously call <ref refid="group__gpio__emul_1ga3962e337bc22e532f2c181724621fcf8" kindref="member">gpio_emul_input_set</ref> and / or <ref refid="group__gpio__emul_1gaa7eae6a0f85d0f0fb6a8aa41329f4709" kindref="member">gpio_emul_input_set_masked</ref> in order to emulate GPIO events</para>
</listitem></itemizedlist>
</para>
<para>An example of an appropriate Device Tree overlay file is in tests/drivers/gpio/gpio_basic_api/boards/native_posix_64.overlay.</para>
<para>An example of registering a callback to emulate &quot;wiring&quot; as well as an example of calling <ref refid="group__gpio__emul_1ga3962e337bc22e532f2c181724621fcf8" kindref="member">gpio_emul_input_set</ref> is in the file tests/drivers/gpio/gpio_basic_api/src/main.c . </para>
    </detaileddescription>
  </compounddef>
</doxygen>
