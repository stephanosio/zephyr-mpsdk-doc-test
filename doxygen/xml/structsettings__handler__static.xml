<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structsettings__handler__static" kind="struct" language="C++" prot="public">
    <compoundname>settings_handler_static</compoundname>
    <includes refid="settings_8h" local="no">settings.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structsettings__handler__static_1aa8e57471bd89f4792cfb0689462b6f9b" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* settings_handler_static::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Name of subtree. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="132" column="12" bodyfile="include/settings/settings.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structsettings__handler__static_1acc65e884503cf7db1276e7777f57fb12" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* settings_handler_static::h_get) (const char *key, char *val, int val_len_max)</definition>
        <argsstring>)(const char *key, char *val, int val_len_max)</argsstring>
        <name>h_get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get values handler of settings items identified by keyword names.</para>
<para>Parameters:<itemizedlist>
<listitem><para>key[in] the name with skipped part that was used as name in handler registration</para>
</listitem><listitem><para>val[out] buffer to receive value.</para>
</listitem><listitem><para>val_len_max[in] size of that buffer.</para>
</listitem></itemizedlist>
</para>
<para>Return: length of data read on success, negative on failure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="135" column="1" bodyfile="include/settings/settings.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structsettings__handler__static_1a2cf94a6dad3ec35ca58b5ef869c7edae" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* settings_handler_static::h_set) (const char *key, size_t len, settings_read_cb read_cb, void *cb_arg)</definition>
        <argsstring>)(const char *key, size_t len, settings_read_cb read_cb, void *cb_arg)</argsstring>
        <name>h_set</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set value handler of settings items identified by keyword names.</para>
<para>Parameters:<itemizedlist>
<listitem><para>key[in] the name with skipped part that was used as name in handler registration</para>
</listitem><listitem><para>len[in] the size of the data found in the backend.</para>
</listitem><listitem><para>read_cb[in] function provided to read the data from the backend.</para>
</listitem><listitem><para>cb_arg[in] arguments for the read function provided by the backend.</para>
</listitem></itemizedlist>
</para>
<para>Return: 0 on success, non-zero on failure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="147" column="1" bodyfile="include/settings/settings.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structsettings__handler__static_1a093ab8346aedd0a9cb06dfaa4387f393" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* settings_handler_static::h_commit) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>h_commit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This handler gets called after settings has been loaded in full. User might use it to apply setting to the application. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="162" column="1" bodyfile="include/settings/settings.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structsettings__handler__static_1abb1df3f0f05fb2a57cd08e380bfffa09" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* settings_handler_static::h_export) (int(*export_func)(const char *name, const void *val, size_t val_len))</definition>
        <argsstring>)(int(*export_func)(const char *name, const void *val, size_t val_len))</argsstring>
        <name>h_export</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This gets called to dump all current settings items.</para>
<para>This happens when <ref refid="group__settings_1ga789410aa059398d6c8a7851ea6945b55" kindref="member">settings_save</ref> tries to save the settings. Parameters:<itemizedlist>
<listitem><para>export_func: the pointer to the internal function which appends a single key-value pair to persisted settings. Don&apos;t store duplicated value. The name is subtree/key string, val is the string with value.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="remark"><para>The User might limit a implementations of handler to serving only one keyword at one call - what will impose limit to get/set values using full subtree/key name.</para>
</simplesect>
Return: 0 on success, non-zero on failure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="167" column="1" bodyfile="include/settings/settings.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Config handlers without the node element, used for static handlers. These are registered using a call to SETTINGS_REGISTER_STATIC(). </para>
    </detaileddescription>
    <location file="include/settings/settings.h" line="130" column="1" bodyfile="include/settings/settings.h" bodystart="130" bodyend="184"/>
    <listofallmembers>
      <member refid="structsettings__handler__static_1a093ab8346aedd0a9cb06dfaa4387f393" prot="public" virt="non-virtual"><scope>settings_handler_static</scope><name>h_commit</name></member>
      <member refid="structsettings__handler__static_1abb1df3f0f05fb2a57cd08e380bfffa09" prot="public" virt="non-virtual"><scope>settings_handler_static</scope><name>h_export</name></member>
      <member refid="structsettings__handler__static_1acc65e884503cf7db1276e7777f57fb12" prot="public" virt="non-virtual"><scope>settings_handler_static</scope><name>h_get</name></member>
      <member refid="structsettings__handler__static_1a2cf94a6dad3ec35ca58b5ef869c7edae" prot="public" virt="non-virtual"><scope>settings_handler_static</scope><name>h_set</name></member>
      <member refid="structsettings__handler__static_1aa8e57471bd89f4792cfb0689462b6f9b" prot="public" virt="non-virtual"><scope>settings_handler_static</scope><name>name</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
