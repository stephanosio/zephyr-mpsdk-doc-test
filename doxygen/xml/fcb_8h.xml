<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="fcb_8h" kind="file" language="C++">
    <compoundname>fcb.h</compoundname>
    <includes refid="inttypes_8h" local="no">inttypes.h</includes>
    <includes refid="limits_8h" local="no">limits.h</includes>
    <includes refid="flash__map_8h" local="no">storage/flash_map.h</includes>
    <includes local="no">kernel.h</includes>
    <incdepgraph>
      <node id="1">
        <label>include/fs/fcb.h</label>
        <link refid="fcb_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>storage/flash_map.h</label>
        <link refid="flash__map_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="3">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="9">
        <label>sys/_types.h</label>
        <link refid="__types_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>sys/types.h</label>
        <link refid="lib_2libc_2minimal_2include_2sys_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>kernel.h</label>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structfcb__entry" prot="public">fcb_entry</innerclass>
    <innerclass refid="structfcb__entry__ctx" prot="public">fcb_entry_ctx</innerclass>
    <innerclass refid="structfcb" prot="public">fcb</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__fcb__data__structures_1gaccabb1cb7f83c0d8919571cf3de7ee47" prot="public" static="no">
        <name>FCB_MAX_LEN</name>
        <initializer>(<ref refid="limits_8h_1a778eefd6535a9d4b752fca5dd0af58db" kindref="member">CHAR_MAX</ref> | <ref refid="limits_8h_1a778eefd6535a9d4b752fca5dd0af58db" kindref="member">CHAR_MAX</ref> &lt;&lt; 7)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Max length of element </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="37" column="9" bodyfile="include/fs/fcb.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fcb__data__structures_1ga9b47a1aa59039995107c8e23dfacf43f" prot="public" static="no">
        <name>FCB_ENTRY_FA_DATA_OFF</name>
        <param><defname>entry</defname></param>
        <initializer>				      (entry.fe_sector-&gt;fs_off +\
				      entry.fe_data_off)</initializer>
        <briefdescription>
<para>Helper macro for calculating the data offset related to the fcb <ref refid="structflash__area" kindref="compound">flash_area</ref> start offset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>fcb entry structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="67" column="9" bodyfile="include/fs/fcb.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__fcb__api_1gaeed5144438ee00d83c9b3d3b4b7490ea" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* fcb_walk_cb) (struct fcb_entry_ctx *loc_ctx, void *arg)</definition>
        <argsstring>)(struct fcb_entry_ctx *loc_ctx, void *arg)</argsstring>
        <name>fcb_walk_cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>FCB Walk callback function type.</para>
<para>Type of function which is expected to be called while walking over fcb entries thanks to a <ref refid="group__fcb__api_1ga2e22f120b3f1d729f8e861f0c0e448fb" kindref="member">fcb_walk</ref> call.</para>
<para>Entry data can be read using <ref refid="group__flash__area__api_1ga7c55704b0c0061a4715470676114b127" kindref="member">flash_area_read()</ref>, using loc_ctx fields as arguments. If cb wants to stop the walk, it should return non-zero value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">loc_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>entry location information (full context) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">arg</parametername>
</parameternamelist>
<parameterdescription>
<para>callback context, transferred from <ref refid="group__fcb__api_1ga2e22f120b3f1d729f8e861f0c0e448fb" kindref="member">fcb_walk</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 continue walking, non-zero stop walking. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="197" column="9" bodyfile="include/fs/fcb.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__fcb__api_1ga318d35b6f023bb4079aaf76c01a59b96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_init</definition>
        <argsstring>(int f_area_id, struct fcb *fcb)</argsstring>
        <name>fcb_init</name>
        <param>
          <type>int</type>
          <declname>f_area_id</declname>
        </param>
        <param>
          <type>struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize FCB instance.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">f_area_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of flash area where fcb storage resides. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">fcb</parametername>
</parameternamelist>
<parameterdescription>
<para>FCB instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="153" column="5" declfile="include/fs/fcb.h" declline="153" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fcb__api_1ga46a06d5c3bf945ba807b6960a354d744" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_append</definition>
        <argsstring>(struct fcb *fcb, uint16_t len, struct fcb_entry *loc)</argsstring>
        <name>fcb_append</name>
        <param>
          <type>struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>len</declname>
        </param>
        <param>
          <type>struct <ref refid="structfcb__entry" kindref="compound">fcb_entry</ref> *</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends an entry to circular buffer.</para>
<para>When writing the contents for the entry, use loc-&gt;fe_sector and loc-&gt;fe_data_off with <ref refid="group__flash__area__api_1gaa56052f8d6bf4f6966752bc21f5cceb8" kindref="member">flash_area_write()</ref> to fcb <ref refid="structflash__area" kindref="compound">flash_area</ref>. When you&apos;re finished, call <ref refid="group__fcb__api_1ga2d8581e0784546fd73e4cd2f8baeebd9" kindref="member">fcb_append_finish()</ref> with loc as argument.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fcb</parametername>
</parameternamelist>
<parameterdescription>
<para>FCB instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data which are expected to be written as the entry payload. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">loc</parametername>
</parameternamelist>
<parameterdescription>
<para>entry location information</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="170" column="5" declfile="include/fs/fcb.h" declline="170" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fcb__api_1ga2d8581e0784546fd73e4cd2f8baeebd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_append_finish</definition>
        <argsstring>(struct fcb *fcb, struct fcb_entry *append_loc)</argsstring>
        <name>fcb_append_finish</name>
        <param>
          <type>struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type>struct <ref refid="structfcb__entry" kindref="compound">fcb_entry</ref> *</type>
          <declname>append_loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finishes entry append operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fcb</parametername>
</parameternamelist>
<parameterdescription>
<para>FCB instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">append_loc</parametername>
</parameternamelist>
<parameterdescription>
<para>entry location information</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="180" column="5" declfile="include/fs/fcb.h" declline="180" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fcb__api_1ga2e22f120b3f1d729f8e861f0c0e448fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_walk</definition>
        <argsstring>(struct fcb *fcb, struct flash_sector *sector, fcb_walk_cb cb, void *cb_arg)</argsstring>
        <name>fcb_walk</name>
        <param>
          <type>struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type>struct <ref refid="structflash__sector" kindref="compound">flash_sector</ref> *</type>
          <declname>sector</declname>
        </param>
        <param>
          <type><ref refid="group__fcb__api_1gaeed5144438ee00d83c9b3d3b4b7490ea" kindref="member">fcb_walk_cb</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cb_arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Walk over all entries in the FCB sector</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sector</parametername>
</parameternamelist>
<parameterdescription>
<para>fcb sector to be walked. If null, traverse entire storage. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fcb</parametername>
</parameternamelist>
<parameterdescription>
<para>FCB instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cb</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the function which gets called for every entry. If cb wants to stop the walk, it should return non-zero value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">cb_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>callback context, transferred to the callback implementation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative on failure (or transferred form callback return-value), positive transferred form callback return-value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="214" column="5" declfile="include/fs/fcb.h" declline="214" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fcb__api_1gaeeeb1d66ebc6dcefde1e07c3d8bdf4bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_getnext</definition>
        <argsstring>(struct fcb *fcb, struct fcb_entry *loc)</argsstring>
        <name>fcb_getnext</name>
        <param>
          <type>struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type>struct <ref refid="structfcb__entry" kindref="compound">fcb_entry</ref> *</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get next fcb entry location.</para>
<para>Function to obtain fcb entry location in relation to entry pointed by </para>
<para>loc. If loc-&gt;fe_sector is set and loc-&gt;fe_elem_off is not 0 function fetches next fcb entry location. If loc-&gt;fe_sector is NULL function fetches the oldest entry location within FCB storage. loc-&gt;fe_sector is set and loc-&gt;fe_elem_off is 0 function fetches the first entry location in the fcb sector.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fcb</parametername>
</parameternamelist>
<parameterdescription>
<para>FCB instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">loc</parametername>
</parameternamelist>
<parameterdescription>
<para>entry location information</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="233" column="5" declfile="include/fs/fcb.h" declline="233" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fcb__api_1gab749a92fa5890a35996c27f9f2b8f98f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_rotate</definition>
        <argsstring>(struct fcb *fcb)</argsstring>
        <name>fcb_rotate</name>
        <param>
          <type>struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="243" column="5" declfile="include/fs/fcb.h" declline="243" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fcb__api_1gaf26d681ddea9b22d06122184b5a09566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_append_to_scratch</definition>
        <argsstring>(struct fcb *fcb)</argsstring>
        <name>fcb_append_to_scratch</name>
        <param>
          <type>struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="255" column="5" declfile="include/fs/fcb.h" declline="255" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fcb__api_1ga2dec5f90b687466997eb25be43448daa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_free_sector_cnt</definition>
        <argsstring>(struct fcb *fcb)</argsstring>
        <name>fcb_free_sector_cnt</name>
        <param>
          <type>struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get free sector count.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fcb</parametername>
</parameternamelist>
<parameterdescription>
<para>FCB instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of free sectors. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="264" column="5" declfile="include/fs/fcb.h" declline="264" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fcb__api_1ga76d29d337d5e457f065ed897297ba6cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_is_empty</definition>
        <argsstring>(struct fcb *fcb)</argsstring>
        <name>fcb_is_empty</name>
        <param>
          <type>struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether FCB has any data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fcb</parametername>
</parameternamelist>
<parameterdescription>
<para>FCB instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Positive value if fcb is empty, otherwise 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="273" column="5" declfile="include/fs/fcb.h" declline="273" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fcb__api_1gacf4b86d660b7f3a3b73477defd86590c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_offset_last_n</definition>
        <argsstring>(struct fcb *fcb, uint8_t entries, struct fcb_entry *last_n_entry)</argsstring>
        <name>fcb_offset_last_n</name>
        <param>
          <type>struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>entries</declname>
        </param>
        <param>
          <type>struct <ref refid="structfcb__entry" kindref="compound">fcb_entry</ref> *</type>
          <declname>last_n_entry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds the fcb entry that gives back up to n entries at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fcb</parametername>
</parameternamelist>
<parameterdescription>
<para>FCB instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">entries</parametername>
</parameternamelist>
<parameterdescription>
<para>number of fcb entries the user wants to get </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">last_n_entry</parametername>
</parameternamelist>
<parameterdescription>
<para>last_n_entry the <ref refid="structfcb__entry" kindref="compound">fcb_entry</ref> to be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on there are any fcbs available; -ENOENT otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="284" column="5" declfile="include/fs/fcb.h" declline="284" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fcb__api_1gab3d5c09980af72f0de1692682c8dfef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_clear</definition>
        <argsstring>(struct fcb *fcb)</argsstring>
        <name>fcb_clear</name>
        <param>
          <type>struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear fcb instance storage.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fcb</parametername>
</parameternamelist>
<parameterdescription>
<para>FCB instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success; non-zero on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="294" column="5" declfile="include/fs/fcb.h" declline="294" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fcb__internall_1ga85e3a7fcd92a029b16f7aebdfd7fd546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_flash_read</definition>
        <argsstring>(const struct fcb *fcb, const struct flash_sector *sector, off_t off, void *dst, size_t len)</argsstring>
        <name>fcb_flash_read</name>
        <param>
          <type>const struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type>const struct <ref refid="structflash__sector" kindref="compound">flash_sector</ref> *</type>
          <declname>sector</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>off</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read raw data from the fcb flash sector.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fcb</parametername>
</parameternamelist>
<parameterdescription>
<para>FCB instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sector</parametername>
</parameternamelist>
<parameterdescription>
<para>FCB sector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">off</parametername>
</parameternamelist>
<parameterdescription>
<para>Read offset form sector begin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Read-out size.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="318" column="5" declfile="include/fs/fcb.h" declline="318" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fcb__internall_1ga181d43e24799940105185fef9436ce8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_flash_write</definition>
        <argsstring>(const struct fcb *fcb, const struct flash_sector *sector, off_t off, const void *src, size_t len)</argsstring>
        <name>fcb_flash_write</name>
        <param>
          <type>const struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type>const struct <ref refid="structflash__sector" kindref="compound">flash_sector</ref> *</type>
          <declname>sector</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>off</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write raw data to the fcb flash sector.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fcb</parametername>
</parameternamelist>
<parameterdescription>
<para>FCB instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sector</parametername>
</parameternamelist>
<parameterdescription>
<para>FCB sector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">off</parametername>
</parameternamelist>
<parameterdescription>
<para>Write offset form sector begin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Read-out size.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="332" column="5" declfile="include/fs/fcb.h" declline="332" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017-2020<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>Runtime<sp/>Inc</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_FS_FCB_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_FS_FCB_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Flash<sp/>circular<sp/>buffer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="inttypes_8h" kindref="compound">inttypes.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="limits_8h" kindref="compound">limits.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="flash__map_8h" kindref="compound">storage/flash_map.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="group__fcb__data__structures_1gaccabb1cb7f83c0d8919571cf3de7ee47" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FCB_MAX_LEN<sp/><sp/><sp/><sp/><sp/>(CHAR_MAX<sp/>|<sp/>CHAR_MAX<sp/>&lt;&lt;<sp/>7)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="structfcb__entry" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfcb__entry" kindref="compound">fcb_entry</ref><sp/>{</highlight></codeline>
<codeline lineno="49" refid="structfcb__entry_1aa564f9f79012beb20265bc5e85816fea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__sector" kindref="compound">flash_sector</ref><sp/>*<ref refid="structfcb__entry_1aa564f9f79012beb20265bc5e85816fea" kindref="member">fe_sector</ref>;</highlight></codeline>
<codeline lineno="52" refid="structfcb__entry_1a6d01cb2107949bf4f0a2779c9781261f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structfcb__entry_1a6d01cb2107949bf4f0a2779c9781261f" kindref="member">fe_elem_off</ref>;</highlight></codeline>
<codeline lineno="55" refid="structfcb__entry_1a82cba5933875498c804f31722a6e90f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structfcb__entry_1a82cba5933875498c804f31722a6e90f9" kindref="member">fe_data_off</ref>;</highlight></codeline>
<codeline lineno="58" refid="structfcb__entry_1aa207d21d51bc2c7aa838ca9dc3b52be7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structfcb__entry_1aa207d21d51bc2c7aa838ca9dc3b52be7" kindref="member">fe_data_len</ref>;<sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="group__fcb__data__structures_1ga9b47a1aa59039995107c8e23dfacf43f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FCB_ENTRY_FA_DATA_OFF(entry)<sp/>(entry.fe_sector-&gt;fs_off<sp/>+\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entry.fe_data_off)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="structfcb__entry__ctx" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfcb__entry__ctx" kindref="compound">fcb_entry_ctx</ref><sp/>{</highlight></codeline>
<codeline lineno="74" refid="structfcb__entry__ctx_1a0da5217647b82c8799a6cde221253680" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfcb__entry" kindref="compound">fcb_entry</ref><sp/><ref refid="structfcb__entry__ctx_1a0da5217647b82c8799a6cde221253680" kindref="member">loc</ref>;<sp/></highlight></codeline>
<codeline lineno="75" refid="structfcb__entry__ctx_1a8b491cd670e609c2b4d897d15e37eb2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__area" kindref="compound">flash_area</ref><sp/>*<ref refid="structfcb__entry__ctx_1a8b491cd670e609c2b4d897d15e37eb2b" kindref="member">fap</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="structfcb" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfcb" kindref="compound">fcb</ref><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Caller<sp/>of<sp/>fcb_init<sp/>fills<sp/>this<sp/>in<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="structfcb_1a4206faa9ed633ba2315163c52e557397" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structfcb_1a4206faa9ed633ba2315163c52e557397" kindref="member">f_magic</ref>;</highlight></codeline>
<codeline lineno="97" refid="structfcb_1a030b96abd6c857295f154197278cca69" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structfcb_1a030b96abd6c857295f154197278cca69" kindref="member">f_version</ref>;<sp/></highlight></codeline>
<codeline lineno="98" refid="structfcb_1aa642058028d755c7bc5b6814a4cb8c16" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structfcb_1aa642058028d755c7bc5b6814a4cb8c16" kindref="member">f_sector_cnt</ref>;<sp/></highlight></codeline>
<codeline lineno="99" refid="structfcb_1aab748de6989e30de6571fc94d66ee365" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structfcb_1aab748de6989e30de6571fc94d66ee365" kindref="member">f_scratch_cnt</ref>;</highlight></codeline>
<codeline lineno="104" refid="structfcb_1afc96f045d541c8d141d3427884f1fb44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__sector" kindref="compound">flash_sector</ref><sp/>*<ref refid="structfcb_1afc96f045d541c8d141d3427884f1fb44" kindref="member">f_sectors</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Flash<sp/>circular<sp/>buffer<sp/>internal<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="structfcb_1a1f30c78d7e02748fbf0bf5033d4bdadf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mutex" kindref="compound">k_mutex</ref><sp/><ref refid="structfcb_1a1f30c78d7e02748fbf0bf5033d4bdadf" kindref="member">f_mtx</ref>;</highlight></codeline>
<codeline lineno="111" refid="structfcb_1ac6dc6236f8b03e4b03f691c55b4d3327" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__sector" kindref="compound">flash_sector</ref><sp/>*<ref refid="structfcb_1ac6dc6236f8b03e4b03f691c55b4d3327" kindref="member">f_oldest</ref>;</highlight></codeline>
<codeline lineno="116" refid="structfcb_1a1f7922dc1e8076bcfffca117260d5e02" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfcb__entry" kindref="compound">fcb_entry</ref><sp/><ref refid="structfcb_1a1f7922dc1e8076bcfffca117260d5e02" kindref="member">f_active</ref>;<sp/></highlight></codeline>
<codeline lineno="117" refid="structfcb_1a8da1d0b4bef7d9ddcd5922d9bbef0cef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structfcb_1a8da1d0b4bef7d9ddcd5922d9bbef0cef" kindref="member">f_active_id</ref>;</highlight></codeline>
<codeline lineno="120" refid="structfcb_1aa745e88d4477408b40a759dd1baea637" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structfcb_1aa745e88d4477408b40a759dd1baea637" kindref="member">f_align</ref>;</highlight></codeline>
<codeline lineno="123" refid="structfcb_1a16cfc82afc8abe70291f4b462e617f2f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__area" kindref="compound">flash_area</ref><sp/>*<ref refid="structfcb_1a16cfc82afc8abe70291f4b462e617f2f" kindref="member">fap</ref>;</highlight></codeline>
<codeline lineno="128" refid="structfcb_1a614c6441395637c6c0a17a4fd6107db3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structfcb_1a614c6441395637c6c0a17a4fd6107db3" kindref="member">f_erase_value</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="group__fcb__api_1ga318d35b6f023bb4079aaf76c01a59b96" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__fcb__api_1ga318d35b6f023bb4079aaf76c01a59b96" kindref="member">fcb_init</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f_area_id,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfcb" kindref="compound">fcb</ref><sp/>*<ref refid="structfcb" kindref="compound">fcb</ref>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="group__fcb__api_1ga46a06d5c3bf945ba807b6960a354d744" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__fcb__api_1ga46a06d5c3bf945ba807b6960a354d744" kindref="member">fcb_append</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfcb" kindref="compound">fcb</ref><sp/>*<ref refid="structfcb" kindref="compound">fcb</ref>,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>len,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfcb__entry" kindref="compound">fcb_entry</ref><sp/>*loc);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="group__fcb__api_1ga2d8581e0784546fd73e4cd2f8baeebd9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__fcb__api_1ga2d8581e0784546fd73e4cd2f8baeebd9" kindref="member">fcb_append_finish</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfcb" kindref="compound">fcb</ref><sp/>*<ref refid="structfcb" kindref="compound">fcb</ref>,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfcb__entry" kindref="compound">fcb_entry</ref><sp/>*append_loc);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="group__fcb__api_1gaeed5144438ee00d83c9b3d3b4b7490ea" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__fcb__api_1gaeed5144438ee00d83c9b3d3b4b7490ea" kindref="member">fcb_walk_cb</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfcb__entry__ctx" kindref="compound">fcb_entry_ctx</ref><sp/>*loc_ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="group__fcb__api_1ga2e22f120b3f1d729f8e861f0c0e448fb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__fcb__api_1ga2e22f120b3f1d729f8e861f0c0e448fb" kindref="member">fcb_walk</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfcb" kindref="compound">fcb</ref><sp/>*<ref refid="structfcb" kindref="compound">fcb</ref>,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structflash__sector" kindref="compound">flash_sector</ref><sp/>*sector,<sp/><ref refid="group__fcb__api_1gaeed5144438ee00d83c9b3d3b4b7490ea" kindref="member">fcb_walk_cb</ref><sp/>cb,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cb_arg);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="group__fcb__api_1gaeeeb1d66ebc6dcefde1e07c3d8bdf4bc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__fcb__api_1gaeeeb1d66ebc6dcefde1e07c3d8bdf4bc" kindref="member">fcb_getnext</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfcb" kindref="compound">fcb</ref><sp/>*<ref refid="structfcb" kindref="compound">fcb</ref>,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfcb__entry" kindref="compound">fcb_entry</ref><sp/>*<ref refid="structfcb__entry__ctx_1a0da5217647b82c8799a6cde221253680" kindref="member">loc</ref>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>Rotate<sp/>fcb<sp/>sectors</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>Function<sp/>erases<sp/>the<sp/>data<sp/>from<sp/>oldest<sp/>sector.<sp/>Upon<sp/>that<sp/>the<sp/>next<sp/>sector</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/>becomes<sp/>the<sp/>oldest.<sp/>Active<sp/>sector<sp/>is<sp/>also<sp/>switched<sp/>if<sp/>needed.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>fcb<sp/>FCB<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243" refid="group__fcb__api_1gab749a92fa5890a35996c27f9f2b8f98f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__fcb__api_1gab749a92fa5890a35996c27f9f2b8f98f" kindref="member">fcb_rotate</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfcb" kindref="compound">fcb</ref><sp/>*<ref refid="structfcb" kindref="compound">fcb</ref>);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*<sp/>Start<sp/>using<sp/>the<sp/>scratch<sp/>block.</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/>Take<sp/>one<sp/>of<sp/>the<sp/>scratch<sp/>blocks<sp/>into<sp/>use.<sp/>So<sp/>a<sp/>scratch<sp/>sector<sp/>becomes</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/>active<sp/>sector<sp/>to<sp/>which<sp/>entries<sp/>can<sp/>be<sp/>appended.</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>fcb<sp/>FCB<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/>@return<sp/>0<sp/>on<sp/>success,<sp/>non-zero<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="group__fcb__api_1gaf26d681ddea9b22d06122184b5a09566" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__fcb__api_1gaf26d681ddea9b22d06122184b5a09566" kindref="member">fcb_append_to_scratch</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfcb" kindref="compound">fcb</ref><sp/>*<ref refid="structfcb" kindref="compound">fcb</ref>);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="group__fcb__api_1ga2dec5f90b687466997eb25be43448daa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__fcb__api_1ga2dec5f90b687466997eb25be43448daa" kindref="member">fcb_free_sector_cnt</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfcb" kindref="compound">fcb</ref><sp/>*<ref refid="structfcb" kindref="compound">fcb</ref>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="group__fcb__api_1ga76d29d337d5e457f065ed897297ba6cb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__fcb__api_1ga76d29d337d5e457f065ed897297ba6cb" kindref="member">fcb_is_empty</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfcb" kindref="compound">fcb</ref><sp/>*<ref refid="structfcb" kindref="compound">fcb</ref>);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="group__fcb__api_1gacf4b86d660b7f3a3b73477defd86590c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__fcb__api_1gacf4b86d660b7f3a3b73477defd86590c" kindref="member">fcb_offset_last_n</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfcb" kindref="compound">fcb</ref><sp/>*<ref refid="structfcb" kindref="compound">fcb</ref>,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>entries,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfcb__entry" kindref="compound">fcb_entry</ref><sp/>*last_n_entry);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="294" refid="group__fcb__api_1gab3d5c09980af72f0de1692682c8dfef1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__fcb__api_1gab3d5c09980af72f0de1692682c8dfef1" kindref="member">fcb_clear</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfcb" kindref="compound">fcb</ref><sp/>*<ref refid="structfcb" kindref="compound">fcb</ref>);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="group__fcb__internall_1ga85e3a7fcd92a029b16f7aebdfd7fd546" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__fcb__internall_1ga85e3a7fcd92a029b16f7aebdfd7fd546" kindref="member">fcb_flash_read</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfcb" kindref="compound">fcb</ref><sp/>*<ref refid="structfcb" kindref="compound">fcb</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structflash__sector" kindref="compound">flash_sector</ref><sp/>*sector,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>off_t<sp/><ref refid="asm-macro-32-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="group__fcb__internall_1ga181d43e24799940105185fef9436ce8d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__fcb__internall_1ga181d43e24799940105185fef9436ce8d" kindref="member">fcb_flash_write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfcb" kindref="compound">fcb</ref><sp/>*<ref refid="structfcb" kindref="compound">fcb</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structflash__sector" kindref="compound">flash_sector</ref><sp/>*sector,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>off_t<sp/><ref refid="asm-macro-32-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_FS_FCB_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/fs/fcb.h"/>
  </compounddef>
</doxygen>
