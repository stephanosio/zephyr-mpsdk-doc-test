<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="multi__heap_8h" kind="file" language="C++">
    <compoundname>multi_heap.h</compoundname>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includedby refid="test__mheap__api_8c" local="no">tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/sys/multi_heap.h</label>
        <link refid="multi__heap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>include/sys/multi_heap.h</label>
        <link refid="multi__heap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c</label>
        <link refid="test__mheap__api_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structsys__multi__heap" prot="public">sys_multi_heap</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="multi__heap_8h_1a4baed7cc76ab2037f126508a48bf4b09" prot="public" static="no">
        <name>MAX_MULTI_HEAPS</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/multi_heap.h" line="10" column="9" bodyfile="include/sys/multi_heap.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="multi__heap_8h_1a2d8ac07e590ef36ba6f35ae88235564e" prot="public" static="no">
        <type>void *(*</type>
        <definition>typedef void *(* sys_multi_heap_fn_t) (struct sys_multi_heap *mheap, void *cfg, size_t align, size_t size)</definition>
        <argsstring>)(struct sys_multi_heap *mheap, void *cfg, size_t align, size_t size)</argsstring>
        <name>sys_multi_heap_fn_t</name>
        <briefdescription>
<para>Multi-heap choice function. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a user-provided functions whose responsibility is selecting a specific <ref refid="structsys__heap" kindref="compound">sys_heap</ref> backend based on the opaque cfg value, which is specified by the user as an argument to <ref refid="multi__heap_8h_1a050d7499b982ed62f85d5fc15f79548b" kindref="member">sys_multi_heap_alloc()</ref>, and performing the allocation on behalf of the caller. The callback is free to choose any registered heap backend to perform the allocation, and may choose to pad the user-provided values as needed, and to use an aligned allocation where required by the specified configuration.</para>
<para>NULL may be returned, which will cause the allocation to fail and a NULL reported to the calling code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mheap</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi-heap structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>An opaque user-provided value. It may be interpreted in any way by the application </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of requested memory (or zero for no alignment) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The user-specified allocation size in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the allocated memory </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/multi_heap.h" line="51" column="9" bodyfile="include/sys/multi_heap.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="multi__heap_8h_1a50ded513b50c7aed7d89386bb8f425cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sys_multi_heap_init</definition>
        <argsstring>(struct sys_multi_heap *heap, sys_multi_heap_fn_t choice_fn)</argsstring>
        <name>sys_multi_heap_init</name>
        <param>
          <type>struct <ref refid="structsys__multi__heap" kindref="compound">sys_multi_heap</ref> *</type>
          <declname>heap</declname>
        </param>
        <param>
          <type><ref refid="multi__heap_8h_1a2d8ac07e590ef36ba6f35ae88235564e" kindref="member">sys_multi_heap_fn_t</ref></type>
          <declname>choice_fn</declname>
        </param>
        <briefdescription>
<para>Initialize multi-heap. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize a <ref refid="structsys__multi__heap" kindref="compound">sys_multi_heap</ref> struct with the specified choice function. Note that individual heaps must be added later with sys_multi_heap_add_heap so that the heap bounds can be tracked by the multi heap code.</para>
<para><simplesect kind="note"><para>In general a multiheap is likely to be instantiated semi-statically from system configuration (for example, via linker-provided bounds on available memory in different regions, or from devicetree definitions of hardware-provided addressible memory, etc...). The general expectation is that a soc- or board-level platform device will be initialized at system boot from these upstream configuration sources and not that an application will assemble a multi-heap on its own.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heap</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="structsys__multi__heap" kindref="compound">sys_multi_heap</ref> to initialize </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>choice_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>A sys_multi_heap_fn_t callback used to select heaps at allocation time </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/multi_heap.h" line="81" column="6" declfile="include/sys/multi_heap.h" declline="81" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="multi__heap_8h_1a815e36620517f9efb938202309748bc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sys_multi_heap_add_heap</definition>
        <argsstring>(struct sys_multi_heap *mheap, struct sys_heap *heap)</argsstring>
        <name>sys_multi_heap_add_heap</name>
        <param>
          <type>struct <ref refid="structsys__multi__heap" kindref="compound">sys_multi_heap</ref> *</type>
          <declname>mheap</declname>
        </param>
        <param>
          <type>struct <ref refid="structsys__heap" kindref="compound">sys_heap</ref> *</type>
          <declname>heap</declname>
        </param>
        <briefdescription>
<para>Add <ref refid="structsys__heap" kindref="compound">sys_heap</ref> to multi heap. </para>
        </briefdescription>
        <detaileddescription>
<para>This adds a known <ref refid="structsys__heap" kindref="compound">sys_heap</ref> backend to an existing multi heap, allowing the multi heap internals to track the bounds of the heap and determine which heap (if any) from which a freed block was allocated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mheap</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="structsys__multi__heap" kindref="compound">sys_multi_heap</ref> to which to add a heap </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>heap</parametername>
</parameternamelist>
<parameterdescription>
<para>The heap to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/multi_heap.h" line="95" column="6" declfile="include/sys/multi_heap.h" declline="95" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="multi__heap_8h_1a050d7499b982ed62f85d5fc15f79548b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * sys_multi_heap_alloc</definition>
        <argsstring>(struct sys_multi_heap *mheap, void *cfg, size_t bytes)</argsstring>
        <name>sys_multi_heap_alloc</name>
        <param>
          <type>struct <ref refid="structsys__multi__heap" kindref="compound">sys_multi_heap</ref> *</type>
          <declname>mheap</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Allocate memory from multi heap. </para>
        </briefdescription>
        <detaileddescription>
<para>Just as for <ref refid="sys__heap_8h_1a6b8bdf02c9be5576fddbe711904a3aad" kindref="member">sys_heap_alloc()</ref>, allocates a block of memory of the specified size in bytes. Takes an opaque configuration pointer passed to the multi heap choice function, which is used by integration code to choose a heap backend.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mheap</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi heap pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque configuration parameter, as for sys_multi_heap_fn_t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested size of the allocation, in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A valid pointer to heap memory, or NULL if no memory is available </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/multi_heap.h" line="110" column="6" declfile="include/sys/multi_heap.h" declline="110" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="multi__heap_8h_1a9f958dbfa86e12236b8e356375b8d04c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * sys_multi_heap_aligned_alloc</definition>
        <argsstring>(struct sys_multi_heap *mheap, void *cfg, size_t align, size_t bytes)</argsstring>
        <name>sys_multi_heap_aligned_alloc</name>
        <param>
          <type>struct <ref refid="structsys__multi__heap" kindref="compound">sys_multi_heap</ref> *</type>
          <declname>mheap</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>align</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Allocate aligned memory from multi heap. </para>
        </briefdescription>
        <detaileddescription>
<para>Just as for <ref refid="multi__heap_8h_1a050d7499b982ed62f85d5fc15f79548b" kindref="member">sys_multi_heap_alloc()</ref>, allocates a block of memory of the specified size in bytes. Takes an additional parameter specifying a power of two alignment, in bytes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mheap</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi heap pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque configuration parameter, as for sys_multi_heap_fn_t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Power of two alignment for the returned pointer, in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested size of the allocation, in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A valid pointer to heap memory, or NULL if no memory is available </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/multi_heap.h" line="125" column="6" declfile="include/sys/multi_heap.h" declline="125" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="multi__heap_8h_1ac6f913a3bbf247807ba80408a242db73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sys_multi_heap_free</definition>
        <argsstring>(struct sys_multi_heap *mheap, void *block)</argsstring>
        <name>sys_multi_heap_free</name>
        <param>
          <type>struct <ref refid="structsys__multi__heap" kindref="compound">sys_multi_heap</ref> *</type>
          <declname>mheap</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
<para>Free memory allocated from multi heap. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the specified block, which must be the return value of a previously successful <ref refid="multi__heap_8h_1a050d7499b982ed62f85d5fc15f79548b" kindref="member">sys_multi_heap_alloc()</ref> or <ref refid="multi__heap_8h_1a9f958dbfa86e12236b8e356375b8d04c" kindref="member">sys_multi_heap_aligned_alloc()</ref> call, to the heap backend from which it was allocated.</para>
<para>Accepts NULL as a block parameter, which is specified to have no effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mheap</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi heap pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>Block to free </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/multi_heap.h" line="142" column="6" declfile="include/sys/multi_heap.h" declline="142" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Copyright<sp/>(c)<sp/>2021<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_SYS_MULTI_HEAP_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_SYS_MULTI_HEAP_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="multi__heap_8h_1a4baed7cc76ab2037f126508a48bf4b09" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_MULTI_HEAPS<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsys__multi__heap" kindref="compound">sys_multi_heap</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="multi__heap_8h_1a2d8ac07e590ef36ba6f35ae88235564e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*sys_multi_heap_fn_t)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsys__multi__heap" kindref="compound">sys_multi_heap</ref><sp/>*mheap,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cfg,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>align,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="structsys__multi__heap" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsys__multi__heap" kindref="compound">sys_multi_heap</ref><sp/>{</highlight></codeline>
<codeline lineno="55" refid="structsys__multi__heap_1a46aeb768c8fcc5ba1d3c1925cbdd3a52" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsys__multi__heap_1a46aeb768c8fcc5ba1d3c1925cbdd3a52" kindref="member">nheaps</ref>;</highlight></codeline>
<codeline lineno="56" refid="structsys__multi__heap_1a01dd6ce40b1ab9c84c034475e70a4fa6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="multi__heap_8h_1a2d8ac07e590ef36ba6f35ae88235564e" kindref="member">sys_multi_heap_fn_t</ref><sp/><ref refid="structsys__multi__heap_1a01dd6ce40b1ab9c84c034475e70a4fa6" kindref="member">choice</ref>;</highlight></codeline>
<codeline lineno="57" refid="structsys__multi__heap_1a334ccc6dbfbf9c01258348cbc205f82c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsys__heap" kindref="compound">sys_heap</ref><sp/>*<ref refid="structsys__multi__heap_1a334ccc6dbfbf9c01258348cbc205f82c" kindref="member">heaps</ref>[<ref refid="multi__heap_8h_1a4baed7cc76ab2037f126508a48bf4b09" kindref="member">MAX_MULTI_HEAPS</ref>];</highlight></codeline>
<codeline lineno="58"><highlight class="normal">};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="multi__heap_8h_1a50ded513b50c7aed7d89386bb8f425cc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="multi__heap_8h_1a50ded513b50c7aed7d89386bb8f425cc" kindref="member">sys_multi_heap_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsys__multi__heap" kindref="compound">sys_multi_heap</ref><sp/>*<ref refid="structsys__heap_1ac67ddabc4097bebe6fcd2068fd8cd5d9" kindref="member">heap</ref>,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="multi__heap_8h_1a2d8ac07e590ef36ba6f35ae88235564e" kindref="member">sys_multi_heap_fn_t</ref><sp/>choice_fn);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="multi__heap_8h_1a815e36620517f9efb938202309748bc1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="multi__heap_8h_1a815e36620517f9efb938202309748bc1" kindref="member">sys_multi_heap_add_heap</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsys__multi__heap" kindref="compound">sys_multi_heap</ref><sp/>*mheap,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsys__heap" kindref="compound">sys_heap</ref><sp/>*<ref refid="structsys__heap_1ac67ddabc4097bebe6fcd2068fd8cd5d9" kindref="member">heap</ref>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="multi__heap_8h_1a050d7499b982ed62f85d5fc15f79548b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="multi__heap_8h_1a050d7499b982ed62f85d5fc15f79548b" kindref="member">sys_multi_heap_alloc</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsys__multi__heap" kindref="compound">sys_multi_heap</ref><sp/>*mheap,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cfg,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="multi__heap_8h_1a9f958dbfa86e12236b8e356375b8d04c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="multi__heap_8h_1a9f958dbfa86e12236b8e356375b8d04c" kindref="member">sys_multi_heap_aligned_alloc</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsys__multi__heap" kindref="compound">sys_multi_heap</ref><sp/>*mheap,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cfg,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>align,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="multi__heap_8h_1ac6f913a3bbf247807ba80408a242db73" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="multi__heap_8h_1ac6f913a3bbf247807ba80408a242db73" kindref="member">sys_multi_heap_free</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsys__multi__heap" kindref="compound">sys_multi_heap</ref><sp/>*mheap,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__threads__cancel__abort_8c_1ad9dc995b581e61d5b3a7f92a0a600526" kindref="member">block</ref>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_SYS_MULTI_HEAP_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/sys/multi_heap.h"/>
  </compounddef>
</doxygen>
