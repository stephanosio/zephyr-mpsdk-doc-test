<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="device_2src_2main_8c" kind="file" language="C++">
    <compoundname>main.c</compoundname>
    <includes local="no">zephyr.h</includes>
    <includes local="no">device.h</includes>
    <includes refid="init_8h" local="no">init.h</includes>
    <includes refid="ztest_8h" local="no">ztest.h</includes>
    <includes refid="printk_8h" local="no">sys/printk.h</includes>
    <includes refid="sections_8h" local="no">linker/sections.h</includes>
    <includes refid="abstract__driver_8h" local="yes">abstract_driver.h</includes>
    <incdepgraph>
      <node id="72">
        <label>app_memory/app_memdomain.h</label>
        <link refid="app__memdomain_8h"/>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>app_memory/mem_domain.h</label>
        <link refid="mem__domain_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>arch/arch_inlines.h</label>
        <link refid="arch__inlines_8h"/>
      </node>
      <node id="41">
        <label>arch/cpu.h</label>
        <link refid="include_2arch_2cpu_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>arch/structs.h</label>
        <link refid="structs_8h"/>
      </node>
      <node id="40">
        <label>arch/syscall.h</label>
        <link refid="arch_2syscall_8h"/>
      </node>
      <node id="77">
        <label>devicetree.h</label>
        <link refid="devicetree_8h"/>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>devicetree/clocks.h</label>
        <link refid="clocks_8h"/>
      </node>
      <node id="84">
        <label>devicetree/dma.h</label>
        <link refid="devicetree_2dma_8h"/>
      </node>
      <node id="86">
        <label>devicetree/fixed-partitions.h</label>
        <link refid="fixed-partitions_8h"/>
      </node>
      <node id="82">
        <label>devicetree/gpio.h</label>
        <link refid="devicetree_2gpio_8h"/>
      </node>
      <node id="80">
        <label>devicetree/io-channels.h</label>
        <link refid="io-channels_8h"/>
      </node>
      <node id="88">
        <label>devicetree/ordinals.h</label>
        <link refid="ordinals_8h"/>
      </node>
      <node id="89">
        <label>devicetree/pinctrl.h</label>
        <link refid="devicetree_2pinctrl_8h"/>
      </node>
      <node id="85">
        <label>devicetree/pwms.h</label>
        <link refid="pwms_8h"/>
      </node>
      <node id="83">
        <label>devicetree/spi.h</label>
        <link refid="devicetree_2spi_8h"/>
      </node>
      <node id="87">
        <label>devicetree/zephyr.h</label>
        <link refid="devicetree_2zephyr_8h"/>
      </node>
      <node id="50">
        <label>fatal.h</label>
        <link refid="fatal_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>init.h</label>
        <link refid="init_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>irq_offload.h</label>
        <link refid="irq__offload_8h"/>
      </node>
      <node id="6">
        <label>kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>kernel/mempool_heap.h</label>
        <link refid="mempool__heap_8h"/>
      </node>
      <node id="24">
        <label>kernel/sched_priq.h</label>
        <link refid="sched__priq_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>kernel/stats.h</label>
        <link refid="kernel_2stats_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>kernel/thread.h</label>
        <link refid="kernel_2thread_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>kernel/thread_stack.h</label>
        <link refid="kernel_2thread__stack_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>kernel_includes.h</label>
        <link refid="kernel__includes_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>kernel_structs.h</label>
        <link refid="kernel__structs_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>kernel_version.h</label>
        <link refid="kernel__version_8h"/>
      </node>
      <node id="76">
        <label>linker/devicetree_reserved.h</label>
        <link refid="devicetree__reserved_8h"/>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>linker/linker-defs.h</label>
        <link refid="linker-defs_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>linker/section_tags.h</label>
        <link refid="section__tags_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>linker/sections.h</label>
        <link refid="sections_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>sys/arch_interface.h</label>
        <link refid="arch__interface_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="26">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>sys/kobject.h</label>
        <link refid="include_2sys_2kobject_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>sys/rb.h</label>
        <link refid="rb_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>sys/sflist.h</label>
        <link refid="sflist_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>sys/sys_heap.h</label>
        <link refid="sys__heap_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>sys/time_units.h</label>
        <link refid="time__units_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="16">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>sys_clock.h</label>
        <link refid="include_2sys__clock_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>timing/types.h</label>
        <link refid="include_2timing_2types_8h"/>
      </node>
      <node id="5">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="74">
        <label>toolchain/common.h</label>
        <link refid="common_8h"/>
      </node>
      <node id="61">
        <label>tracing/tracing.h</label>
        <link refid="tracing_2tracing_8h"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>tracing/tracing_macros.h</label>
        <link refid="tracing__macros_8h"/>
      </node>
      <node id="63">
        <label>tracking.h</label>
        <link refid="tracking_8h"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="15">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="10">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="67">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>offsets.h</label>
        <link refid="offsets_8h"/>
      </node>
      <node id="39">
        <label>syscall_list.h</label>
        <link refid="syscall__list_8h"/>
      </node>
      <node id="64">
        <label>syscalls/kernel.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kernel_8h"/>
      </node>
      <node id="56">
        <label>syscalls/kobject.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kobject_8h"/>
      </node>
      <node id="65">
        <label>ztest.h</label>
        <link refid="ztest_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>ztest_assert.h</label>
        <link refid="ztest__assert_8h"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>ztest_mock.h</label>
        <link refid="ztest__mock_8h"/>
      </node>
      <node id="70">
        <label>ztest_test.h</label>
        <link refid="ztest__test_8h"/>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>ztest_test_deprecated.h</label>
        <link refid="ztest__test__deprecated_8h"/>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>abstract_driver.h</label>
        <link refid="abstract__driver_8h"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/kernel/device/src/main.c</label>
        <link refid="device_2src_2main_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>alloca.h</label>
      </node>
      <node id="43">
        <label>arch/cpu.h</label>
      </node>
      <node id="3">
        <label>device.h</label>
      </node>
      <node id="79">
        <label>devicetree_fixups.h</label>
      </node>
      <node id="78">
        <label>devicetree_unfixed.h</label>
      </node>
      <node id="62">
        <label>kernel.h</label>
      </node>
      <node id="22">
        <label>stdarg.h</label>
      </node>
      <node id="8">
        <label>stddef.h</label>
      </node>
      <node id="59">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="90">
        <label>syscalls/ztest_test.h</label>
      </node>
      <node id="91">
        <label>tc_util.h</label>
      </node>
      <node id="2">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structinit__record" prot="public">init_record</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="device_2src_2main_8c_1a01c7635621dcf5eb3800be752141afbc" prot="public" static="no">
        <name>DUMMY_PORT_1</name>
        <initializer>&quot;dummy&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="16" column="9" bodyfile="tests/kernel/device/src/main.c" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="device_2src_2main_8c_1a443d48342bc0829ee72a968e06749c3c" prot="public" static="no">
        <name>DUMMY_PORT_2</name>
        <initializer>&quot;dummy_driver&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="17" column="9" bodyfile="tests/kernel/device/src/main.c" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="device_2src_2main_8c_1abd09fd364e497037b3fb8be04eacd79e" prot="public" static="no">
        <name>BAD_DRIVER</name>
        <initializer>&quot;bad_driver&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="18" column="9" bodyfile="tests/kernel/device/src/main.c" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="device_2src_2main_8c_1ab3ecbe46a89185de4512e7247c0c56c9" prot="public" static="no">
        <name>MY_DRIVER_A</name>
        <initializer>&quot;my_driver_A&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="20" column="9" bodyfile="tests/kernel/device/src/main.c" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="device_2src_2main_8c_1aa4b601a31bc1f74fc83c5b98d57d03ab" prot="public" static="no">
        <name>MY_DRIVER_B</name>
        <initializer>&quot;my_driver_B&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="21" column="9" bodyfile="tests/kernel/device/src/main.c" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__kernel__device__tests_1ga9e2c37b52a183b55c1ee873be2c83ea5" prot="public" static="yes" mutable="no">
        <type>__pinned_bss struct <ref refid="structinit__record" kindref="compound">init_record</ref></type>
        <definition>__pinned_bss struct init_record init_records[4]</definition>
        <argsstring>[4]</argsstring>
        <name>init_records</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="138" column="17"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" prot="public" static="yes" mutable="no">
        <type>__pinned_data struct <ref refid="structinit__record" kindref="compound">init_record</ref> *</type>
        <definition>__pinned_data struct init_record* rp</definition>
        <argsstring></argsstring>
        <name>rp</name>
        <initializer>= <ref refid="group__kernel__device__tests_1ga9e2c37b52a183b55c1ee873be2c83ea5" kindref="member">init_records</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="141" column="25" bodyfile="tests/kernel/device/src/main.c" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__device__tests_1ga136bab9f635b6048ac430e2805a55d5a" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int init_level_sequence[4]</definition>
        <argsstring>[4]</argsstring>
        <name>init_level_sequence</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="239" column="12" bodyfile="tests/kernel/device/src/test_driver_init.c" bodystart="40" bodyend="-1" declfile="tests/kernel/device/src/main.c" declline="239" declcolumn="12"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__device__tests_1ga1dc16f84875ddcbf5ffad01574a63d42" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int init_priority_sequence[4]</definition>
        <argsstring>[4]</argsstring>
        <name>init_priority_sequence</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="240" column="12" bodyfile="tests/kernel/device/src/test_driver_init.c" bodystart="41" bodyend="-1" declfile="tests/kernel/device/src/main.c" declline="240" declcolumn="12"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__device__tests_1ga7a2ba21995dfb9e6ef66122b43f2379f" prot="public" static="no" mutable="no">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
        <definition>unsigned int seq_level_cnt</definition>
        <argsstring></argsstring>
        <name>seq_level_cnt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="241" column="21" bodyfile="tests/kernel/device/src/test_driver_init.c" bodystart="42" bodyend="-1" declfile="tests/kernel/device/src/main.c" declline="241" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__device__tests_1gae0710c0c64b4797aed7bd53459e70d81" prot="public" static="no" mutable="no">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
        <definition>unsigned int seq_priority_cnt</definition>
        <argsstring></argsstring>
        <name>seq_priority_cnt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="242" column="21" bodyfile="tests/kernel/device/src/test_driver_init.c" bodystart="43" bodyend="-1" declfile="tests/kernel/device/src/main.c" declline="242" declcolumn="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__kernel__device__tests_1ga7cef29bf76d36c28ebed39fe0553bbff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mmio_multiple</definition>
        <argsstring>(void)</argsstring>
        <name>test_mmio_multiple</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test DEVICE_MMIO_NAMED_* macros. </para>
        </briefdescription>
        <detaileddescription>
<para>We show that we can make mapping calls and that the address returned by <ref refid="group__device-mmio-named_1ga5ca4b0cf0637f475b5da3b1ec0a7c995" kindref="member">DEVICE_MMIO_NAMED_GET()</ref> is not NULL, indicating that the kernel mapped stuff somewhere.</para>
<para>We show that this works for a device instance that has two named regions, &apos;corge&apos; and &apos;grault&apos; that respectively come from DTS instances 1 and 2.</para>
<para>We also perform some checks depending on configuration:<itemizedlist>
<listitem><para>If MMIO addresses are maintained in RAM, check that the ROM struct was populated correctly.</para>
</listitem><listitem><para>If MMIO addresses are maintained in ROM, check that the DTS info, the ROM region, and the result of <ref refid="group__device-mmio-named_1ga5ca4b0cf0637f475b5da3b1ec0a7c995" kindref="member">DEVICE_MMIO_NAMED_GET()</ref> all point to the same address. We show that no extra memory is used in dev_data. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="23" column="13" bodyfile="tests/kernel/device/src/mmio.c" bodystart="158" bodyend="194" declfile="tests/kernel/device/src/main.c" declline="23" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1ga99c7d3c57d409e35cc0e7f7ec3e91acc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mmio_toplevel</definition>
        <argsstring>(void)</argsstring>
        <name>test_mmio_toplevel</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test DEVICE_MMIO_TOPLEVEL_* macros. </para>
        </briefdescription>
        <detaileddescription>
<para>We show that we can make mapping calls and that the address returned by <ref refid="group__device-mmio-toplevel_1gaad7ad99277cf2be684bd70c46d358338" kindref="member">DEVICE_MMIO_TOPLEVEL_GET()</ref> is not NULL, indicating that the kernel mapped stuff somewhere.</para>
<para>We do this for two different MMIO toplevel instances; one declared statically and one not.</para>
<para>We also perform some checks depending on configuration:<itemizedlist>
<listitem><para>If MMIO addresses are maintained in RAM, check that the ROM struct was populated correctly.</para>
</listitem><listitem><para>If MMIO addresses are maintained in ROM, check that the DTS info, the ROM region, and the result of <ref refid="group__device-mmio-toplevel_1gaad7ad99277cf2be684bd70c46d358338" kindref="member">DEVICE_MMIO_TOPLEVEL_GET()</ref> all point to the same address </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="24" column="13" bodyfile="tests/kernel/device/src/mmio.c" bodystart="221" bodyend="254" declfile="tests/kernel/device/src/main.c" declline="24" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1ga94becc62b58ed8d05922e5c359d05e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mmio_single</definition>
        <argsstring>(void)</argsstring>
        <name>test_mmio_single</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test DEVICE_MMIO_* macros. </para>
        </briefdescription>
        <detaileddescription>
<para>We show that we can make mapping calls and that the address returned by <ref refid="group__device-mmio-single_1ga8cb49d87ef6dc3b017d5b68860530b63" kindref="member">DEVICE_MMIO_GET()</ref> is not NULL, indicating that the kernel mapped stuff somewhere.</para>
<para>We also perform some checks depending on configuration:<itemizedlist>
<listitem><para>If MMIO addresses are maintained in RAM, check that the ROM struct was populated correctly.</para>
</listitem><listitem><para>If MMIO addresses are maintained in ROM, check that the DTS info, the ROM region, and the result of <ref refid="group__device-mmio-single_1ga8cb49d87ef6dc3b017d5b68860530b63" kindref="member">DEVICE_MMIO_GET()</ref> all point to the same address. We show that no extra memory is used in dev_data. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="25" column="13" bodyfile="tests/kernel/device/src/mmio.c" bodystart="61" bodyend="97" declfile="tests/kernel/device/src/main.c" declline="25" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="device_2src_2main_8c_1ad170bb634d07ca11c8a3cf1be62fc877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mmio_device_map</definition>
        <argsstring>(void)</argsstring>
        <name>test_mmio_device_map</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><ref refid="group__device-mmio_1ga6b4a9841a5176104e1b63f7475d3d2a2" kindref="member">device_map()</ref> test </para>
        </briefdescription>
        <detaileddescription>
<para>Show that <ref refid="group__device-mmio_1ga6b4a9841a5176104e1b63f7475d3d2a2" kindref="member">device_map()</ref> populates a memory address. We don&apos;t do anything else; tests for k_map() will prove that virtual memory mapping actually works. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="26" column="13" bodyfile="tests/kernel/device/src/mmio.c" bodystart="262" bodyend="273" declfile="tests/kernel/device/src/main.c" declline="26" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1gad43ba709907847cc75d938d62cb83661" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_dummy_device</definition>
        <argsstring>(void)</argsstring>
        <name>test_dummy_device</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test device object binding. </para>
        </briefdescription>
        <detaileddescription>
<para>Validates device binding for an existing and a non-existing device object. It creates a dummy_driver device object with basic init and configuration information and validates its binding.</para>
<para>Validates three kinds situations of driver object:<orderedlist>
<listitem><para>A non-existing device object.</para>
</listitem><listitem><para>An existing device object with basic init and configuration information.</para>
</listitem><listitem><para>A failed init device object.</para>
</listitem></orderedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__device__model_1ga15386ca9ab38f3e30183c18f604fa835" kindref="member">device_get_binding()</ref>, <ref refid="group__device__model_1gad08683c204de0996ca62b23813947009" kindref="member">DEVICE_DEFINE()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="56" column="6" bodyfile="tests/kernel/device/src/main.c" bodystart="56" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1ga3dc5b4a08fcb2c75c9c0252fb57828f8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_dynamic_name</definition>
        <argsstring>(void)</argsstring>
        <name>test_dynamic_name</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test device binding for existing device. </para>
        </briefdescription>
        <detaileddescription>
<para>Validates device binding for an existing device object.</para>
<para><simplesect kind="see"><para><ref refid="group__device__model_1ga15386ca9ab38f3e30183c18f604fa835" kindref="member">device_get_binding()</ref>, <ref refid="group__device__model_1gad08683c204de0996ca62b23813947009" kindref="member">DEVICE_DEFINE()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="82" column="13" bodyfile="tests/kernel/device/src/main.c" bodystart="82" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1gaaf5be76cc251a6b5e2833580fcb5d653" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_bogus_dynamic_name</definition>
        <argsstring>(void)</argsstring>
        <name>test_bogus_dynamic_name</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test device binding for non-existing device. </para>
        </briefdescription>
        <detaileddescription>
<para>Validates binding of a random device driver(non-defined driver) named &quot;ANOTHER_BOGUS_NAME&quot;.</para>
<para><simplesect kind="see"><para><ref refid="group__device__model_1ga15386ca9ab38f3e30183c18f604fa835" kindref="member">device_get_binding()</ref>, <ref refid="group__device__model_1gad08683c204de0996ca62b23813947009" kindref="member">DEVICE_DEFINE()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="100" column="13" bodyfile="tests/kernel/device/src/main.c" bodystart="100" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1ga2930c11d80c0c41f93e3adb2c373701c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_null_dynamic_name</definition>
        <argsstring>(void)</argsstring>
        <name>test_null_dynamic_name</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test device binding for passing null name. </para>
        </briefdescription>
        <detaileddescription>
<para>Validates device binding for device object when given dynamic name is null.</para>
<para><simplesect kind="see"><para><ref refid="group__device__model_1ga15386ca9ab38f3e30183c18f604fa835" kindref="member">device_get_binding()</ref>, <ref refid="group__device__model_1gad08683c204de0996ca62b23813947009" kindref="member">DEVICE_DEFINE()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="117" column="13" bodyfile="tests/kernel/device/src/main.c" bodystart="117" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1ga880bf79c5a71f6b89d1aa3a24e777fa1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__pinned_func int</type>
        <definition>static __pinned_func int add_init_record</definition>
        <argsstring>(bool pre_kernel)</argsstring>
        <name>add_init_record</name>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>pre_kernel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="144" column="12" bodyfile="tests/kernel/device/src/main.c" bodystart="144" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1ga77e9d76a0c4b59873062d15232b4b232" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__pinned_func int</type>
        <definition>static __pinned_func int pre1_fn</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>pre1_fn</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="154" column="12" bodyfile="tests/kernel/device/src/main.c" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1ga4cc4e145611c68693aeb6062d5bbe86c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__pinned_func int</type>
        <definition>static __pinned_func int pre2_fn</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>pre2_fn</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="160" column="12" bodyfile="tests/kernel/device/src/main.c" bodystart="160" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1gae21d554bb88885078f4a5aef652112cc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int post_fn</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>post_fn</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="165" column="12" bodyfile="tests/kernel/device/src/main.c" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1gabb9e7f292957d9a774aa45ca7b91f9b4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int app_fn</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>app_fn</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="170" column="12" bodyfile="tests/kernel/device/src/main.c" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1ga8b0abf706cc05490fcffda7839d4b971" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SYS_INIT</definition>
        <argsstring>(pre1_fn, PRE_KERNEL_1, 0)</argsstring>
        <name>SYS_INIT</name>
        <param>
          <type><ref refid="group__kernel__device__tests_1ga77e9d76a0c4b59873062d15232b4b232" kindref="member">pre1_fn</ref></type>
        </param>
        <param>
          <type>PRE_KERNEL_1</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="175" column="1" declfile="tests/kernel/device/src/main.c" declline="175" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1ga4595c980b95a690d812773dd98689fc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SYS_INIT</definition>
        <argsstring>(pre2_fn, PRE_KERNEL_2, 0)</argsstring>
        <name>SYS_INIT</name>
        <param>
          <type><ref refid="group__kernel__device__tests_1ga4cc4e145611c68693aeb6062d5bbe86c" kindref="member">pre2_fn</ref></type>
        </param>
        <param>
          <type>PRE_KERNEL_2</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="176" column="1" declfile="tests/kernel/device/src/main.c" declline="176" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1ga83a3fa740816f50d48a6c1c2e3fe70b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SYS_INIT</definition>
        <argsstring>(post_fn, POST_KERNEL, 0)</argsstring>
        <name>SYS_INIT</name>
        <param>
          <type><ref refid="group__kernel__device__tests_1gae21d554bb88885078f4a5aef652112cc" kindref="member">post_fn</ref></type>
        </param>
        <param>
          <type>POST_KERNEL</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="177" column="1" declfile="tests/kernel/device/src/main.c" declline="177" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1gafce7ea4e39e647f0ba965204f8abc972" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SYS_INIT</definition>
        <argsstring>(app_fn, APPLICATION, 0)</argsstring>
        <name>SYS_INIT</name>
        <param>
          <type><ref refid="group__kernel__device__tests_1gabb9e7f292957d9a774aa45ca7b91f9b4" kindref="member">app_fn</ref></type>
        </param>
        <param>
          <type>APPLICATION</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="178" column="1" declfile="tests/kernel/device/src/main.c" declline="178" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1gaa7cd1a5ddf83e915938b53dc5f5f80e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int null_driver_init</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>null_driver_init</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="181" column="12" bodyfile="tests/kernel/device/src/main.c" bodystart="181" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1gaacf57630a62e98a3dcf1e3f398f95391" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SYS_INIT</definition>
        <argsstring>(null_driver_init, POST_KERNEL, 0)</argsstring>
        <name>SYS_INIT</name>
        <param>
          <type><ref refid="group__kernel__device__tests_1gaa7cd1a5ddf83e915938b53dc5f5f80e3" kindref="member">null_driver_init</ref></type>
        </param>
        <param>
          <type>POST_KERNEL</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="187" column="1" declfile="tests/kernel/device/src/main.c" declline="187" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1ga8583e42d8b24b4a7c6983fbab0b0f78e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pre_kernel_detection</definition>
        <argsstring>(void)</argsstring>
        <name>test_pre_kernel_detection</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test detection of initialization before kernel services available. </para>
        </briefdescription>
        <detaileddescription>
<para>Confirms check is correct.</para>
<para><simplesect kind="see"><para><ref refid="group__isr__apis_1gae74e5de996276df767b96d4b50fa47ea" kindref="member">k_is_pre_kernel()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="196" column="6" bodyfile="tests/kernel/device/src/main.c" bodystart="196" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1ga5d2c55816b66ebb858b1fd30d0bd3d33" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_device_list</definition>
        <argsstring>(void)</argsstring>
        <name>test_device_list</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test system device list query API. </para>
        </briefdescription>
        <detaileddescription>
<para>It queries the list of devices in the system, used to suspend or resume the devices in PM applications.</para>
<para><simplesect kind="see"><para>z_device_get_all_static() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="230" column="13" bodyfile="tests/kernel/device/src/main.c" bodystart="230" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1gae9c84e4d66415e53b51101464c8c69fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_device_init_level</definition>
        <argsstring>(void)</argsstring>
        <name>test_device_init_level</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test initialization level for device driver instances. </para>
        </briefdescription>
        <detaileddescription>
<para>After the defined device instances have initialized, we check the sequence number that each driver stored during initialization. If the sequence of initial level stored is corresponding with our expectation, it means assigning the level for driver instance works. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="254" column="6" bodyfile="tests/kernel/device/src/main.c" bodystart="254" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1gabdc2dae75f2d1225099ce5c86a72ce3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_device_init_priority</definition>
        <argsstring>(void)</argsstring>
        <name>test_device_init_priority</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test initialization priorities for device driver instances. </para>
        </briefdescription>
        <detaileddescription>
<para>details After the defined device instances have initialized, we check the sequence number that each driver stored during initialization. If the sequence of initial priority stored is corresponding with our expectation, it means assigning the priority for driver instance works. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="280" column="6" bodyfile="tests/kernel/device/src/main.c" bodystart="280" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1gad3a15999d6ffb127cf0ed9bf48140950" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_abstraction_driver_common</definition>
        <argsstring>(void)</argsstring>
        <name>test_abstraction_driver_common</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test abstraction of device drivers with common functionalities. </para>
        </briefdescription>
        <detaileddescription>
<para>Abstraction of device drivers with common functionalities shall be provided as an intermediate interface between applications and device drivers, where such interface is implemented by individual device drivers. We verify this by following step:</para>
<para><orderedlist>
<listitem><para>Define a subsystem api for drivers.</para>
</listitem><listitem><para>Define and create two driver instances.</para>
</listitem><listitem><para>Two drivers call the same subsystem API, and we verify that each driver instance will call their own implementations. </para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="312" column="6" bodyfile="tests/kernel/device/src/main.c" bodystart="312" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="device_2src_2main_8c_1a8a4533f287d99bb2d7c24c0e29c9a449" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_main</definition>
        <argsstring>(void)</argsstring>
        <name>test_main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/main.c" line="346" column="6" bodyfile="tests/kernel/device/src/main.c" bodystart="346" bodyend="363"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zephyr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;device.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="init_8h" kindref="compound">init.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ztest_8h" kindref="compound">ztest.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="printk_8h" kindref="compound">sys/printk.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="sections_8h" kindref="compound">linker/sections.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="abstract__driver_8h" kindref="compound">abstract_driver.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DUMMY_PORT_1<sp/><sp/><sp/><sp/>&quot;dummy&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DUMMY_PORT_2<sp/><sp/><sp/><sp/>&quot;dummy_driver&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BAD_DRIVER<sp/><sp/><sp/><sp/><sp/><sp/>&quot;bad_driver&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MY_DRIVER_A<sp/><sp/><sp/><sp/><sp/>&quot;my_driver_A&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MY_DRIVER_B<sp/><sp/><sp/><sp/><sp/>&quot;my_driver_B&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1ga7cef29bf76d36c28ebed39fe0553bbff" kindref="member">test_mmio_multiple</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1ga99c7d3c57d409e35cc0e7f7ec3e91acc" kindref="member">test_mmio_toplevel</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1ga94becc62b58ed8d05922e5c359d05e5f" kindref="member">test_mmio_single</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="device_2src_2main_8c_1ad170bb634d07ca11c8a3cf1be62fc877" kindref="member">test_mmio_device_map</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1gad43ba709907847cc75d938d62cb83661" kindref="member">test_dummy_device</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Validates<sp/>device<sp/>binding<sp/>for<sp/>a<sp/>non-existing<sp/>device<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev<sp/>=<sp/><ref refid="group__device__model_1ga15386ca9ab38f3e30183c18f604fa835" kindref="member">device_get_binding</ref>(<ref refid="device_2src_2main_8c_1a01c7635621dcf5eb3800be752141afbc" kindref="member">DUMMY_PORT_1</ref>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(dev,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Validates<sp/>device<sp/>binding<sp/>for<sp/>an<sp/>existing<sp/>device<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev<sp/>=<sp/><ref refid="group__device__model_1ga15386ca9ab38f3e30183c18f604fa835" kindref="member">device_get_binding</ref>(<ref refid="device_2src_2main_8c_1a443d48342bc0829ee72a968e06749c3c" kindref="member">DUMMY_PORT_2</ref>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gacc41f998b701997e4eafb6ed7b9d537c" kindref="member">zassert_false</ref>((dev<sp/>==<sp/>NULL),<sp/>NULL);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>device_get_binding()<sp/>returns<sp/>false<sp/>for<sp/>device<sp/>object</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>with<sp/>failed<sp/>init.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev<sp/>=<sp/><ref refid="group__device__model_1ga15386ca9ab38f3e30183c18f604fa835" kindref="member">device_get_binding</ref>(<ref refid="device_2src_2main_8c_1abd09fd364e497037b3fb8be04eacd79e" kindref="member">BAD_DRIVER</ref>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((dev<sp/>==<sp/>NULL),<sp/>NULL);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1ga3dc5b4a08fcb2c75c9c0252fb57828f8" kindref="member">test_dynamic_name</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*mux;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structdevice_1a1e74e8d3b0b1a981c67e1d0284ccac3d" kindref="member">name</ref>[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="device_2src_2main_8c_1a443d48342bc0829ee72a968e06749c3c" kindref="member">DUMMY_PORT_2</ref>)];</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a0b0af71688f7e9170103d771d4e1eab2" kindref="member">snprintk</ref>(<ref refid="structdevice_1a1e74e8d3b0b1a981c67e1d0284ccac3d" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structdevice_1a1e74e8d3b0b1a981c67e1d0284ccac3d" kindref="member">name</ref>),<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="device_2src_2main_8c_1a443d48342bc0829ee72a968e06749c3c" kindref="member">DUMMY_PORT_2</ref>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mux<sp/>=<sp/><ref refid="group__device__model_1ga15386ca9ab38f3e30183c18f604fa835" kindref="member">device_get_binding</ref>(<ref refid="structdevice_1a1e74e8d3b0b1a981c67e1d0284ccac3d" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(mux<sp/>!=<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1gaaf5be76cc251a6b5e2833580fcb5d653" kindref="member">test_bogus_dynamic_name</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*mux;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structdevice_1a1e74e8d3b0b1a981c67e1d0284ccac3d" kindref="member">name</ref>[64];</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a0b0af71688f7e9170103d771d4e1eab2" kindref="member">snprintk</ref>(<ref refid="structdevice_1a1e74e8d3b0b1a981c67e1d0284ccac3d" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structdevice_1a1e74e8d3b0b1a981c67e1d0284ccac3d" kindref="member">name</ref>),<sp/></highlight><highlight class="stringliteral">&quot;ANOTHER_BOGUS_NAME&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mux<sp/>=<sp/><ref refid="group__device__model_1ga15386ca9ab38f3e30183c18f604fa835" kindref="member">device_get_binding</ref>(<ref refid="structdevice_1a1e74e8d3b0b1a981c67e1d0284ccac3d" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(mux<sp/>==<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1ga2930c11d80c0c41f93e3adb2c373701c" kindref="member">test_null_dynamic_name</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Supplying<sp/>a<sp/>NULL<sp/>dynamic<sp/>name<sp/>may<sp/>trigger<sp/>a<sp/>SecureFault<sp/>and</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>lead<sp/>to<sp/>system<sp/>crash<sp/>in<sp/>TrustZone<sp/>enabled<sp/>Non-Secure<sp/>builds.</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_USERSPACE)<sp/>&amp;&amp;<sp/>!defined(CONFIG_TRUSTED_EXECUTION_NONSECURE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*mux;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*drv_name<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mux<sp/>=<sp/><ref refid="group__device__model_1ga15386ca9ab38f3e30183c18f604fa835" kindref="member">device_get_binding</ref>(drv_name);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(mux,<sp/>0,<sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gada3b1fcfa71db1bf7787c03ff45256d5" kindref="member">ztest_test_skip</ref>();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">__pinned_bss</highlight></codeline>
<codeline lineno="134" refid="structinit__record" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinit__record" kindref="compound">init_record</ref><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structinit__record_1af6fa0e0ac6ab6cd8756a66f90ef7ff4e" kindref="member">pre_kernel</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structinit__record_1a3528e2ff9e5e9ae65a5f20c9f4a6d2c0" kindref="member">is_in_isr</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structinit__record_1a33104fbd5449c9660ee3a412bf4239af" kindref="member">is_pre_kernel</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}<sp/><ref refid="group__kernel__device__tests_1ga9e2c37b52a183b55c1ee873be2c83ea5" kindref="member">init_records</ref>[4];</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">__pinned_data</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinit__record" kindref="compound">init_record</ref><sp/>*<ref refid="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" kindref="member">rp</ref><sp/>=<sp/><ref refid="group__kernel__device__tests_1ga9e2c37b52a183b55c1ee873be2c83ea5" kindref="member">init_records</ref>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">__pinned_func</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1ga880bf79c5a71f6b89d1aa3a24e777fa1" kindref="member">add_init_record</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structinit__record_1af6fa0e0ac6ab6cd8756a66f90ef7ff4e" kindref="member">pre_kernel</ref>)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" kindref="member">rp</ref>-&gt;<ref refid="structinit__record_1af6fa0e0ac6ab6cd8756a66f90ef7ff4e" kindref="member">pre_kernel</ref><sp/>=<sp/><ref refid="structinit__record_1af6fa0e0ac6ab6cd8756a66f90ef7ff4e" kindref="member">pre_kernel</ref>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" kindref="member">rp</ref>-&gt;<ref refid="structinit__record_1a33104fbd5449c9660ee3a412bf4239af" kindref="member">is_pre_kernel</ref><sp/>=<sp/><ref refid="group__isr__apis_1gae74e5de996276df767b96d4b50fa47ea" kindref="member">k_is_pre_kernel</ref>();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" kindref="member">rp</ref>-&gt;<ref refid="structinit__record_1a3528e2ff9e5e9ae65a5f20c9f4a6d2c0" kindref="member">is_in_isr</ref><sp/>=<sp/><ref refid="group__isr__apis_1ga8482b0dd2283d12677a9ebe321667d16" kindref="member">k_is_in_isr</ref>();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" kindref="member">rp</ref>;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">__pinned_func</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1ga77e9d76a0c4b59873062d15232b4b232" kindref="member">pre1_fn</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev)</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1ga880bf79c5a71f6b89d1aa3a24e777fa1" kindref="member">add_init_record</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">__pinned_func</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1ga4cc4e145611c68693aeb6062d5bbe86c" kindref="member">pre2_fn</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev)</highlight></codeline>
<codeline lineno="161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1ga880bf79c5a71f6b89d1aa3a24e777fa1" kindref="member">add_init_record</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1gae21d554bb88885078f4a5aef652112cc" kindref="member">post_fn</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev)</highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1ga880bf79c5a71f6b89d1aa3a24e777fa1" kindref="member">add_init_record</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1gabb9e7f292957d9a774aa45ca7b91f9b4" kindref="member">app_fn</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev)</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1ga880bf79c5a71f6b89d1aa3a24e777fa1" kindref="member">add_init_record</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><ref refid="group__kernel__device__tests_1ga8b0abf706cc05490fcffda7839d4b971" kindref="member">SYS_INIT</ref>(<ref refid="group__kernel__device__tests_1ga77e9d76a0c4b59873062d15232b4b232" kindref="member">pre1_fn</ref>,<sp/>PRE_KERNEL_1,<sp/>0);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><ref refid="group__kernel__device__tests_1ga8b0abf706cc05490fcffda7839d4b971" kindref="member">SYS_INIT</ref>(<ref refid="group__kernel__device__tests_1ga4cc4e145611c68693aeb6062d5bbe86c" kindref="member">pre2_fn</ref>,<sp/>PRE_KERNEL_2,<sp/>0);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><ref refid="group__kernel__device__tests_1ga8b0abf706cc05490fcffda7839d4b971" kindref="member">SYS_INIT</ref>(<ref refid="group__kernel__device__tests_1gae21d554bb88885078f4a5aef652112cc" kindref="member">post_fn</ref>,<sp/>POST_KERNEL,<sp/>0);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><ref refid="group__kernel__device__tests_1ga8b0abf706cc05490fcffda7839d4b971" kindref="member">SYS_INIT</ref>(<ref refid="group__kernel__device__tests_1gabb9e7f292957d9a774aa45ca7b91f9b4" kindref="member">app_fn</ref>,<sp/>APPLICATION,<sp/>0);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>an<sp/>error<sp/>case<sp/>which<sp/>driver<sp/>initializes<sp/>failed<sp/>in<sp/>SYS_INIT<sp/>.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1gaa7cd1a5ddf83e915938b53dc5f5f80e3" kindref="member">null_driver_init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev)</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(dev);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1ga2d1678d5a7cc8ce499643f3b8957def4" kindref="member">EINVAL</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><ref refid="group__kernel__device__tests_1ga8b0abf706cc05490fcffda7839d4b971" kindref="member">SYS_INIT</ref>(<ref refid="group__kernel__device__tests_1gaa7cd1a5ddf83e915938b53dc5f5f80e3" kindref="member">null_driver_init</ref>,<sp/>POST_KERNEL,<sp/>0);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1ga8583e42d8b24b4a7c6983fbab0b0f78e" kindref="member">test_pre_kernel_detection</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinit__record" kindref="compound">init_record</ref><sp/>*rpe<sp/>=<sp/><ref refid="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" kindref="member">rp</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" kindref="member">rp</ref><sp/>-<sp/><ref refid="group__kernel__device__tests_1ga9e2c37b52a183b55c1ee873be2c83ea5" kindref="member">init_records</ref>,<sp/>4U,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>record<sp/>count&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" kindref="member">rp</ref><sp/>=<sp/><ref refid="group__kernel__device__tests_1ga9e2c37b52a183b55c1ee873be2c83ea5" kindref="member">init_records</ref>;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" kindref="member">rp</ref><sp/>&lt;<sp/>rpe)<sp/>&amp;&amp;<sp/><ref refid="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" kindref="member">rp</ref>-&gt;<ref refid="structinit__record_1af6fa0e0ac6ab6cd8756a66f90ef7ff4e" kindref="member">pre_kernel</ref>)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" kindref="member">rp</ref>-&gt;<ref refid="structinit__record_1a3528e2ff9e5e9ae65a5f20c9f4a6d2c0" kindref="member">is_in_isr</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;rec<sp/>%zu<sp/>isr&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" kindref="member">rp</ref><sp/>-<sp/><ref refid="group__kernel__device__tests_1ga9e2c37b52a183b55c1ee873be2c83ea5" kindref="member">init_records</ref>);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" kindref="member">rp</ref>-&gt;<ref refid="structinit__record_1a33104fbd5449c9660ee3a412bf4239af" kindref="member">is_pre_kernel</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;rec<sp/>%zu<sp/>pre-kernel&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" kindref="member">rp</ref><sp/>-<sp/><ref refid="group__kernel__device__tests_1ga9e2c37b52a183b55c1ee873be2c83ea5" kindref="member">init_records</ref>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" kindref="member">rp</ref>;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" kindref="member">rp</ref><sp/>-<sp/><ref refid="group__kernel__device__tests_1ga9e2c37b52a183b55c1ee873be2c83ea5" kindref="member">init_records</ref>,<sp/>2U,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>pre-kernel<sp/>count&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" kindref="member">rp</ref><sp/>&lt;<sp/>rpe)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" kindref="member">rp</ref>-&gt;<ref refid="structinit__record_1a3528e2ff9e5e9ae65a5f20c9f4a6d2c0" kindref="member">is_in_isr</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;rec<sp/>%zu<sp/>isr&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" kindref="member">rp</ref><sp/>-<sp/><ref refid="group__kernel__device__tests_1ga9e2c37b52a183b55c1ee873be2c83ea5" kindref="member">init_records</ref>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" kindref="member">rp</ref>-&gt;<ref refid="structinit__record_1a33104fbd5449c9660ee3a412bf4239af" kindref="member">is_pre_kernel</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;rec<sp/>%zu<sp/>post-kernel&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" kindref="member">rp</ref><sp/>-<sp/><ref refid="group__kernel__device__tests_1ga9e2c37b52a183b55c1ee873be2c83ea5" kindref="member">init_records</ref>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="group__kernel__device__tests_1gabddc90d64cde2250894c1dc462b5fb4a" kindref="member">rp</ref>;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1ga5d2c55816b66ebb858b1fd30d0bd3d33" kindref="member">test_device_list</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="231"><highlight class="normal">{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>const<sp/>*devices;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>devcount<sp/>=<sp/>z_device_get_all_static(&amp;devices);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gacc41f998b701997e4eafb6ed7b9d537c" kindref="member">zassert_false</ref>((devcount<sp/>==<sp/>0),<sp/>NULL);</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>this<sp/>is<sp/>for<sp/>storing<sp/>sequence<sp/>during<sp/>initializtion<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1ga136bab9f635b6048ac430e2805a55d5a" kindref="member">init_level_sequence</ref>[4];</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1ga1dc16f84875ddcbf5ffad01574a63d42" kindref="member">init_priority_sequence</ref>[4];</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1ga7a2ba21995dfb9e6ef66122b43f2379f" kindref="member">seq_level_cnt</ref>;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1gae0710c0c64b4797aed7bd53459e70d81" kindref="member">seq_priority_cnt</ref>;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1gae9c84e4d66415e53b51101464c8c69fc" kindref="member">test_device_init_level</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>seq_correct<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>check<sp/>if<sp/>the<sp/>stored<sp/>executing<sp/>sequence<sp/>for<sp/>different<sp/>level<sp/>is</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>correct,<sp/>and<sp/>it<sp/>should<sp/>be<sp/>1,<sp/>2,<sp/>3,<sp/>4</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__kernel__device__tests_1ga136bab9f635b6048ac430e2805a55d5a" kindref="member">init_level_sequence</ref>[i]<sp/>!=<sp/>(i+1))</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq_correct<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((seq_correct<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;init<sp/>sequence<sp/>is<sp/>not<sp/>correct&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1gabdc2dae75f2d1225099ce5c86a72ce3a" kindref="member">test_device_init_priority</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="281"><highlight class="normal">{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sequence_correct<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>check<sp/>if<sp/>the<sp/>stored<sp/>pexecuting<sp/>sequence<sp/>for<sp/>priority<sp/>is<sp/>correct,</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>it<sp/>should<sp/>be<sp/>1,<sp/>2,<sp/>3,<sp/>4</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__kernel__device__tests_1ga1dc16f84875ddcbf5ffad01574a63d42" kindref="member">init_priority_sequence</ref>[i]<sp/>!=<sp/>(i+1))</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sequence_correct<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((sequence_correct<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;init<sp/>sequence<sp/>is<sp/>not<sp/>correct&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1gad3a15999d6ffb127cf0ed9bf48140950" kindref="member">test_abstraction_driver_common</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfoo" kindref="compound">foo</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bar<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>baz<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>verify<sp/>driver<sp/>A<sp/>API<sp/>has<sp/>called<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev<sp/>=<sp/><ref refid="group__device__model_1ga15386ca9ab38f3e30183c18f604fa835" kindref="member">device_get_binding</ref>(<ref refid="device_2src_2main_8c_1ab3ecbe46a89185de4512e7247c0c56c9" kindref="member">MY_DRIVER_A</ref>);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gacc41f998b701997e4eafb6ed7b9d537c" kindref="member">zassert_false</ref>((dev<sp/>==<sp/>NULL),<sp/>NULL);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="abstract__driver_8h_1a3e358d2bdd81a734c0dd324a3f9d0999" kindref="member">subsystem_do_this</ref>(dev,<sp/><ref refid="structfoo" kindref="compound">foo</ref>,<sp/>bar);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>==<sp/>(<ref refid="structfoo" kindref="compound">foo</ref><sp/>+<sp/>bar),<sp/></highlight><highlight class="stringliteral">&quot;common<sp/>API<sp/>do_this<sp/>fail&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="abstract__driver_8h_1ad0f149a3cc13127f7dd9c6358f7cabef" kindref="member">subsystem_do_that</ref>(dev,<sp/>&amp;baz);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(baz<sp/>==<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;common<sp/>API<sp/>do_that<sp/>fail&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>verify<sp/>driver<sp/>B<sp/>API<sp/>has<sp/>called<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev<sp/>=<sp/><ref refid="group__device__model_1ga15386ca9ab38f3e30183c18f604fa835" kindref="member">device_get_binding</ref>(<ref refid="device_2src_2main_8c_1aa4b601a31bc1f74fc83c5b98d57d03ab" kindref="member">MY_DRIVER_B</ref>);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gacc41f998b701997e4eafb6ed7b9d537c" kindref="member">zassert_false</ref>((dev<sp/>==<sp/>NULL),<sp/>NULL);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="abstract__driver_8h_1a3e358d2bdd81a734c0dd324a3f9d0999" kindref="member">subsystem_do_this</ref>(dev,<sp/><ref refid="structfoo" kindref="compound">foo</ref>,<sp/>bar);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>==<sp/>(<ref refid="structfoo" kindref="compound">foo</ref><sp/>-<sp/>bar),<sp/></highlight><highlight class="stringliteral">&quot;common<sp/>API<sp/>do_this<sp/>fail&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="abstract__driver_8h_1ad0f149a3cc13127f7dd9c6358f7cabef" kindref="member">subsystem_do_that</ref>(dev,<sp/>&amp;baz);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(baz<sp/>==<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;common<sp/>API<sp/>do_that<sp/>fail&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="common_2src_2main_8c_1a8a4533f287d99bb2d7c24c0e29c9a449" kindref="member">test_main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="347"><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga2ad3ecbbedb04310c6a4ac997a8d3550" kindref="member">ztest_test_suite</ref>(<ref refid="structdevice" kindref="compound">device</ref>,</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__device__tests_1ga5d2c55816b66ebb858b1fd30d0bd3d33" kindref="member">test_device_list</ref>),</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__device__tests_1gad43ba709907847cc75d938d62cb83661" kindref="member">test_dummy_device</ref>),</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__device__tests_1ga8583e42d8b24b4a7c6983fbab0b0f78e" kindref="member">test_pre_kernel_detection</ref>),</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="group__kernel__device__tests_1gaaf5be76cc251a6b5e2833580fcb5d653" kindref="member">test_bogus_dynamic_name</ref>),</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="group__kernel__device__tests_1ga2930c11d80c0c41f93e3adb2c373701c" kindref="member">test_null_dynamic_name</ref>),</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="group__kernel__device__tests_1ga3dc5b4a08fcb2c75c9c0252fb57828f8" kindref="member">test_dynamic_name</ref>),</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__device__tests_1gae9c84e4d66415e53b51101464c8c69fc" kindref="member">test_device_init_level</ref>),</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__device__tests_1gabdc2dae75f2d1225099ce5c86a72ce3a" kindref="member">test_device_init_priority</ref>),</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__device__tests_1gad3a15999d6ffb127cf0ed9bf48140950" kindref="member">test_abstraction_driver_common</ref>),</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__device__tests_1ga94becc62b58ed8d05922e5c359d05e5f" kindref="member">test_mmio_single</ref>),</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__device__tests_1ga7cef29bf76d36c28ebed39fe0553bbff" kindref="member">test_mmio_multiple</ref>),</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__device__tests_1ga99c7d3c57d409e35cc0e7f7ec3e91acc" kindref="member">test_mmio_toplevel</ref>),</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="device_2src_2main_8c_1ad170bb634d07ca11c8a3cf1be62fc877" kindref="member">test_mmio_device_map</ref>));</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga7f76df4df4bf68a605b923fed8e5465c" kindref="member">ztest_run_test_suite</ref>(<ref refid="structdevice" kindref="compound">device</ref>);</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/kernel/device/src/main.c"/>
  </compounddef>
</doxygen>
