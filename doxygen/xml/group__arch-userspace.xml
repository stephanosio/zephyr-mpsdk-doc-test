<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__arch-userspace" kind="group">
    <compoundname>arch-userspace</compoundname>
    <title>Architecture-specific userspace APIs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__arch-userspace_1ga5e9ab24b9c980e327903fbe3f5bd97f3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
        <definition>static uintptr_t arch_syscall_invoke0</definition>
        <argsstring>(uintptr_t call_id)</argsstring>
        <name>arch_syscall_invoke0</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>call_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invoke a system call with 0 arguments.</para>
<para>No general-purpose register state other than return value may be preserved when transitioning from supervisor mode back down to user mode for security reasons.</para>
<para>It is required that all arguments be stored in registers when elevating privileges from user to supervisor mode.</para>
<para>Processing of the syscall takes place on a separate kernel stack. Interrupts should be enabled when invoking the system call marshallers from the dispatch table. Thread preemption may occur when handling system calls.</para>
<para>Call ids are untrusted and must be bounds-checked, as the value is used to index the system call dispatch table, containing function pointers to the specific system call code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>call_id</parametername>
</parameternamelist>
<parameterdescription>
<para>System call ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return value of the system call. Void system calls return 0 here. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="473" column="25" declfile="include/sys/arch_interface.h" declline="473" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga4cfb3b2b38e5afca889e8b9765d6c3df" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
        <definition>static uintptr_t arch_syscall_invoke1</definition>
        <argsstring>(uintptr_t arg1, uintptr_t call_id)</argsstring>
        <name>arch_syscall_invoke1</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg1</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>call_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invoke a system call with 1 argument.</para>
<para><simplesect kind="see"><para><ref refid="group__arch-userspace_1ga5e9ab24b9c980e327903fbe3f5bd97f3" kindref="member">arch_syscall_invoke0()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg1</parametername>
</parameternamelist>
<parameterdescription>
<para>First argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>call_id</parametername>
</parameternamelist>
<parameterdescription>
<para>System call ID, will be bounds-checked and used to reference kernel-side dispatch table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return value of the system call. Void system calls return 0 here. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="485" column="25" declfile="include/sys/arch_interface.h" declline="485" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga1e78f1022aaf10e88727b142b56d4ef0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
        <definition>static uintptr_t arch_syscall_invoke2</definition>
        <argsstring>(uintptr_t arg1, uintptr_t arg2, uintptr_t call_id)</argsstring>
        <name>arch_syscall_invoke2</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg1</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg2</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>call_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invoke a system call with 2 arguments.</para>
<para><simplesect kind="see"><para><ref refid="group__arch-userspace_1ga5e9ab24b9c980e327903fbe3f5bd97f3" kindref="member">arch_syscall_invoke0()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg1</parametername>
</parameternamelist>
<parameterdescription>
<para>First argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>call_id</parametername>
</parameternamelist>
<parameterdescription>
<para>System call ID, will be bounds-checked and used to reference kernel-side dispatch table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return value of the system call. Void system calls return 0 here. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="499" column="25" declfile="include/sys/arch_interface.h" declline="499" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1gaacb1c66a1b7bf2293fea269f6b5e1c7e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
        <definition>static uintptr_t arch_syscall_invoke3</definition>
        <argsstring>(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t call_id)</argsstring>
        <name>arch_syscall_invoke3</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg1</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg2</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg3</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>call_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invoke a system call with 3 arguments.</para>
<para><simplesect kind="see"><para><ref refid="group__arch-userspace_1ga5e9ab24b9c980e327903fbe3f5bd97f3" kindref="member">arch_syscall_invoke0()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg1</parametername>
</parameternamelist>
<parameterdescription>
<para>First argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg3</parametername>
</parameternamelist>
<parameterdescription>
<para>Third argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>call_id</parametername>
</parameternamelist>
<parameterdescription>
<para>System call ID, will be bounds-checked and used to reference kernel-side dispatch table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return value of the system call. Void system calls return 0 here. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="514" column="25" declfile="include/sys/arch_interface.h" declline="514" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga0ba3ae2290827385b226ebdbf3de3b53" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
        <definition>static uintptr_t arch_syscall_invoke4</definition>
        <argsstring>(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4, uintptr_t call_id)</argsstring>
        <name>arch_syscall_invoke4</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg1</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg2</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg3</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg4</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>call_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invoke a system call with 4 arguments.</para>
<para><simplesect kind="see"><para><ref refid="group__arch-userspace_1ga5e9ab24b9c980e327903fbe3f5bd97f3" kindref="member">arch_syscall_invoke0()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg1</parametername>
</parameternamelist>
<parameterdescription>
<para>First argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg3</parametername>
</parameternamelist>
<parameterdescription>
<para>Third argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg4</parametername>
</parameternamelist>
<parameterdescription>
<para>Fourth argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>call_id</parametername>
</parameternamelist>
<parameterdescription>
<para>System call ID, will be bounds-checked and used to reference kernel-side dispatch table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return value of the system call. Void system calls return 0 here. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="531" column="25" declfile="include/sys/arch_interface.h" declline="531" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga9971c78bc8f579a0dadf84225dc0c3ff" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
        <definition>static uintptr_t arch_syscall_invoke5</definition>
        <argsstring>(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, uintptr_t call_id)</argsstring>
        <name>arch_syscall_invoke5</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg1</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg2</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg3</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg4</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg5</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>call_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invoke a system call with 5 arguments.</para>
<para><simplesect kind="see"><para><ref refid="group__arch-userspace_1ga5e9ab24b9c980e327903fbe3f5bd97f3" kindref="member">arch_syscall_invoke0()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg1</parametername>
</parameternamelist>
<parameterdescription>
<para>First argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg3</parametername>
</parameternamelist>
<parameterdescription>
<para>Third argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg4</parametername>
</parameternamelist>
<parameterdescription>
<para>Fourth argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg5</parametername>
</parameternamelist>
<parameterdescription>
<para>Fifth argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>call_id</parametername>
</parameternamelist>
<parameterdescription>
<para>System call ID, will be bounds-checked and used to reference kernel-side dispatch table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return value of the system call. Void system calls return 0 here. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="549" column="25" declfile="include/sys/arch_interface.h" declline="549" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1gac6cae2197637993a86b6ec6803b5742b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
        <definition>static uintptr_t arch_syscall_invoke6</definition>
        <argsstring>(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, uintptr_t arg6, uintptr_t call_id)</argsstring>
        <name>arch_syscall_invoke6</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg1</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg2</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg3</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg4</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg5</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg6</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>call_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invoke a system call with 6 arguments.</para>
<para><simplesect kind="see"><para><ref refid="group__arch-userspace_1ga5e9ab24b9c980e327903fbe3f5bd97f3" kindref="member">arch_syscall_invoke0()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg1</parametername>
</parameternamelist>
<parameterdescription>
<para>First argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg3</parametername>
</parameternamelist>
<parameterdescription>
<para>Third argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg4</parametername>
</parameternamelist>
<parameterdescription>
<para>Fourth argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg5</parametername>
</parameternamelist>
<parameterdescription>
<para>Fifth argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg6</parametername>
</parameternamelist>
<parameterdescription>
<para>Sixth argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>call_id</parametername>
</parameternamelist>
<parameterdescription>
<para>System call ID, will be bounds-checked and used to reference kernel-side dispatch table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return value of the system call. Void system calls return 0 here. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="569" column="25" declfile="include/sys/arch_interface.h" declline="569" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga89ab53a218add419e37f89c1f5fd955f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool arch_is_user_context</definition>
        <argsstring>(void)</argsstring>
        <name>arch_is_user_context</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicate whether we are currently running in user mode</para>
<para><simplesect kind="return"><para>true if the CPU is currently running with user permissions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="579" column="20" declfile="include/sys/arch_interface.h" declline="579" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga71542fcc679a94ad9ea60d7ac46da361" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arch_mem_domain_max_partitions_get</definition>
        <argsstring>(void)</argsstring>
        <name>arch_mem_domain_max_partitions_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the maximum number of partitions for a memory domain. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Max number of partitions, or -1 if there is no limit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="586" column="5" declfile="include/sys/arch_interface.h" declline="586" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga1532ef5705aa71f0f93899abca0939da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arch_buffer_validate</definition>
        <argsstring>(void *addr, size_t size, int write)</argsstring>
        <name>arch_buffer_validate</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>write</declname>
        </param>
        <briefdescription>
<para>Check memory region permissions. </para>
        </briefdescription>
        <detaileddescription>
<para>Given a memory region, return whether the current memory management hardware configuration would allow a user thread to read/write that region. Used by system calls to validate buffers coming in from userspace.</para>
<para>Notes: The function is guaranteed to never return validation success, if the entire buffer area is not user accessible.</para>
<para>The function is guaranteed to correctly validate the permissions of the supplied buffer, if the user access permissions of the entire buffer are enforced by a single, enabled memory management region.</para>
<para>In some architectures the validation will always return failure if the supplied memory buffer spans multiple enabled memory management regions (even if all such regions permit user access).</para>
<para><simplesect kind="warning"><para>0 size buffer has undefined behavior.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>start address of the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write</parametername>
</parameternamelist>
<parameterdescription>
<para>If nonzero, additionally check if the area is writable. Otherwise, just check if the memory can be read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nonzero if the permissions don&apos;t match. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="713" column="5" declfile="include/sys/arch_interface.h" declline="713" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga48be2412ba65ec550ded63e2f1a0470f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t arch_virt_region_align</definition>
        <argsstring>(uintptr_t phys, size_t size)</argsstring>
        <name>arch_virt_region_align</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>phys</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the optimal virtual region alignment to optimize the MMU table layout</para>
<para>Some MMU HW requires some region to be aligned to some of the intermediate block alignment in order to reduce table usage. This call returns the optimal virtual address alignment in order to permit such optimization in the following MMU mapping call.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">phys</parametername>
</parameternamelist>
<parameterdescription>
<para>Physical address of region to be mapped, aligned to MMU_PAGE_SIZE </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of region to be mapped, aligned to MMU_PAGE_SIZE</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>to apply on the virtual address of this region </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="728" column="8" declfile="include/sys/arch_interface.h" declline="728" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga447daa0454a90a7a3a247de01e522567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FUNC_NORETURN void</type>
        <definition>FUNC_NORETURN void arch_user_mode_enter</definition>
        <argsstring>(k_thread_entry_t user_entry, void *p1, void *p2, void *p3)</argsstring>
        <name>arch_user_mode_enter</name>
        <param>
          <type><ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref></type>
          <declname>user_entry</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform a one-way transition from supervisor to kernel mode.</para>
<para>Implementations of this function must do the following:</para>
<para><itemizedlist>
<listitem><para>Reset the thread&apos;s stack pointer to a suitable initial value. We do not need any prior context since this is a one-way operation.</para>
</listitem><listitem><para>Set up any kernel stack region for the CPU to use during privilege elevation</para>
</listitem><listitem><para>Put the CPU in whatever its equivalent of user mode is</para>
</listitem><listitem><para>Transfer execution to <ref refid="group__arch-threads_1gade449838e445fa8201266e38215c616c" kindref="member">arch_new_thread()</ref> passing along all the supplied arguments, in user mode.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_entry</parametername>
</parameternamelist>
<parameterdescription>
<para>Entry point to start executing as a user thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>1st parameter to user thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd parameter to user thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p3</parametername>
</parameternamelist>
<parameterdescription>
<para>3rd parameter to user thread </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="748" column="20" declfile="include/sys/arch_interface.h" declline="748" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1gad53908f229d7e2c333574b009493644b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FUNC_NORETURN void</type>
        <definition>FUNC_NORETURN void arch_syscall_oops</definition>
        <argsstring>(void *ssf)</argsstring>
        <name>arch_syscall_oops</name>
        <param>
          <type>void *</type>
          <declname>ssf</declname>
        </param>
        <briefdescription>
<para>Induce a kernel oops that appears to come from a specific location. </para>
        </briefdescription>
        <detaileddescription>
<para>Normally, <ref refid="include_2kernel_8h_1abde5aa8ca5e64a045b25b88f91370dcd" kindref="member">k_oops()</ref> generates an exception that appears to come from the call site of the <ref refid="include_2kernel_8h_1abde5aa8ca5e64a045b25b88f91370dcd" kindref="member">k_oops()</ref> itself.</para>
<para>However, when validating arguments to a system call, if there are problems we want the oops to appear to come from where the system call was invoked and not inside the validation function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssf</parametername>
</parameternamelist>
<parameterdescription>
<para>System call stack frame pointer. This gets passed as an argument to _k_syscall_handler_t functions and its contents are completely architecture specific. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="765" column="20" declfile="include/sys/arch_interface.h" declline="765" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga174c4f356fe315c523cefbf513858c9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t arch_user_string_nlen</definition>
        <argsstring>(const char *s, size_t maxsize, int *err)</argsstring>
        <name>arch_user_string_nlen</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxsize</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>err</declname>
        </param>
        <briefdescription>
<para>Safely take the length of a potentially bad string. </para>
        </briefdescription>
        <detaileddescription>
<para>This must not fault, instead the err parameter must have -1 written to it. This function otherwise should work exactly like libc <ref refid="string_8h_1afc92d2231e45d19988c7894aa2a07f0c" kindref="member">strnlen()</ref>. On success *err should be set to 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>String to measure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Max length of the string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Error value to write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Length of the string, not counting NULL byte, up to maxsize </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="779" column="8" declfile="include/sys/arch_interface.h" declline="779" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga8c6bb0f6730c115689452b016ac1761f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool arch_mem_coherent</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>arch_mem_coherent</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Detect memory coherence type. </para>
        </briefdescription>
        <detaileddescription>
<para>Required when ARCH_HAS_COHERENCE is true. This function returns true if the byte pointed to lies within an architecture-defined &quot;coherence region&quot; (typically implemented with uncached memory) and can safely be used in multiprocessor code without explicit flush or invalidate operations.</para>
<para><simplesect kind="note"><para>The result is for only the single byte at the specified address, this API is not required to check region boundaries or to expect aligned pointers. The expectation is that the code above will have queried the appropriate address(es). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="797" column="20" bodyfile="include/sys/arch_interface.h" bodystart="797" bodyend="801"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga306e9d0e5f8094cb75686f1c43d068a9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void arch_cohere_stacks</definition>
        <argsstring>(struct k_thread *old_thread, void *old_switch_handle, struct k_thread *new_thread)</argsstring>
        <name>arch_cohere_stacks</name>
        <param>
          <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref> *</type>
          <declname>old_thread</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>old_switch_handle</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref> *</type>
          <declname>new_thread</declname>
        </param>
        <briefdescription>
<para>Ensure cache coherence prior to context switch. </para>
        </briefdescription>
        <detaileddescription>
<para>Required when ARCH_HAS_COHERENCE is true. On cache-incoherent multiprocessor architectures, thread stacks are cached by default for performance reasons. They must therefore be flushed appropriately on context switch. The rules are:</para>
<para><orderedlist>
<listitem><para>The region containing live data in the old stack (generally the bytes between the current stack pointer and the top of the stack memory) must be flushed to underlying storage so a new CPU that runs the same thread sees the correct data. This must happen before the assignment of the switch_handle field in the thread struct which signals the completion of context switch.</para>
</listitem><listitem><para>Any data areas to be read from the new stack (generally the same as the live region when it was saved) should be invalidated (and NOT flushed!) in the data cache. This is because another CPU may have run or re-initialized the thread since this CPU suspended it, and any data present in cache will be stale.</para>
</listitem></orderedlist>
</para>
<para><simplesect kind="note"><para>The kernel will call this function during interrupt exit when a new thread has been chosen to run, and also immediately before entering <ref refid="group__arch-threads_1gab411d82ce5b60f062171f5a19e33e025" kindref="member">arch_switch()</ref> to effect a code-driven context switch. In the latter case, it is very likely that more data will be written to the old_thread stack region after this function returns but before the completion of the switch. Simply flushing naively here is not sufficient on many architectures and coordination with the <ref refid="group__arch-threads_1gab411d82ce5b60f062171f5a19e33e025" kindref="member">arch_switch()</ref> implementation is likely required.</para>
</simplesect>
<itemizedlist>
<listitem><para>old_thread The old thread to be flushed before being allowed to run on other CPUs. </para>
</listitem>
<listitem><para>old_switch_handle The switch handle to be stored into old_thread (it will not be valid until the cache is flushed so is not present yet). This will be NULL if inside z_swap() (because the <ref refid="group__arch-threads_1gab411d82ce5b60f062171f5a19e33e025" kindref="member">arch_switch()</ref> has not saved it yet). </para>
</listitem>
<listitem><para>new_thread The new thread to be invalidated before it runs locally. </para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="845" column="20" bodyfile="include/sys/arch_interface.h" bodystart="845" bodyend="852"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
