<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structbt__audio__broadcast__sink__cb" kind="struct" language="C++" prot="public">
    <compoundname>bt_audio_broadcast_sink_cb</compoundname>
    <includes refid="audio_8h" local="no">audio.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structbt__audio__broadcast__sink__cb_1a32e075309a6f45661936cebd06e4f51d" prot="public" static="no" mutable="no">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref>(*</type>
        <definition>bool(* bt_audio_broadcast_sink_cb::scan_recv) (const struct bt_le_scan_recv_info *info, uint32_t broadcast_id)</definition>
        <argsstring>)(const struct bt_le_scan_recv_info *info, uint32_t broadcast_id)</argsstring>
        <name>scan_recv</name>
        <briefdescription>
<para>Scan receive callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Scan receive callback is called whenever a broadcast source has been found.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertiser packet information. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast_id</parametername>
</parameternamelist>
<parameterdescription>
<para>24-bit broadcast ID</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true to sync to the broadcaster, else false. Syncing to the broadcaster will stop the current scan. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1086" column="1" bodyfile="include/bluetooth/audio/audio.h" bodystart="1086" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__broadcast__sink__cb_1a6ea983e81b0fe3c320d842a6bf1f3af0" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_audio_broadcast_sink_cb::pa_synced) (struct bt_audio_broadcast_sink *sink, struct bt_le_per_adv_sync *sync, uint32_t broadcast_id)</definition>
        <argsstring>)(struct bt_audio_broadcast_sink *sink, struct bt_le_per_adv_sync *sync, uint32_t broadcast_id)</argsstring>
        <name>pa_synced</name>
        <briefdescription>
<para>Periodic advertising sync callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Called when synchronized to a periodic advertising. When synchronized a bt_audio_broadcast_sink structure is allocated for future use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sink</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the allocated sink structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sync</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the periodic advertising sync. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast_id</parametername>
</parameternamelist>
<parameterdescription>
<para>24-bit broadcast ID previously reported by scan_recv. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1100" column="1" bodyfile="include/bluetooth/audio/audio.h" bodystart="1100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__broadcast__sink__cb_1a885f9fd42112d294a6fe1d3540944f80" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_audio_broadcast_sink_cb::base_recv) (struct bt_audio_broadcast_sink *sink, const struct bt_audio_base *base)</definition>
        <argsstring>)(struct bt_audio_broadcast_sink *sink, const struct bt_audio_base *base)</argsstring>
        <name>base_recv</name>
        <briefdescription>
<para>Broadcast Audio Source Endpoint (BASE) received. </para>
        </briefdescription>
        <detaileddescription>
<para>Callback for when we receive a BASE from a broadcaster after syncing to the broadcaster&apos;s periodic advertising.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sink</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the sink structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Broadcast Audio Source Endpoint (BASE). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1112" column="1" bodyfile="include/bluetooth/audio/audio.h" bodystart="1112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__broadcast__sink__cb_1a6bd13ac769ad38910c11a92f3821a484" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_audio_broadcast_sink_cb::syncable) (struct bt_audio_broadcast_sink *sink, bool encrypted)</definition>
        <argsstring>)(struct bt_audio_broadcast_sink *sink, bool encrypted)</argsstring>
        <name>syncable</name>
        <briefdescription>
<para>Broadcast sink is syncable. </para>
        </briefdescription>
        <detaileddescription>
<para>Called whenever a broadcast sink is not synchronized to audio, but the audio is synchronizable. This is inferred when a BIGInfo report is received.</para>
<para>Once this callback has been called, it is possible to call <ref refid="group__bt__audio__client_1ga1284d368c1a803f68a56b6a8797a759d" kindref="member">bt_audio_broadcast_sink_sync()</ref> to synchronize to the audio stream(s).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sink</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the sink structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encrypted</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not the broadcast is encrypted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1127" column="1" bodyfile="include/bluetooth/audio/audio.h" bodystart="1127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__broadcast__sink__cb_1a321927deeb597a5d329e5a3b13148066" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_audio_broadcast_sink_cb::scan_term) (int err)</definition>
        <argsstring>)(int err)</argsstring>
        <name>scan_term</name>
        <briefdescription>
<para>Scan terminated callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Scan terminated callback is called whenever a scan started by <ref refid="group__bt__audio__client_1ga6a0f85e56aacf457af82ec6eb586fd97" kindref="member">bt_audio_broadcast_sink_scan_start()</ref> is terminated before <ref refid="group__bt__audio__client_1gab148a4aca92215189d889ed66829d0c5" kindref="member">bt_audio_broadcast_sink_scan_stop()</ref>.</para>
<para>Typical reasons for this are that the periodic advertising has synchronized (success criteria) or the scan timed out. It may also be called if the periodic advertising failed to synchronize.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>0 in case of success or negative value in case of error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1142" column="1" bodyfile="include/bluetooth/audio/audio.h" bodystart="1142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__broadcast__sink__cb_1af0fa044c02f47d606ac52e9ca0cab8d7" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_audio_broadcast_sink_cb::pa_sync_lost) (struct bt_audio_broadcast_sink *sink)</definition>
        <argsstring>)(struct bt_audio_broadcast_sink *sink)</argsstring>
        <name>pa_sync_lost</name>
        <briefdescription>
<para>Periodic advertising synchronization lost callback. </para>
        </briefdescription>
        <detaileddescription>
<para>The periodic advertising synchronization lost callback is called if the periodic advertising sync is lost. If this happens, the sink object is deleted. To synchronize to the broadcaster again, <ref refid="group__bt__audio__client_1ga6a0f85e56aacf457af82ec6eb586fd97" kindref="member">bt_audio_broadcast_sink_scan_start()</ref> must be called.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sink</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the sink structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1153" column="1" bodyfile="include/bluetooth/audio/audio.h" bodystart="1153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__broadcast__sink__cb_1a8b5402500bc8f0ffd623739731929f5d" prot="public" static="no" mutable="no">
        <type><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref></type>
        <definition>sys_snode_t bt_audio_broadcast_sink_cb::node</definition>
        <argsstring></argsstring>
        <name>node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1156" column="13" bodyfile="include/bluetooth/audio/audio.h" bodystart="1156" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Broadcast Audio Sink callback structure </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>_snode</label>
      </node>
      <node id="1">
        <label>bt_audio_broadcast_sink_cb</label>
        <link refid="structbt__audio__broadcast__sink__cb"/>
        <childnode refid="2" relation="usage">
          <edgelabel>node</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/bluetooth/audio/audio.h" line="1074" column="1" bodyfile="include/bluetooth/audio/audio.h" bodystart="1074" bodyend="1157"/>
    <listofallmembers>
      <member refid="structbt__audio__broadcast__sink__cb_1a885f9fd42112d294a6fe1d3540944f80" prot="public" virt="non-virtual"><scope>bt_audio_broadcast_sink_cb</scope><name>base_recv</name></member>
      <member refid="structbt__audio__broadcast__sink__cb_1a8b5402500bc8f0ffd623739731929f5d" prot="public" virt="non-virtual"><scope>bt_audio_broadcast_sink_cb</scope><name>node</name></member>
      <member refid="structbt__audio__broadcast__sink__cb_1af0fa044c02f47d606ac52e9ca0cab8d7" prot="public" virt="non-virtual"><scope>bt_audio_broadcast_sink_cb</scope><name>pa_sync_lost</name></member>
      <member refid="structbt__audio__broadcast__sink__cb_1a6ea983e81b0fe3c320d842a6bf1f3af0" prot="public" virt="non-virtual"><scope>bt_audio_broadcast_sink_cb</scope><name>pa_synced</name></member>
      <member refid="structbt__audio__broadcast__sink__cb_1a32e075309a6f45661936cebd06e4f51d" prot="public" virt="non-virtual"><scope>bt_audio_broadcast_sink_cb</scope><name>scan_recv</name></member>
      <member refid="structbt__audio__broadcast__sink__cb_1a321927deeb597a5d329e5a3b13148066" prot="public" virt="non-virtual"><scope>bt_audio_broadcast_sink_cb</scope><name>scan_term</name></member>
      <member refid="structbt__audio__broadcast__sink__cb_1a6bd13ac769ad38910c11a92f3821a484" prot="public" virt="non-virtual"><scope>bt_audio_broadcast_sink_cb</scope><name>syncable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
