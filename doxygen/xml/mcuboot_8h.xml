<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="mcuboot_8h" kind="file" language="C++">
    <compoundname>mcuboot.h</compoundname>
    <includes refid="stdbool_8h" local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <incdepgraph>
      <node id="1">
        <label>include/dfu/mcuboot.h</label>
        <link refid="mcuboot_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="5">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structmcuboot__img__sem__ver" prot="public">mcuboot_img_sem_ver</innerclass>
    <innerclass refid="structmcuboot__img__header__v1" prot="public">mcuboot_img_header_v1</innerclass>
    <innerclass refid="structmcuboot__img__header" prot="public">mcuboot_img_header</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="mcuboot_8h_1abb6482b898e8307074d8aef01b1102b7" prot="public" static="no">
        <name>BOOT_SWAP_TYPE_NONE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Attempt to boot the contents of slot 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/mcuboot.h" line="26" column="9" bodyfile="include/dfu/mcuboot.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mcuboot_8h_1a3aa4415c47231a120c4cab455ea0beef" prot="public" static="no">
        <name>BOOT_SWAP_TYPE_TEST</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Swap to slot 1. Absent a confirm command, revert back on next boot. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/mcuboot.h" line="35" column="9" bodyfile="include/dfu/mcuboot.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mcuboot_8h_1a09ebc9ba28e294e71388480bb9e4f677" prot="public" static="no">
        <name>BOOT_SWAP_TYPE_PERM</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Swap to slot 1, and permanently switch to booting its contents. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/mcuboot.h" line="44" column="9" bodyfile="include/dfu/mcuboot.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mcuboot_8h_1a8ca7bd765c6ab669db0774c0b0122494" prot="public" static="no">
        <name>BOOT_SWAP_TYPE_REVERT</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Swap back to alternate slot. A confirm changes this state to NONE. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/mcuboot.h" line="53" column="9" bodyfile="include/dfu/mcuboot.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mcuboot_8h_1a28cb43e6bfacdd285d95751cda80de13" prot="public" static="no">
        <name>BOOT_SWAP_TYPE_FAIL</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Swap failed because image to be run is not valid </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/mcuboot.h" line="62" column="9" bodyfile="include/dfu/mcuboot.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mcuboot_8h_1a1e697351ff503f9a53b17916e63cce06" prot="public" static="no">
        <name>BOOT_IMG_VER_STRLEN_MAX</name>
        <initializer>25  /* 255.255.65535.4294967295\0 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/mcuboot.h" line="65" column="9" bodyfile="include/dfu/mcuboot.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mcuboot_8h_1a4a32d15f3cf338f519af849eba394919" prot="public" static="no">
        <name>BOOT_MAX_ALIGN</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/mcuboot.h" line="68" column="9" bodyfile="include/dfu/mcuboot.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mcuboot_8h_1a3a916a1c0ccc53d12c28de3892af3897" prot="public" static="no">
        <name>BOOT_MAGIC_SZ</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/mcuboot.h" line="70" column="9" bodyfile="include/dfu/mcuboot.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mcuboot_8h_1a8be8758496083a7f91285c8a25e5d85f" prot="public" static="no">
        <name>BOOT_TRAILER_IMG_STATUS_OFFS</name>
        <param><defname>bank_area</defname></param>
        <initializer>						  ((bank_area)-&gt;fa_size -\
						  <ref refid="mcuboot_8h_1a3a916a1c0ccc53d12c28de3892af3897" kindref="member">BOOT_MAGIC_SZ</ref> -\
						  <ref refid="mcuboot_8h_1a4a32d15f3cf338f519af849eba394919" kindref="member">BOOT_MAX_ALIGN</ref> * 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/mcuboot.h" line="73" column="9" bodyfile="include/dfu/mcuboot.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mcuboot_8h_1a9ed69fcd1ebf57cc356ce2bb835853f7" prot="public" static="no">
        <name>BOOT_UPGRADE_TEST</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Boot upgrade request modes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/mcuboot.h" line="220" column="9" bodyfile="include/dfu/mcuboot.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mcuboot_8h_1ab48b79d246df6ebc712040c5ee00aa73" prot="public" static="no">
        <name>BOOT_UPGRADE_PERMANENT</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/mcuboot.h" line="221" column="9" bodyfile="include/dfu/mcuboot.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="mcuboot_8h_1a652ffad55e2917c62a62f6463935fe59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int boot_read_bank_header</definition>
        <argsstring>(uint8_t area_id, struct mcuboot_img_header *header, size_t header_size)</argsstring>
        <name>boot_read_bank_header</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>area_id</declname>
        </param>
        <param>
          <type>struct <ref refid="structmcuboot__img__header" kindref="compound">mcuboot_img_header</ref> *</type>
          <declname>header</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>header_size</declname>
        </param>
        <briefdescription>
<para>Read the MCUboot image header information from an image bank. </para>
        </briefdescription>
        <detaileddescription>
<para>This attempts to parse the image header, From the start of the <emphasis>area_id</emphasis> image.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>area_id</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structflash__area" kindref="compound">flash_area</ref> ID of image bank which stores the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>header</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the returned header information is available in this structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>header_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the header structure passed by the caller. If this is not large enough to contain all of the necessary information, an error is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success, a negative value on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/mcuboot.h" line="149" column="5" declfile="include/dfu/mcuboot.h" declline="149" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="mcuboot_8h_1a2eadd700521a8b94dea3d3d04c9f5bd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool boot_is_img_confirmed</definition>
        <argsstring>(void)</argsstring>
        <name>boot_is_img_confirmed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check if the currently running image is confirmed as OK. </para>
        </briefdescription>
        <detaileddescription>
<para>MCUboot can perform &quot;test&quot; upgrades. When these occur, a new firmware image is installed and booted, but the old version will be reverted at the next reset unless the new image explicitly marks itself OK.</para>
<para>This routine can be used to check if the currently running image has been marked as OK.</para>
<para><simplesect kind="return"><para>True if the image is confirmed as OK, false otherwise. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="mcuboot_8h_1a95ccc9e1c7460fec16b9ce9ac8ad7a72" kindref="member">boot_write_img_confirmed()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/mcuboot.h" line="167" column="6" declfile="include/dfu/mcuboot.h" declline="167" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="mcuboot_8h_1a95ccc9e1c7460fec16b9ce9ac8ad7a72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int boot_write_img_confirmed</definition>
        <argsstring>(void)</argsstring>
        <name>boot_write_img_confirmed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Marks the currently running image as confirmed. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine attempts to mark the currently running firmware image as OK, which will install it permanently, preventing MCUboot from reverting it for an older image at the next reset.</para>
<para>This routine is safe to call if the current image has already been confirmed. It will return a successful result in this case.</para>
<para><simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/mcuboot.h" line="181" column="5" declfile="include/dfu/mcuboot.h" declline="181" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="mcuboot_8h_1aa0f2410f520ef57e6d793c169639a6f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int boot_write_img_confirmed_multi</definition>
        <argsstring>(int image_index)</argsstring>
        <name>boot_write_img_confirmed_multi</name>
        <param>
          <type>int</type>
          <declname>image_index</declname>
        </param>
        <briefdescription>
<para>Marks the image with the given index in the primary slot as confirmed. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine attempts to mark the firmware image in the primary slot as OK, which will install it permanently, preventing MCUboot from reverting it for an older image at the next reset.</para>
<para>This routine is safe to call if the current image has already been confirmed. It will return a successful result in this case.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Image pair index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/mcuboot.h" line="197" column="5" declfile="include/dfu/mcuboot.h" declline="197" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="mcuboot_8h_1aa0ce517ba1c0b21c4898762fab959b12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mcuboot_swap_type</definition>
        <argsstring>(void)</argsstring>
        <name>mcuboot_swap_type</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Determines the action, if any, that mcuboot will take on the next reboot. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a BOOT_SWAP_TYPE_[...] constant on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/mcuboot.h" line="205" column="5" declfile="include/dfu/mcuboot.h" declline="205" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="mcuboot_8h_1a1e679c6fefe7deaaed9a2265ce69cf1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mcuboot_swap_type_multi</definition>
        <argsstring>(int image_index)</argsstring>
        <name>mcuboot_swap_type_multi</name>
        <param>
          <type>int</type>
          <declname>image_index</declname>
        </param>
        <briefdescription>
<para>Determines the action, if any, that mcuboot will take on the next reboot. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Image pair index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a BOOT_SWAP_TYPE_[...] constant on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/mcuboot.h" line="216" column="5" declfile="include/dfu/mcuboot.h" declline="216" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="mcuboot_8h_1ad47f2356938a7b5acf8e0bbe4d9e4494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int boot_request_upgrade</definition>
        <argsstring>(int permanent)</argsstring>
        <name>boot_request_upgrade</name>
        <param>
          <type>int</type>
          <declname>permanent</declname>
        </param>
        <briefdescription>
<para>Marks the image in slot 1 as pending. On the next reboot, the system will perform a boot of the slot 1 image. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>permanent</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the image should be used permanently or only tested once: BOOT_UPGRADE_TEST=run image once, then confirm or revert. BOOT_UPGRADE_PERMANENT=run image forever. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/mcuboot.h" line="233" column="5" declfile="include/dfu/mcuboot.h" declline="233" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="mcuboot_8h_1ae9e0e43663c3671aa4b4df6d30511d39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int boot_request_upgrade_multi</definition>
        <argsstring>(int image_index, int permanent)</argsstring>
        <name>boot_request_upgrade_multi</name>
        <param>
          <type>int</type>
          <declname>image_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>permanent</declname>
        </param>
        <briefdescription>
<para>Marks the image with the given index in the secondary slot as pending. On the next reboot, the system will perform a boot of the secondary slot image. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Image pair index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>permanent</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the image should be used permanently or only tested once: BOOT_UPGRADE_TEST=run image once, then confirm or revert. BOOT_UPGRADE_PERMANENT=run image forever. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/mcuboot.h" line="247" column="5" declfile="include/dfu/mcuboot.h" declline="247" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="mcuboot_8h_1a03b691762d00e4cab6a5bd91979d8d80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int boot_erase_img_bank</definition>
        <argsstring>(uint8_t area_id)</argsstring>
        <name>boot_erase_img_bank</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>area_id</declname>
        </param>
        <briefdescription>
<para>Erase the image Bank. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>area_id</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structflash__area" kindref="compound">flash_area</ref> ID of image bank to be erased. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/mcuboot.h" line="255" column="5" declfile="include/dfu/mcuboot.h" declline="255" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016<sp/>Linaro<sp/>Limited</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_DFU_MCUBOOT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_DFU_MCUBOOT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdbool_8h" kindref="compound">stdbool.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BOOT_SWAP_TYPE_NONE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BOOT_SWAP_TYPE_NONE<sp/>!=<sp/>1<sp/></highlight><highlight class="comment">/*ensure<sp/>the<sp/>same<sp/>definition<sp/>in<sp/>MCUboot<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;definition<sp/>incompatible&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="mcuboot_8h_1abb6482b898e8307074d8aef01b1102b7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_SWAP_TYPE_NONE<sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BOOT_SWAP_TYPE_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BOOT_SWAP_TYPE_TEST<sp/>!=<sp/>2<sp/><sp/></highlight><highlight class="comment">/*ensure<sp/>the<sp/>same<sp/>definition<sp/>in<sp/>MCUboot<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;definition<sp/>incompatible&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="mcuboot_8h_1a3aa4415c47231a120c4cab455ea0beef" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_SWAP_TYPE_TEST<sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BOOT_SWAP_TYPE_PERM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BOOT_SWAP_TYPE_PERM<sp/>!=<sp/>3<sp/><sp/></highlight><highlight class="comment">/*ensure<sp/>the<sp/>same<sp/>definition<sp/>in<sp/>MCUboot<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;definition<sp/>incompatible&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="mcuboot_8h_1a09ebc9ba28e294e71388480bb9e4f677" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_SWAP_TYPE_PERM<sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BOOT_SWAP_TYPE_REVERT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BOOT_SWAP_TYPE_REVERT<sp/>!=<sp/>4<sp/><sp/></highlight><highlight class="comment">/*ensure<sp/>the<sp/>same<sp/>definition<sp/>in<sp/>MCUboot<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;definition<sp/>incompatible&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="mcuboot_8h_1a8ca7bd765c6ab669db0774c0b0122494" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_SWAP_TYPE_REVERT<sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BOOT_SWAP_TYPE_FAIL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BOOT_SWAP_TYPE_FAIL<sp/>!=<sp/>5<sp/><sp/></highlight><highlight class="comment">/*ensure<sp/>the<sp/>same<sp/>definition<sp/>in<sp/>MCUboot<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;definition<sp/>incompatible&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="mcuboot_8h_1a28cb43e6bfacdd285d95751cda80de13" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_SWAP_TYPE_FAIL<sp/><sp/><sp/><sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="mcuboot_8h_1a1e697351ff503f9a53b17916e63cce06" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_IMG_VER_STRLEN_MAX<sp/>25<sp/><sp/></highlight><highlight class="comment">/*<sp/>255.255.65535.4294967295\0<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Trailer:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="mcuboot_8h_1a4a32d15f3cf338f519af849eba394919" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_MAX_ALIGN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BOOT_MAGIC_SZ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="mcuboot_8h_1a3a916a1c0ccc53d12c28de3892af3897" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_MAGIC_SZ<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="mcuboot_8h_1a8be8758496083a7f91285c8a25e5d85f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_TRAILER_IMG_STATUS_OFFS(bank_area)<sp/>((bank_area)-&gt;fa_size<sp/>-\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOT_MAGIC_SZ<sp/>-\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOT_MAX_ALIGN<sp/>*<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="structmcuboot__img__sem__ver" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmcuboot__img__sem__ver" kindref="compound">mcuboot_img_sem_ver</ref><sp/>{</highlight></codeline>
<codeline lineno="84" refid="structmcuboot__img__sem__ver_1ae6fa8e6cc51e57e24a2d99670e543998" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structmcuboot__img__sem__ver_1ae6fa8e6cc51e57e24a2d99670e543998" kindref="member">major</ref>;</highlight></codeline>
<codeline lineno="85" refid="structmcuboot__img__sem__ver_1a3ab711b800ab894e201d175b491a9552" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structmcuboot__img__sem__ver_1a3ab711b800ab894e201d175b491a9552" kindref="member">minor</ref>;</highlight></codeline>
<codeline lineno="86" refid="structmcuboot__img__sem__ver_1aabecc9fffb8ec7a7f02f2894f8d6e0f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structmcuboot__img__sem__ver_1aabecc9fffb8ec7a7f02f2894f8d6e0f0" kindref="member">revision</ref>;</highlight></codeline>
<codeline lineno="87" refid="structmcuboot__img__sem__ver_1abf2e489560daefaa0c5d33e9c7535dab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structmcuboot__img__sem__ver_1abf2e489560daefaa0c5d33e9c7535dab" kindref="member">build_num</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="structmcuboot__img__header__v1" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmcuboot__img__header__v1" kindref="compound">mcuboot_img_header_v1</ref><sp/>{</highlight></codeline>
<codeline lineno="101" refid="structmcuboot__img__header__v1_1a83a042079d850f383eef7a46cad14fa4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structmcuboot__img__header__v1_1a83a042079d850f383eef7a46cad14fa4" kindref="member">image_size</ref>;</highlight></codeline>
<codeline lineno="103" refid="structmcuboot__img__header__v1_1a01dd3b50bb00accf4108b08c01df4e2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmcuboot__img__sem__ver" kindref="compound">mcuboot_img_sem_ver</ref><sp/><ref refid="structmcuboot__img__header__v1_1a01dd3b50bb00accf4108b08c01df4e2b" kindref="member">sem_ver</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="structmcuboot__img__header" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmcuboot__img__header" kindref="compound">mcuboot_img_header</ref><sp/>{</highlight></codeline>
<codeline lineno="123" refid="structmcuboot__img__header_1ab5147e9586062d4dd5b381af13f1e82d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structmcuboot__img__header_1ab5147e9586062d4dd5b381af13f1e82d" kindref="member">mcuboot_version</ref>;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="131" refid="structmcuboot__img__header_1aff12aff412ea774f96948e7db0b25009" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmcuboot__img__header__v1" kindref="compound">mcuboot_img_header_v1</ref><sp/><ref refid="structmcuboot__img__header_1aff12aff412ea774f96948e7db0b25009" kindref="member">v1</ref>;</highlight></codeline>
<codeline lineno="132" refid="structmcuboot__img__header_1aa3835b7094f6e6a3c80f9058a73c0038" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><ref refid="structmcuboot__img__header_1aa3835b7094f6e6a3c80f9058a73c0038" kindref="member">h</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="mcuboot_8h_1a652ffad55e2917c62a62f6463935fe59" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mcuboot_8h_1a652ffad55e2917c62a62f6463935fe59" kindref="member">boot_read_bank_header</ref>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>area_id,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmcuboot__img__header" kindref="compound">mcuboot_img_header</ref><sp/>*header,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>header_size);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="mcuboot_8h_1a2eadd700521a8b94dea3d3d04c9f5bd8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="mcuboot_8h_1a2eadd700521a8b94dea3d3d04c9f5bd8" kindref="member">boot_is_img_confirmed</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="mcuboot_8h_1a95ccc9e1c7460fec16b9ce9ac8ad7a72" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mcuboot_8h_1a95ccc9e1c7460fec16b9ce9ac8ad7a72" kindref="member">boot_write_img_confirmed</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="mcuboot_8h_1aa0f2410f520ef57e6d793c169639a6f8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mcuboot_8h_1aa0f2410f520ef57e6d793c169639a6f8" kindref="member">boot_write_img_confirmed_multi</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>image_index);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="mcuboot_8h_1aa0ce517ba1c0b21c4898762fab959b12" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mcuboot_8h_1aa0ce517ba1c0b21c4898762fab959b12" kindref="member">mcuboot_swap_type</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="mcuboot_8h_1a1e679c6fefe7deaaed9a2265ce69cf1e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mcuboot_8h_1a1e679c6fefe7deaaed9a2265ce69cf1e" kindref="member">mcuboot_swap_type_multi</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>image_index);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="mcuboot_8h_1a9ed69fcd1ebf57cc356ce2bb835853f7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_UPGRADE_TEST<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="mcuboot_8h_1ab48b79d246df6ebc712040c5ee00aa73" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOT_UPGRADE_PERMANENT<sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="mcuboot_8h_1ad47f2356938a7b5acf8e0bbe4d9e4494" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mcuboot_8h_1ad47f2356938a7b5acf8e0bbe4d9e4494" kindref="member">boot_request_upgrade</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>permanent);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="mcuboot_8h_1ae9e0e43663c3671aa4b4df6d30511d39" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mcuboot_8h_1ae9e0e43663c3671aa4b4df6d30511d39" kindref="member">boot_request_upgrade_multi</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>image_index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>permanent);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="mcuboot_8h_1a03b691762d00e4cab6a5bd91979d8d80" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mcuboot_8h_1a03b691762d00e4cab6a5bd91979d8d80" kindref="member">boot_erase_img_bank</ref>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>area_id);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_DFU_MCUBOOT_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/dfu/mcuboot.h"/>
  </compounddef>
</doxygen>
