<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="drivers_2spi_8h" kind="file" language="C++">
    <compoundname>spi.h</compoundname>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">device.h</includes>
    <includes refid="dt-bindings_2spi_2spi_8h" local="no">dt-bindings/spi/spi.h</includes>
    <includes refid="drivers_2gpio_8h" local="no">drivers/gpio.h</includes>
    <includes local="no">syscalls/spi.h</includes>
    <incdepgraph>
      <node id="7">
        <label>drivers/gpio.h</label>
        <link refid="drivers_2gpio_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/drivers/spi.h</label>
        <link refid="drivers_2spi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>dt-bindings/gpio/gpio.h</label>
        <link refid="dt-bindings_2gpio_2gpio_8h"/>
      </node>
      <node id="6">
        <label>dt-bindings/spi/spi.h</label>
        <link refid="dt-bindings_2spi_2spi_8h"/>
      </node>
      <node id="8">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="17">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="2">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="4">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="5">
        <label>device.h</label>
      </node>
      <node id="12">
        <label>stdarg.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="21">
        <label>syscalls/gpio.h</label>
      </node>
      <node id="22">
        <label>syscalls/spi.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structspi__cs__control" prot="public">spi_cs_control</innerclass>
    <innerclass refid="structspi__config" prot="public">spi_config</innerclass>
    <innerclass refid="structspi__dt__spec" prot="public">spi_dt_spec</innerclass>
    <innerclass refid="structspi__buf" prot="public">spi_buf</innerclass>
    <innerclass refid="structspi__buf__set" prot="public">spi_buf_set</innerclass>
    <innerclass refid="structspi__driver__api" prot="public">spi_driver_api</innerclass>
      <sectiondef kind="user-defined">
      <header>SPI operational mode</header>
      <memberdef kind="define" id="group__spi__interface_1ga5b9d40fa0f455b1e63f8040b3316b0da" prot="public" static="no">
        <name>SPI_OP_MODE_MASTER</name>
        <initializer>0U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="36" column="9" bodyfile="include/drivers/spi.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1ga1c3310d3711cb99cdb78fa9d1c970779" prot="public" static="no">
        <name>SPI_OP_MODE_SLAVE</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="37" column="9" bodyfile="include/drivers/spi.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1gaa5e4382992dfb8e33af2dc232ee67b43" prot="public" static="no">
        <name>SPI_OP_MODE_MASK</name>
        <initializer>0x1U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="38" column="9" bodyfile="include/drivers/spi.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1ga6dd4395e027407a7b3b92cff2abcc8b3" prot="public" static="no">
        <name>SPI_OP_MODE_GET</name>
        <param><defname>_operation_</defname></param>
        <initializer>((_operation_) &amp; <ref refid="group__spi__interface_1gaa5e4382992dfb8e33af2dc232ee67b43" kindref="member">SPI_OP_MODE_MASK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="39" column="9" bodyfile="include/drivers/spi.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>SPI Polarity &amp; Phase Modes</header>
      <memberdef kind="define" id="group__spi__interface_1ga5a2be1003873beaa0ade10e7218d67d5" prot="public" static="no">
        <name>SPI_MODE_CPOL</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clock Polarity: if set, clock idle state will be 1 and active state will be 0. If untouched, the inverse will be true which is the default. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="52" column="9" bodyfile="include/drivers/spi.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1ga35e98b37e3ec4889a90100abe884590f" prot="public" static="no">
        <name>SPI_MODE_CPHA</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clock Phase: this dictates when is the data captured, and depends clock&apos;s polarity. When SPI_MODE_CPOL is set and this bit as well, capture will occur on low to high transition and high to low if this bit is not set (default). This is fully reversed if CPOL is not set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="61" column="9" bodyfile="include/drivers/spi.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1ga8619b297de563eca6852af34c79daa62" prot="public" static="no">
        <name>SPI_MODE_LOOP</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whatever data is transmitted is looped-back to the receiving buffer of the controller. This is fully controller dependent as some may not support this, and can be used for testing purposes only. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="68" column="9" bodyfile="include/drivers/spi.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1gaa64ece5364d0d7e1226d50e8773ab654" prot="public" static="no">
        <name>SPI_MODE_MASK</name>
        <initializer>(0xEU)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="70" column="9" bodyfile="include/drivers/spi.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1gaa3582b96ff42dba0b0ad815c727d5e42" prot="public" static="no">
        <name>SPI_MODE_GET</name>
        <param><defname>_mode_</defname></param>
        <initializer>	((_mode_) &amp; <ref refid="group__spi__interface_1gaa64ece5364d0d7e1226d50e8773ab654" kindref="member">SPI_MODE_MASK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="71" column="9" bodyfile="include/drivers/spi.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>SPI Transfer modes (host controller dependent)</header>
      <memberdef kind="define" id="group__spi__interface_1ga7761f42c6241cf396fc02d0de8617e46" prot="public" static="no">
        <name>SPI_TRANSFER_MSB</name>
        <initializer>(0U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="80" column="9" bodyfile="include/drivers/spi.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1ga93504a76a265bedbe781c107beebc9dc" prot="public" static="no">
        <name>SPI_TRANSFER_LSB</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="81" column="9" bodyfile="include/drivers/spi.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>SPI word size</header>
      <memberdef kind="define" id="group__spi__interface_1ga13584494d23db28471ffc68580878f9d" prot="public" static="no">
        <name>SPI_WORD_SIZE_SHIFT</name>
        <initializer>(5U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="88" column="9" bodyfile="include/drivers/spi.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1ga77146b5c9ce71c3a8352b5026f77cda6" prot="public" static="no">
        <name>SPI_WORD_SIZE_MASK</name>
        <initializer>(0x3FU &lt;&lt; <ref refid="group__spi__interface_1ga13584494d23db28471ffc68580878f9d" kindref="member">SPI_WORD_SIZE_SHIFT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="89" column="9" bodyfile="include/drivers/spi.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1ga7386c70bd669142bb7558526175765cc" prot="public" static="no">
        <name>SPI_WORD_SIZE_GET</name>
        <param><defname>_operation_</defname></param>
        <initializer>	(((_operation_) &amp; <ref refid="group__spi__interface_1ga77146b5c9ce71c3a8352b5026f77cda6" kindref="member">SPI_WORD_SIZE_MASK</ref>) &gt;&gt; <ref refid="group__spi__interface_1ga13584494d23db28471ffc68580878f9d" kindref="member">SPI_WORD_SIZE_SHIFT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="90" column="9" bodyfile="include/drivers/spi.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1gaaea60640bb9223bbaf94338d07d9d07c" prot="public" static="no">
        <name>SPI_WORD_SET</name>
        <param><defname>_word_size_</defname></param>
        <initializer>	((_word_size_) &lt;&lt; <ref refid="group__spi__interface_1ga13584494d23db28471ffc68580878f9d" kindref="member">SPI_WORD_SIZE_SHIFT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="93" column="9" bodyfile="include/drivers/spi.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Specific SPI devices control bits</header>
      <memberdef kind="define" id="group__spi__interface_1gae917312adef283b4bf67cdb53566e4bb" prot="public" static="no">
        <name>SPI_HOLD_ON_CS</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(12)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="102" column="9" bodyfile="include/drivers/spi.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1gafe8dc164d6fc0a0f93f2ff9d5381af14" prot="public" static="no">
        <name>SPI_LOCK_ON</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(13)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="108" column="9" bodyfile="include/drivers/spi.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1ga44076fa14703997f7e3aefb2bfccd801" prot="public" static="no">
        <name>SPI_CS_ACTIVE_HIGH</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(14)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="117" column="9" bodyfile="include/drivers/spi.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>SPI MISO lines (if \verbatim embed:rst:inline :kconfig:`CONFIG_SPI_EXTENDED_MODES` \endverbatim is enabled)</header>
      <description><para>Some controllers support dual, quad or octal MISO lines connected to slaves. Default is single, which is the case most of the time. Without <verbatim>embed:rst:inline :kconfig:`CONFIG_SPI_EXTENDED_MODES` </verbatim> being enabled, single is the only supported one. </para>
</description>
      <memberdef kind="define" id="group__spi__interface_1ga7a183f157e8cb8b437857a0babbd923b" prot="public" static="no">
        <name>SPI_LINES_SINGLE</name>
        <initializer>(0U &lt;&lt; 16)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="129" column="9" bodyfile="include/drivers/spi.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1ga120ab60329d664d5d6e828f90251a98a" prot="public" static="no">
        <name>SPI_LINES_DUAL</name>
        <initializer>(1U &lt;&lt; 16)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="130" column="9" bodyfile="include/drivers/spi.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1ga30866b948e995224de854e10a428bda5" prot="public" static="no">
        <name>SPI_LINES_QUAD</name>
        <initializer>(2U &lt;&lt; 16)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="131" column="9" bodyfile="include/drivers/spi.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1ga512d76085e600886654b8541aab31cf7" prot="public" static="no">
        <name>SPI_LINES_OCTAL</name>
        <initializer>(3U &lt;&lt; 16)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="132" column="9" bodyfile="include/drivers/spi.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1gadc79f986c4b30fe5b263841cd8bb5676" prot="public" static="no">
        <name>SPI_LINES_MASK</name>
        <initializer>(0x3U &lt;&lt; 16)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="134" column="9" bodyfile="include/drivers/spi.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__spi__interface_1ga48aa19f45413d56b03596d10b72c732e" prot="public" static="no">
        <name>SPI_CS_GPIOS_DT_SPEC_GET</name>
        <param><defname>spi_dev</defname></param>
        <initializer>	<ref refid="group__gpio__interface_1gacb1077b77aecf8f1a9c7636ea583c4cf" kindref="member">GPIO_DT_SPEC_GET_BY_IDX</ref>(<ref refid="group__devicetree-generic-bus_1ga1082d31ac2dafdf9e085d4c23f2169dc" kindref="member">DT_BUS</ref>(spi_dev), cs_gpios, <ref refid="group__devicetree-reg-prop_1gac6d8279c32351ced4c0ac7f32270974e" kindref="member">DT_REG_ADDR</ref>(spi_dev))</initializer>
        <briefdescription>
<para>Get a <computeroutput>struct <ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref></computeroutput> for a SPI device&apos;s chip select pin. </para>
        </briefdescription>
        <detaileddescription>
<para>Example devicetree fragment:</para>
<para><programlisting filename=".devicetree"><codeline><highlight class="normal">gpio1:<sp/>gpio@...<sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">gpio2:<sp/>gpio@...<sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">spi@...<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compatible<sp/>=<sp/>&quot;vnd,spi&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs-gpios<sp/>=<sp/>&lt;&amp;gpio1<sp/>10<sp/>GPIO_ACTIVE_LOW&gt;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&amp;gpio2<sp/>20<sp/>GPIO_ACTIVE_LOW&gt;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a:<sp/>spi-dev-a@0<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg<sp/>=<sp/>&lt;0&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b:<sp/>spi-dev-b@1<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg<sp/>=<sp/>&lt;1&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para>Example usage:</para>
<para><programlisting filename=".c"><codeline><highlight class="normal"><ref refid="group__spi__interface_1ga48aa19f45413d56b03596d10b72c732e" kindref="member">SPI_CS_GPIOS_DT_SPEC_GET</ref>(<ref refid="group__devicetree-generic-id_1gab7d23294a6bf7fd44a98b48ec47d8a79" kindref="member">DT_NODELABEL</ref>(a))<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{<sp/>DEVICE_DT_GET(DT_NODELABEL(gpio1)),<sp/>10,<sp/>GPIO_ACTIVE_LOW<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__spi__interface_1ga48aa19f45413d56b03596d10b72c732e" kindref="member">SPI_CS_GPIOS_DT_SPEC_GET</ref>(<ref refid="group__devicetree-generic-id_1gab7d23294a6bf7fd44a98b48ec47d8a79" kindref="member">DT_NODELABEL</ref>(b))<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{<sp/>DEVICE_DT_GET(DT_NODELABEL(gpio2)),<sp/>20,<sp/>GPIO_ACTIVE_LOW<sp/>}</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spi_dev</parametername>
</parameternamelist>
<parameterdescription>
<para>a SPI device node identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref> struct corresponding with spi_dev&apos;s chip select </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="204" column="9" bodyfile="include/drivers/spi.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1gabcdae2d5e9cb868498c6782cb631b9cf" prot="public" static="no">
        <name>SPI_CS_CONTROL_PTR_DT</name>
        <param><defname>node_id</defname></param>
        <param><defname>delay_</defname></param>
        <initializer>	(&amp;(struct <ref refid="structspi__cs__control" kindref="compound">spi_cs_control</ref>) {				  \
		.gpio = <ref refid="group__spi__interface_1ga48aa19f45413d56b03596d10b72c732e" kindref="member">SPI_CS_GPIOS_DT_SPEC_GET</ref>(node_id), \
		.delay = (delay_),				  \
	})</initializer>
        <briefdescription>
<para>Initialize and get a pointer to a <computeroutput><ref refid="structspi__cs__control" kindref="compound">spi_cs_control</ref></computeroutput> from a devicetree node identifier. </para>
        </briefdescription>
        <detaileddescription>
<para>This helper is useful for initializing a device on a SPI bus. It initializes a struct <ref refid="structspi__cs__control" kindref="compound">spi_cs_control</ref> and returns a pointer to it. Here, <computeroutput>node_id</computeroutput> is a node identifier for a SPI device, not a SPI controller.</para>
<para>Example devicetree fragment: <verbatim>spi@... {
        cs-gpios = &lt;&amp;gpio0 1 GPIO_ACTIVE_LOW&gt;;
        spidev: spi-device@0 { ... };
};
</verbatim> Assume that <computeroutput>gpio0</computeroutput> follows the standard convention for specifying GPIOs, i.e. it has the following in its binding: <verbatim>gpio-cells:
- pin
- flags
</verbatim> Example usage: <verbatim>struct spi_cs_control *ctrl =
        SPI_CS_CONTROL_PTR_DT(DT_NODELABEL(spidev), 2);
</verbatim> This example is equivalent to: <verbatim>struct spi_cs_control *ctrl =
        &amp;(struct spi_cs_control) {
                .gpio_dev = DEVICE_DT_GET(DT_NODELABEL(gpio0)),
                .delay = 2,
                .gpio_pin = 1,
                .gpio_dt_flags = GPIO_ACTIVE_LOW
        };
</verbatim> This macro is not available in C++.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Devicetree node identifier for a device on a SPI bus </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay_</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>delay</computeroutput> field to set in the <computeroutput><ref refid="structspi__cs__control" kindref="compound">spi_cs_control</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the <computeroutput><ref refid="structspi__cs__control" kindref="compound">spi_cs_control</ref></computeroutput> structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="252" column="9" bodyfile="include/drivers/spi.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1gad4272242d8016742eb9035d0db3d9d6a" prot="public" static="no">
        <name>SPI_CS_CONTROL_PTR_DT_INST</name>
        <param><defname>inst</defname></param>
        <param><defname>delay_</defname></param>
        <initializer>	<ref refid="group__spi__interface_1gabcdae2d5e9cb868498c6782cb631b9cf" kindref="member">SPI_CS_CONTROL_PTR_DT</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), delay_)</initializer>
        <briefdescription>
<para>Get a pointer to a <computeroutput><ref refid="structspi__cs__control" kindref="compound">spi_cs_control</ref></computeroutput> from a devicetree node. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to <computeroutput><ref refid="group__spi__interface_1gabcdae2d5e9cb868498c6782cb631b9cf" kindref="member">SPI_CS_CONTROL_PTR_DT(DT_DRV_INST(inst), delay)</ref></computeroutput>.</para>
<para>Therefore, <computeroutput>DT_DRV_COMPAT</computeroutput> must already be defined before using this macro.</para>
<para>This macro is not available in C++.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Devicetree node instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay_</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>delay</computeroutput> field to set in the <computeroutput><ref refid="structspi__cs__control" kindref="compound">spi_cs_control</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the <computeroutput><ref refid="structspi__cs__control" kindref="compound">spi_cs_control</ref></computeroutput> structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="273" column="9" bodyfile="include/drivers/spi.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1ga822af066ee0829aee405c034bb967463" prot="public" static="no">
        <name>SPI_CONFIG_DT</name>
        <param><defname>node_id</defname></param>
        <param><defname>operation_</defname></param>
        <param><defname>delay_</defname></param>
        <initializer>	{								\
		.frequency = <ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, spi_max_frequency),	\
		.operation = (operation_) |				\
			<ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, duplex) |			\
			<ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, frame_format),			\
		.slave = <ref refid="group__devicetree-reg-prop_1gac6d8279c32351ced4c0ac7f32270974e" kindref="member">DT_REG_ADDR</ref>(node_id),				\
		.cs = <ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(					\
			<ref refid="group__devicetree-spi_1gad66b759d6aa4826f2c68a94e8708ad4f" kindref="member">DT_SPI_DEV_HAS_CS_GPIOS</ref>(node_id),		\
			(<ref refid="group__spi__interface_1gabcdae2d5e9cb868498c6782cb631b9cf" kindref="member">SPI_CS_CONTROL_PTR_DT</ref>(node_id, delay_)),	\
			(NULL)),					\
	}</initializer>
        <briefdescription>
<para>Structure initializer for <ref refid="structspi__config" kindref="compound">spi_config</ref> from devicetree. </para>
        </briefdescription>
        <detaileddescription>
<para>This helper macro expands to a static initializer for a <computeroutput>struct <ref refid="structspi__config" kindref="compound">spi_config</ref></computeroutput> by reading the relevant <computeroutput>frequency</computeroutput>, <computeroutput>slave</computeroutput>, and <computeroutput>cs</computeroutput> data from the devicetree.</para>
<para>Important: the <computeroutput>cs</computeroutput> field is initialized using <ref refid="group__spi__interface_1gabcdae2d5e9cb868498c6782cb631b9cf" kindref="member">SPI_CS_CONTROL_PTR_DT()</ref>. The <computeroutput>gpio_dev</computeroutput> value pointed to by this structure must be checked using <ref refid="group__device__model_1gaa4944bd850e90cbd52b0489f9b12edfb" kindref="member">device_is_ready()</ref> before use.</para>
<para>This macro is not available in C++.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Devicetree node identifier for the SPI device whose struct <ref refid="structspi__config" kindref="compound">spi_config</ref> to create an initializer for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operation_</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired <computeroutput>operation</computeroutput> field in the struct <ref refid="structspi__config" kindref="compound">spi_config</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay_</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired <computeroutput>delay</computeroutput> field in the struct <ref refid="structspi__config" kindref="compound">spi_config</ref>&apos;s <ref refid="structspi__cs__control" kindref="compound">spi_cs_control</ref>, if there is one </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="337" column="9" bodyfile="include/drivers/spi.h" bodystart="337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1gadc1e7de7925603adfedbac35fdabc78a" prot="public" static="no">
        <name>SPI_CONFIG_DT_INST</name>
        <param><defname>inst</defname></param>
        <param><defname>operation_</defname></param>
        <param><defname>delay_</defname></param>
        <initializer>	<ref refid="group__spi__interface_1ga822af066ee0829aee405c034bb967463" kindref="member">SPI_CONFIG_DT</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), operation_, delay_)</initializer>
        <briefdescription>
<para>Structure initializer for <ref refid="structspi__config" kindref="compound">spi_config</ref> from devicetree instance. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to <computeroutput><ref refid="group__spi__interface_1ga822af066ee0829aee405c034bb967463" kindref="member">SPI_CONFIG_DT(DT_DRV_INST(inst), operation_, delay_)</ref></computeroutput>.</para>
<para>This macro is not available in C++.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Devicetree instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operation_</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired <computeroutput>operation</computeroutput> field in the struct <ref refid="structspi__config" kindref="compound">spi_config</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay_</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired <computeroutput>delay</computeroutput> field in the struct <ref refid="structspi__config" kindref="compound">spi_config</ref>&apos;s <ref refid="structspi__cs__control" kindref="compound">spi_cs_control</ref>, if there is one </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="363" column="9" bodyfile="include/drivers/spi.h" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1gaec6a8fde1c3ec6349a601a2d5f7af785" prot="public" static="no">
        <name>SPI_DT_SPEC_GET</name>
        <param><defname>node_id</defname></param>
        <param><defname>operation_</defname></param>
        <param><defname>delay_</defname></param>
        <initializer>	{							     \
		.bus = <ref refid="group__device__model_1ga9a65996ce21f43acb7db061e23b48ec7" kindref="member">DEVICE_DT_GET</ref>(<ref refid="group__devicetree-generic-bus_1ga1082d31ac2dafdf9e085d4c23f2169dc" kindref="member">DT_BUS</ref>(node_id)),		     \
		.config = <ref refid="group__spi__interface_1ga822af066ee0829aee405c034bb967463" kindref="member">SPI_CONFIG_DT</ref>(node_id, operation_, delay_) \
	}</initializer>
        <briefdescription>
<para>Structure initializer for <ref refid="structspi__dt__spec" kindref="compound">spi_dt_spec</ref> from devicetree. </para>
        </briefdescription>
        <detaileddescription>
<para>This helper macro expands to a static initializer for a <computeroutput>struct <ref refid="structspi__dt__spec" kindref="compound">spi_dt_spec</ref></computeroutput> by reading the relevant bus, frequency, slave, and cs data from the devicetree.</para>
<para>Important: multiple fields are automatically constructed by this macro which must be checked before use. <ref refid="group__spi__interface_1ga7d5fcb15e3a1082ea63203b185c6a207" kindref="member">spi_is_ready</ref> performs the required <ref refid="group__device__model_1gaa4944bd850e90cbd52b0489f9b12edfb" kindref="member">device_is_ready</ref> checks.</para>
<para>This macro is not available in C++.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Devicetree node identifier for the SPI device whose struct <ref refid="structspi__dt__spec" kindref="compound">spi_dt_spec</ref> to create an initializer for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operation_</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired <computeroutput>operation</computeroutput> field in the struct <ref refid="structspi__config" kindref="compound">spi_config</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay_</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired <computeroutput>delay</computeroutput> field in the struct <ref refid="structspi__config" kindref="compound">spi_config</ref>&apos;s <ref refid="structspi__cs__control" kindref="compound">spi_cs_control</ref>, if there is one </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="398" column="9" bodyfile="include/drivers/spi.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__spi__interface_1ga91c595b7567af23b447c755d898608f3" prot="public" static="no">
        <name>SPI_DT_SPEC_INST_GET</name>
        <param><defname>inst</defname></param>
        <param><defname>operation_</defname></param>
        <param><defname>delay_</defname></param>
        <initializer>	<ref refid="group__spi__interface_1gaec6a8fde1c3ec6349a601a2d5f7af785" kindref="member">SPI_DT_SPEC_GET</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), operation_, delay_)</initializer>
        <briefdescription>
<para>Structure initializer for <ref refid="structspi__dt__spec" kindref="compound">spi_dt_spec</ref> from devicetree instance. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to <computeroutput><ref refid="group__spi__interface_1gaec6a8fde1c3ec6349a601a2d5f7af785" kindref="member">SPI_DT_SPEC_GET(DT_DRV_INST(inst), operation_, delay_)</ref></computeroutput>.</para>
<para>This macro is not available in C++.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Devicetree instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operation_</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired <computeroutput>operation</computeroutput> field in the struct <ref refid="structspi__config" kindref="compound">spi_config</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay_</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired <computeroutput>delay</computeroutput> field in the struct <ref refid="structspi__config" kindref="compound">spi_config</ref>&apos;s <ref refid="structspi__cs__control" kindref="compound">spi_cs_control</ref>, if there is one </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="417" column="9" bodyfile="include/drivers/spi.h" bodystart="417" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__spi__interface_1gaa03a4e0ce32b9fc5f87d8df9e409eaf2" prot="public" static="no">
        <type>int(*</type>
        <definition>spi_api_io</definition>
        <argsstring>)(const struct device *dev, const struct spi_config *config, const struct spi_buf_set *tx_bufs, const struct spi_buf_set *rx_bufs)</argsstring>
        <name>spi_api_io</name>
        <briefdescription>
<para>Callback API for I/O See <ref refid="group__spi__interface_1gad51054c1ba259db5a64619788506a6f5" kindref="member">spi_transceive()</ref> for argument descriptions. </para>
        </briefdescription>
        <detaileddescription>
<para>Callback API for asynchronous I/O See <ref refid="group__spi__interface_1ga57abc5c454afc239feba1a3e9542a12c" kindref="member">spi_transceive_async()</ref> for argument descriptions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="450" column="9" bodyfile="include/drivers/spi.h" bodystart="450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__spi__interface_1ga1fd3ad728f7e88c7f358bf93a59add80" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* spi_api_io_async) (const struct device *dev, const struct spi_config *config, const struct spi_buf_set *tx_bufs, const struct spi_buf_set *rx_bufs, struct k_poll_signal *async)</definition>
        <argsstring>)(const struct device *dev, const struct spi_config *config, const struct spi_buf_set *tx_bufs, const struct spi_buf_set *rx_bufs, struct k_poll_signal *async)</argsstring>
        <name>spi_api_io_async</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="460" column="9" bodyfile="include/drivers/spi.h" bodystart="460" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__spi__interface_1ga86340e5e1a89a61b23b8626adcfb16db" prot="public" static="no">
        <type>int(*</type>
        <definition>spi_api_release</definition>
        <argsstring>)(const struct device *dev, const struct spi_config *config)</argsstring>
        <name>spi_api_release</name>
        <briefdescription>
<para>Callback API for unlocking SPI device. See <ref refid="group__spi__interface_1ga0c4f4f0a93bb83a4f58d551a7491164e" kindref="member">spi_release()</ref> for argument descriptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="471" column="9" bodyfile="include/drivers/spi.h" bodystart="471" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__spi__interface_1ga7d5fcb15e3a1082ea63203b185c6a207" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool spi_is_ready</definition>
        <argsstring>(const struct spi_dt_spec *spec)</argsstring>
        <name>spi_is_ready</name>
        <param>
          <type>const struct <ref refid="structspi__dt__spec" kindref="compound">spi_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <briefdescription>
<para>Validate that SPI bus is ready. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI specification from devicetree</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>if the SPI bus is ready for use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>if the SPI bus is not ready for use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="495" column="20" bodyfile="include/drivers/spi.h" bodystart="495" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gad51054c1ba259db5a64619788506a6f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int spi_transceive</definition>
        <argsstring>(const struct device *dev, const struct spi_config *config, const struct spi_buf_set *tx_bufs, const struct spi_buf_set *rx_bufs)</argsstring>
        <name>spi_transceive</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structspi__config" kindref="compound">spi_config</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const struct <ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref> *</type>
          <declname>tx_bufs</declname>
        </param>
        <param>
          <type>const struct <ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref> *</type>
          <declname>rx_bufs</declname>
        </param>
        <briefdescription>
<para>Read/write the specified amount of data from the SPI driver. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is synchronous.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a valid <ref refid="structspi__config" kindref="compound">spi_config</ref> structure instance. Pointer-comparison may be used to detect changes from previous operations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tx_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer array where data to be sent originates from, or NULL if none. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer array where data to be read will be written to, or NULL if none.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>frames</parametername>
</parameternamelist>
<parameterdescription>
<para>Positive number of frames received in slave mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful in master mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Negative errno code on failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="527" column="6" declfile="include/drivers/spi.h" declline="527" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga52c017066736414b31ff709ddc67c4ff" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int spi_transceive_dt</definition>
        <argsstring>(const struct spi_dt_spec *spec, const struct spi_buf_set *tx_bufs, const struct spi_buf_set *rx_bufs)</argsstring>
        <name>spi_transceive_dt</name>
        <param>
          <type>const struct <ref refid="structspi__dt__spec" kindref="compound">spi_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const struct <ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref> *</type>
          <declname>tx_bufs</declname>
        </param>
        <param>
          <type>const struct <ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref> *</type>
          <declname>rx_bufs</declname>
        </param>
        <briefdescription>
<para>Read/write data from an SPI bus specified in <computeroutput><ref refid="structspi__dt__spec" kindref="compound">spi_dt_spec</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>spi_transceive(spec-&gt;bus, &amp;spec-&gt;config, tx_bufs, rx_bufs);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI specification from devicetree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tx_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer array where data to be sent originates from, or NULL if none. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer array where data to be read will be written to, or NULL if none.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__spi__interface_1gad51054c1ba259db5a64619788506a6f5" kindref="member">spi_transceive()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="558" column="19" bodyfile="include/drivers/spi.h" bodystart="558" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga41f771785a4fa9ca0954125d1e97959e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int spi_read</definition>
        <argsstring>(const struct device *dev, const struct spi_config *config, const struct spi_buf_set *rx_bufs)</argsstring>
        <name>spi_read</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structspi__config" kindref="compound">spi_config</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const struct <ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref> *</type>
          <declname>rx_bufs</declname>
        </param>
        <briefdescription>
<para>Read the specified amount of data from the SPI driver. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is synchronous.</para>
</simplesect>
<simplesect kind="note"><para>This function is an helper function calling spi_transceive.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a valid <ref refid="structspi__config" kindref="compound">spi_config</ref> structure instance. Pointer-comparison may be used to detect changes from previous operations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer array where data to be read will be written to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Negative errno code on failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="581" column="19" bodyfile="include/drivers/spi.h" bodystart="581" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga7a1d7ebd37d2861b169c265cb90015bf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int spi_read_dt</definition>
        <argsstring>(const struct spi_dt_spec *spec, const struct spi_buf_set *rx_bufs)</argsstring>
        <name>spi_read_dt</name>
        <param>
          <type>const struct <ref refid="structspi__dt__spec" kindref="compound">spi_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const struct <ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref> *</type>
          <declname>rx_bufs</declname>
        </param>
        <briefdescription>
<para>Read data from a SPI bus specified in <computeroutput><ref refid="structspi__dt__spec" kindref="compound">spi_dt_spec</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>spi_read(spec-&gt;bus, &amp;spec-&gt;config, rx_bufs);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI specification from devicetree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer array where data to be read will be written to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__spi__interface_1ga41f771785a4fa9ca0954125d1e97959e" kindref="member">spi_read()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="600" column="19" bodyfile="include/drivers/spi.h" bodystart="600" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga7e7c4460670ec1c0433ba19accd97796" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int spi_write</definition>
        <argsstring>(const struct device *dev, const struct spi_config *config, const struct spi_buf_set *tx_bufs)</argsstring>
        <name>spi_write</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structspi__config" kindref="compound">spi_config</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const struct <ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref> *</type>
          <declname>tx_bufs</declname>
        </param>
        <briefdescription>
<para>Write the specified amount of data from the SPI driver. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is synchronous.</para>
</simplesect>
<simplesect kind="note"><para>This function is an helper function calling spi_transceive.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a valid <ref refid="structspi__config" kindref="compound">spi_config</ref> structure instance. Pointer-comparison may be used to detect changes from previous operations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tx_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer array where data to be sent originates from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Negative errno code on failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="622" column="19" bodyfile="include/drivers/spi.h" bodystart="622" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga292d6d1fe82f3f1ce0d9a2aa5437201b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int spi_write_dt</definition>
        <argsstring>(const struct spi_dt_spec *spec, const struct spi_buf_set *tx_bufs)</argsstring>
        <name>spi_write_dt</name>
        <param>
          <type>const struct <ref refid="structspi__dt__spec" kindref="compound">spi_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const struct <ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref> *</type>
          <declname>tx_bufs</declname>
        </param>
        <briefdescription>
<para>Write data to a SPI bus specified in <computeroutput><ref refid="structspi__dt__spec" kindref="compound">spi_dt_spec</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>spi_write(spec-&gt;bus, &amp;spec-&gt;config, tx_bufs);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI specification from devicetree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tx_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer array where data to be sent originates from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__spi__interface_1ga7e7c4460670ec1c0433ba19accd97796" kindref="member">spi_write()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="641" column="19" bodyfile="include/drivers/spi.h" bodystart="641" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga57abc5c454afc239feba1a3e9542a12c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int spi_transceive_async</definition>
        <argsstring>(const struct device *dev, const struct spi_config *config, const struct spi_buf_set *tx_bufs, const struct spi_buf_set *rx_bufs, struct k_poll_signal *async)</argsstring>
        <name>spi_transceive_async</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structspi__config" kindref="compound">spi_config</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const struct <ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref> *</type>
          <declname>tx_bufs</declname>
        </param>
        <param>
          <type>const struct <ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref> *</type>
          <declname>rx_bufs</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref> *</type>
          <declname>async</declname>
        </param>
        <briefdescription>
<para>Read/write the specified amount of data from the SPI driver. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is asynchronous.</para>
</simplesect>
<simplesect kind="note"><para>This function is available only if <verbatim>embed:rst:inline :kconfig:`CONFIG_SPI_ASYNC` </verbatim> is selected.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a valid <ref refid="structspi__config" kindref="compound">spi_config</ref> structure instance. Pointer-comparison may be used to detect changes from previous operations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tx_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer array where data to be sent originates from, or NULL if none. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer array where data to be read will be written to, or NULL if none. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>async</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a valid and ready to be signaled struct <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref>. (Note: if NULL this function will not notify the end of the transaction, and whether it went successfully or not).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>frames</parametername>
</parameternamelist>
<parameterdescription>
<para>Positive number of frames received in slave mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful in master mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Negative errno code on failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="675" column="19" bodyfile="include/drivers/spi.h" bodystart="675" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gab64a598898ffbdbfde9673cef26a0d4f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int spi_read_async</definition>
        <argsstring>(const struct device *dev, const struct spi_config *config, const struct spi_buf_set *rx_bufs, struct k_poll_signal *async)</argsstring>
        <name>spi_read_async</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structspi__config" kindref="compound">spi_config</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const struct <ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref> *</type>
          <declname>rx_bufs</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref> *</type>
          <declname>async</declname>
        </param>
        <briefdescription>
<para>Read the specified amount of data from the SPI driver. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is asynchronous.</para>
</simplesect>
<simplesect kind="note"><para>This function is an helper function calling spi_transceive_async.</para>
</simplesect>
<simplesect kind="note"><para>This function is available only if <verbatim>embed:rst:inline :kconfig:`CONFIG_SPI_ASYNC` </verbatim> is selected.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a valid <ref refid="structspi__config" kindref="compound">spi_config</ref> structure instance. Pointer-comparison may be used to detect changes from previous operations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer array where data to be read will be written to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>async</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a valid and ready to be signaled struct <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref>. (Note: if NULL this function will not notify the end of the transaction, and whether it went successfully or not).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Negative errno code on failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="710" column="19" bodyfile="include/drivers/spi.h" bodystart="710" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga01fc6dc3fc243c74038a10ed86370244" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int spi_write_async</definition>
        <argsstring>(const struct device *dev, const struct spi_config *config, const struct spi_buf_set *tx_bufs, struct k_poll_signal *async)</argsstring>
        <name>spi_write_async</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structspi__config" kindref="compound">spi_config</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const struct <ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref> *</type>
          <declname>tx_bufs</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref> *</type>
          <declname>async</declname>
        </param>
        <briefdescription>
<para>Write the specified amount of data from the SPI driver. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is asynchronous.</para>
</simplesect>
<simplesect kind="note"><para>This function is an helper function calling spi_transceive_async.</para>
</simplesect>
<simplesect kind="note"><para>This function is available only if <verbatim>embed:rst:inline :kconfig:`CONFIG_SPI_ASYNC` </verbatim> is selected.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a valid <ref refid="structspi__config" kindref="compound">spi_config</ref> structure instance. Pointer-comparison may be used to detect changes from previous operations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tx_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer array where data to be sent originates from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>async</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a valid and ready to be signaled struct <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref>. (Note: if NULL this function will not notify the end of the transaction, and whether it went successfully or not).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Negative errno code on failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="741" column="19" bodyfile="include/drivers/spi.h" bodystart="741" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga0c4f4f0a93bb83a4f58d551a7491164e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int spi_release</definition>
        <argsstring>(const struct device *dev, const struct spi_config *config)</argsstring>
        <name>spi_release</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structspi__config" kindref="compound">spi_config</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Release the SPI device locked on and/or the CS by the current config. </para>
        </briefdescription>
        <detaileddescription>
<para>Note: This synchronous function is used to release either the lock on the SPI device and/or the CS line that was kept if, and if only, given config parameter was the last one to be used (in any of the above functions) and if it has the SPI_LOCK_ON bit set and/or the SPI_HOLD_ON_CS bit set into its operation bits field. This can be used if the caller needs to keep its hand on the SPI device for consecutive transactions and/or if it needs the device to stay selected. Usually both bits will be used along each other, so the the device is locked and stays on until another operation is necessary or until it gets released with the present function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a valid <ref refid="structspi__config" kindref="compound">spi_config</ref> structure instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Negative errno code on failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="770" column="6" declfile="include/drivers/spi.h" declline="770" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga829b59767c51b20b546eee8a9cc84b69" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int spi_release_dt</definition>
        <argsstring>(const struct spi_dt_spec *spec)</argsstring>
        <name>spi_release_dt</name>
        <param>
          <type>const struct <ref refid="structspi__dt__spec" kindref="compound">spi_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <briefdescription>
<para>Release the SPI device specified in <computeroutput><ref refid="structspi__dt__spec" kindref="compound">spi_dt_spec</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>spi_release(spec-&gt;bus, &amp;spec-&gt;config);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI specification from devicetree</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__spi__interface_1ga0c4f4f0a93bb83a4f58d551a7491164e" kindref="member">spi_release()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi.h" line="793" column="19" bodyfile="include/drivers/spi.h" bodystart="793" bodyend="796"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Public API for SPI drivers and applications. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_DRIVERS_SPI_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_DRIVERS_SPI_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;device.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="dt-bindings_2spi_2spi_8h" kindref="compound">dt-bindings/spi/spi.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="drivers_2gpio_8h" kindref="compound">drivers/gpio.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="group__spi__interface_1ga5b9d40fa0f455b1e63f8040b3316b0da" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_OP_MODE_MASTER<sp/><sp/><sp/><sp/><sp/><sp/>0U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="group__spi__interface_1ga1c3310d3711cb99cdb78fa9d1c970779" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_OP_MODE_SLAVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="group__spi__interface_1gaa5e4382992dfb8e33af2dc232ee67b43" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_OP_MODE_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x1U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="group__spi__interface_1ga6dd4395e027407a7b3b92cff2abcc8b3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_OP_MODE_GET(_operation_)<sp/>((_operation_)<sp/>&amp;<sp/>SPI_OP_MODE_MASK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="group__spi__interface_1ga5a2be1003873beaa0ade10e7218d67d5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_MODE_CPOL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="group__spi__interface_1ga35e98b37e3ec4889a90100abe884590f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_MODE_CPHA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="group__spi__interface_1ga8619b297de563eca6852af34c79daa62" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_MODE_LOOP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="group__spi__interface_1gaa64ece5364d0d7e1226d50e8773ab654" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_MODE_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0xEU)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="group__spi__interface_1gaa3582b96ff42dba0b0ad815c727d5e42" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_MODE_GET(_mode_)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((_mode_)<sp/>&amp;<sp/>SPI_MODE_MASK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="group__spi__interface_1ga7761f42c6241cf396fc02d0de8617e46" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_TRANSFER_MSB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="group__spi__interface_1ga93504a76a265bedbe781c107beebc9dc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_TRANSFER_LSB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="group__spi__interface_1ga13584494d23db28471ffc68580878f9d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_WORD_SIZE_SHIFT<sp/><sp/><sp/><sp/><sp/>(5U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="group__spi__interface_1ga77146b5c9ce71c3a8352b5026f77cda6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_WORD_SIZE_MASK<sp/><sp/><sp/><sp/><sp/><sp/>(0x3FU<sp/>&lt;&lt;<sp/>SPI_WORD_SIZE_SHIFT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="group__spi__interface_1ga7386c70bd669142bb7558526175765cc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_WORD_SIZE_GET(_operation_)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((_operation_)<sp/>&amp;<sp/>SPI_WORD_SIZE_MASK)<sp/>&gt;&gt;<sp/>SPI_WORD_SIZE_SHIFT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="group__spi__interface_1gaaea60640bb9223bbaf94338d07d9d07c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_WORD_SET(_word_size_)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((_word_size_)<sp/>&lt;&lt;<sp/>SPI_WORD_SIZE_SHIFT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Requests<sp/>-<sp/>if<sp/>possible<sp/>-<sp/>to<sp/>keep<sp/>CS<sp/>asserted<sp/>after<sp/>the<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="group__spi__interface_1gae917312adef283b4bf67cdb53566e4bb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_HOLD_ON_CS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(12)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Keep<sp/>the<sp/>device<sp/>locked<sp/>after<sp/>the<sp/>transaction<sp/>for<sp/>the<sp/>current<sp/>config.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>Use<sp/>this<sp/>with<sp/>extreme<sp/>caution<sp/>(see<sp/>spi_release()<sp/>below)<sp/>as<sp/>it<sp/>will</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>prevent<sp/>other<sp/>callers<sp/>to<sp/>access<sp/>the<sp/>SPI<sp/>device<sp/>until<sp/>spi_release()<sp/>is</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>properly<sp/>called.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="group__spi__interface_1gafe8dc164d6fc0a0f93f2ff9d5381af14" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_LOCK_ON<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(13)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Active<sp/>high<sp/>logic<sp/>on<sp/>CS<sp/>-<sp/>Usually,<sp/>and<sp/>by<sp/>default,<sp/>CS<sp/>logic<sp/>is<sp/>active</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/>low.<sp/>However,<sp/>some<sp/>devices<sp/>may<sp/>require<sp/>the<sp/>reverse<sp/>logic:<sp/>active<sp/>high.</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>This<sp/>bit<sp/>will<sp/>request<sp/>the<sp/>controller<sp/>to<sp/>use<sp/>that<sp/>logic.<sp/>Note<sp/>that<sp/>not</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>all<sp/>controllers<sp/>are<sp/>able<sp/>to<sp/>handle<sp/>that<sp/>natively.<sp/>In<sp/>this<sp/>case<sp/>deferring</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>the<sp/>CS<sp/>control<sp/>to<sp/>a<sp/>gpio<sp/>line<sp/>through<sp/>struct<sp/>spi_cs_control<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>the<sp/>solution.</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="group__spi__interface_1ga44076fa14703997f7e3aefb2bfccd801" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_CS_ACTIVE_HIGH<sp/><sp/><sp/><sp/><sp/><sp/>BIT(14)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="group__spi__interface_1ga7a183f157e8cb8b437857a0babbd923b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_LINES_SINGLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0U<sp/>&lt;&lt;<sp/>16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="group__spi__interface_1ga120ab60329d664d5d6e828f90251a98a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_LINES_DUAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U<sp/>&lt;&lt;<sp/>16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="group__spi__interface_1ga30866b948e995224de854e10a428bda5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_LINES_QUAD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(2U<sp/>&lt;&lt;<sp/>16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="group__spi__interface_1ga512d76085e600886654b8541aab31cf7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_LINES_OCTAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(3U<sp/>&lt;&lt;<sp/>16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="group__spi__interface_1gadc79f986c4b30fe5b263841cd8bb5676" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_LINES_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x3U<sp/>&lt;&lt;<sp/>16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="structspi__cs__control" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__cs__control" kindref="compound">spi_cs_control</ref><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="153" refid="structspi__cs__control_1a8ad907e168666c2ddca77e89f9b9f47f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref><sp/><ref refid="structspi__cs__control_1a8ad907e168666c2ddca77e89f9b9f47f" kindref="member">gpio</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="155" refid="structspi__cs__control_1a937c3e2601c13e63ab499e8e8a9e2213" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*<ref refid="structspi__cs__control_1a937c3e2601c13e63ab499e8e8a9e2213" kindref="member">gpio_dev</ref>;</highlight></codeline>
<codeline lineno="156" refid="structspi__cs__control_1a0a6d4bc4090f6d8618f6ddb9ad050ba7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref><sp/><ref refid="structspi__cs__control_1a0a6d4bc4090f6d8618f6ddb9ad050ba7" kindref="member">gpio_pin</ref>;</highlight></codeline>
<codeline lineno="157" refid="structspi__cs__control_1a55df65a75af2f594b16b769d745dc72c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga2681aecd8e20fba20900774ddaa9c843" kindref="member">gpio_dt_flags_t</ref><sp/><ref refid="structspi__cs__control_1a55df65a75af2f594b16b769d745dc72c" kindref="member">gpio_dt_flags</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="164" refid="structspi__cs__control_1a04569d78ac7d6022ffee0c28f5d3b629" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structspi__cs__control_1a04569d78ac7d6022ffee0c28f5d3b629" kindref="member">delay</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">};</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="group__spi__interface_1ga48aa19f45413d56b03596d10b72c732e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_CS_GPIOS_DT_SPEC_GET(spi_dev)<sp/>\</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_DT_SPEC_GET_BY_IDX(DT_BUS(spi_dev),<sp/>cs_gpios,<sp/>DT_REG_ADDR(spi_dev))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="group__spi__interface_1gabcdae2d5e9cb868498c6782cb631b9cf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_CS_CONTROL_PTR_DT(node_id,<sp/>delay_)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="253"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&amp;(struct<sp/>spi_cs_control)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.gpio<sp/>=<sp/>SPI_CS_GPIOS_DT_SPEC_GET(node_id),<sp/>\</highlight></codeline>
<codeline lineno="255"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.delay<sp/>=<sp/>(delay_),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="256"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="group__spi__interface_1gad4272242d8016742eb9035d0db3d9d6a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_CS_CONTROL_PTR_DT_INST(inst,<sp/>delay_)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="274"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPI_CS_CONTROL_PTR_DT(DT_DRV_INST(inst),<sp/>delay_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="303" refid="structspi__config" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__config" kindref="compound">spi_config</ref><sp/>{</highlight></codeline>
<codeline lineno="304" refid="structspi__config_1aa1ec6933fe66f91653c5be488e4c9b2a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structspi__config_1aa1ec6933fe66f91653c5be488e4c9b2a" kindref="member">frequency</ref>;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_SPI_EXTENDED_MODES)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structspi__config_1ab195e4cfa5986a8aa6fe185786e58aa8" kindref="member">operation</ref>;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structspi__config_1a020ca853537483b9641c37be70ab6ca0" kindref="member">slave</ref>;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_unused;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="structspi__config_1ab195e4cfa5986a8aa6fe185786e58aa8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structspi__config_1ab195e4cfa5986a8aa6fe185786e58aa8" kindref="member">operation</ref>;</highlight></codeline>
<codeline lineno="311" refid="structspi__config_1a020ca853537483b9641c37be70ab6ca0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structspi__config_1a020ca853537483b9641c37be70ab6ca0" kindref="member">slave</ref>;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_SPI_EXTENDED_MODES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="structspi__config_1a86ccc6d81d16efdb46e5fd8c1c2fcfad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__cs__control" kindref="compound">spi_cs_control</ref><sp/>*<ref refid="structspi__config_1a86ccc6d81d16efdb46e5fd8c1c2fcfad" kindref="member">cs</ref>;</highlight></codeline>
<codeline lineno="315"><highlight class="normal">};</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="group__spi__interface_1ga822af066ee0829aee405c034bb967463" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_CONFIG_DT(node_id,<sp/>operation_,<sp/>delay_)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="338"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="339"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.frequency<sp/>=<sp/>DT_PROP(node_id,<sp/>spi_max_frequency),<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="340"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.operation<sp/>=<sp/>(operation_)<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="341"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PROP(node_id,<sp/>duplex)<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="342"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PROP(node_id,<sp/>frame_format),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="343"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.slave<sp/>=<sp/>DT_REG_ADDR(node_id),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="344"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.cs<sp/>=<sp/>COND_CODE_1(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="345"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_SPI_DEV_HAS_CS_GPIOS(node_id),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="346"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SPI_CS_CONTROL_PTR_DT(node_id,<sp/>delay_)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="347"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(NULL)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="348"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="363" refid="group__spi__interface_1gadc1e7de7925603adfedbac35fdabc78a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_CONFIG_DT_INST(inst,<sp/>operation_,<sp/>delay_)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="364"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPI_CONFIG_DT(DT_DRV_INST(inst),<sp/>operation_,<sp/>delay_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="structspi__dt__spec" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__dt__spec" kindref="compound">spi_dt_spec</ref><sp/>{</highlight></codeline>
<codeline lineno="374" refid="structspi__dt__spec_1a37519633ae787ffaa1026e6867d7007a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*<ref refid="structspi__dt__spec_1a37519633ae787ffaa1026e6867d7007a" kindref="member">bus</ref>;</highlight></codeline>
<codeline lineno="375" refid="structspi__dt__spec_1a88372c17ede2e9dfb0c09c49abebf87e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__config" kindref="compound">spi_config</ref><sp/><ref refid="structspi__dt__spec_1a88372c17ede2e9dfb0c09c49abebf87e" kindref="member">config</ref>;</highlight></codeline>
<codeline lineno="376"><highlight class="normal">};</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398" refid="group__spi__interface_1gaec6a8fde1c3ec6349a601a2d5f7af785" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_DT_SPEC_GET(node_id,<sp/>operation_,<sp/>delay_)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="399"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="400"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.bus<sp/>=<sp/>DEVICE_DT_GET(DT_BUS(node_id)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="401"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.config<sp/>=<sp/>SPI_CONFIG_DT(node_id,<sp/>operation_,<sp/>delay_)<sp/>\</highlight></codeline>
<codeline lineno="402"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="group__spi__interface_1ga91c595b7567af23b447c755d898608f3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_DT_SPEC_INST_GET(inst,<sp/>operation_,<sp/>delay_)<sp/>\</highlight></codeline>
<codeline lineno="418"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPI_DT_SPEC_GET(DT_DRV_INST(inst),<sp/>operation_,<sp/>delay_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="structspi__buf" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__buf" kindref="compound">spi_buf</ref><sp/>{</highlight></codeline>
<codeline lineno="430" refid="structspi__buf_1aeaf52d3ff5af10545b2d6904ed452cba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structspi__buf_1aeaf52d3ff5af10545b2d6904ed452cba" kindref="member">buf</ref>;</highlight></codeline>
<codeline lineno="431" refid="structspi__buf_1a9755deadff0dd01a886f22e41099b8ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structspi__buf_1a9755deadff0dd01a886f22e41099b8ba" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="432"><highlight class="normal">};</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="structspi__buf__set" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref><sp/>{</highlight></codeline>
<codeline lineno="441" refid="structspi__buf__set_1a2b88917ca29487b2d0b5b63d2083db67" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__buf" kindref="compound">spi_buf</ref><sp/>*<ref refid="structspi__buf__set_1a2b88917ca29487b2d0b5b63d2083db67" kindref="member">buffers</ref>;</highlight></codeline>
<codeline lineno="442" refid="structspi__buf__set_1abc7c37cffebb7873aaba2e524c9a23dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structspi__buf__set_1abc7c37cffebb7873aaba2e524c9a23dc" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="443"><highlight class="normal">};</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="450" refid="group__spi__interface_1gaa03a4e0ce32b9fc5f87d8df9e409eaf2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__spi__interface_1gaa03a4e0ce32b9fc5f87d8df9e409eaf2" kindref="member">spi_api_io</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__config" kindref="compound">spi_config</ref><sp/>*config,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref><sp/>*tx_bufs,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref><sp/>*rx_bufs);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="460" refid="group__spi__interface_1ga1fd3ad728f7e88c7f358bf93a59add80" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__spi__interface_1ga1fd3ad728f7e88c7f358bf93a59add80" kindref="member">spi_api_io_async</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__config" kindref="compound">spi_config</ref><sp/>*config,</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref><sp/>*tx_bufs,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref><sp/>*rx_bufs,</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref><sp/>*async);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="471" refid="group__spi__interface_1ga86340e5e1a89a61b23b8626adcfb16db" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__spi__interface_1ga86340e5e1a89a61b23b8626adcfb16db" kindref="member">spi_api_release</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__config" kindref="compound">spi_config</ref><sp/>*config);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="479" refid="structspi__driver__api" refkind="compound"><highlight class="normal">__subsystem<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__driver__api" kindref="compound">spi_driver_api</ref><sp/>{</highlight></codeline>
<codeline lineno="480" refid="structspi__driver__api_1abeb852d35e4772dcec716cf63ef307bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__spi__interface_1gaa03a4e0ce32b9fc5f87d8df9e409eaf2" kindref="member">spi_api_io</ref><sp/><ref refid="structspi__driver__api_1abeb852d35e4772dcec716cf63ef307bb" kindref="member">transceive</ref>;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_SPI_ASYNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482" refid="structspi__driver__api_1af067daa58e79b9067a59fedcfd61034b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__spi__interface_1ga1fd3ad728f7e88c7f358bf93a59add80" kindref="member">spi_api_io_async</ref><sp/><ref refid="structspi__driver__api_1af067daa58e79b9067a59fedcfd61034b" kindref="member">transceive_async</ref>;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_SPI_ASYNC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484" refid="structspi__driver__api_1ae15944912ece9f736fd935184e8a184d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__spi__interface_1ga86340e5e1a89a61b23b8626adcfb16db" kindref="member">spi_api_release</ref><sp/><ref refid="structspi__driver__api_1ae15944912ece9f736fd935184e8a184d" kindref="member">release</ref>;</highlight></codeline>
<codeline lineno="485"><highlight class="normal">};</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="495" refid="group__spi__interface_1ga7d5fcb15e3a1082ea63203b185c6a207" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__spi__interface_1ga7d5fcb15e3a1082ea63203b185c6a207" kindref="member">spi_is_ready</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__dt__spec" kindref="compound">spi_dt_spec</ref><sp/>*spec)</highlight></codeline>
<codeline lineno="496"><highlight class="normal">{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Validate<sp/>bus<sp/>is<sp/>ready<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__device__model_1gaa4944bd850e90cbd52b0489f9b12edfb" kindref="member">device_is_ready</ref>(spec-&gt;<ref refid="structspi__dt__spec_1a37519633ae787ffaa1026e6867d7007a" kindref="member">bus</ref>))<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Validate<sp/>CS<sp/>gpio<sp/>port<sp/>is<sp/>ready,<sp/>if<sp/>it<sp/>is<sp/>used<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec-&gt;<ref refid="structspi__dt__spec_1a88372c17ede2e9dfb0c09c49abebf87e" kindref="member">config</ref>.<ref refid="structspi__config_1a86ccc6d81d16efdb46e5fd8c1c2fcfad" kindref="member">cs</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="group__device__model_1gaa4944bd850e90cbd52b0489f9b12edfb" kindref="member">device_is_ready</ref>(spec-&gt;<ref refid="structspi__dt__spec_1a88372c17ede2e9dfb0c09c49abebf87e" kindref="member">config</ref>.<ref refid="structspi__config_1a86ccc6d81d16efdb46e5fd8c1c2fcfad" kindref="member">cs</ref>-&gt;<ref refid="structspi__cs__control_1a8ad907e168666c2ddca77e89f9b9f47f" kindref="member">gpio</ref>.<ref refid="structgpio__dt__spec_1a5d617d47e2f568c7a4402a8f5a40ed4f" kindref="member">port</ref>))<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="527" refid="group__spi__interface_1gad51054c1ba259db5a64619788506a6f5" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__spi__interface_1gad51054c1ba259db5a64619788506a6f5" kindref="member">spi_transceive</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__config" kindref="compound">spi_config</ref><sp/>*config,</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref><sp/>*tx_bufs,</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref><sp/>*rx_bufs);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_spi_transceive(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__config" kindref="compound">spi_config</ref><sp/>*config,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref><sp/>*tx_bufs,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref><sp/>*rx_bufs)</highlight></codeline>
<codeline lineno="536"><highlight class="normal">{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__driver__api" kindref="compound">spi_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__driver__api" kindref="compound">spi_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;<ref refid="structspi__driver__api_1abeb852d35e4772dcec716cf63ef307bb" kindref="member">transceive</ref>(dev,<sp/>config,<sp/>tx_bufs,<sp/>rx_bufs);</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="558" refid="group__spi__interface_1ga52c017066736414b31ff709ddc67c4ff" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__spi__interface_1ga52c017066736414b31ff709ddc67c4ff" kindref="member">spi_transceive_dt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__dt__spec" kindref="compound">spi_dt_spec</ref><sp/>*spec,</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref><sp/>*tx_bufs,</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref><sp/>*rx_bufs)</highlight></codeline>
<codeline lineno="561"><highlight class="normal">{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__spi__interface_1gad51054c1ba259db5a64619788506a6f5" kindref="member">spi_transceive</ref>(spec-&gt;<ref refid="structspi__dt__spec_1a37519633ae787ffaa1026e6867d7007a" kindref="member">bus</ref>,<sp/>&amp;spec-&gt;<ref refid="structspi__dt__spec_1a88372c17ede2e9dfb0c09c49abebf87e" kindref="member">config</ref>,<sp/>tx_bufs,<sp/>rx_bufs);</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="581" refid="group__spi__interface_1ga41f771785a4fa9ca0954125d1e97959e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__spi__interface_1ga41f771785a4fa9ca0954125d1e97959e" kindref="member">spi_read</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__config" kindref="compound">spi_config</ref><sp/>*config,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref><sp/>*rx_bufs)</highlight></codeline>
<codeline lineno="584"><highlight class="normal">{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__spi__interface_1gad51054c1ba259db5a64619788506a6f5" kindref="member">spi_transceive</ref>(dev,<sp/>config,<sp/>NULL,<sp/>rx_bufs);</highlight></codeline>
<codeline lineno="586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="600" refid="group__spi__interface_1ga7a1d7ebd37d2861b169c265cb90015bf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__spi__interface_1ga7a1d7ebd37d2861b169c265cb90015bf" kindref="member">spi_read_dt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__dt__spec" kindref="compound">spi_dt_spec</ref><sp/>*spec,</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref><sp/>*rx_bufs)</highlight></codeline>
<codeline lineno="602"><highlight class="normal">{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__spi__interface_1ga41f771785a4fa9ca0954125d1e97959e" kindref="member">spi_read</ref>(spec-&gt;<ref refid="structspi__dt__spec_1a37519633ae787ffaa1026e6867d7007a" kindref="member">bus</ref>,<sp/>&amp;spec-&gt;<ref refid="structspi__dt__spec_1a88372c17ede2e9dfb0c09c49abebf87e" kindref="member">config</ref>,<sp/>rx_bufs);</highlight></codeline>
<codeline lineno="604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="622" refid="group__spi__interface_1ga7e7c4460670ec1c0433ba19accd97796" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__spi__interface_1ga7e7c4460670ec1c0433ba19accd97796" kindref="member">spi_write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__config" kindref="compound">spi_config</ref><sp/>*config,</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref><sp/>*tx_bufs)</highlight></codeline>
<codeline lineno="625"><highlight class="normal">{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__spi__interface_1gad51054c1ba259db5a64619788506a6f5" kindref="member">spi_transceive</ref>(dev,<sp/>config,<sp/>tx_bufs,<sp/>NULL);</highlight></codeline>
<codeline lineno="627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="641" refid="group__spi__interface_1ga292d6d1fe82f3f1ce0d9a2aa5437201b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__spi__interface_1ga292d6d1fe82f3f1ce0d9a2aa5437201b" kindref="member">spi_write_dt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__dt__spec" kindref="compound">spi_dt_spec</ref><sp/>*spec,</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref><sp/>*tx_bufs)</highlight></codeline>
<codeline lineno="643"><highlight class="normal">{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__spi__interface_1ga7e7c4460670ec1c0433ba19accd97796" kindref="member">spi_write</ref>(spec-&gt;<ref refid="structspi__dt__spec_1a37519633ae787ffaa1026e6867d7007a" kindref="member">bus</ref>,<sp/>&amp;spec-&gt;<ref refid="structspi__dt__spec_1a88372c17ede2e9dfb0c09c49abebf87e" kindref="member">config</ref>,<sp/>tx_bufs);</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Doxygen<sp/>defines<sp/>this<sp/>so<sp/>documentation<sp/>is<sp/>generated.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_SPI_ASYNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="675" refid="group__spi__interface_1ga57abc5c454afc239feba1a3e9542a12c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__spi__interface_1ga57abc5c454afc239feba1a3e9542a12c" kindref="member">spi_transceive_async</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__config" kindref="compound">spi_config</ref><sp/>*config,</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref><sp/>*tx_bufs,</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref><sp/>*rx_bufs,</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref><sp/>*async)</highlight></codeline>
<codeline lineno="680"><highlight class="normal">{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__driver__api" kindref="compound">spi_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__driver__api" kindref="compound">spi_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;<ref refid="structspi__driver__api_1af067daa58e79b9067a59fedcfd61034b" kindref="member">transceive_async</ref>(dev,<sp/>config,<sp/>tx_bufs,<sp/>rx_bufs,<sp/>async);</highlight></codeline>
<codeline lineno="685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="710" refid="group__spi__interface_1gab64a598898ffbdbfde9673cef26a0d4f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__spi__interface_1gab64a598898ffbdbfde9673cef26a0d4f" kindref="member">spi_read_async</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__config" kindref="compound">spi_config</ref><sp/>*config,</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref><sp/>*rx_bufs,</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref><sp/>*async)</highlight></codeline>
<codeline lineno="714"><highlight class="normal">{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__spi__interface_1ga57abc5c454afc239feba1a3e9542a12c" kindref="member">spi_transceive_async</ref>(dev,<sp/>config,<sp/>NULL,<sp/>rx_bufs,<sp/>async);</highlight></codeline>
<codeline lineno="716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="741" refid="group__spi__interface_1ga01fc6dc3fc243c74038a10ed86370244" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__spi__interface_1ga01fc6dc3fc243c74038a10ed86370244" kindref="member">spi_write_async</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__config" kindref="compound">spi_config</ref><sp/>*config,</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref><sp/>*tx_bufs,</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref><sp/>*async)</highlight></codeline>
<codeline lineno="745"><highlight class="normal">{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__spi__interface_1ga57abc5c454afc239feba1a3e9542a12c" kindref="member">spi_transceive_async</ref>(dev,<sp/>config,<sp/>tx_bufs,<sp/>NULL,<sp/>async);</highlight></codeline>
<codeline lineno="747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_SPI_ASYNC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="770" refid="group__spi__interface_1ga0c4f4f0a93bb83a4f58d551a7491164e" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__spi__interface_1ga0c4f4f0a93bb83a4f58d551a7491164e" kindref="member">spi_release</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__config" kindref="compound">spi_config</ref><sp/>*config);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_spi_release(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__config" kindref="compound">spi_config</ref><sp/>*config)</highlight></codeline>
<codeline lineno="775"><highlight class="normal">{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__driver__api" kindref="compound">spi_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__driver__api" kindref="compound">spi_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;<ref refid="structspi__driver__api_1ae15944912ece9f736fd935184e8a184d" kindref="member">release</ref>(dev,<sp/>config);</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="793" refid="group__spi__interface_1ga829b59767c51b20b546eee8a9cc84b69" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__spi__interface_1ga829b59767c51b20b546eee8a9cc84b69" kindref="member">spi_release_dt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__dt__spec" kindref="compound">spi_dt_spec</ref><sp/>*spec)</highlight></codeline>
<codeline lineno="794"><highlight class="normal">{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__spi__interface_1ga0c4f4f0a93bb83a4f58d551a7491164e" kindref="member">spi_release</ref>(spec-&gt;<ref refid="structspi__dt__spec_1a37519633ae787ffaa1026e6867d7007a" kindref="member">bus</ref>,<sp/>&amp;spec-&gt;<ref refid="structspi__dt__spec_1a88372c17ede2e9dfb0c09c49abebf87e" kindref="member">config</ref>);</highlight></codeline>
<codeline lineno="796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;syscalls/spi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_DRIVERS_SPI_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/drivers/spi.h"/>
  </compounddef>
</doxygen>
