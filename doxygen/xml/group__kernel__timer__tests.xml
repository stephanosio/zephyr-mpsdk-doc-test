<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__kernel__timer__tests" kind="group">
    <compoundname>kernel_timer_tests</compoundname>
    <title>Timer</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__kernel__timer__tests_1gaf7cea6ba08cc085dfe78f6f051ba32aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_timer_duration_period</definition>
        <argsstring>(void)</argsstring>
        <name>test_timer_duration_period</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test duration and period of Timer. </para>
        </briefdescription>
        <detaileddescription>
<para>Validates initial duration and period of timer.</para>
<para>It initializes the timer with <ref refid="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" kindref="member">k_timer_init()</ref>, then starts the timer using <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref> with specific initial duration and period. Stops the timer using <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref> and checks for proper completion of duration and period.</para>
<para><simplesect kind="see"><para><ref refid="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" kindref="member">k_timer_init()</ref>, <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref>, <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref>, <ref refid="group__clock__apis_1gae3e992cd3257c23d5b26d765fcbb2b69" kindref="member">k_uptime_get()</ref>, <ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: init timer via k_timer_init</para>
<para>TESTPOINT: check expire and stop times</para>
        </inbodydescription>
        <location file="tests/kernel/timer/timer_api/src/main.c" line="188" column="6" bodyfile="tests/kernel/timer/timer_api/src/main.c" bodystart="188" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__timer__tests_1ga81b2ddaaa7dc2df0502a7dc5da38a81b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_timer_restart</definition>
        <argsstring>(void)</argsstring>
        <name>test_timer_restart</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test restart the timer. </para>
        </briefdescription>
        <detaileddescription>
<para>Validates initial duration and period of timer. Start the timer with specific duration and period. Then starts the timer again, and check the status of timer.</para>
<para><simplesect kind="see"><para><ref refid="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" kindref="member">k_timer_init()</ref>, <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref>, <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop</ref>, <ref refid="group__clock__apis_1gae3e992cd3257c23d5b26d765fcbb2b69" kindref="member">k_uptime_get()</ref>, <ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: restart the timer</para>
        </inbodydescription>
        <location file="tests/kernel/timer/timer_api/src/main.c" line="218" column="6" bodyfile="tests/kernel/timer/timer_api/src/main.c" bodystart="218" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__timer__tests_1ga43e8aa930c3dc637f9d4d6524b4b521c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_timer_period_0</definition>
        <argsstring>(void)</argsstring>
        <name>test_timer_period_0</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test Timer with zero period value. </para>
        </briefdescription>
        <detaileddescription>
<para>Validates initial timer duration, keeping timer period to zero. Basically, acting as one-shot timer. It initializes the timer with <ref refid="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" kindref="member">k_timer_init()</ref>, then starts the timer using <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref> with specific initial duration and period as zero. Stops the timer using <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref> and checks for proper completion.</para>
<para><simplesect kind="see"><para><ref refid="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" kindref="member">k_timer_init()</ref>, <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref>, <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref>, <ref refid="group__clock__apis_1gae3e992cd3257c23d5b26d765fcbb2b69" kindref="member">k_uptime_get()</ref>, <ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: set period 0</para>
<para>TESTPOINT: ensure it is one-shot timer</para>
        </inbodydescription>
        <location file="tests/kernel/timer/timer_api/src/main.c" line="252" column="6" bodyfile="tests/kernel/timer/timer_api/src/main.c" bodystart="252" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__timer__tests_1ga6397043572ff0582b5f30c34c95cc0ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_timer_period_k_forever</definition>
        <argsstring>(void)</argsstring>
        <name>test_timer_period_k_forever</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test Timer with K_FOREVER period value. </para>
        </briefdescription>
        <detaileddescription>
<para>Validates initial timer duration, keeping timer period to K_FOREVER. Basically, acting as one-shot timer. It initializes the timer with <ref refid="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" kindref="member">k_timer_init()</ref>, then starts the timer using <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref> with specific initial duration and period as zero. Stops the timer using <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref> and checks for proper completion.</para>
<para><simplesect kind="see"><para><ref refid="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" kindref="member">k_timer_init()</ref>, <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref>, <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref>, <ref refid="group__clock__apis_1gae3e992cd3257c23d5b26d765fcbb2b69" kindref="member">k_uptime_get()</ref>, <ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: set period 0</para>
<para>TESTPOINT: ensure it is one-shot timer</para>
        </inbodydescription>
        <location file="tests/kernel/timer/timer_api/src/main.c" line="289" column="6" bodyfile="tests/kernel/timer/timer_api/src/main.c" bodystart="289" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__timer__tests_1ga6537e057cfbdec8841182ef73d536fae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_timer_expirefn_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_timer_expirefn_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test Timer without any timer expiry callback function. </para>
        </briefdescription>
        <detaileddescription>
<para>Validates timer without any expiry_fn(set to NULL). expiry_fn() is a function that is invoked each time the timer expires.</para>
<para>It initializes the timer with <ref refid="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" kindref="member">k_timer_init()</ref>, then starts the timer using <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref>. Stops the timer using <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref> and checks for expire_cnt to zero, as expiry_fn was not defined at all.</para>
<para><simplesect kind="see"><para><ref refid="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" kindref="member">k_timer_init()</ref>, <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref>, <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref>, <ref refid="group__clock__apis_1gae3e992cd3257c23d5b26d765fcbb2b69" kindref="member">k_uptime_get()</ref>, <ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: expire function NULL</para>
<para>TESTPOINT: expire handler is not invoked</para>
<para>TESTPOINT: stop handler is invoked</para>
        </inbodydescription>
        <location file="tests/kernel/timer/timer_api/src/main.c" line="328" column="6" bodyfile="tests/kernel/timer/timer_api/src/main.c" bodystart="328" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__timer__tests_1gac9e54492a90d9dac6034f7c054deba9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_timer_periodicity</definition>
        <argsstring>(void)</argsstring>
        <name>test_timer_periodicity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to check timer periodicity. </para>
        </briefdescription>
        <detaileddescription>
<para>Timer test to check for the predictability with which the timer expires depending on the period configured.</para>
<para>It initializes the timer with <ref refid="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" kindref="member">k_timer_init()</ref>, then starts the timer using <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref> with specific period. It resets the timer’s status to zero with k_timer_status_sync and identifies the delta between each timer expiry to check for the timer expiration period correctness. Finally, stops the timer using <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref>.</para>
<para><simplesect kind="see"><para><ref refid="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" kindref="member">k_timer_init()</ref>, <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref>, <ref refid="group__timer__apis_1ga81d6d95b7021e26ad4cab161318e04f2" kindref="member">k_timer_status_sync()</ref>, <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref>, <ref refid="group__clock__apis_1gae3e992cd3257c23d5b26d765fcbb2b69" kindref="member">k_uptime_get()</ref>, <ref refid="group__clock__apis_1gad748b2fe83b36884dc087b4af367de80" kindref="member">k_uptime_delta()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: set duration 0</para>
<para>TESTPOINT: expired times returned by status sync</para>
<para>TESTPOINT: check if timer fired within 1ms of the expected period (firing time).</para>
<para>Please note, that expected firing time is not the one requested, as the kernel uses the ticks to manage time. The actual perioid will be equal to [tick time] multiplied by k_ms_to_ticks_ceil32(PERIOD).</para>
<para>In the case of inexact conversion the delta will occasionally be one less than the expected number.</para>
        </inbodydescription>
        <location file="tests/kernel/timer/timer_api/src/main.c" line="372" column="6" bodyfile="tests/kernel/timer/timer_api/src/main.c" bodystart="372" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__timer__tests_1ga53039f9a0d03980e0a3c69f0e59a42bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_timer_status_get</definition>
        <argsstring>(void)</argsstring>
        <name>test_timer_status_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test Timer status and time remaining before next expiry. </para>
        </briefdescription>
        <detaileddescription>
<para>Timer test to validate timer status and next trigger expiry time</para>
<para>It initializes the timer with <ref refid="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" kindref="member">k_timer_init()</ref>, then starts the timer using <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref> and checks for timer current status with <ref refid="group__timer__apis_1gad532f4834cd4cf8be27b089e6ea347ce" kindref="member">k_timer_status_get()</ref> and remaining time before next expiry using <ref refid="group__timer__apis_1ga6c6d8b0aa59bfa0f5924e95ccf756259" kindref="member">k_timer_remaining_get()</ref>. Stops the timer using <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref>.</para>
<para><simplesect kind="see"><para><ref refid="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" kindref="member">k_timer_init()</ref>, <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref>, <ref refid="group__timer__apis_1gad532f4834cd4cf8be27b089e6ea347ce" kindref="member">k_timer_status_get()</ref>, <ref refid="group__timer__apis_1ga6c6d8b0aa59bfa0f5924e95ccf756259" kindref="member">k_timer_remaining_get()</ref>, <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: status get upon timer starts</para>
<para>TESTPOINT: remaining get upon timer starts</para>
        </inbodydescription>
        <location file="tests/kernel/timer/timer_api/src/main.c" line="440" column="6" bodyfile="tests/kernel/timer/timer_api/src/main.c" bodystart="440" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__timer__tests_1ga10b481da2bfd144c8902689d06f16434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_timer_status_get_anytime</definition>
        <argsstring>(void)</argsstring>
        <name>test_timer_status_get_anytime</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test Timer status randomly after certain duration. </para>
        </briefdescription>
        <detaileddescription>
<para>Validate timer status function using <ref refid="group__timer__apis_1gad532f4834cd4cf8be27b089e6ea347ce" kindref="member">k_timer_status_get()</ref>.</para>
<para>It initializes the timer with <ref refid="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" kindref="member">k_timer_init()</ref>, then starts the timer using <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref> with specific initial duration and period. Checks for timer status randomly after certain duration. Stops the timer using <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref>.</para>
<para><simplesect kind="see"><para><ref refid="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" kindref="member">k_timer_init()</ref>, <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref>, <ref refid="group__timer__apis_1gad532f4834cd4cf8be27b089e6ea347ce" kindref="member">k_timer_status_get()</ref>, <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref>, <ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: status get at any time</para>
        </inbodydescription>
        <location file="tests/kernel/timer/timer_api/src/main.c" line="469" column="6" bodyfile="tests/kernel/timer/timer_api/src/main.c" bodystart="469" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__timer__tests_1ga19487c94e7c631027e3ba4ac02daa8f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_timer_status_sync</definition>
        <argsstring>(void)</argsstring>
        <name>test_timer_status_sync</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test Timer thread synchronization. </para>
        </briefdescription>
        <detaileddescription>
<para>Validate thread synchronization by blocking the calling thread until the timer expires.</para>
<para>It initializes the timer with <ref refid="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" kindref="member">k_timer_init()</ref>, then starts the timer using <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref> and checks timer status with <ref refid="group__timer__apis_1ga81d6d95b7021e26ad4cab161318e04f2" kindref="member">k_timer_status_sync()</ref> for thread synchronization with expiry count. Stops the timer using k_timer_stop.</para>
<para><simplesect kind="see"><para><ref refid="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" kindref="member">k_timer_init()</ref>, <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref>, <ref refid="group__timer__apis_1ga81d6d95b7021e26ad4cab161318e04f2" kindref="member">k_timer_status_sync()</ref>, <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: check timer not expire</para>
<para>TESTPOINT: expired times returned by status sync</para>
<para>TESTPOINT: check timer not expire</para>
        </inbodydescription>
        <location file="tests/kernel/timer/timer_api/src/main.c" line="503" column="6" bodyfile="tests/kernel/timer/timer_api/src/main.c" bodystart="503" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__timer__tests_1ga46fd6c4d7cd4638cf87e9ca10c524ada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_timer_k_define</definition>
        <argsstring>(void)</argsstring>
        <name>test_timer_k_define</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test statically defined Timer init. </para>
        </briefdescription>
        <detaileddescription>
<para>Validate statically defined timer init using K_TIMER_DEFINE</para>
<para>It creates prototype of K_TIMER_DEFINE to statically define timer init and starts the timer with <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref> with specific initial duration and period. Stops the timer using <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref> and checks for proper completion of duration and period.</para>
<para><simplesect kind="see"><para><ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref>, <ref refid="obj__tracking_2src_2main_8c_1ad8c286584d1c6cae5e5866e4af529b6b" kindref="member">K_TIMER_DEFINE()</ref>, <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref> <ref refid="group__clock__apis_1gae3e992cd3257c23d5b26d765fcbb2b69" kindref="member">k_uptime_get()</ref>, <ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: init timer via k_timer_init</para>
<para>TESTPOINT: check expire and stop times</para>
<para>TESTPOINT: init timer via k_timer_init</para>
<para>TESTPOINT: check expire and stop times</para>
        </inbodydescription>
        <location file="tests/kernel/timer/timer_api/src/main.c" line="543" column="6" bodyfile="tests/kernel/timer/timer_api/src/main.c" bodystart="543" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__timer__tests_1ga97a4618f1cbc7631944596f36b44daea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_timer_user_data</definition>
        <argsstring>(void)</argsstring>
        <name>test_timer_user_data</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test user-specific data associated with timer. </para>
        </briefdescription>
        <detaileddescription>
<para>Validate user-specific data associated with timer</para>
<para>It creates prototype of K_TIMER_DEFINE and starts the timer using <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref> with specific initial duration, alongwith associated user data using k_timer_user_data_set and <ref refid="group__timer__apis_1ga19a7d99a01a83828efd7f0d3bf2dd358" kindref="member">k_timer_user_data_get()</ref>. Stops the timer using <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref> and checks for correct data retrieval after timer completion.</para>
<para><simplesect kind="see"><para><ref refid="obj__tracking_2src_2main_8c_1ad8c286584d1c6cae5e5866e4af529b6b" kindref="member">K_TIMER_DEFINE()</ref>, <ref refid="group__timer__apis_1gadba1884961e790dd9c5d567de91cc7e2" kindref="member">k_timer_user_data_set()</ref>, <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref>, <ref refid="group__timer__apis_1ga19a7d99a01a83828efd7f0d3bf2dd358" kindref="member">k_timer_user_data_get()</ref>, <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/timer/timer_api/src/main.c" line="627" column="6" bodyfile="tests/kernel/timer/timer_api/src/main.c" bodystart="627" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__timer__tests_1ga484adb1538ba16eb0f708e932167e75b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_timer_remaining</definition>
        <argsstring>(void)</argsstring>
        <name>test_timer_remaining</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test accuracy of <ref refid="group__timer__apis_1ga6c6d8b0aa59bfa0f5924e95ccf756259" kindref="member">k_timer_remaining_get()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Validate countdown of time to expiration</para>
<para>Starts a timer, busy-waits for half the DURATION, then checks the remaining time to expiration and stops the timer. The remaining time should reflect the passage of at least the busy-wait interval.</para>
<para><simplesect kind="see"><para><ref refid="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" kindref="member">k_timer_init()</ref>, <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref>, <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref>, <ref refid="group__timer__apis_1ga6c6d8b0aa59bfa0f5924e95ccf756259" kindref="member">k_timer_remaining_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/timer/timer_api/src/main.c" line="680" column="6" bodyfile="tests/kernel/timer/timer_api/src/main.c" bodystart="680" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__timer__tests_1ga632586cce85027fe8d3d3c1aff439b44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_timer_start_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_timer_start_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a thread and set <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref> input to NULL and set a duration and period.</para>
<para><simplesect kind="see"><para><ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/timer/timer_error_case/src/main.c" line="43" column="6" bodyfile="tests/kernel/timer/timer_error_case/src/main.c" bodystart="43" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__timer__tests_1ga54680aa4288c5f1b5d064d07b0e33e95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_timer_stop_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_timer_stop_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a thread and set <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref> input to NULL</para>
<para><simplesect kind="see"><para><ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/timer/timer_error_case/src/main.c" line="80" column="6" bodyfile="tests/kernel/timer/timer_error_case/src/main.c" bodystart="80" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__timer__tests_1ga60dadcfb59965ec4d019a2b2ee8f9378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_timer_status_get_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_timer_status_get_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__timer__apis_1gad532f4834cd4cf8be27b089e6ea347ce" kindref="member">k_timer_status_get()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a thread and set <ref refid="group__timer__apis_1gad532f4834cd4cf8be27b089e6ea347ce" kindref="member">k_timer_status_get()</ref> input to NULL</para>
<para><simplesect kind="see"><para><ref refid="group__timer__apis_1gad532f4834cd4cf8be27b089e6ea347ce" kindref="member">k_timer_status_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/timer/timer_error_case/src/main.c" line="117" column="6" bodyfile="tests/kernel/timer/timer_error_case/src/main.c" bodystart="117" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__timer__tests_1ga421de1a5a6065ef0496a5bcff1d0c86e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_timer_status_sync_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_timer_status_sync_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__timer__apis_1ga81d6d95b7021e26ad4cab161318e04f2" kindref="member">k_timer_status_sync()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a thread and set <ref refid="group__timer__apis_1ga81d6d95b7021e26ad4cab161318e04f2" kindref="member">k_timer_status_sync()</ref> input to NULL</para>
<para><simplesect kind="see"><para><ref refid="group__timer__apis_1ga81d6d95b7021e26ad4cab161318e04f2" kindref="member">k_timer_status_sync()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/timer/timer_error_case/src/main.c" line="154" column="6" bodyfile="tests/kernel/timer/timer_error_case/src/main.c" bodystart="154" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__timer__tests_1ga823ad89821f1fd6d251392d6f5132e7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_timer_remaining_ticks_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_timer_remaining_ticks_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__timer__apis_1ga1176b36b960e786f68eaededf99a88b4" kindref="member">k_timer_remaining_ticks()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a thread and set <ref refid="group__timer__apis_1ga1176b36b960e786f68eaededf99a88b4" kindref="member">k_timer_remaining_ticks()</ref> input to NULL</para>
<para><simplesect kind="see"><para><ref refid="group__timer__apis_1ga1176b36b960e786f68eaededf99a88b4" kindref="member">k_timer_remaining_ticks()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/timer/timer_error_case/src/main.c" line="191" column="6" bodyfile="tests/kernel/timer/timer_error_case/src/main.c" bodystart="191" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__timer__tests_1ga103062033daf5812798d89b359b868b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_timer_expires_ticks_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_timer_expires_ticks_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__timer__apis_1ga022b4cf5c8d0ee21b6a3b04fd425533f" kindref="member">k_timer_expires_ticks()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a thread and set <ref refid="group__timer__apis_1ga022b4cf5c8d0ee21b6a3b04fd425533f" kindref="member">k_timer_expires_ticks()</ref> input to NULL</para>
<para><simplesect kind="see"><para><ref refid="group__timer__apis_1ga022b4cf5c8d0ee21b6a3b04fd425533f" kindref="member">k_timer_expires_ticks()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/timer/timer_error_case/src/main.c" line="228" column="6" bodyfile="tests/kernel/timer/timer_error_case/src/main.c" bodystart="228" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__timer__tests_1ga1bea00adf2513234693de5dd757e6a70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_timer_user_data_get_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_timer_user_data_get_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__timer__apis_1ga19a7d99a01a83828efd7f0d3bf2dd358" kindref="member">k_timer_user_data_get()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a thread and set <ref refid="group__timer__apis_1ga19a7d99a01a83828efd7f0d3bf2dd358" kindref="member">k_timer_user_data_get()</ref> input to NULL</para>
<para><simplesect kind="see"><para><ref refid="group__timer__apis_1ga19a7d99a01a83828efd7f0d3bf2dd358" kindref="member">k_timer_user_data_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/timer/timer_error_case/src/main.c" line="265" column="6" bodyfile="tests/kernel/timer/timer_error_case/src/main.c" bodystart="265" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__timer__tests_1gabb0e610aab825a34f2b9e4dbb6cca2c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_timer_user_data_set_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_timer_user_data_set_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__timer__apis_1gadba1884961e790dd9c5d567de91cc7e2" kindref="member">k_timer_user_data_set()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a thread and set <ref refid="group__timer__apis_1gadba1884961e790dd9c5d567de91cc7e2" kindref="member">k_timer_user_data_set()</ref> input to NULL</para>
<para><simplesect kind="see"><para><ref refid="group__timer__apis_1gadba1884961e790dd9c5d567de91cc7e2" kindref="member">k_timer_user_data_set()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/timer/timer_error_case/src/main.c" line="304" column="6" bodyfile="tests/kernel/timer/timer_error_case/src/main.c" bodystart="304" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__timer__tests_1ga40ee5e624fb6c2b40c6df1e446017b88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_timer</definition>
        <argsstring>(void)</argsstring>
        <name>test_timer</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test monotonic timer. </para>
        </briefdescription>
        <detaileddescription>
<para>Validates monotonic timer&apos;s clock calibration.</para>
<para>It reads the System clock’s h/w timer frequency value continuously using <ref refid="group__clock__apis_1ga208687de625e0036558343b4e66143d3" kindref="member">k_cycle_get_32()</ref> to verify its working and correctiveness. It also checks system tick frequency by checking the delta error between generated and system clock provided HW cycles per sec values.</para>
<para><simplesect kind="see"><para><ref refid="group__clock__apis_1ga208687de625e0036558343b4e66143d3" kindref="member">k_cycle_get_32()</ref>, <ref refid="time__units_8h_1a1b1223214da82f6733d1b3302dfb7fb2" kindref="member">sys_clock_hw_cycles_per_sec()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/timer/timer_monotonic/src/main.c" line="50" column="6" bodyfile="tests/kernel/timer/timer_monotonic/src/main.c" bodystart="50" bodyend="81"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Tests for the Timer kernel object. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
