<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="json_8h" kind="file" language="C++">
    <compoundname>json.h</compoundname>
    <includes refid="util_8h" local="no">sys/util.h</includes>
    <includes local="no">stddef.h</includes>
    <includes refid="toolchain_8h" local="no">toolchain.h</includes>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes refid="lib_2libc_2minimal_2include_2sys_2types_8h" local="no">sys/types.h</includes>
    <incdepgraph>
      <node id="1">
        <label>include/data/json.h</label>
        <link refid="json_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="3">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="7">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="9">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="12">
        <label>sys/_types.h</label>
        <link refid="__types_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>sys/types.h</label>
        <link refid="lib_2libc_2minimal_2include_2sys_2types_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structjson__obj__descr" prot="public">json_obj_descr</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__json_1ga1ed917f5a247ca33f2778afe62ff1a88" prot="public" static="no">
        <name>JSON_OBJ_DESCR_PRIM</name>
        <param><defname>struct_</defname></param>
        <param><defname>field_name_</defname></param>
        <param><defname>type_</defname></param>
        <initializer>	{ \
		.field_name = (#field_name_), \
		.align_shift = Z_ALIGN_SHIFT(struct_), \
		.field_name_len = sizeof(#field_name_) - 1, \
		.type = type_, \
		.offset = offsetof(struct_, field_name_), \
	}</initializer>
        <briefdescription>
<para>Helper macro to declare a descriptor for supported primitive values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struct_</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct packing the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_</parametername>
</parameternamelist>
<parameterdescription>
<para>Token type for JSON value corresponding to a primitive type. Must be one of: JSON_TOK_STRING for strings, JSON_TOK_NUMBER for numbers, JSON_TOK_TRUE (or JSON_TOK_FALSE) for booleans.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Here&apos;s an example of use: <verbatim>struct foo {
    int some_int;
};

struct json_obj_descr foo[] = {
    JSON_OBJ_DESCR_PRIM(struct foo, some_int, JSON_TOK_NUMBER),
};
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="133" column="9" bodyfile="include/data/json.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__json_1ga4ee365f43cfa86a214973defe81f1e88" prot="public" static="no">
        <name>JSON_OBJ_DESCR_OBJECT</name>
        <param><defname>struct_</defname></param>
        <param><defname>field_name_</defname></param>
        <param><defname>sub_descr_</defname></param>
        <initializer>	{ \
		.field_name = (#field_name_), \
		.align_shift = Z_ALIGN_SHIFT(struct_), \
		.field_name_len = (sizeof(#field_name_) - 1), \
		.type = <ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a81e303d23da0b3d8504cc4a7ee7d52e8" kindref="member">JSON_TOK_OBJECT_START</ref>, \
		.offset = offsetof(struct_, field_name_), \
		{ \
			.object = { \
				.sub_descr = sub_descr_, \
				.sub_descr_len = <ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(sub_descr_), \
			}, \
		}, \
	}</initializer>
        <briefdescription>
<para>Helper macro to declare a descriptor for an object value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struct_</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct packing the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sub_descr_</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> describing the subobject</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Here&apos;s an example of use: <verbatim> struct nested {
     int foo;
     struct {
        int baz;
     } bar;
 };

 struct json_obj_descr nested_bar[] = {
     { ... declare bar.baz descriptor ... },
 };
 struct json_obj_descr nested[] = {
     { ... declare foo descriptor ... },
     JSON_OBJ_DESCR_OBJECT(struct nested, bar, nested_bar),
 };
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="166" column="9" bodyfile="include/data/json.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__json_1ga0b510decbc755c82903b54fcbc4a3b64" prot="public" static="no">
        <name>JSON_OBJ_DESCR_ARRAY</name>
        <param><defname>struct_</defname></param>
        <param><defname>field_name_</defname></param>
        <param><defname>max_len_</defname></param>
        <param><defname>len_field_</defname></param>
        <param><defname>elem_type_</defname></param>
        <initializer>	{ \
		.field_name = (#field_name_), \
		.align_shift = Z_ALIGN_SHIFT(struct_), \
		.field_name_len = sizeof(#field_name_) - 1, \
		.type = <ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a9856446d3a2aa3155266957b8b1371cd" kindref="member">JSON_TOK_ARRAY_START</ref>, \
		.offset = offsetof(struct_, field_name_), \
		{ \
			.array = { \
				.element_descr = Z_JSON_ELEMENT_DESCR(struct_, len_field_, \
					elem_type_,), \
				.n_elements = (max_len_), \
			}, \
		}, \
	}</initializer>
        <briefdescription>
<para>Helper macro to declare a descriptor for an array of primitives. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struct_</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct packing the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_len_</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of elements in array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_field_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct for the number of elements in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_type_</parametername>
</parameternamelist>
<parameterdescription>
<para>Element type, must be a primitive type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Here&apos;s an example of use: <verbatim> struct example {
     int foo[10];
     size_t foo_len;
 };

 struct json_obj_descr array[] = {
      JSON_OBJ_DESCR_ARRAY(struct example, foo, 10, foo_len,
                           JSON_TOK_NUMBER)
 };
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="252" column="9" bodyfile="include/data/json.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__json_1gae012264df03546a1c01eec4216b52ffd" prot="public" static="no">
        <name>JSON_OBJ_DESCR_OBJ_ARRAY</name>
        <param><defname>struct_</defname></param>
        <param><defname>field_name_</defname></param>
        <param><defname>max_len_</defname></param>
        <param><defname>len_field_</defname></param>
        <param><defname>elem_descr_</defname></param>
        <param><defname>elem_descr_len_</defname></param>
        <initializer>	{ \
		.field_name = (#field_name_), \
		.align_shift = Z_ALIGN_SHIFT(struct_), \
		.field_name_len = sizeof(#field_name_) - 1, \
		.type = <ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a9856446d3a2aa3155266957b8b1371cd" kindref="member">JSON_TOK_ARRAY_START</ref>, \
		.offset = offsetof(struct_, field_name_), \
		{ \
			.array = { \
				.element_descr = Z_JSON_ELEMENT_DESCR(struct_, len_field_, \
					<ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a81e303d23da0b3d8504cc4a7ee7d52e8" kindref="member">JSON_TOK_OBJECT_START</ref>, \
					Z_JSON_DESCR_OBJ(elem_descr_, elem_descr_len_)), \
				.n_elements = (max_len_), \
			}, \
		}, \
	}</initializer>
        <briefdescription>
<para>Helper macro to declare a descriptor for an array of objects. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struct_</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct packing the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct containing the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_len_</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of elements in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_field_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct for the number of elements in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_descr_</parametername>
</parameternamelist>
<parameterdescription>
<para>Element descriptor, pointer to a descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_descr_len_</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in elem_descr_</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Here&apos;s an example of use: <verbatim> struct person_height {
     const char *name;
     int height;
 };

 struct people_heights {
     struct person_height heights[10];
     size_t heights_len;
 };

 struct json_obj_descr person_height_descr[] = {
      JSON_OBJ_DESCR_PRIM(struct person_height, name, JSON_TOK_STRING),
      JSON_OBJ_DESCR_PRIM(struct person_height, height, JSON_TOK_NUMBER),
 };

 struct json_obj_descr array[] = {
      JSON_OBJ_DESCR_OBJ_ARRAY(struct people_heights, heights, 10,
                               heights_len, person_height_descr,
                               ARRAY_SIZE(person_height_descr)),
 };
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="303" column="9" bodyfile="include/data/json.h" bodystart="302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__json_1gaed8189235fd30d2bc041cafee9591ec9" prot="public" static="no">
        <name>JSON_OBJ_DESCR_ARRAY_ARRAY</name>
        <param><defname>struct_</defname></param>
        <param><defname>field_name_</defname></param>
        <param><defname>max_len_</defname></param>
        <param><defname>len_field_</defname></param>
        <param><defname>elem_descr_</defname></param>
        <param><defname>elem_descr_len_</defname></param>
        <initializer>	{ \
		.field_name = (#field_name_), \
		.align_shift = Z_ALIGN_SHIFT(struct_), \
		.field_name_len = sizeof(#field_name_) - 1, \
		.type = <ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a9856446d3a2aa3155266957b8b1371cd" kindref="member">JSON_TOK_ARRAY_START</ref>, \
		.offset = offsetof(struct_, field_name_), \
		{ \
			.array = { \
				.element_descr = Z_JSON_ELEMENT_DESCR( \
					struct_, len_field_, <ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a9856446d3a2aa3155266957b8b1371cd" kindref="member">JSON_TOK_ARRAY_START</ref>, \
					Z_JSON_DESCR_ARRAY( \
						elem_descr_, \
						1 + <ref refid="group__sys-util_1ga831cb8468911b8ebdb9b42682778e53d" kindref="member">ZERO_OR_COMPILE_ERROR</ref>(elem_descr_len_ == 1))), \
				.n_elements = (max_len_), \
			}, \
		}, \
	}</initializer>
        <briefdescription>
<para>Helper macro to declare a descriptor for an array of array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struct_</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct packing the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct containing the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_len_</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of elements in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_field_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct for the number of elements in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_descr_</parametername>
</parameternamelist>
<parameterdescription>
<para>Element descriptor, pointer to a descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_descr_len_</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in elem_descr_</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Here&apos;s an example of use: <verbatim> struct person_height {
     const char *name;
     int height;
 };

 struct person_heights_array {
     struct person_height heights;
 }

 struct people_heights {
     struct person_height_array heights[10];
     size_t heights_len;
 };

 struct json_obj_descr person_height_descr[] = {
     JSON_OBJ_DESCR_PRIM(struct person_height, name, JSON_TOK_STRING),
     JSON_OBJ_DESCR_PRIM(struct person_height, height, JSON_TOK_NUMBER),
 };

 struct json_obj_descr person_height_array_descr[] = {
     JSON_OBJ_DESCR_OBJECT(struct person_heights_array,
                           heights, person_heigth_descr),
 };

 struct json_obj_descr array_array[] = {
      JSON_OBJ_DESCR_ARRAY_ARRAY(struct people_heights, heights, 10,
                                 heights_len, person_height_array_descr,
                                 ARRAY_SIZE(person_height_array_descr)),
 };
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="364" column="9" bodyfile="include/data/json.h" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__json_1gaad081c4f8debcb41779bd5879ed8bbd4" prot="public" static="no">
        <name>JSON_OBJ_DESCR_PRIM_NAMED</name>
        <param><defname>struct_</defname></param>
        <param><defname>json_field_name_</defname></param>
        <param><defname>struct_field_name_</defname></param>
        <param><defname>type_</defname></param>
        <initializer>	{ \
		.field_name = (json_field_name_), \
		.align_shift = Z_ALIGN_SHIFT(struct_), \
		.field_name_len = sizeof(json_field_name_) - 1, \
		.type = type_, \
		.offset = offsetof(struct_, struct_field_name_), \
	}</initializer>
        <briefdescription>
<para>Variant of JSON_OBJ_DESCR_PRIM that can be used when the structure and JSON field names differ. </para>
        </briefdescription>
        <detaileddescription>
<para>This is useful when the JSON field is not a valid C identifier.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struct_</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct packing the values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>json_field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>String, field name in JSON strings </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>struct_field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_</parametername>
</parameternamelist>
<parameterdescription>
<para>Token type for JSON value corresponding to a primitive type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__json_1ga1ed917f5a247ca33f2778afe62ff1a88" kindref="member">JSON_OBJ_DESCR_PRIM</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="398" column="9" bodyfile="include/data/json.h" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__json_1ga8f8d03241e4f69d5f7147792db9a9fe9" prot="public" static="no">
        <name>JSON_OBJ_DESCR_OBJECT_NAMED</name>
        <param><defname>struct_</defname></param>
        <param><defname>json_field_name_</defname></param>
        <param><defname>struct_field_name_</defname></param>
        <param><defname>sub_descr_</defname></param>
        <initializer>	{ \
		.field_name = (json_field_name_), \
		.align_shift = Z_ALIGN_SHIFT(struct_), \
		.field_name_len = (sizeof(json_field_name_) - 1), \
		.type = <ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a81e303d23da0b3d8504cc4a7ee7d52e8" kindref="member">JSON_TOK_OBJECT_START</ref>, \
		.offset = offsetof(struct_, struct_field_name_), \
		{ \
			.object = { \
				.sub_descr = sub_descr_, \
				.sub_descr_len = <ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(sub_descr_), \
			}, \
		}, \
	}</initializer>
        <briefdescription>
<para>Variant of JSON_OBJ_DESCR_OBJECT that can be used when the structure and JSON field names differ. </para>
        </briefdescription>
        <detaileddescription>
<para>This is useful when the JSON field is not a valid C identifier.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struct_</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct packing the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>json_field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>String, field name in JSON strings </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>struct_field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sub_descr_</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> describing the subobject</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__json_1ga4ee365f43cfa86a214973defe81f1e88" kindref="member">JSON_OBJ_DESCR_OBJECT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="421" column="9" bodyfile="include/data/json.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__json_1ga4a5bafd64de8abcbc2b5c039bd59ec84" prot="public" static="no">
        <name>JSON_OBJ_DESCR_ARRAY_NAMED</name>
        <param><defname>struct_</defname></param>
        <param><defname>json_field_name_</defname></param>
        <param><defname>struct_field_name_</defname></param>
        <param><defname>max_len_</defname></param>
        <param><defname>len_field_</defname></param>
        <param><defname>elem_type_</defname></param>
        <initializer>	{ \
		.field_name = (json_field_name_), \
		.align_shift = Z_ALIGN_SHIFT(struct_), \
		.field_name_len = sizeof(json_field_name_) - 1, \
		.type = <ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a9856446d3a2aa3155266957b8b1371cd" kindref="member">JSON_TOK_ARRAY_START</ref>, \
		.offset = offsetof(struct_, struct_field_name_), \
		{ \
			.array = { \
				.element_descr = \
					Z_JSON_ELEMENT_DESCR(struct_, len_field_, elem_type_,), \
				.n_elements = (max_len_), \
			}, \
		}, \
	}</initializer>
        <briefdescription>
<para>Variant of JSON_OBJ_DESCR_ARRAY that can be used when the structure and JSON field names differ. </para>
        </briefdescription>
        <detaileddescription>
<para>This is useful when the JSON field is not a valid C identifier.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struct_</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct packing the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>json_field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>String, field name in JSON strings </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>struct_field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_len_</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of elements in array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_field_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct for the number of elements in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_type_</parametername>
</parameternamelist>
<parameterdescription>
<para>Element type, must be a primitive type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__json_1ga0b510decbc755c82903b54fcbc4a3b64" kindref="member">JSON_OBJ_DESCR_ARRAY</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="454" column="9" bodyfile="include/data/json.h" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__json_1gaa6602833e59c7e5205d69cc7c4ab2bba" prot="public" static="no">
        <name>JSON_OBJ_DESCR_OBJ_ARRAY_NAMED</name>
        <param><defname>struct_</defname></param>
        <param><defname>json_field_name_</defname></param>
        <param><defname>struct_field_name_</defname></param>
        <param><defname>max_len_</defname></param>
        <param><defname>len_field_</defname></param>
        <param><defname>elem_descr_</defname></param>
        <param><defname>elem_descr_len_</defname></param>
        <initializer>	{ \
		.field_name = json_field_name_, \
		.align_shift = Z_ALIGN_SHIFT(struct_), \
		.field_name_len = sizeof(json_field_name_) - 1, \
		.type = <ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a9856446d3a2aa3155266957b8b1371cd" kindref="member">JSON_TOK_ARRAY_START</ref>, \
		.offset = offsetof(struct_, struct_field_name_), \
		{ \
			.array = { \
				.element_descr = Z_JSON_ELEMENT_DESCR(struct_, len_field_, \
					<ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a81e303d23da0b3d8504cc4a7ee7d52e8" kindref="member">JSON_TOK_OBJECT_START</ref>, \
					Z_JSON_DESCR_OBJ(elem_descr_, elem_descr_len_)), \
				.n_elements = (max_len_), \
			}, \
		}, \
	}</initializer>
        <briefdescription>
<para>Variant of JSON_OBJ_DESCR_OBJ_ARRAY that can be used when the structure and JSON field names differ. </para>
        </briefdescription>
        <detaileddescription>
<para>This is useful when the JSON field is not a valid C identifier.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struct_</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct packing the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>json_field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>String, field name of the array in JSON strings </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>struct_field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct containing the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_len_</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of elements in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_field_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct for the number of elements in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_descr_</parametername>
</parameternamelist>
<parameterdescription>
<para>Element descriptor, pointer to a descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_descr_len_</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in elem_descr_</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Here&apos;s an example of use: <verbatim> struct person_height {
     const char *name;
     int height;
 };

 struct people_heights {
     struct person_height heights[10];
     size_t heights_len;
 };

 struct json_obj_descr person_height_descr[] = {
      JSON_OBJ_DESCR_PRIM(struct person_height, name, JSON_TOK_STRING),
      JSON_OBJ_DESCR_PRIM(struct person_height, height, JSON_TOK_NUMBER),
 };

 struct json_obj_descr array[] = {
      JSON_OBJ_DESCR_OBJ_ARRAY_NAMED(struct people_heights,
                                     &quot;people-heights&quot;, heights,
                                     10, heights_len,
                                     person_height_descr,
                                     ARRAY_SIZE(person_height_descr)),
 };
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="513" column="9" bodyfile="include/data/json.h" bodystart="510" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__json_1ga18a137ac5e2998d375540298670797c4" prot="public" static="no" strong="no">
        <type></type>
        <name>json_tokens</name>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a926d6b0a5458be2e707d51f0b25dbe77" prot="public">
          <name>JSON_TOK_NONE</name>
          <initializer>= &apos;_&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a81e303d23da0b3d8504cc4a7ee7d52e8" prot="public">
          <name>JSON_TOK_OBJECT_START</name>
          <initializer>= &apos;{&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a835bc516b25eb0619b3f1a52f1ebc911" prot="public">
          <name>JSON_TOK_OBJECT_END</name>
          <initializer>= &apos;}&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a8f9beceabf104da239f713e23b91d76b" prot="public">
          <name>JSON_TOK_LIST_START</name>
          <initializer>= &apos;[&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a9856446d3a2aa3155266957b8b1371cd" prot="public">
          <name>JSON_TOK_ARRAY_START</name>
          <initializer>= &apos;[&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a5e90a7b034a4af48a1b90fad7675a88d" prot="public">
          <name>JSON_TOK_LIST_END</name>
          <initializer>= &apos;]&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a2483f21d814abcd08b5253e55aef70c9" prot="public">
          <name>JSON_TOK_ARRAY_END</name>
          <initializer>= &apos;]&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4ab145f07a93c4fdcf60c9052fbd9a7afc" prot="public">
          <name>JSON_TOK_STRING</name>
          <initializer>= &apos;&quot;&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a4873e5c0c6344323d5d6af158952ca36" prot="public">
          <name>JSON_TOK_COLON</name>
          <initializer>= &apos;:&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a736325745f9521f38a68962775e76a50" prot="public">
          <name>JSON_TOK_COMMA</name>
          <initializer>= &apos;,&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4ae25f16ae591eb17d4074e6dcc2f1e62c" prot="public">
          <name>JSON_TOK_NUMBER</name>
          <initializer>= &apos;0&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a87ffb12e4d174bb4427d9a72eabca7e3" prot="public">
          <name>JSON_TOK_TRUE</name>
          <initializer>= &apos;t&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a8df1b1d0061d7e289f94bae1df35baa7" prot="public">
          <name>JSON_TOK_FALSE</name>
          <initializer>= &apos;f&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a93de1b7e780ac22744c97e922de3b35e" prot="public">
          <name>JSON_TOK_NULL</name>
          <initializer>= &apos;n&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4afe9c51f453d7dd02504071330a030e9e" prot="public">
          <name>JSON_TOK_ERROR</name>
          <initializer>= &apos;!&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4ad970b7d8553296bf4ed03c831cb6f604" prot="public">
          <name>JSON_TOK_EOF</name>
          <initializer>= &apos;\0&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="32" column="1" bodyfile="include/data/json.h" bodystart="32" bodyend="56"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__json_1gacb409ebe9c59789a5d9aca02c6c94674" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* json_append_bytes_t) (const char *bytes, size_t len, void *data)</definition>
        <argsstring>)(const char *bytes, size_t len, void *data)</argsstring>
        <name>json_append_bytes_t</name>
        <briefdescription>
<para>Function pointer type to append bytes to a buffer while encoding JSON data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Contents to write to the output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to append to output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>User-provided pointer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This callback function should return a negative number on error (which will be propagated to the return value of <ref refid="group__json_1gafec772f687a0280f5211139bd019e582" kindref="member">json_obj_encode()</ref>), or 0 on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="106" column="9" bodyfile="include/data/json.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__json_1ga9aa97a94e7e91a5d818c20b27059b6cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int json_obj_parse</definition>
        <argsstring>(char *json, size_t len, const struct json_obj_descr *descr, size_t descr_len, void *val)</argsstring>
        <name>json_obj_parse</name>
        <param>
          <type>char *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const struct <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> *</type>
          <declname>descr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>descr_len</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Parses the JSON-encoded object pointed to by <emphasis>json</emphasis>, with size <emphasis>len</emphasis>, according to the descriptor pointed to by <emphasis>descr</emphasis>. Values are stored in a struct pointed to by <emphasis>val</emphasis>. Set up the descriptor like this: </para>
        </briefdescription>
        <detaileddescription>
<para>struct s { int foo; char *bar; } struct <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> descr[] = { <ref refid="group__json_1ga1ed917f5a247ca33f2778afe62ff1a88" kindref="member">JSON_OBJ_DESCR_PRIM(struct s, foo, JSON_TOK_NUMBER)</ref>, <ref refid="group__json_1ga1ed917f5a247ca33f2778afe62ff1a88" kindref="member">JSON_OBJ_DESCR_PRIM(struct s, bar, JSON_TOK_STRING)</ref>, };</para>
<para>Since this parser is designed for machine-to-machine communications, some liberties were taken to simplify the design: (1) strings are not unescaped (but only valid escape sequences are accepted); (2) no UTF-8 validation is performed; and (3) only integer numbers are supported (no strtod() in the minimal libc).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to JSON-encoded value to be parsed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of JSON-encoded value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descr_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the descriptor array. Must be less than 31 due to implementation detail reasons (if more fields are necessary, use two descriptors) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the struct to hold the decoded values</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt; 0 if error, bitmap of decoded fields on success (bit 0 is set if first field in the descriptor has been properly decoded, etc). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="560" column="5" declfile="include/data/json.h" declline="560" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__json_1gab4e6ad4a040c271d74eaa313c580a739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int json_arr_parse</definition>
        <argsstring>(char *json, size_t len, const struct json_obj_descr *descr, void *val)</argsstring>
        <name>json_arr_parse</name>
        <param>
          <type>char *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const struct <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> *</type>
          <declname>descr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Parses the JSON-encoded array pointed to by <emphasis>json</emphasis>, with size <emphasis>len</emphasis>, according to the descriptor pointed to by <emphasis>descr</emphasis>. Values are stored in a struct pointed to by <emphasis>val</emphasis>. Set up the descriptor like this: </para>
        </briefdescription>
        <detaileddescription>
<para>struct s { int foo; char *bar; } struct <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> descr[] = { <ref refid="group__json_1ga1ed917f5a247ca33f2778afe62ff1a88" kindref="member">JSON_OBJ_DESCR_PRIM(struct s, foo, JSON_TOK_NUMBER)</ref>, <ref refid="group__json_1ga1ed917f5a247ca33f2778afe62ff1a88" kindref="member">JSON_OBJ_DESCR_PRIM(struct s, bar, JSON_TOK_STRING)</ref>, }; struct a { struct s baz[10]; size_t count; } struct <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> array[] = { JSON_OBJ_DESCR_OBJ_ARRAY(struct a, baz, 10, count, descr, <ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE(descr)</ref>), };</para>
<para>Since this parser is designed for machine-to-machine communications, some liberties were taken to simplify the design: (1) strings are not unescaped (but only valid escape sequences are accepted); (2) no UTF-8 validation is performed; and (3) only integer numbers are supported (no strtod() in the minimal libc).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to JSON-encoded array to be parsed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of JSON-encoded array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the struct to hold the decoded values</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if array has been successfully parsed. A negative value indicates an error (as defined on <ref refid="errno_8h" kindref="compound">errno.h</ref>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="596" column="5" declfile="include/data/json.h" declline="596" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__json_1ga43ee6d1fbd3fa8fb2ae052844b465dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref></type>
        <definition>ssize_t json_escape</definition>
        <argsstring>(char *str, size_t *len, size_t buf_size)</argsstring>
        <name>json_escape</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>len</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_size</declname>
        </param>
        <briefdescription>
<para>Escapes the string so it can be used to encode JSON objects. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to escape; the escape string is stored the buffer pointed to by this parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Points to a size_t containing the size before and after the escaping process </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of buffer str points to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if string has been escaped properly, or -ENOMEM if there was not enough space to escape the buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="611" column="9" declfile="include/data/json.h" declline="611" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__json_1ga5ef155a3a6444801592badd6a092734c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t json_calc_escaped_len</definition>
        <argsstring>(const char *str, size_t len)</argsstring>
        <name>json_calc_escaped_len</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Calculates the JSON-escaped string length. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to analyze </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>String size</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length str would have if it were escaped </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="621" column="8" declfile="include/data/json.h" declline="621" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__json_1ga41e6e90beef8bae12fca1de2584145bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref></type>
        <definition>ssize_t json_calc_encoded_len</definition>
        <argsstring>(const struct json_obj_descr *descr, size_t descr_len, const void *val)</argsstring>
        <name>json_calc_encoded_len</name>
        <param>
          <type>const struct <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> *</type>
          <declname>descr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>descr_len</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Calculates the string length to fully encode an object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>descr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descr_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct holding the values</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes necessary to encode the values if &gt;0, an error code is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="633" column="9" declfile="include/data/json.h" declline="633" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__json_1gab758ad32cfb6369f4967a6842ac63245" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int json_obj_encode_buf</definition>
        <argsstring>(const struct json_obj_descr *descr, size_t descr_len, const void *val, char *buffer, size_t buf_size)</argsstring>
        <name>json_obj_encode_buf</name>
        <param>
          <type>const struct <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> *</type>
          <declname>descr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>descr_len</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_size</declname>
        </param>
        <briefdescription>
<para>Encodes an object in a contiguous memory location. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>descr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descr_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct holding the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the JSON data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of buffer, in bytes, with space for the terminating NUL character</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if object has been successfully encoded. A negative value indicates an error (as defined on <ref refid="errno_8h" kindref="compound">errno.h</ref>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="649" column="5" declfile="include/data/json.h" declline="649" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__json_1gafd27bbcb898dc902cf1dadd3369cf923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int json_arr_encode_buf</definition>
        <argsstring>(const struct json_obj_descr *descr, const void *val, char *buffer, size_t buf_size)</argsstring>
        <name>json_arr_encode_buf</name>
        <param>
          <type>const struct <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> *</type>
          <declname>descr</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_size</declname>
        </param>
        <briefdescription>
<para>Encodes an array in a contiguous memory location. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>descr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct holding the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the JSON data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of buffer, in bytes, with space for the terminating NUL character</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if object has been successfully encoded. A negative value indicates an error (as defined on <ref refid="errno_8h" kindref="compound">errno.h</ref>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="664" column="5" declfile="include/data/json.h" declline="664" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__json_1gafec772f687a0280f5211139bd019e582" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int json_obj_encode</definition>
        <argsstring>(const struct json_obj_descr *descr, size_t descr_len, const void *val, json_append_bytes_t append_bytes, void *data)</argsstring>
        <name>json_obj_encode</name>
        <param>
          <type>const struct <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> *</type>
          <declname>descr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>descr_len</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="group__json_1gacb409ebe9c59789a5d9aca02c6c94674" kindref="member">json_append_bytes_t</ref></type>
          <declname>append_bytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Encodes an object using an arbitrary writer function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>descr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descr_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct holding the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>append_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to append bytes to the output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data pointer to be passed to the append_bytes callback function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if object has been successfully encoded. A negative value indicates an error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="680" column="5" declfile="include/data/json.h" declline="680" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__json_1ga4ffccdc602ab98d489499bf6fa4fa6c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int json_arr_encode</definition>
        <argsstring>(const struct json_obj_descr *descr, const void *val, json_append_bytes_t append_bytes, void *data)</argsstring>
        <name>json_arr_encode</name>
        <param>
          <type>const struct <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> *</type>
          <declname>descr</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="group__json_1gacb409ebe9c59789a5d9aca02c6c94674" kindref="member">json_append_bytes_t</ref></type>
          <declname>append_bytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Encodes an array using an arbitrary writer function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>descr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct holding the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>append_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to append bytes to the output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data pointer to be passed to the append_bytes callback function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if object has been successfully encoded. A negative value indicates an error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="696" column="5" declfile="include/data/json.h" declline="696" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_DATA_JSON_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_DATA_JSON_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="util_8h" kindref="compound">sys/util.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="toolchain_8h" kindref="compound">toolchain.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="lib_2libc_2minimal_2include_2sys_2types_8h" kindref="compound">sys/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="group__json_1ga18a137ac5e2998d375540298670797c4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__json_1ga18a137ac5e2998d375540298670797c4" kindref="member">json_tokens</ref><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Before<sp/>changing<sp/>this<sp/>enum,<sp/>ensure<sp/>that<sp/>its<sp/>maximum</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>value<sp/>is<sp/>still<sp/>within<sp/>7<sp/>bits.<sp/>See<sp/>comment<sp/>next<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>declaration<sp/>of<sp/>`type`<sp/>in<sp/>struct<sp/>json_obj_descr.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="group__json_1gga18a137ac5e2998d375540298670797c4a926d6b0a5458be2e707d51f0b25dbe77" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a926d6b0a5458be2e707d51f0b25dbe77" kindref="member">JSON_TOK_NONE</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="39" refid="group__json_1gga18a137ac5e2998d375540298670797c4a81e303d23da0b3d8504cc4a7ee7d52e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a81e303d23da0b3d8504cc4a7ee7d52e8" kindref="member">JSON_TOK_OBJECT_START</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="40" refid="group__json_1gga18a137ac5e2998d375540298670797c4a835bc516b25eb0619b3f1a52f1ebc911" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a835bc516b25eb0619b3f1a52f1ebc911" kindref="member">JSON_TOK_OBJECT_END</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>JSON_TOK_LIST_START<sp/>will<sp/>be<sp/>removed<sp/>use<sp/>JSON_TOK_ARRAY_START<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="group__json_1gga18a137ac5e2998d375540298670797c4a8f9beceabf104da239f713e23b91d76b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a8f9beceabf104da239f713e23b91d76b" kindref="member">JSON_TOK_LIST_START</ref><sp/>__deprecated<sp/>=<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="43" refid="group__json_1gga18a137ac5e2998d375540298670797c4a9856446d3a2aa3155266957b8b1371cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a9856446d3a2aa3155266957b8b1371cd" kindref="member">JSON_TOK_ARRAY_START</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>JSON_TOK_LIST_END<sp/>will<sp/>be<sp/>removed<sp/>use<sp/>JSON_TOK_ARRAY_END<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="group__json_1gga18a137ac5e2998d375540298670797c4a5e90a7b034a4af48a1b90fad7675a88d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a5e90a7b034a4af48a1b90fad7675a88d" kindref="member">JSON_TOK_LIST_END</ref><sp/>__deprecated<sp/>=<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="46" refid="group__json_1gga18a137ac5e2998d375540298670797c4a2483f21d814abcd08b5253e55aef70c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a2483f21d814abcd08b5253e55aef70c9" kindref="member">JSON_TOK_ARRAY_END</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="47" refid="group__json_1gga18a137ac5e2998d375540298670797c4ab145f07a93c4fdcf60c9052fbd9a7afc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__json_1gga18a137ac5e2998d375540298670797c4ab145f07a93c4fdcf60c9052fbd9a7afc" kindref="member">JSON_TOK_STRING</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="48" refid="group__json_1gga18a137ac5e2998d375540298670797c4a4873e5c0c6344323d5d6af158952ca36" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a4873e5c0c6344323d5d6af158952ca36" kindref="member">JSON_TOK_COLON</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="49" refid="group__json_1gga18a137ac5e2998d375540298670797c4a736325745f9521f38a68962775e76a50" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a736325745f9521f38a68962775e76a50" kindref="member">JSON_TOK_COMMA</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="50" refid="group__json_1gga18a137ac5e2998d375540298670797c4ae25f16ae591eb17d4074e6dcc2f1e62c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__json_1gga18a137ac5e2998d375540298670797c4ae25f16ae591eb17d4074e6dcc2f1e62c" kindref="member">JSON_TOK_NUMBER</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="51" refid="group__json_1gga18a137ac5e2998d375540298670797c4a87ffb12e4d174bb4427d9a72eabca7e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a87ffb12e4d174bb4427d9a72eabca7e3" kindref="member">JSON_TOK_TRUE</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="52" refid="group__json_1gga18a137ac5e2998d375540298670797c4a8df1b1d0061d7e289f94bae1df35baa7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a8df1b1d0061d7e289f94bae1df35baa7" kindref="member">JSON_TOK_FALSE</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="53" refid="group__json_1gga18a137ac5e2998d375540298670797c4a93de1b7e780ac22744c97e922de3b35e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a93de1b7e780ac22744c97e922de3b35e" kindref="member">JSON_TOK_NULL</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="54" refid="group__json_1gga18a137ac5e2998d375540298670797c4afe9c51f453d7dd02504071330a030e9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__json_1gga18a137ac5e2998d375540298670797c4afe9c51f453d7dd02504071330a030e9e" kindref="member">JSON_TOK_ERROR</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="55" refid="group__json_1gga18a137ac5e2998d375540298670797c4ad970b7d8553296bf4ed03c831cb6f604" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__json_1gga18a137ac5e2998d375540298670797c4ad970b7d8553296bf4ed03c831cb6f604" kindref="member">JSON_TOK_EOF</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="56"><highlight class="normal">};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="structjson__obj__descr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref><sp/>{</highlight></codeline>
<codeline lineno="59" refid="structjson__obj__descr_1a2120b7752253ece0beddcaf4c57d3ed8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structjson__obj__descr_1a2120b7752253ece0beddcaf4c57d3ed8" kindref="member">field_name</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Alignment<sp/>can<sp/>be<sp/>1,<sp/>2,<sp/>4,<sp/>or<sp/>8.<sp/><sp/>The<sp/>macros<sp/>to<sp/>create</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>a<sp/>struct<sp/>json_obj_descr<sp/>will<sp/>store<sp/>the<sp/>alignment&apos;s</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>power<sp/>of<sp/>2<sp/>in<sp/>order<sp/>to<sp/>keep<sp/>this<sp/>value<sp/>in<sp/>the<sp/>0-3<sp/>range</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>thus<sp/>use<sp/>only<sp/>2<sp/>bits.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="structjson__obj__descr_1a475717ac4dd01296c01468450e50f75b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structjson__obj__descr_1a475717ac4dd01296c01468450e50f75b" kindref="member">align_shift</ref><sp/>:<sp/>2;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>127<sp/>characters<sp/>is<sp/>more<sp/>than<sp/>enough<sp/>for<sp/>a<sp/>field<sp/>name.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="structjson__obj__descr_1a602bf4d8bb5d47c8edb40963ea8ba42f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structjson__obj__descr_1a602bf4d8bb5d47c8edb40963ea8ba42f" kindref="member">field_name_len</ref><sp/>:<sp/>7;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Valid<sp/>values<sp/>here<sp/>(enum<sp/>json_tokens):<sp/>JSON_TOK_STRING,</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>JSON_TOK_NUMBER,<sp/>JSON_TOK_TRUE,<sp/>JSON_TOK_FALSE,</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>JSON_TOK_OBJECT_START,<sp/>JSON_TOK_ARRAY_START.<sp/><sp/>(All<sp/>others</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>ignored.)<sp/>Maximum<sp/>value<sp/>is<sp/>&apos;}&apos;<sp/>(125),<sp/>so<sp/>this<sp/>has<sp/>to<sp/>be<sp/>7<sp/>bits</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>long.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="structjson__obj__descr_1a975e998d3ec36f234f09aa2d0d116c9c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structjson__obj__descr_1a975e998d3ec36f234f09aa2d0d116c9c" kindref="member">type</ref><sp/>:<sp/>7;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>65535<sp/>bytes<sp/>is<sp/>more<sp/>than<sp/>enough<sp/>for<sp/>many<sp/>JSON<sp/>payloads.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="structjson__obj__descr_1a8c6f3eae5e678b8b8ef1957c46f488f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structjson__obj__descr_1a8c6f3eae5e678b8b8ef1957c46f488f1" kindref="member">offset</ref><sp/>:<sp/>16;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="84" refid="structjson__obj__descr_1a4f5e97c654d0c5e21f1efb5a01966e56" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref><sp/>*<ref refid="structjson__obj__descr_1a4f5e97c654d0c5e21f1efb5a01966e56" kindref="member">sub_descr</ref>;</highlight></codeline>
<codeline lineno="85" refid="structjson__obj__descr_1adea0b44d1552305df9dce70074044ba1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structjson__obj__descr_1adea0b44d1552305df9dce70074044ba1" kindref="member">sub_descr_len</ref>;</highlight></codeline>
<codeline lineno="86" refid="structjson__obj__descr_1a3695b74ed9f2ac5f0f360a7caff015b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><ref refid="structjson__obj__descr_1a3695b74ed9f2ac5f0f360a7caff015b3" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="88" refid="structjson__obj__descr_1a0a459bf5ad8a210395fe80c5edd72d93" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref><sp/>*<ref refid="structjson__obj__descr_1a0a459bf5ad8a210395fe80c5edd72d93" kindref="member">element_descr</ref>;</highlight></codeline>
<codeline lineno="89" refid="structjson__obj__descr_1ace6558c5156a76658d8835fd5e65ee52" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structjson__obj__descr_1ace6558c5156a76658d8835fd5e65ee52" kindref="member">n_elements</ref>;</highlight></codeline>
<codeline lineno="90" refid="structjson__obj__descr_1a8cb75927d2b95f92c877bf0fcaa8fb02" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><ref refid="structjson__obj__descr_1a8cb75927d2b95f92c877bf0fcaa8fb02" kindref="member">array</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="92"><highlight class="normal">};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="group__json_1gacb409ebe9c59789a5d9aca02c6c94674" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__json_1gacb409ebe9c59789a5d9aca02c6c94674" kindref="member">json_append_bytes_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_ALIGN_SHIFT(type)<sp/><sp/><sp/><sp/><sp/>(__alignof__(type)<sp/>==<sp/>1<sp/>?<sp/>0<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__alignof__(type)<sp/>==<sp/>2<sp/>?<sp/>1<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__alignof__(type)<sp/>==<sp/>4<sp/>?<sp/>2<sp/>:<sp/>3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="group__json_1ga1ed917f5a247ca33f2778afe62ff1a88" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JSON_OBJ_DESCR_PRIM(struct_,<sp/>field_name_,<sp/>type_)<sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_name<sp/>=<sp/>(#field_name_),<sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.align_shift<sp/>=<sp/>Z_ALIGN_SHIFT(struct_),<sp/>\</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_name_len<sp/>=<sp/>sizeof(#field_name_)<sp/>-<sp/>1,<sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/>type_,<sp/>\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.offset<sp/>=<sp/>offsetof(struct_,<sp/>field_name_),<sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="group__json_1ga4ee365f43cfa86a214973defe81f1e88" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JSON_OBJ_DESCR_OBJECT(struct_,<sp/>field_name_,<sp/>sub_descr_)<sp/>\</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_name<sp/>=<sp/>(#field_name_),<sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.align_shift<sp/>=<sp/>Z_ALIGN_SHIFT(struct_),<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_name_len<sp/>=<sp/>(sizeof(#field_name_)<sp/>-<sp/>1),<sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/>JSON_TOK_OBJECT_START,<sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.offset<sp/>=<sp/>offsetof(struct_,<sp/>field_name_),<sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.object<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sub_descr<sp/>=<sp/>sub_descr_,<sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sub_descr_len<sp/>=<sp/>ARRAY_SIZE(sub_descr_),<sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_JSON_ELEMENT_DESCR(struct_,<sp/>len_field_,<sp/>elem_type_,<sp/>union_)<sp/>\</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(const<sp/>struct<sp/>json_obj_descr[])<sp/>\</highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.align_shift<sp/>=<sp/>Z_ALIGN_SHIFT(struct_),<sp/>\</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/>elem_type_,<sp/>\</highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.offset<sp/>=<sp/>offsetof(struct_,<sp/>len_field_),<sp/>\</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>union_<sp/>\</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_JSON_DESCR_ARRAY(elem_descr_,<sp/>elem_descr_len_)<sp/>\</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.array<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.element_descr<sp/>=<sp/>elem_descr_,<sp/>\</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.n_elements<sp/>=<sp/>elem_descr_len_,<sp/>\</highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_JSON_DESCR_OBJ(elem_descr_,<sp/>elem_descr_len_)<sp/>\</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.object<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sub_descr<sp/>=<sp/>elem_descr_,<sp/>\</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sub_descr_len<sp/>=<sp/>elem_descr_len_,<sp/>\</highlight></codeline>
<codeline lineno="226"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="251" refid="group__json_1ga0b510decbc755c82903b54fcbc4a3b64" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JSON_OBJ_DESCR_ARRAY(struct_,<sp/>field_name_,<sp/>max_len_,<sp/>\</highlight></codeline>
<codeline lineno="252"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len_field_,<sp/>elem_type_)<sp/>\</highlight></codeline>
<codeline lineno="253"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_name<sp/>=<sp/>(#field_name_),<sp/>\</highlight></codeline>
<codeline lineno="255"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.align_shift<sp/>=<sp/>Z_ALIGN_SHIFT(struct_),<sp/>\</highlight></codeline>
<codeline lineno="256"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_name_len<sp/>=<sp/>sizeof(#field_name_)<sp/>-<sp/>1,<sp/>\</highlight></codeline>
<codeline lineno="257"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/>JSON_TOK_ARRAY_START,<sp/>\</highlight></codeline>
<codeline lineno="258"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.offset<sp/>=<sp/>offsetof(struct_,<sp/>field_name_),<sp/>\</highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="260"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.array<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="261"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.element_descr<sp/>=<sp/>Z_JSON_ELEMENT_DESCR(struct_,<sp/>len_field_,<sp/>\</highlight></codeline>
<codeline lineno="262"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elem_type_,),<sp/>\</highlight></codeline>
<codeline lineno="263"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.n_elements<sp/>=<sp/>(max_len_),<sp/>\</highlight></codeline>
<codeline lineno="264"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="266"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="group__json_1gae012264df03546a1c01eec4216b52ffd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JSON_OBJ_DESCR_OBJ_ARRAY(struct_,<sp/>field_name_,<sp/>max_len_,<sp/>\</highlight></codeline>
<codeline lineno="303"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len_field_,<sp/>elem_descr_,<sp/>elem_descr_len_)<sp/>\</highlight></codeline>
<codeline lineno="304"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="305"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_name<sp/>=<sp/>(#field_name_),<sp/>\</highlight></codeline>
<codeline lineno="306"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.align_shift<sp/>=<sp/>Z_ALIGN_SHIFT(struct_),<sp/>\</highlight></codeline>
<codeline lineno="307"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_name_len<sp/>=<sp/>sizeof(#field_name_)<sp/>-<sp/>1,<sp/>\</highlight></codeline>
<codeline lineno="308"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/>JSON_TOK_ARRAY_START,<sp/>\</highlight></codeline>
<codeline lineno="309"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.offset<sp/>=<sp/>offsetof(struct_,<sp/>field_name_),<sp/>\</highlight></codeline>
<codeline lineno="310"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="311"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.array<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="312"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.element_descr<sp/>=<sp/>Z_JSON_ELEMENT_DESCR(struct_,<sp/>len_field_,<sp/>\</highlight></codeline>
<codeline lineno="313"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JSON_TOK_OBJECT_START,<sp/>\</highlight></codeline>
<codeline lineno="314"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_JSON_DESCR_OBJ(elem_descr_,<sp/>elem_descr_len_)),<sp/>\</highlight></codeline>
<codeline lineno="315"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.n_elements<sp/>=<sp/>(max_len_),<sp/>\</highlight></codeline>
<codeline lineno="316"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="317"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="318"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="363" refid="group__json_1gaed8189235fd30d2bc041cafee9591ec9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JSON_OBJ_DESCR_ARRAY_ARRAY(struct_,<sp/>field_name_,<sp/>max_len_,<sp/>len_field_,<sp/>\</highlight></codeline>
<codeline lineno="364"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elem_descr_,<sp/>elem_descr_len_)<sp/>\</highlight></codeline>
<codeline lineno="365"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="366"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_name<sp/>=<sp/>(#field_name_),<sp/>\</highlight></codeline>
<codeline lineno="367"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.align_shift<sp/>=<sp/>Z_ALIGN_SHIFT(struct_),<sp/>\</highlight></codeline>
<codeline lineno="368"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_name_len<sp/>=<sp/>sizeof(#field_name_)<sp/>-<sp/>1,<sp/>\</highlight></codeline>
<codeline lineno="369"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/>JSON_TOK_ARRAY_START,<sp/>\</highlight></codeline>
<codeline lineno="370"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.offset<sp/>=<sp/>offsetof(struct_,<sp/>field_name_),<sp/>\</highlight></codeline>
<codeline lineno="371"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="372"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.array<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="373"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.element_descr<sp/>=<sp/>Z_JSON_ELEMENT_DESCR(<sp/>\</highlight></codeline>
<codeline lineno="374"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct_,<sp/>len_field_,<sp/>JSON_TOK_ARRAY_START,<sp/>\</highlight></codeline>
<codeline lineno="375"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_JSON_DESCR_ARRAY(<sp/>\</highlight></codeline>
<codeline lineno="376"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elem_descr_,<sp/>\</highlight></codeline>
<codeline lineno="377"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>+<sp/>ZERO_OR_COMPILE_ERROR(elem_descr_len_<sp/>==<sp/>1))),<sp/>\</highlight></codeline>
<codeline lineno="378"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.n_elements<sp/>=<sp/>(max_len_),<sp/>\</highlight></codeline>
<codeline lineno="379"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="380"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="381"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="group__json_1gaad081c4f8debcb41779bd5879ed8bbd4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JSON_OBJ_DESCR_PRIM_NAMED(struct_,<sp/>json_field_name_,<sp/>\</highlight></codeline>
<codeline lineno="398"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct_field_name_,<sp/>type_)<sp/>\</highlight></codeline>
<codeline lineno="399"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="400"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_name<sp/>=<sp/>(json_field_name_),<sp/>\</highlight></codeline>
<codeline lineno="401"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.align_shift<sp/>=<sp/>Z_ALIGN_SHIFT(struct_),<sp/>\</highlight></codeline>
<codeline lineno="402"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_name_len<sp/>=<sp/>sizeof(json_field_name_)<sp/>-<sp/>1,<sp/>\</highlight></codeline>
<codeline lineno="403"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/>type_,<sp/>\</highlight></codeline>
<codeline lineno="404"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.offset<sp/>=<sp/>offsetof(struct_,<sp/>struct_field_name_),<sp/>\</highlight></codeline>
<codeline lineno="405"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="group__json_1ga8f8d03241e4f69d5f7147792db9a9fe9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JSON_OBJ_DESCR_OBJECT_NAMED(struct_,<sp/>json_field_name_,<sp/>\</highlight></codeline>
<codeline lineno="421"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct_field_name_,<sp/>sub_descr_)<sp/>\</highlight></codeline>
<codeline lineno="422"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="423"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_name<sp/>=<sp/>(json_field_name_),<sp/>\</highlight></codeline>
<codeline lineno="424"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.align_shift<sp/>=<sp/>Z_ALIGN_SHIFT(struct_),<sp/>\</highlight></codeline>
<codeline lineno="425"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_name_len<sp/>=<sp/>(sizeof(json_field_name_)<sp/>-<sp/>1),<sp/>\</highlight></codeline>
<codeline lineno="426"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/>JSON_TOK_OBJECT_START,<sp/>\</highlight></codeline>
<codeline lineno="427"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.offset<sp/>=<sp/>offsetof(struct_,<sp/>struct_field_name_),<sp/>\</highlight></codeline>
<codeline lineno="428"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="429"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.object<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="430"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sub_descr<sp/>=<sp/>sub_descr_,<sp/>\</highlight></codeline>
<codeline lineno="431"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sub_descr_len<sp/>=<sp/>ARRAY_SIZE(sub_descr_),<sp/>\</highlight></codeline>
<codeline lineno="432"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="433"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="434"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="group__json_1ga4a5bafd64de8abcbc2b5c039bd59ec84" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JSON_OBJ_DESCR_ARRAY_NAMED(struct_,<sp/>json_field_name_,\</highlight></codeline>
<codeline lineno="453"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct_field_name_,<sp/>max_len_,<sp/>len_field_,<sp/>\</highlight></codeline>
<codeline lineno="454"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elem_type_)<sp/>\</highlight></codeline>
<codeline lineno="455"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="456"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_name<sp/>=<sp/>(json_field_name_),<sp/>\</highlight></codeline>
<codeline lineno="457"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.align_shift<sp/>=<sp/>Z_ALIGN_SHIFT(struct_),<sp/>\</highlight></codeline>
<codeline lineno="458"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_name_len<sp/>=<sp/>sizeof(json_field_name_)<sp/>-<sp/>1,<sp/>\</highlight></codeline>
<codeline lineno="459"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/>JSON_TOK_ARRAY_START,<sp/>\</highlight></codeline>
<codeline lineno="460"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.offset<sp/>=<sp/>offsetof(struct_,<sp/>struct_field_name_),<sp/>\</highlight></codeline>
<codeline lineno="461"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="462"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.array<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="463"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.element_descr<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="464"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_JSON_ELEMENT_DESCR(struct_,<sp/>len_field_,<sp/>elem_type_,),<sp/>\</highlight></codeline>
<codeline lineno="465"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.n_elements<sp/>=<sp/>(max_len_),<sp/>\</highlight></codeline>
<codeline lineno="466"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="467"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="468"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="510" refid="group__json_1gaa6602833e59c7e5205d69cc7c4ab2bba" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JSON_OBJ_DESCR_OBJ_ARRAY_NAMED(struct_,<sp/>json_field_name_,<sp/>\</highlight></codeline>
<codeline lineno="511"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct_field_name_,<sp/>max_len_,<sp/>\</highlight></codeline>
<codeline lineno="512"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len_field_,<sp/>elem_descr_,<sp/>\</highlight></codeline>
<codeline lineno="513"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elem_descr_len_)<sp/>\</highlight></codeline>
<codeline lineno="514"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="515"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_name<sp/>=<sp/>json_field_name_,<sp/>\</highlight></codeline>
<codeline lineno="516"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.align_shift<sp/>=<sp/>Z_ALIGN_SHIFT(struct_),<sp/>\</highlight></codeline>
<codeline lineno="517"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_name_len<sp/>=<sp/>sizeof(json_field_name_)<sp/>-<sp/>1,<sp/>\</highlight></codeline>
<codeline lineno="518"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/>JSON_TOK_ARRAY_START,<sp/>\</highlight></codeline>
<codeline lineno="519"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.offset<sp/>=<sp/>offsetof(struct_,<sp/>struct_field_name_),<sp/>\</highlight></codeline>
<codeline lineno="520"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="521"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.array<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="522"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.element_descr<sp/>=<sp/>Z_JSON_ELEMENT_DESCR(struct_,<sp/>len_field_,<sp/>\</highlight></codeline>
<codeline lineno="523"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JSON_TOK_OBJECT_START,<sp/>\</highlight></codeline>
<codeline lineno="524"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_JSON_DESCR_OBJ(elem_descr_,<sp/>elem_descr_len_)),<sp/>\</highlight></codeline>
<codeline lineno="525"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.n_elements<sp/>=<sp/>(max_len_),<sp/>\</highlight></codeline>
<codeline lineno="526"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="527"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="528"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="560" refid="group__json_1ga9aa97a94e7e91a5d818c20b27059b6cd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__json_1ga9aa97a94e7e91a5d818c20b27059b6cd" kindref="member">json_obj_parse</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*json,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref><sp/>*descr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>descr_len,</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="596" refid="group__json_1gab4e6ad4a040c271d74eaa313c580a739" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__json_1gab4e6ad4a040c271d74eaa313c580a739" kindref="member">json_arr_parse</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*json,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref><sp/>*descr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="611" refid="group__json_1ga43ee6d1fbd3fa8fb2ae052844b465dda" refkind="member"><highlight class="normal"><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref><sp/><ref refid="group__json_1ga43ee6d1fbd3fa8fb2ae052844b465dda" kindref="member">json_escape</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*len,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_size);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="621" refid="group__json_1ga5ef155a3a6444801592badd6a092734c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__json_1ga5ef155a3a6444801592badd6a092734c" kindref="member">json_calc_escaped_len</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="633" refid="group__json_1ga41e6e90beef8bae12fca1de2584145bb" refkind="member"><highlight class="normal"><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref><sp/><ref refid="group__json_1ga41e6e90beef8bae12fca1de2584145bb" kindref="member">json_calc_encoded_len</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref><sp/>*descr,</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>descr_len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="649" refid="group__json_1gab758ad32cfb6369f4967a6842ac63245" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__json_1gab758ad32cfb6369f4967a6842ac63245" kindref="member">json_obj_encode_buf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref><sp/>*descr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>descr_len,</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__kernel__mbox__api_1gab659fc0dee01e6639b8b6108addbd046" kindref="member">buffer</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_size);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="664" refid="group__json_1gafd27bbcb898dc902cf1dadd3369cf923" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__json_1gafd27bbcb898dc902cf1dadd3369cf923" kindref="member">json_arr_encode_buf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref><sp/>*descr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val,</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__kernel__mbox__api_1gab659fc0dee01e6639b8b6108addbd046" kindref="member">buffer</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_size);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="680" refid="group__json_1gafec772f687a0280f5211139bd019e582" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__json_1gafec772f687a0280f5211139bd019e582" kindref="member">json_obj_encode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref><sp/>*descr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>descr_len,</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val,<sp/><ref refid="group__json_1gacb409ebe9c59789a5d9aca02c6c94674" kindref="member">json_append_bytes_t</ref><sp/>append_bytes,</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="696" refid="group__json_1ga4ffccdc602ab98d489499bf6fa4fa6c5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__json_1ga4ffccdc602ab98d489499bf6fa4fa6c5" kindref="member">json_arr_encode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref><sp/>*descr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val,</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__json_1gacb409ebe9c59789a5d9aca02c6c94674" kindref="member">json_append_bytes_t</ref><sp/>append_bytes,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_DATA_JSON_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/data/json.h"/>
  </compounddef>
</doxygen>
