<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__single-linked-list__apis" kind="group">
    <compoundname>single-linked-list_apis</compoundname>
    <title>Single-linked list</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__single-linked-list__apis_1ga913aea7661b4ab3b4b50a8efc0d70428" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_slist_init</definition>
        <argsstring>(sys_slist_t *list)</argsstring>
        <name>sys_slist_init</name>
        <param>
          <type><ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Initialize a list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to initialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="196" column="20" bodyfile="include/sys/slist.h" bodystart="196" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="group__single-linked-list__apis_1ga1af7fbf228545d591ef8961fa5f6a8f1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref> *</type>
        <definition>static sys_snode_t * sys_slist_peek_head</definition>
        <argsstring>(sys_slist_t *list)</argsstring>
        <name>sys_slist_peek_head</name>
        <param>
          <type><ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Peek the first node from the list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A point on the list to peek the first node from</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer on the first node of the list (or NULL if none) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="231" column="27" bodyfile="include/sys/slist.h" bodystart="231" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="group__single-linked-list__apis_1ga49975721fa11c48000669d2c4ec0877f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref> *</type>
        <definition>static sys_snode_t * sys_slist_peek_tail</definition>
        <argsstring>(sys_slist_t *list)</argsstring>
        <name>sys_slist_peek_tail</name>
        <param>
          <type><ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Peek the last node from the list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A point on the list to peek the last node from</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer on the last node of the list (or NULL if none) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="243" column="27" bodyfile="include/sys/slist.h" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="group__single-linked-list__apis_1ga7d729bbb7bba57c5784ad0d2c341670a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool sys_slist_is_empty</definition>
        <argsstring>(sys_slist_t *list)</argsstring>
        <name>sys_slist_is_empty</name>
        <param>
          <type><ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Test if the given list is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to test</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a boolean, true if it&apos;s empty, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="261" column="22" bodyfile="include/sys/slist.h" bodystart="261" bodyend="261" declfile="include/sys/slist.h" declline="259" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__single-linked-list__apis_1ga58d001a256f28278f0e7c0b96b9cc492" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref> *</type>
        <definition>static sys_snode_t * sys_slist_peek_next_no_check</definition>
        <argsstring>(sys_snode_t *node)</argsstring>
        <name>sys_slist_peek_next_no_check</name>
        <param>
          <type><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Peek the next node from current node, node is not NULL. </para>
        </briefdescription>
        <detaileddescription>
<para>Faster then <ref refid="group__single-linked-list__apis_1ga729cbf8cafdbc34261db9274195ac5df" kindref="member">sys_slist_peek_next()</ref> if node is known not to be NULL.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the node where to peek the next node</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer on the next node (or NULL if none) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="274" column="30" bodyfile="include/sys/slist.h" bodystart="274" bodyend="274" declfile="include/sys/slist.h" declline="272" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__single-linked-list__apis_1ga729cbf8cafdbc34261db9274195ac5df" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref> *</type>
        <definition>static sys_snode_t * sys_slist_peek_next</definition>
        <argsstring>(sys_snode_t *node)</argsstring>
        <name>sys_slist_peek_next</name>
        <param>
          <type><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Peek the next node from current node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the node where to peek the next node</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer on the next node (or NULL if none) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="285" column="30" bodyfile="include/sys/slist.h" bodystart="285" bodyend="285" declfile="include/sys/slist.h" declline="283" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__single-linked-list__apis_1gac962e3ec8440e4adb2ba6682dbf186ff" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_slist_prepend</definition>
        <argsstring>(sys_slist_t *list, sys_snode_t *node)</argsstring>
        <name>sys_slist_prepend</name>
        <param>
          <type><ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Prepend a node to the given list. </para>
        </briefdescription>
        <detaileddescription>
<para>This and other sys_slist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the node to prepend </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="298" column="22" bodyfile="include/sys/slist.h" bodystart="298" bodyend="298" declfile="include/sys/slist.h" declline="295" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__single-linked-list__apis_1ga829fd7b6f1944dc38e10685e861e62b5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_slist_append</definition>
        <argsstring>(sys_slist_t *list, sys_snode_t *node)</argsstring>
        <name>sys_slist_append</name>
        <param>
          <type><ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Append a node to the given list. </para>
        </briefdescription>
        <detaileddescription>
<para>This and other sys_slist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the node to append </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="311" column="22" bodyfile="include/sys/slist.h" bodystart="311" bodyend="311" declfile="include/sys/slist.h" declline="308" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__single-linked-list__apis_1gaaf7393c6bbf6d5cbd303173d95269481" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_slist_append_list</definition>
        <argsstring>(sys_slist_t *list, void *head, void *tail)</argsstring>
        <name>sys_slist_append_list</name>
        <param>
          <type><ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>head</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>tail</declname>
        </param>
        <briefdescription>
<para>Append a list to the given list. </para>
        </briefdescription>
        <detaileddescription>
<para>Append a singly-linked, NULL-terminated list consisting of nodes containing the pointer to the next node as the first element of a node, to <emphasis>list</emphasis>. This and other sys_slist_*() functions are not thread safe.</para>
<para>FIXME: Why are the element parameters void *?</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the first element of the list to append </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tail</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the last element of the list to append </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="329" column="22" bodyfile="include/sys/slist.h" bodystart="329" bodyend="329" declfile="include/sys/slist.h" declline="326" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__single-linked-list__apis_1ga0c00bbb3dc6903f386fdb1e37fdd3b66" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_slist_merge_slist</definition>
        <argsstring>(sys_slist_t *list, sys_slist_t *list_to_append)</argsstring>
        <name>sys_slist_merge_slist</name>
        <param>
          <type><ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref> *</type>
          <declname>list_to_append</declname>
        </param>
        <briefdescription>
<para>merge two slists, appending the second one to the first </para>
        </briefdescription>
        <detaileddescription>
<para>When the operation is completed, the appending list is empty. This and other sys_slist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>list_to_append</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the list to append. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="343" column="22" bodyfile="include/sys/slist.h" bodystart="343" bodyend="343" declfile="include/sys/slist.h" declline="340" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__single-linked-list__apis_1gadcbef5c013861fdfd325bae357c37b85" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_slist_insert</definition>
        <argsstring>(sys_slist_t *list, sys_snode_t *prev, sys_snode_t *node)</argsstring>
        <name>sys_slist_insert</name>
        <param>
          <type><ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref> *</type>
          <declname>prev</declname>
        </param>
        <param>
          <type><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Insert a node to the given list. </para>
        </briefdescription>
        <detaileddescription>
<para>This and other sys_slist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prev</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the previous node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the node to insert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="358" column="22" bodyfile="include/sys/slist.h" bodystart="358" bodyend="358" declfile="include/sys/slist.h" declline="354" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__single-linked-list__apis_1ga036a65b86f101a7867a83cdd1617ba33" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref> *</type>
        <definition>static sys_snode_t * sys_slist_get_not_empty</definition>
        <argsstring>(sys_slist_t *list)</argsstring>
        <name>sys_slist_get_not_empty</name>
        <param>
          <type><ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Fetch and remove the first node of the given list. </para>
        </briefdescription>
        <detaileddescription>
<para>List must be known to be non-empty. This and other sys_slist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the first node of the list </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="372" column="30" bodyfile="include/sys/slist.h" bodystart="372" bodyend="372" declfile="include/sys/slist.h" declline="370" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__single-linked-list__apis_1ga497d7e9069c08e25a03ebc212ef8bbb3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref> *</type>
        <definition>static sys_snode_t * sys_slist_get</definition>
        <argsstring>(sys_slist_t *list)</argsstring>
        <name>sys_slist_get</name>
        <param>
          <type><ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Fetch and remove the first node of the given list. </para>
        </briefdescription>
        <detaileddescription>
<para>This and other sys_slist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the first node of the list (or NULL if empty) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="385" column="30" bodyfile="include/sys/slist.h" bodystart="385" bodyend="385" declfile="include/sys/slist.h" declline="383" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__single-linked-list__apis_1gaee6957483d4fbe3b824f7a495d56030f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_slist_remove</definition>
        <argsstring>(sys_slist_t *list, sys_snode_t *prev_node, sys_snode_t *node)</argsstring>
        <name>sys_slist_remove</name>
        <param>
          <type><ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref> *</type>
          <declname>prev_node</declname>
        </param>
        <param>
          <type><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Remove a node. </para>
        </briefdescription>
        <detaileddescription>
<para>This and other sys_slist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prev_node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the previous node (can be NULL, which means the node is the list&apos;s head) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the node to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="401" column="22" bodyfile="include/sys/slist.h" bodystart="401" bodyend="401" declfile="include/sys/slist.h" declline="397" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__single-linked-list__apis_1ga296560229ffdfd0054c9c7b0602825a6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool sys_slist_find_and_remove</definition>
        <argsstring>(sys_slist_t *list, sys_snode_t *node)</argsstring>
        <name>sys_slist_find_and_remove</name>
        <param>
          <type><ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Find and remove a node from a list. </para>
        </briefdescription>
        <detaileddescription>
<para>This and other sys_slist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the node to remove from the list</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if node was removed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="417" column="22" bodyfile="include/sys/slist.h" bodystart="417" bodyend="417" declfile="include/sys/slist.h" declline="413" declcolumn="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__single-linked-list__apis_1gaf32ac0f222186e497d3f6180b6c26352" prot="public" static="no">
        <name>SYS_SLIST_FOR_EACH_NODE</name>
        <param><defname>__sl</defname></param>
        <param><defname>__sn</defname></param>
        <initializer>	Z_GENLIST_FOR_EACH_NODE(slist, __sl, __sn)</initializer>
        <briefdescription>
<para>Provide the primitive to iterate on a list Note: the loop is unsafe and thus __sn should not be removed. </para>
        </briefdescription>
        <detaileddescription>
<para>User <emphasis>MUST</emphasis> add the loop statement curly braces enclosing its own code: <verbatim>SYS_SLIST_FOR_EACH_NODE(l, n) {
    &lt;user code&gt;
}
</verbatim> This and other SYS_SLIST_*() macros are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__sl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on a sys_slist_t to iterate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sn</parametername>
</parameternamelist>
<parameterdescription>
<para>A sys_snode_t pointer to peek each node of the list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="63" column="9" bodyfile="include/sys/slist.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__single-linked-list__apis_1ga1740075b07ec67635c1934dcbe1b5cee" prot="public" static="no">
        <name>SYS_SLIST_ITERATE_FROM_NODE</name>
        <param><defname>__sl</defname></param>
        <param><defname>__sn</defname></param>
        <initializer>	Z_GENLIST_ITERATE_FROM_NODE(slist, __sl, __sn)</initializer>
        <briefdescription>
<para>Provide the primitive to iterate on a list, from a node in the list Note: the loop is unsafe and thus __sn should not be removed. </para>
        </briefdescription>
        <detaileddescription>
<para>User <emphasis>MUST</emphasis> add the loop statement curly braces enclosing its own code: <verbatim>SYS_SLIST_ITERATE_FROM_NODE(l, n) {
    &lt;user code&gt;
}
</verbatim> Like <ref refid="group__single-linked-list__apis_1gaf32ac0f222186e497d3f6180b6c26352" kindref="member">SYS_SLIST_FOR_EACH_NODE()</ref>, but __dn already contains a node in the list where to start searching for the next entry from. If NULL, it starts from the head.</para>
<para>This and other SYS_SLIST_*() macros are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__sl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on a sys_slist_t to iterate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sn</parametername>
</parameternamelist>
<parameterdescription>
<para>A sys_snode_t pointer to peek each node of the list it contains the starting node, or NULL to start from the head </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="86" column="9" bodyfile="include/sys/slist.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__single-linked-list__apis_1gad6f1014e26d6cf9925d00b4f53076116" prot="public" static="no">
        <name>SYS_SLIST_FOR_EACH_NODE_SAFE</name>
        <param><defname>__sl</defname></param>
        <param><defname>__sn</defname></param>
        <param><defname>__sns</defname></param>
        <initializer>	Z_GENLIST_FOR_EACH_NODE_SAFE(slist, __sl, __sn, __sns)</initializer>
        <briefdescription>
<para>Provide the primitive to safely iterate on a list Note: __sn can be removed, it will not break the loop. </para>
        </briefdescription>
        <detaileddescription>
<para>User <emphasis>MUST</emphasis> add the loop statement curly braces enclosing its own code: <verbatim>SYS_SLIST_FOR_EACH_NODE_SAFE(l, n, s) {
    &lt;user code&gt;
}
</verbatim> This and other SYS_SLIST_*() macros are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__sl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on a sys_slist_t to iterate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sn</parametername>
</parameternamelist>
<parameterdescription>
<para>A sys_snode_t pointer to peek each node of the list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sns</parametername>
</parameternamelist>
<parameterdescription>
<para>A sys_snode_t pointer for the loop to run safely </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="105" column="9" bodyfile="include/sys/slist.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__single-linked-list__apis_1ga07e4257835751e18a6c06bfa5f9c25e8" prot="public" static="no">
        <name>SYS_SLIST_CONTAINER</name>
        <param><defname>__ln</defname></param>
        <param><defname>__cn</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	Z_GENLIST_CONTAINER(__ln, __cn, __n)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="116" column="9" bodyfile="include/sys/slist.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__single-linked-list__apis_1ga8fdb1e6baa7ba061dc1bd35f73a2fff1" prot="public" static="no">
        <name>SYS_SLIST_PEEK_HEAD_CONTAINER</name>
        <param><defname>__sl</defname></param>
        <param><defname>__cn</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	Z_GENLIST_PEEK_HEAD_CONTAINER(slist, __sl, __cn, __n)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="126" column="9" bodyfile="include/sys/slist.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__single-linked-list__apis_1ga709c87e180d48c782c1583d7fb7629b3" prot="public" static="no">
        <name>SYS_SLIST_PEEK_TAIL_CONTAINER</name>
        <param><defname>__sl</defname></param>
        <param><defname>__cn</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	Z_GENLIST_PEEK_TAIL_CONTAINER(slist, __sl, __cn, __n)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="136" column="9" bodyfile="include/sys/slist.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__single-linked-list__apis_1ga5d1c9ee21f75da485ba12aa56471e699" prot="public" static="no">
        <name>SYS_SLIST_PEEK_NEXT_CONTAINER</name>
        <param><defname>__cn</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	Z_GENLIST_PEEK_NEXT_CONTAINER(slist, __cn, __n)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="145" column="9" bodyfile="include/sys/slist.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__single-linked-list__apis_1gacd97d2f1044c0560d96c9f9a6f26d2f6" prot="public" static="no">
        <name>SYS_SLIST_FOR_EACH_CONTAINER</name>
        <param><defname>__sl</defname></param>
        <param><defname>__cn</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	Z_GENLIST_FOR_EACH_CONTAINER(slist, __sl, __cn, __n)</initializer>
        <briefdescription>
<para>Provide the primitive to iterate on a list under a container Note: the loop is unsafe and thus __cn should not be detached. </para>
        </briefdescription>
        <detaileddescription>
<para>User <emphasis>MUST</emphasis> add the loop statement curly braces enclosing its own code: <verbatim>SYS_SLIST_FOR_EACH_CONTAINER(l, c, n) {
    &lt;user code&gt;
}
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__sl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on a sys_slist_t to iterate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__cn</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to peek each entry of the list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__n</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name of sys_node_t within the container struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="162" column="9" bodyfile="include/sys/slist.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__single-linked-list__apis_1gacf3aaf32a6a3389229b548588c6d655e" prot="public" static="no">
        <name>SYS_SLIST_FOR_EACH_CONTAINER_SAFE</name>
        <param><defname>__sl</defname></param>
        <param><defname>__cn</defname></param>
        <param><defname>__cns</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	Z_GENLIST_FOR_EACH_CONTAINER_SAFE(slist, __sl, __cn, __cns, __n)</initializer>
        <briefdescription>
<para>Provide the primitive to safely iterate on a list under a container Note: __cn can be detached, it will not break the loop. </para>
        </briefdescription>
        <detaileddescription>
<para>User <emphasis>MUST</emphasis> add the loop statement curly braces enclosing its own code: <verbatim>SYS_SLIST_FOR_EACH_NODE_SAFE(l, c, cn, n) {
    &lt;user code&gt;
}
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__sl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on a sys_slist_t to iterate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__cn</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to peek each entry of the list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__cns</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer for the loop to run safely </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__n</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name of sys_node_t within the container struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="180" column="9" bodyfile="include/sys/slist.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__single-linked-list__apis_1ga7f4710125f45643b7acdaa58dbfff225" prot="public" static="no">
        <name>SYS_SLIST_STATIC_INIT</name>
        <param><defname>ptr_to_list</defname></param>
        <initializer>{NULL, NULL}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/slist.h" line="202" column="9" bodyfile="include/sys/slist.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
