<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__trickle" kind="group">
    <compoundname>trickle</compoundname>
    <title>Trickle Algorithm Library</title>
    <innerclass refid="structnet__trickle" prot="public">net_trickle</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__trickle_1ga36e3856ac2e9b596984d4817e580ef42" prot="public" static="no">
        <type>void(*</type>
        <definition>net_trickle_cb_t</definition>
        <argsstring>)(struct net_trickle *trickle, bool do_suppress, void *user_data)</argsstring>
        <name>net_trickle_cb_t</name>
        <briefdescription>
<para>Trickle timer callback. </para>
        </briefdescription>
        <detaileddescription>
<para>The callback is called after Trickle timeout expires.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trickle</parametername>
</parameternamelist>
<parameterdescription>
<para>The trickle context to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_suppress</parametername>
</parameternamelist>
<parameterdescription>
<para>Is TX allowed (true) or not (false). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The user data given in <ref refid="group__trickle_1ga6674fac118a187320d73dc742f0e216f" kindref="member">net_trickle_start()</ref> call. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/trickle.h" line="45" column="9" bodyfile="include/net/trickle.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__trickle_1gac412d65ad2a8483920de32c1e0ae6be5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_trickle_create</definition>
        <argsstring>(struct net_trickle *trickle, uint32_t Imin, uint8_t Imax, uint8_t k)</argsstring>
        <name>net_trickle_create</name>
        <param>
          <type>struct <ref refid="structnet__trickle" kindref="compound">net_trickle</ref> *</type>
          <declname>trickle</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>Imin</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>Imax</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Create a Trickle timer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trickle</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Trickle struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Imin</parametername>
</parameternamelist>
<parameterdescription>
<para>Imin configuration parameter in ms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Imax</parametername>
</parameternamelist>
<parameterdescription>
<para>Max number of doublings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Redundancy constant parameter. See RFC 6206 for details.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return 0 if ok and &lt;0 if error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/trickle.h" line="84" column="5" declfile="include/net/trickle.h" declline="84" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__trickle_1ga6674fac118a187320d73dc742f0e216f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_trickle_start</definition>
        <argsstring>(struct net_trickle *trickle, net_trickle_cb_t cb, void *user_data)</argsstring>
        <name>net_trickle_start</name>
        <param>
          <type>struct <ref refid="structnet__trickle" kindref="compound">net_trickle</ref> *</type>
          <declname>trickle</declname>
        </param>
        <param>
          <type><ref refid="group__trickle_1ga36e3856ac2e9b596984d4817e580ef42" kindref="member">net_trickle_cb_t</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Start a Trickle timer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trickle</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Trickle struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>User callback to call at time T within the current trickle interval </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User pointer that is passed to callback.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return 0 if ok and &lt;0 if error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/trickle.h" line="99" column="5" declfile="include/net/trickle.h" declline="99" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__trickle_1ga8477e45a95abccfb714e3f3369686c6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_trickle_stop</definition>
        <argsstring>(struct net_trickle *trickle)</argsstring>
        <name>net_trickle_stop</name>
        <param>
          <type>struct <ref refid="structnet__trickle" kindref="compound">net_trickle</ref> *</type>
          <declname>trickle</declname>
        </param>
        <briefdescription>
<para>Stop a Trickle timer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trickle</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Trickle struct.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return 0 if ok and &lt;0 if error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/trickle.h" line="110" column="5" declfile="include/net/trickle.h" declline="110" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__trickle_1gacefb4b5ba518fd1e3f776df012998a9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_trickle_consistency</definition>
        <argsstring>(struct net_trickle *trickle)</argsstring>
        <name>net_trickle_consistency</name>
        <param>
          <type>struct <ref refid="structnet__trickle" kindref="compound">net_trickle</ref> *</type>
          <declname>trickle</declname>
        </param>
        <briefdescription>
<para>To be called by the protocol handler when it hears a consistent network transmission. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trickle</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Trickle struct. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/trickle.h" line="118" column="6" declfile="include/net/trickle.h" declline="118" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__trickle_1gad0815f9368a17532c8b5293a122cd8a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_trickle_inconsistency</definition>
        <argsstring>(struct net_trickle *trickle)</argsstring>
        <name>net_trickle_inconsistency</name>
        <param>
          <type>struct <ref refid="structnet__trickle" kindref="compound">net_trickle</ref> *</type>
          <declname>trickle</declname>
        </param>
        <briefdescription>
<para>To be called by the protocol handler when it hears an inconsistent network transmission. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trickle</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Trickle struct. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/trickle.h" line="126" column="6" declfile="include/net/trickle.h" declline="126" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__trickle_1ga95ceb01a7d56ce5a9d9128a42e1f8eb9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_trickle_is_running</definition>
        <argsstring>(struct net_trickle *trickle)</argsstring>
        <name>net_trickle_is_running</name>
        <param>
          <type>struct <ref refid="structnet__trickle" kindref="compound">net_trickle</ref> *</type>
          <declname>trickle</declname>
        </param>
        <briefdescription>
<para>Check if the Trickle timer is running or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trickle</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Trickle struct.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return True if timer is running and False if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/trickle.h" line="135" column="20" bodyfile="include/net/trickle.h" bodystart="135" bodyend="140"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Trickle algorithm library. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
