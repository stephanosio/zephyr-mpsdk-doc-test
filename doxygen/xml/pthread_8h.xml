<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="pthread_8h" kind="file" language="C++">
    <compoundname>pthread.h</compoundname>
    <includes local="no">kernel.h</includes>
    <includes refid="wait__q_8h" local="no">wait_q.h</includes>
    <includes refid="include_2posix_2time_8h" local="no">posix/time.h</includes>
    <includes refid="unistd_8h" local="no">posix/unistd.h</includes>
    <includes refid="posix__types_8h" local="yes">posix_types.h</includes>
    <includes refid="posix__sched_8h" local="yes">posix_sched.h</includes>
    <includes refid="pthread__key_8h" local="no">posix/pthread_key.h</includes>
    <includes refid="stdlib_8h" local="no">stdlib.h</includes>
    <includes refid="string_8h" local="no">string.h</includes>
    <incdepgraph>
      <node id="53">
        <label>app_memory/mem_domain.h</label>
        <link refid="mem__domain_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>arch/arch_inlines.h</label>
        <link refid="arch__inlines_8h"/>
      </node>
      <node id="41">
        <label>arch/cpu.h</label>
        <link refid="include_2arch_2cpu_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>arch/structs.h</label>
        <link refid="structs_8h"/>
      </node>
      <node id="40">
        <label>arch/syscall.h</label>
        <link refid="arch_2syscall_8h"/>
      </node>
      <node id="50">
        <label>fatal.h</label>
        <link refid="fatal_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>irq_offload.h</label>
        <link refid="irq__offload_8h"/>
      </node>
      <node id="24">
        <label>kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>kernel/mempool_heap.h</label>
        <link refid="mempool__heap_8h"/>
      </node>
      <node id="15">
        <label>kernel/sched_priq.h</label>
        <link refid="sched__priq_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>kernel/stats.h</label>
        <link refid="kernel_2stats_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>kernel/thread.h</label>
        <link refid="kernel_2thread_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>kernel/thread_stack.h</label>
        <link refid="kernel_2thread__stack_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>kernel_includes.h</label>
        <link refid="kernel__includes_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>kernel_structs.h</label>
        <link refid="kernel__structs_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>kernel_version.h</label>
        <link refid="kernel__version_8h"/>
      </node>
      <node id="28">
        <label>linker/section_tags.h</label>
        <link refid="section__tags_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>linker/sections.h</label>
        <link refid="sections_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>posix_sched.h</label>
        <link refid="posix__sched_8h"/>
      </node>
      <node id="68">
        <label>posix_types.h</label>
        <link refid="posix__types_8h"/>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/posix/pthread.h</label>
        <link refid="pthread_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>posix/pthread_key.h</label>
        <link refid="pthread__key_8h"/>
      </node>
      <node id="70">
        <label>posix/signal.h</label>
        <link refid="signal_8h"/>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>posix/time.h</label>
        <link refid="include_2posix_2time_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>posix/unistd.h</label>
        <link refid="unistd_8h"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>sys/arch_interface.h</label>
        <link refid="arch__interface_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="17">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>sys/kobject.h</label>
        <link refid="include_2sys_2kobject_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>sys/rb.h</label>
        <link refid="rb_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>sys/sflist.h</label>
        <link refid="sflist_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>sys/sys_heap.h</label>
        <link refid="sys__heap_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>sys/time_units.h</label>
        <link refid="time__units_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="11">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>sys_clock.h</label>
        <link refid="include_2sys__clock_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>timeout_q.h</label>
        <link refid="timeout__q_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>timing/types.h</label>
        <link refid="include_2timing_2types_8h"/>
      </node>
      <node id="7">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="61">
        <label>tracing/tracing.h</label>
        <link refid="tracing_2tracing_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>tracing/tracing_macros.h</label>
        <link refid="tracing__macros_8h"/>
      </node>
      <node id="62">
        <label>tracking.h</label>
        <link refid="tracking_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>wait_q.h</label>
        <link refid="wait__q_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="6">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="10">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="76">
        <label>stdlib.h</label>
        <link refid="stdlib_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>sys/_timespec.h</label>
        <link refid="__timespec_8h_source"/>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>sys/_types.h</label>
        <link refid="__types_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>sys/stat.h</label>
        <link refid="stat_8h"/>
      </node>
      <node id="65">
        <label>sys/timespec.h</label>
        <link refid="timespec_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>sys/types.h</label>
        <link refid="lib_2libc_2minimal_2include_2sys_2types_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>syscall_list.h</label>
        <link refid="syscall__list_8h"/>
      </node>
      <node id="63">
        <label>syscalls/kernel.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kernel_8h"/>
      </node>
      <node id="56">
        <label>syscalls/kobject.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kobject_8h"/>
      </node>
      <node id="19">
        <label>alloca.h</label>
      </node>
      <node id="43">
        <label>arch/cpu.h</label>
      </node>
      <node id="2">
        <label>kernel.h</label>
      </node>
      <node id="31">
        <label>stdarg.h</label>
      </node>
      <node id="8">
        <label>stddef.h</label>
      </node>
      <node id="59">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="71">
        <label>syscalls/time.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structposix__thread" prot="public">posix_thread</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="pthread_8h_1afb10d234d831c7b57768d62786748bc7" prot="public" static="no">
        <name>PTHREAD_CREATE_JOINABLE</name>
        <initializer><ref refid="pthread_8h_1aa2ad415a2560e0f8558f6fad57905812a3f186ad74f93a65d0c1bd7d6b15eac69" kindref="member">PTHREAD_JOINABLE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="56" column="9" bodyfile="include/posix/pthread.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pthread_8h_1a391c5eb0f6b5febc48710d0be3f62394" prot="public" static="no">
        <name>PTHREAD_CREATE_DETACHED</name>
        <initializer><ref refid="pthread_8h_1aa2ad415a2560e0f8558f6fad57905812a151f9d388b4094a6884ce4398bc22212" kindref="member">PTHREAD_DETACHED</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="57" column="9" bodyfile="include/posix/pthread.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pthread_8h_1aaf18882a8a6b82c7b7849a645f4445ef" prot="public" static="no">
        <name>PTHREAD_CANCEL_ENABLE</name>
        <initializer>(0U &lt;&lt; _PTHREAD_CANCEL_POS)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="61" column="9" bodyfile="include/posix/pthread.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pthread_8h_1a6c661332f782dcebc87b878990424b4c" prot="public" static="no">
        <name>PTHREAD_CANCEL_DISABLE</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(_PTHREAD_CANCEL_POS)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="62" column="9" bodyfile="include/posix/pthread.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pthread_8h_1a59e22497b65fc305ddb5cea8b4990b51" prot="public" static="no">
        <name>PTHREAD_ONCE_INIT</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="65" column="9" bodyfile="include/posix/pthread.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pthread_8h_1a15aaa4f3543de202c6295d18824ca7c1" prot="public" static="no">
        <name>PTHREAD_COND_DEFINE</name>
        <param><defname>name</defname></param>
        <initializer>	struct pthread_cond name = {					\
		.wait_q = Z_WAIT_Q_INIT(&amp;name.wait_q),			\
	}</initializer>
        <briefdescription>
<para>Declare a pthread condition variable. </para>
        </briefdescription>
        <detaileddescription>
<para>Declaration API for a pthread condition variable. This is not a POSIX API, it&apos;s provided to better conform with Zephyr&apos;s allocation strategies for kernel objects.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol name of the condition variable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="76" column="9" bodyfile="include/posix/pthread.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pthread_8h_1a14e2a6d73231f81ab466433436db8bd4" prot="public" static="no">
        <name>PTHREAD_MUTEX_DEFINE</name>
        <param><defname>name</defname></param>
        <initializer>	struct pthread_mutex name = \
	{ \
		.lock_count = 0, \
		.wait_q = Z_WAIT_Q_INIT(&amp;name.wait_q),	\
		.owner = NULL, \
	}</initializer>
        <briefdescription>
<para>Declare a pthread mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>Declaration API for a pthread mutex. This is not a POSIX API, it&apos;s provided to better conform with Zephyr&apos;s allocation strategies for kernel objects.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol name of the mutex </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="166" column="9" bodyfile="include/posix/pthread.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pthread_8h_1aae4b650085c2599674938f503d6253cf" prot="public" static="no">
        <name>PTHREAD_MUTEX_NORMAL</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="184" column="9" bodyfile="include/posix/pthread.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pthread_8h_1a715e9644a7183d98cb2c9dd41cb89645" prot="public" static="no">
        <name>PTHREAD_MUTEX_RECURSIVE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="185" column="9" bodyfile="include/posix/pthread.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pthread_8h_1aaf502496651f95b06be861af7902cb23" prot="public" static="no">
        <name>PTHREAD_MUTEX_ERRORCHECK</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="186" column="9" bodyfile="include/posix/pthread.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pthread_8h_1a2a9b96c0491ae490c17d0b400bc427b0" prot="public" static="no">
        <name>PTHREAD_MUTEX_DEFAULT</name>
        <initializer><ref refid="pthread_8h_1aae4b650085c2599674938f503d6253cf" kindref="member">PTHREAD_MUTEX_NORMAL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="187" column="9" bodyfile="include/posix/pthread.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pthread_8h_1a8c1426a72025b27d9726580ac0e8404f" prot="public" static="no">
        <name>PTHREAD_PRIO_NONE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="201" column="9" bodyfile="include/posix/pthread.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pthread_8h_1af63f456fc30f008794402605b4e5ac9c" prot="public" static="no">
        <name>PTHREAD_BARRIER_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>count</defname></param>
        <initializer>	struct pthread_barrier name = {				\
		.wait_q = Z_WAIT_Q_INIT(&amp;name.wait_q),		\
		.max = <ref refid="semaphore_2sys__sem_2src_2main_8c_1a7624b580dc5672d7564cdc73212de784" kindref="member">count</ref>,					\
	}</initializer>
        <briefdescription>
<para>Declare a pthread barrier. </para>
        </briefdescription>
        <detaileddescription>
<para>Declaration API for a pthread barrier. This is not a POSIX API, it&apos;s provided to better conform with Zephyr&apos;s allocation strategies for kernel objects.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol name of the barrier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread count, same as the &quot;count&quot; argument to <ref refid="pthread_8h_1a6459c2d5e5bb6b8c56de6c70cc9eed47" kindref="member">pthread_barrier_init()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="334" column="9" bodyfile="include/posix/pthread.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pthread_8h_1a822c63bc662ad86cfb2dcec50edbb42b" prot="public" static="no">
        <name>PTHREAD_BARRIER_SERIAL_THREAD</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="340" column="9" bodyfile="include/posix/pthread.h" bodystart="340" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="pthread_8h_1aa2ad415a2560e0f8558f6fad57905812" prot="public" static="no" strong="no">
        <type></type>
        <name>pthread_state</name>
        <enumvalue id="pthread_8h_1aa2ad415a2560e0f8558f6fad57905812aa3b32d9fab4608c90a41cffad3986743" prot="public">
          <name>PTHREAD_TERMINATED</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pthread_8h_1aa2ad415a2560e0f8558f6fad57905812a3f186ad74f93a65d0c1bd7d6b15eac69" prot="public">
          <name>PTHREAD_JOINABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pthread_8h_1aa2ad415a2560e0f8558f6fad57905812a151f9d388b4094a6884ce4398bc22212" prot="public">
          <name>PTHREAD_DETACHED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pthread_8h_1aa2ad415a2560e0f8558f6fad57905812a4c18518ff3a84b5f66275e272bcfc8d0" prot="public">
          <name>PTHREAD_EXITED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="24" column="1" bodyfile="include/posix/pthread.h" bodystart="24" bodyend="33"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="pthread_8h_1a2e2d37e430fbc0e1e5e981598efc0d21" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pthread_cond_init</definition>
        <argsstring>(pthread_cond_t *cv, const pthread_condattr_t *att)</argsstring>
        <name>pthread_cond_init</name>
        <param>
          <type>pthread_cond_t *</type>
          <declname>cv</declname>
        </param>
        <param>
          <type>const pthread_condattr_t *</type>
          <declname>att</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="86" column="19" bodyfile="include/posix/pthread.h" bodystart="86" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a77f0f6a1ac871f9bd62e9d93293fd51c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pthread_cond_destroy</definition>
        <argsstring>(pthread_cond_t *cv)</argsstring>
        <name>pthread_cond_destroy</name>
        <param>
          <type>pthread_cond_t *</type>
          <declname>cv</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="99" column="19" bodyfile="include/posix/pthread.h" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1add1fea97e50755b5dbf4bd9a83b710dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_cond_signal</definition>
        <argsstring>(pthread_cond_t *cv)</argsstring>
        <name>pthread_cond_signal</name>
        <param>
          <type>pthread_cond_t *</type>
          <declname>cv</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="109" column="5" declfile="include/posix/pthread.h" declline="109" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a91ff7fff67462ce9216d299c89683119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_cond_broadcast</definition>
        <argsstring>(pthread_cond_t *cv)</argsstring>
        <name>pthread_cond_broadcast</name>
        <param>
          <type>pthread_cond_t *</type>
          <declname>cv</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="116" column="5" declfile="include/posix/pthread.h" declline="116" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a61a1bf88d32de361e82ef4ea99b47322" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_cond_wait</definition>
        <argsstring>(pthread_cond_t *cv, pthread_mutex_t *mut)</argsstring>
        <name>pthread_cond_wait</name>
        <param>
          <type>pthread_cond_t *</type>
          <declname>cv</declname>
        </param>
        <param>
          <type>pthread_mutex_t *</type>
          <declname>mut</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="123" column="5" declfile="include/posix/pthread.h" declline="123" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1aecea498fbd2df02942790e5ccd7d78b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_cond_timedwait</definition>
        <argsstring>(pthread_cond_t *cv, pthread_mutex_t *mut, const struct timespec *abstime)</argsstring>
        <name>pthread_cond_timedwait</name>
        <param>
          <type>pthread_cond_t *</type>
          <declname>cv</declname>
        </param>
        <param>
          <type>pthread_mutex_t *</type>
          <declname>mut</declname>
        </param>
        <param>
          <type>const struct <ref refid="structtimespec" kindref="compound">timespec</ref> *</type>
          <declname>abstime</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="130" column="5" declfile="include/posix/pthread.h" declline="130" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a9a4f5caebf6416cada3e66a53f442961" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pthread_condattr_init</definition>
        <argsstring>(pthread_condattr_t *att)</argsstring>
        <name>pthread_condattr_init</name>
        <param>
          <type>pthread_condattr_t *</type>
          <declname>att</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1.</para>
<para>Note that pthread attribute structs are currently noops in Zephyr. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="140" column="19" bodyfile="include/posix/pthread.h" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a60452aad139a89f8861619a2ab741166" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pthread_condattr_destroy</definition>
        <argsstring>(pthread_condattr_t *att)</argsstring>
        <name>pthread_condattr_destroy</name>
        <param>
          <type>pthread_condattr_t *</type>
          <declname>att</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1</para>
<para>Note that pthread attribute structs are currently noops in Zephyr. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="152" column="19" bodyfile="include/posix/pthread.h" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1af89d9cfa300f33b46720a96eac83d175" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_mutex_destroy</definition>
        <argsstring>(pthread_mutex_t *m)</argsstring>
        <name>pthread_mutex_destroy</name>
        <param>
          <type>pthread_mutex_t *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="208" column="5" declfile="include/posix/pthread.h" declline="208" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1afd70d6f2c50e22b996c926fb9d6ad291" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_mutex_lock</definition>
        <argsstring>(pthread_mutex_t *m)</argsstring>
        <name>pthread_mutex_lock</name>
        <param>
          <type>pthread_mutex_t *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="215" column="5" declfile="include/posix/pthread.h" declline="215" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a02a3c64dac70730e226c31c0e7dbb45c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_mutex_unlock</definition>
        <argsstring>(pthread_mutex_t *m)</argsstring>
        <name>pthread_mutex_unlock</name>
        <param>
          <type>pthread_mutex_t *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="222" column="5" declfile="include/posix/pthread.h" declline="222" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1abbec44a62531009629601fbb34f1027c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_mutex_timedlock</definition>
        <argsstring>(pthread_mutex_t *m, const struct timespec *abstime)</argsstring>
        <name>pthread_mutex_timedlock</name>
        <param>
          <type>pthread_mutex_t *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const struct <ref refid="structtimespec" kindref="compound">timespec</ref> *</type>
          <declname>abstime</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="230" column="5" declfile="include/posix/pthread.h" declline="230" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1acc1ccbaf3d76572da85a8030bba1ede4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_mutex_trylock</definition>
        <argsstring>(pthread_mutex_t *m)</argsstring>
        <name>pthread_mutex_trylock</name>
        <param>
          <type>pthread_mutex_t *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="238" column="5" declfile="include/posix/pthread.h" declline="238" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a7948bc0ea8a33439aece34d0fb3daf8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_mutex_init</definition>
        <argsstring>(pthread_mutex_t *m, const pthread_mutexattr_t *att)</argsstring>
        <name>pthread_mutex_init</name>
        <param>
          <type>pthread_mutex_t *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const pthread_mutexattr_t *</type>
          <declname>att</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="245" column="5" declfile="include/posix/pthread.h" declline="245" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1ae7e6584c2b2cf9b9ff061115d2342bb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_mutexattr_setprotocol</definition>
        <argsstring>(pthread_mutexattr_t *attr, int protocol)</argsstring>
        <name>pthread_mutexattr_setprotocol</name>
        <param>
          <type>pthread_mutexattr_t *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>protocol</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="253" column="5" declfile="include/posix/pthread.h" declline="253" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a8387c80e660e9426f801ac0217ecfae5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_mutexattr_settype</definition>
        <argsstring>(pthread_mutexattr_t *attr, int type)</argsstring>
        <name>pthread_mutexattr_settype</name>
        <param>
          <type>pthread_mutexattr_t *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="260" column="5" declfile="include/posix/pthread.h" declline="260" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a200fcbc9157e6183376f83bc0e5937dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_mutexattr_getprotocol</definition>
        <argsstring>(const pthread_mutexattr_t *attr, int *protocol)</argsstring>
        <name>pthread_mutexattr_getprotocol</name>
        <param>
          <type>const pthread_mutexattr_t *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>protocol</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="267" column="5" declfile="include/posix/pthread.h" declline="267" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a7f064a4db96a009a5a9a7c7e5cc03599" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_mutexattr_gettype</definition>
        <argsstring>(const pthread_mutexattr_t *attr, int *type)</argsstring>
        <name>pthread_mutexattr_gettype</name>
        <param>
          <type>const pthread_mutexattr_t *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="275" column="5" declfile="include/posix/pthread.h" declline="275" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a5eb25214d1409ff80e25559875a6b009" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pthread_mutexattr_init</definition>
        <argsstring>(pthread_mutexattr_t *m)</argsstring>
        <name>pthread_mutexattr_init</name>
        <param>
          <type>pthread_mutexattr_t *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1</para>
<para>Note that pthread attribute structs are currently noops in Zephyr. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="284" column="19" bodyfile="include/posix/pthread.h" bodystart="284" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a6422431160421ef5e69da9e98fd19580" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pthread_mutexattr_destroy</definition>
        <argsstring>(pthread_mutexattr_t *m)</argsstring>
        <name>pthread_mutexattr_destroy</name>
        <param>
          <type>pthread_mutexattr_t *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1</para>
<para>Note that pthread attribute structs are currently noops in Zephyr. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="298" column="19" bodyfile="include/posix/pthread.h" bodystart="298" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1af786372165ba080986ae4143928c5436" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_barrier_wait</definition>
        <argsstring>(pthread_barrier_t *b)</argsstring>
        <name>pthread_barrier_wait</name>
        <param>
          <type>pthread_barrier_t *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="347" column="5" declfile="include/posix/pthread.h" declline="347" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a6459c2d5e5bb6b8c56de6c70cc9eed47" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pthread_barrier_init</definition>
        <argsstring>(pthread_barrier_t *b, const pthread_barrierattr_t *attr, unsigned int count)</argsstring>
        <name>pthread_barrier_init</name>
        <param>
          <type>pthread_barrier_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const pthread_barrierattr_t *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="354" column="19" bodyfile="include/posix/pthread.h" bodystart="354" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a405eabdd831e3a28d4520d62dee33a84" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pthread_barrier_destroy</definition>
        <argsstring>(pthread_barrier_t *b)</argsstring>
        <name>pthread_barrier_destroy</name>
        <param>
          <type>pthread_barrier_t *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="372" column="19" bodyfile="include/posix/pthread.h" bodystart="372" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a9d48daa2c899e05e5f622cb17c3c1830" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pthread_barrierattr_init</definition>
        <argsstring>(pthread_barrierattr_t *b)</argsstring>
        <name>pthread_barrierattr_init</name>
        <param>
          <type>pthread_barrierattr_t *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1</para>
<para>Note that pthread attribute structs are currently noops in Zephyr. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="386" column="19" bodyfile="include/posix/pthread.h" bodystart="386" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a00e50575920d3c9d781eb1910136eecb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pthread_barrierattr_destroy</definition>
        <argsstring>(pthread_barrierattr_t *b)</argsstring>
        <name>pthread_barrierattr_destroy</name>
        <param>
          <type>pthread_barrierattr_t *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>POSIX threading compatibility API. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1</para>
<para>Note that pthread attribute structs are currently noops in Zephyr. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="400" column="19" bodyfile="include/posix/pthread.h" bodystart="400" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1af5f2089384724cb7ec6374f45050a621" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>pthread_t</type>
        <definition>static pthread_t pthread_self</definition>
        <argsstring>(void)</argsstring>
        <name>pthread_self</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Obtain ID of the calling thread. </para>
        </briefdescription>
        <detaileddescription>
<para>The results of calling this API from threads not created with <ref refid="pthread_8h_1acb010e074930d81533ed20d319ca80b1" kindref="member">pthread_create()</ref> are undefined.</para>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="444" column="25" bodyfile="include/posix/pthread.h" bodystart="444" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a8cfb926667bd6b65271355bcf3a6483e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pthread_equal</definition>
        <argsstring>(pthread_t pt1, pthread_t pt2)</argsstring>
        <name>pthread_equal</name>
        <param>
          <type>pthread_t</type>
          <declname>pt1</declname>
        </param>
        <param>
          <type>pthread_t</type>
          <declname>pt2</declname>
        </param>
        <briefdescription>
<para>Compare thread IDs. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="455" column="19" bodyfile="include/posix/pthread.h" bodystart="455" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1ac4d2dcfe790eee1dbd83a1db7fdce3dc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pthread_rwlockattr_destroy</definition>
        <argsstring>(pthread_rwlockattr_t *attr)</argsstring>
        <name>pthread_rwlockattr_destroy</name>
        <param>
          <type>pthread_rwlockattr_t *</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
<para>Destroy the read-write lock attributes object. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="465" column="19" bodyfile="include/posix/pthread.h" bodystart="465" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a78db2cd33976f604cf85662fffa28307" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pthread_rwlockattr_init</definition>
        <argsstring>(pthread_rwlockattr_t *attr)</argsstring>
        <name>pthread_rwlockattr_init</name>
        <param>
          <type>pthread_rwlockattr_t *</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
<para>initialize the read-write lock attributes object. </para>
        </briefdescription>
        <detaileddescription>
<para>See IEEE 1003.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="475" column="19" bodyfile="include/posix/pthread.h" bodystart="475" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1ae23600d4670359ab12bfba20db2c9a37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_getstacksize</definition>
        <argsstring>(const pthread_attr_t *attr, size_t *stacksize)</argsstring>
        <name>pthread_attr_getstacksize</name>
        <param>
          <type>const pthread_attr_t *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>stacksize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="480" column="5" declfile="include/posix/pthread.h" declline="480" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a79b4c9e71486a87ef3014f1c660b33eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_setschedpolicy</definition>
        <argsstring>(pthread_attr_t *attr, int policy)</argsstring>
        <name>pthread_attr_setschedpolicy</name>
        <param>
          <type>pthread_attr_t *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>policy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="481" column="5" declfile="include/posix/pthread.h" declline="481" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1af032906f326f3c209c7eed6bb248ebee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_getschedpolicy</definition>
        <argsstring>(const pthread_attr_t *attr, int *policy)</argsstring>
        <name>pthread_attr_getschedpolicy</name>
        <param>
          <type>const pthread_attr_t *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>policy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="482" column="5" declfile="include/posix/pthread.h" declline="482" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1ae6ee78c307d8467b34a9b0c330993a54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_setdetachstate</definition>
        <argsstring>(pthread_attr_t *attr, int detachstate)</argsstring>
        <name>pthread_attr_setdetachstate</name>
        <param>
          <type>pthread_attr_t *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>detachstate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="483" column="5" declfile="include/posix/pthread.h" declline="483" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a391c34da42e68ddd24f5ee0c070d5c4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_getdetachstate</definition>
        <argsstring>(const pthread_attr_t *attr, int *detachstate)</argsstring>
        <name>pthread_attr_getdetachstate</name>
        <param>
          <type>const pthread_attr_t *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>detachstate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="484" column="5" declfile="include/posix/pthread.h" declline="484" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a0b85ebb1e3aac081a4c0a5e85ae3cbe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_init</definition>
        <argsstring>(pthread_attr_t *attr)</argsstring>
        <name>pthread_attr_init</name>
        <param>
          <type>pthread_attr_t *</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="485" column="5" declfile="include/posix/pthread.h" declline="485" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a4bcdbf47c17c7dcc51e9f05f5cb56d81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_destroy</definition>
        <argsstring>(pthread_attr_t *attr)</argsstring>
        <name>pthread_attr_destroy</name>
        <param>
          <type>pthread_attr_t *</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="486" column="5" declfile="include/posix/pthread.h" declline="486" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1abcd67baa86ff65d7ce65985d8b50d579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_getschedparam</definition>
        <argsstring>(const pthread_attr_t *attr, struct sched_param *schedparam)</argsstring>
        <name>pthread_attr_getschedparam</name>
        <param>
          <type>const pthread_attr_t *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>struct <ref refid="structsched__param" kindref="compound">sched_param</ref> *</type>
          <declname>schedparam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="487" column="5" declfile="include/posix/pthread.h" declline="487" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1ac60393667965dbd06670d3d280b65757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_getschedparam</definition>
        <argsstring>(pthread_t pthread, int *policy, struct sched_param *param)</argsstring>
        <name>pthread_getschedparam</name>
        <param>
          <type>pthread_t</type>
          <declname>pthread</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>struct <ref refid="structsched__param" kindref="compound">sched_param</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="489" column="5" declfile="include/posix/pthread.h" declline="489" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1aec19ad460995a9fe8aeb4eaf2bb1ed1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_getstack</definition>
        <argsstring>(const pthread_attr_t *attr, void **stackaddr, size_t *stacksize)</argsstring>
        <name>pthread_attr_getstack</name>
        <param>
          <type>const pthread_attr_t *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>stackaddr</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>stacksize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="491" column="5" declfile="include/posix/pthread.h" declline="491" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a94ede89b99a3a4fa17e516d30aaf3409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_setstack</definition>
        <argsstring>(pthread_attr_t *attr, void *stackaddr, size_t stacksize)</argsstring>
        <name>pthread_attr_setstack</name>
        <param>
          <type>pthread_attr_t *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>stackaddr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>stacksize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="493" column="5" declfile="include/posix/pthread.h" declline="493" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1ae9243c66c828fb05e484d2ee88e4eabd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_once</definition>
        <argsstring>(pthread_once_t *once, void(*initFunc)(void))</argsstring>
        <name>pthread_once</name>
        <param>
          <type>pthread_once_t *</type>
          <declname>once</declname>
        </param>
        <param>
          <type>void(*)(void)</type>
          <declname>initFunc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="495" column="5" declfile="include/posix/pthread.h" declline="495" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a23b28e0f8ac5af2b46a33cdab3a80e44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pthread_exit</definition>
        <argsstring>(void *retval)</argsstring>
        <name>pthread_exit</name>
        <param>
          <type>void *</type>
          <declname>retval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="496" column="6" declfile="include/posix/pthread.h" declline="496" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a6e4d503c2b358be5c98330f9006b3417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_join</definition>
        <argsstring>(pthread_t thread, void **status)</argsstring>
        <name>pthread_join</name>
        <param>
          <type>pthread_t</type>
          <declname>thread</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="497" column="5" declfile="include/posix/pthread.h" declline="497" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a66a8f4bac5afe05538794218ff7c85ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_cancel</definition>
        <argsstring>(pthread_t pthread)</argsstring>
        <name>pthread_cancel</name>
        <param>
          <type>pthread_t</type>
          <declname>pthread</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="498" column="5" declfile="include/posix/pthread.h" declline="498" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a7c275c509c26566b6dd95a2de1668a2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_detach</definition>
        <argsstring>(pthread_t thread)</argsstring>
        <name>pthread_detach</name>
        <param>
          <type>pthread_t</type>
          <declname>thread</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="499" column="5" declfile="include/posix/pthread.h" declline="499" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1acb010e074930d81533ed20d319ca80b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_create</definition>
        <argsstring>(pthread_t *newthread, const pthread_attr_t *attr, void *(*threadroutine)(void *), void *arg)</argsstring>
        <name>pthread_create</name>
        <param>
          <type>pthread_t *</type>
          <declname>newthread</declname>
        </param>
        <param>
          <type>const pthread_attr_t *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>void *(*)(void *)</type>
          <declname>threadroutine</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="500" column="5" declfile="include/posix/pthread.h" declline="500" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a37075410fbbaad7ee93c95375fc86e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_setcancelstate</definition>
        <argsstring>(int state, int *oldstate)</argsstring>
        <name>pthread_setcancelstate</name>
        <param>
          <type>int</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>oldstate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="502" column="5" declfile="include/posix/pthread.h" declline="502" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a18b9aa91fe20481a25650df20c567ff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_setschedparam</definition>
        <argsstring>(pthread_attr_t *attr, const struct sched_param *schedparam)</argsstring>
        <name>pthread_attr_setschedparam</name>
        <param>
          <type>pthread_attr_t *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>const struct <ref refid="structsched__param" kindref="compound">sched_param</ref> *</type>
          <declname>schedparam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="503" column="5" declfile="include/posix/pthread.h" declline="503" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1ad8e89d31b56c88d632ba9aeb956fa043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_setschedparam</definition>
        <argsstring>(pthread_t pthread, int policy, const struct sched_param *param)</argsstring>
        <name>pthread_setschedparam</name>
        <param>
          <type>pthread_t</type>
          <declname>pthread</declname>
        </param>
        <param>
          <type>int</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>const struct <ref refid="structsched__param" kindref="compound">sched_param</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="505" column="5" declfile="include/posix/pthread.h" declline="505" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a79839f0f4f4a768bf6d218faf377c209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_rwlock_destroy</definition>
        <argsstring>(pthread_rwlock_t *rwlock)</argsstring>
        <name>pthread_rwlock_destroy</name>
        <param>
          <type>pthread_rwlock_t *</type>
          <declname>rwlock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="507" column="5" declfile="include/posix/pthread.h" declline="507" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a1596a13569ec35ee66cc867586fd643d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_rwlock_init</definition>
        <argsstring>(pthread_rwlock_t *rwlock, const pthread_rwlockattr_t *attr)</argsstring>
        <name>pthread_rwlock_init</name>
        <param>
          <type>pthread_rwlock_t *</type>
          <declname>rwlock</declname>
        </param>
        <param>
          <type>const pthread_rwlockattr_t *</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="508" column="5" declfile="include/posix/pthread.h" declline="508" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1acc16fb32464b480d31bc69cce4e206c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_rwlock_rdlock</definition>
        <argsstring>(pthread_rwlock_t *rwlock)</argsstring>
        <name>pthread_rwlock_rdlock</name>
        <param>
          <type>pthread_rwlock_t *</type>
          <declname>rwlock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="510" column="5" declfile="include/posix/pthread.h" declline="510" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1ad791558625e69852e4a435b7c1580468" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_rwlock_timedrdlock</definition>
        <argsstring>(pthread_rwlock_t *rwlock, const struct timespec *abstime)</argsstring>
        <name>pthread_rwlock_timedrdlock</name>
        <param>
          <type>pthread_rwlock_t *</type>
          <declname>rwlock</declname>
        </param>
        <param>
          <type>const struct <ref refid="structtimespec" kindref="compound">timespec</ref> *</type>
          <declname>abstime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="511" column="5" declfile="include/posix/pthread.h" declline="511" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a16c935f2f6146a95f9adbca71e0455e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_rwlock_timedwrlock</definition>
        <argsstring>(pthread_rwlock_t *rwlock, const struct timespec *abstime)</argsstring>
        <name>pthread_rwlock_timedwrlock</name>
        <param>
          <type>pthread_rwlock_t *</type>
          <declname>rwlock</declname>
        </param>
        <param>
          <type>const struct <ref refid="structtimespec" kindref="compound">timespec</ref> *</type>
          <declname>abstime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="513" column="5" declfile="include/posix/pthread.h" declline="513" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1aae52fb1d3e6d03b18fa5731d0b49d197" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_rwlock_tryrdlock</definition>
        <argsstring>(pthread_rwlock_t *rwlock)</argsstring>
        <name>pthread_rwlock_tryrdlock</name>
        <param>
          <type>pthread_rwlock_t *</type>
          <declname>rwlock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="515" column="5" declfile="include/posix/pthread.h" declline="515" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a065b618f7b786ed9bc7dddef4490cefb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_rwlock_trywrlock</definition>
        <argsstring>(pthread_rwlock_t *rwlock)</argsstring>
        <name>pthread_rwlock_trywrlock</name>
        <param>
          <type>pthread_rwlock_t *</type>
          <declname>rwlock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="516" column="5" declfile="include/posix/pthread.h" declline="516" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a7d3b987d99117fc10c4ef97230011983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_rwlock_unlock</definition>
        <argsstring>(pthread_rwlock_t *rwlock)</argsstring>
        <name>pthread_rwlock_unlock</name>
        <param>
          <type>pthread_rwlock_t *</type>
          <declname>rwlock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="517" column="5" declfile="include/posix/pthread.h" declline="517" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a5ddd4cc028257f9baa9e23c2337abe3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_rwlock_wrlock</definition>
        <argsstring>(pthread_rwlock_t *rwlock)</argsstring>
        <name>pthread_rwlock_wrlock</name>
        <param>
          <type>pthread_rwlock_t *</type>
          <declname>rwlock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="518" column="5" declfile="include/posix/pthread.h" declline="518" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1af4b7ced8ecff505380fe8216244a3764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_key_create</definition>
        <argsstring>(pthread_key_t *key, void(*destructor)(void *))</argsstring>
        <name>pthread_key_create</name>
        <param>
          <type>pthread_key_t *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>destructor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="519" column="5" declfile="include/posix/pthread.h" declline="519" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1aee96306dc79294927ee840bb4de2244b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_key_delete</definition>
        <argsstring>(pthread_key_t key)</argsstring>
        <name>pthread_key_delete</name>
        <param>
          <type>pthread_key_t</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="521" column="5" declfile="include/posix/pthread.h" declline="521" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a2187333dd46ce08d9d2e044f79fad705" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_setspecific</definition>
        <argsstring>(pthread_key_t key, const void *value)</argsstring>
        <name>pthread_setspecific</name>
        <param>
          <type>pthread_key_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="522" column="5" declfile="include/posix/pthread.h" declline="522" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1acdf9f73a16ea40eba1bc174d38e76ca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * pthread_getspecific</definition>
        <argsstring>(pthread_key_t key)</argsstring>
        <name>pthread_getspecific</name>
        <param>
          <type>pthread_key_t</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="523" column="6" declfile="include/posix/pthread.h" declline="523" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1aa21465e084e7185bfbb94bb50d60cd08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_setname_np</definition>
        <argsstring>(pthread_t thread, const char *name)</argsstring>
        <name>pthread_setname_np</name>
        <param>
          <type>pthread_t</type>
          <declname>thread</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Set name of POSIX thread. </para>
        </briefdescription>
        <detaileddescription>
<para>Non-portable, extension function that conforms with most other definitions of this function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>POSIX thread to set name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ESRCH</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread does not exist </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Name buffer is NULL </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Negative</parametername>
</parameternamelist>
<parameterdescription>
<para>value if kernel function error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="541" column="5" declfile="include/posix/pthread.h" declline="541" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pthread_8h_1a8d55a60492c979991dc1a361b5453813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_getname_np</definition>
        <argsstring>(pthread_t thread, char *name, size_t len)</argsstring>
        <name>pthread_getname_np</name>
        <param>
          <type>pthread_t</type>
          <declname>thread</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Get name of POSIX thread and store in name buffer that is of size len. </para>
        </briefdescription>
        <detaileddescription>
<para>Non-portable, extension function that conforms with most other definitions of this function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>POSIX thread to obtain name information </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ESRCH</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread does not exist </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Name buffer is NULL </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Negative</parametername>
</parameternamelist>
<parameterdescription>
<para>value if kernel function error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/pthread.h" line="558" column="5" declfile="include/posix/pthread.h" declline="558" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_POSIX_PTHREAD_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_POSIX_PTHREAD_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="wait__q_8h" kindref="compound">wait_q.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2posix_2time_8h" kindref="compound">posix/time.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="unistd_8h" kindref="compound">posix/unistd.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="posix__types_8h" kindref="compound">posix_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="posix__sched_8h" kindref="compound">posix_sched.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="pthread__key_8h" kindref="compound">posix/pthread_key.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdlib_8h" kindref="compound">stdlib.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="string_8h" kindref="compound">string.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="pthread_8h_1aa2ad415a2560e0f8558f6fad57905812" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1aa2ad415a2560e0f8558f6fad57905812" kindref="member">pthread_state</ref><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>thread<sp/>structure<sp/>is<sp/>unallocated<sp/>and<sp/>available<sp/>for<sp/>reuse.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="pthread_8h_1aa2ad415a2560e0f8558f6fad57905812aa3b32d9fab4608c90a41cffad3986743" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pthread_8h_1aa2ad415a2560e0f8558f6fad57905812aa3b32d9fab4608c90a41cffad3986743" kindref="member">PTHREAD_TERMINATED</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>thread<sp/>is<sp/>running<sp/>and<sp/>joinable.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="pthread_8h_1aa2ad415a2560e0f8558f6fad57905812a3f186ad74f93a65d0c1bd7d6b15eac69" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pthread_8h_1aa2ad415a2560e0f8558f6fad57905812a3f186ad74f93a65d0c1bd7d6b15eac69" kindref="member">PTHREAD_JOINABLE</ref>,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>thread<sp/>is<sp/>running<sp/>and<sp/>detached.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="pthread_8h_1aa2ad415a2560e0f8558f6fad57905812a151f9d388b4094a6884ce4398bc22212" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pthread_8h_1aa2ad415a2560e0f8558f6fad57905812a151f9d388b4094a6884ce4398bc22212" kindref="member">PTHREAD_DETACHED</ref>,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>joinable<sp/>thread<sp/>exited<sp/>and<sp/>its<sp/>return<sp/>code<sp/>is<sp/>available.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pthread_8h_1aa2ad415a2560e0f8558f6fad57905812a4c18518ff3a84b5f66275e272bcfc8d0" kindref="member">PTHREAD_EXITED</ref></highlight></codeline>
<codeline lineno="33" refid="pthread_8h_1aa2ad415a2560e0f8558f6fad57905812a4c18518ff3a84b5f66275e272bcfc8d0" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="structposix__thread" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structposix__thread" kindref="compound">posix_thread</ref><sp/>{</highlight></codeline>
<codeline lineno="36" refid="structposix__thread_1a236089334a3754caf91b3d9706d2c65b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/><ref refid="structposix__thread_1a236089334a3754caf91b3d9706d2c65b" kindref="member">thread</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>List<sp/>of<sp/>keys<sp/>that<sp/>thread<sp/>has<sp/>called<sp/>pthread_setspecific()<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="structposix__thread_1a4d8f6c579bee4233f21cbd069439baa4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref><sp/><ref refid="structposix__thread_1a4d8f6c579bee4233f21cbd069439baa4" kindref="member">key_list</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Exit<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="structposix__thread_1a2ff3e538caadf05005b8449eb81ab9a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structposix__thread_1a2ff3e538caadf05005b8449eb81ab9a2" kindref="member">retval</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pthread<sp/>cancellation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="structposix__thread_1a0b7706edf2bd46861eb52c44f5f998c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structposix__thread_1a0b7706edf2bd46861eb52c44f5f998c4" kindref="member">cancel_state</ref>;</highlight></codeline>
<codeline lineno="46" refid="structposix__thread_1a23b0229d94a1449514e46a9c287579de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structposix__thread_1a23b0229d94a1449514e46a9c287579de" kindref="member">cancel_pending</ref>;</highlight></codeline>
<codeline lineno="47" refid="structposix__thread_1a450ffbc0c0907d8b0c8e165c31ecb1c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_t<sp/><ref refid="structposix__thread_1a450ffbc0c0907d8b0c8e165c31ecb1c8" kindref="member">cancel_lock</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pthread<sp/>State<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="structposix__thread_1af01e0c99788281e8dcdd9c1197fb8951" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1aa2ad415a2560e0f8558f6fad57905812" kindref="member">pthread_state</ref><sp/><ref refid="structposix__thread_1af01e0c99788281e8dcdd9c1197fb8951" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="51" refid="structposix__thread_1a450cc1cd59c57526deec959f0ef6018d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_t<sp/><ref refid="structposix__thread_1a450cc1cd59c57526deec959f0ef6018d" kindref="member">state_lock</ref>;</highlight></codeline>
<codeline lineno="52" refid="structposix__thread_1a63ccb9ed291369c59977961836f1afda" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_cond_t<sp/><ref refid="structposix__thread_1a63ccb9ed291369c59977961836f1afda" kindref="member">state_cond</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Pthread<sp/>detach/joinable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="pthread_8h_1afb10d234d831c7b57768d62786748bc7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTHREAD_CREATE_JOINABLE<sp/><sp/><sp/><sp/><sp/>PTHREAD_JOINABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="pthread_8h_1a391c5eb0f6b5febc48710d0be3f62394" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTHREAD_CREATE_DETACHED<sp/><sp/><sp/><sp/><sp/>PTHREAD_DETACHED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Pthread<sp/>cancellation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PTHREAD_CANCEL_POS<sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="pthread_8h_1aaf18882a8a6b82c7b7849a645f4445ef" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTHREAD_CANCEL_ENABLE<sp/><sp/><sp/>(0U<sp/>&lt;&lt;<sp/>_PTHREAD_CANCEL_POS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="pthread_8h_1a6c661332f782dcebc87b878990424b4c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTHREAD_CANCEL_DISABLE<sp/><sp/>BIT(_PTHREAD_CANCEL_POS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Passed<sp/>to<sp/>pthread_once<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="pthread_8h_1a59e22497b65fc305ddb5cea8b4990b51" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTHREAD_ONCE_INIT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="pthread_8h_1a15aaa4f3543de202c6295d18824ca7c1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTHREAD_COND_DEFINE(name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>pthread_cond<sp/>name<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.wait_q<sp/>=<sp/>Z_WAIT_Q_INIT(&amp;name.wait_q),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="pthread_8h_1a2e2d37e430fbc0e1e5e981598efc0d21" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a2e2d37e430fbc0e1e5e981598efc0d21" kindref="member">pthread_cond_init</ref>(pthread_cond_t<sp/>*cv,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_condattr_t<sp/>*att)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(att);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_waitq_init(&amp;cv-&gt;wait_q);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="pthread_8h_1a77f0f6a1ac871f9bd62e9d93293fd51c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a77f0f6a1ac871f9bd62e9d93293fd51c" kindref="member">pthread_cond_destroy</ref>(pthread_cond_t<sp/>*cv)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="pthread_8h_1add1fea97e50755b5dbf4bd9a83b710dd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1add1fea97e50755b5dbf4bd9a83b710dd" kindref="member">pthread_cond_signal</ref>(pthread_cond_t<sp/>*cv);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="pthread_8h_1a91ff7fff67462ce9216d299c89683119" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a91ff7fff67462ce9216d299c89683119" kindref="member">pthread_cond_broadcast</ref>(pthread_cond_t<sp/>*cv);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="pthread_8h_1a61a1bf88d32de361e82ef4ea99b47322" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a61a1bf88d32de361e82ef4ea99b47322" kindref="member">pthread_cond_wait</ref>(pthread_cond_t<sp/>*cv,<sp/>pthread_mutex_t<sp/>*mut);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="pthread_8h_1aecea498fbd2df02942790e5ccd7d78b2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1aecea498fbd2df02942790e5ccd7d78b2" kindref="member">pthread_cond_timedwait</ref>(pthread_cond_t<sp/>*cv,<sp/>pthread_mutex_t<sp/>*mut,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtimespec" kindref="compound">timespec</ref><sp/>*abstime);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="pthread_8h_1a9a4f5caebf6416cada3e66a53f442961" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a9a4f5caebf6416cada3e66a53f442961" kindref="member">pthread_condattr_init</ref>(pthread_condattr_t<sp/>*att)</highlight></codeline>
<codeline lineno="141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="pthread_8h_1a60452aad139a89f8861619a2ab741166" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a60452aad139a89f8861619a2ab741166" kindref="member">pthread_condattr_destroy</ref>(pthread_condattr_t<sp/>*att)</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="pthread_8h_1a14e2a6d73231f81ab466433436db8bd4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTHREAD_MUTEX_DEFINE(name)<sp/>\</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>pthread_mutex<sp/>name<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.lock_count<sp/>=<sp/>0,<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.wait_q<sp/>=<sp/>Z_WAIT_Q_INIT(&amp;name.wait_q),<sp/><sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.owner<sp/>=<sp/>NULL,<sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/><sp/>Mutex<sp/>attributes<sp/>-<sp/>type</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/><sp/>PTHREAD_MUTEX_NORMAL:<sp/>Owner<sp/>of<sp/>mutex<sp/>cannot<sp/>relock<sp/>it.<sp/>Attempting</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>relock<sp/>will<sp/>cause<sp/>deadlock.</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/><sp/>PTHREAD_MUTEX_RECURSIVE:<sp/>Owner<sp/>can<sp/>relock<sp/>the<sp/>mutex.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/><sp/>PTHREAD_MUTEX_ERRORCHECK:<sp/>If<sp/>owner<sp/>attempts<sp/>to<sp/>relock<sp/>the<sp/>mutex,<sp/>an</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="pthread_8h_1aae4b650085c2599674938f503d6253cf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTHREAD_MUTEX_NORMAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="pthread_8h_1a715e9644a7183d98cb2c9dd41cb89645" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTHREAD_MUTEX_RECURSIVE<sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="pthread_8h_1aaf502496651f95b06be861af7902cb23" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTHREAD_MUTEX_ERRORCHECK<sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="pthread_8h_1a2a9b96c0491ae490c17d0b400bc427b0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTHREAD_MUTEX_DEFAULT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>PTHREAD_MUTEX_NORMAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/><sp/>Mutex<sp/>attributes<sp/>-<sp/>protocol</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/><sp/>PTHREAD_PRIO_NONE:<sp/>Ownership<sp/>of<sp/>mutex<sp/>does<sp/>not<sp/>affect<sp/>priority.</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/><sp/>PTHREAD_PRIO_INHERIT:<sp/>Owner&apos;s<sp/>priority<sp/>is<sp/>boosted<sp/>to<sp/>the<sp/>priority<sp/>of</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>highest<sp/>priority<sp/>thread<sp/>blocked<sp/>on<sp/>the<sp/>mutex.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/><sp/>PTHREAD_PRIO_PROTECT:<sp/><sp/>Mutex<sp/>has<sp/>a<sp/>priority<sp/>ceiling.<sp/><sp/>The<sp/>owner&apos;s</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>priority<sp/>is<sp/>boosted<sp/>to<sp/>the<sp/>highest<sp/>priority<sp/>ceiling<sp/>of<sp/>all<sp/>mutexes</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>owned<sp/>(regardless<sp/>of<sp/>whether<sp/>or<sp/>not<sp/>other<sp/>threads<sp/>are<sp/>blocked<sp/>on</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>any<sp/>of<sp/>these<sp/>mutexes).</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/><sp/>FIXME:<sp/>Only<sp/>PRIO_NONE<sp/>is<sp/>supported.<sp/>Implement<sp/>other<sp/>protocols.</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="pthread_8h_1a8c1426a72025b27d9726580ac0e8404f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTHREAD_PRIO_NONE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="pthread_8h_1af89d9cfa300f33b46720a96eac83d175" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1af89d9cfa300f33b46720a96eac83d175" kindref="member">pthread_mutex_destroy</ref>(pthread_mutex_t<sp/>*m);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="pthread_8h_1afd70d6f2c50e22b996c926fb9d6ad291" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1afd70d6f2c50e22b996c926fb9d6ad291" kindref="member">pthread_mutex_lock</ref>(pthread_mutex_t<sp/>*m);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="pthread_8h_1a02a3c64dac70730e226c31c0e7dbb45c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a02a3c64dac70730e226c31c0e7dbb45c" kindref="member">pthread_mutex_unlock</ref>(pthread_mutex_t<sp/>*m);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="pthread_8h_1abbec44a62531009629601fbb34f1027c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1abbec44a62531009629601fbb34f1027c" kindref="member">pthread_mutex_timedlock</ref>(pthread_mutex_t<sp/>*m,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtimespec" kindref="compound">timespec</ref><sp/>*abstime);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="pthread_8h_1acc1ccbaf3d76572da85a8030bba1ede4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1acc1ccbaf3d76572da85a8030bba1ede4" kindref="member">pthread_mutex_trylock</ref>(pthread_mutex_t<sp/>*m);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="pthread_8h_1a7948bc0ea8a33439aece34d0fb3daf8b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a7948bc0ea8a33439aece34d0fb3daf8b" kindref="member">pthread_mutex_init</ref>(pthread_mutex_t<sp/>*m,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_mutexattr_t<sp/>*att);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="pthread_8h_1ae7e6584c2b2cf9b9ff061115d2342bb5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1ae7e6584c2b2cf9b9ff061115d2342bb5" kindref="member">pthread_mutexattr_setprotocol</ref>(pthread_mutexattr_t<sp/>*attr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>protocol);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="pthread_8h_1a8387c80e660e9426f801ac0217ecfae5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a8387c80e660e9426f801ac0217ecfae5" kindref="member">pthread_mutexattr_settype</ref>(pthread_mutexattr_t<sp/>*attr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="pthread_8h_1a200fcbc9157e6183376f83bc0e5937dd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a200fcbc9157e6183376f83bc0e5937dd" kindref="member">pthread_mutexattr_getprotocol</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_mutexattr_t<sp/>*attr,</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*protocol);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="pthread_8h_1a7f064a4db96a009a5a9a7c7e5cc03599" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a7f064a4db96a009a5a9a7c7e5cc03599" kindref="member">pthread_mutexattr_gettype</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_mutexattr_t<sp/>*attr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*type);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="pthread_8h_1a5eb25214d1409ff80e25559875a6b009" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a5eb25214d1409ff80e25559875a6b009" kindref="member">pthread_mutexattr_init</ref>(pthread_mutexattr_t<sp/>*m)</highlight></codeline>
<codeline lineno="285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(m);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="pthread_8h_1a6422431160421ef5e69da9e98fd19580" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a6422431160421ef5e69da9e98fd19580" kindref="member">pthread_mutexattr_destroy</ref>(pthread_mutexattr_t<sp/>*m)</highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(m);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>FIXME:<sp/>these<sp/>are<sp/>going<sp/>to<sp/>be<sp/>tricky<sp/>to<sp/>implement.<sp/><sp/>Zephyr<sp/>has<sp/>(for</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*<sp/>good<sp/>reason)<sp/>deprecated<sp/>its<sp/>own<sp/>&quot;initializer&quot;<sp/>macros<sp/>in<sp/>favor<sp/>of<sp/>a</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/>static<sp/>&quot;declaration&quot;<sp/>macros<sp/>instead.<sp/><sp/>Using<sp/>such<sp/>a<sp/>macro<sp/>inside<sp/>a</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/>gcc<sp/>compound<sp/>expression<sp/>to<sp/>declare<sp/>and<sp/>object<sp/>then<sp/>reference<sp/>it</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/>would<sp/>work,<sp/>but<sp/>gcc<sp/>limits<sp/>such<sp/>expressions<sp/>to<sp/>function<sp/>context</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/>(because<sp/>they<sp/>may<sp/>need<sp/>to<sp/>generate<sp/>code<sp/>that<sp/>runs<sp/>at<sp/>assignment</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/>time)<sp/>and<sp/>much<sp/>real-world<sp/>use<sp/>of<sp/>these<sp/>initializers<sp/>is<sp/>for<sp/>static</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*<sp/>variables.<sp/><sp/>The<sp/>best<sp/>trick<sp/>I<sp/>can<sp/>think<sp/>of<sp/>would<sp/>be<sp/>to<sp/>declare<sp/>it<sp/>in</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/>a<sp/>special<sp/>section<sp/>and<sp/>then<sp/>initialize<sp/>that<sp/>section<sp/>at<sp/>runtime</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/>startup,<sp/>which<sp/>sort<sp/>of<sp/>defeats<sp/>the<sp/>purpose<sp/>of<sp/>having<sp/>these<sp/>be</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/>static...</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/>Instead,<sp/>see<sp/>the<sp/>nonstandard<sp/>PTHREAD_*_DEFINE<sp/>macros<sp/>instead,<sp/>which</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/>work<sp/>similarly<sp/>but<sp/>conform<sp/>to<sp/>Zephyr&apos;s<sp/>paradigms.</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>PTHREAD_MUTEX_INITIALIZER<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>PTHREAD_COND_INITIALIZER<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="pthread_8h_1af63f456fc30f008794402605b4e5ac9c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTHREAD_BARRIER_DEFINE(name,<sp/>count)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="335"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>pthread_barrier<sp/>name<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="336"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.wait_q<sp/>=<sp/>Z_WAIT_Q_INIT(&amp;name.wait_q),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="337"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.max<sp/>=<sp/>count,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="338"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="pthread_8h_1a822c63bc662ad86cfb2dcec50edbb42b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTHREAD_BARRIER_SERIAL_THREAD<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="pthread_8h_1af786372165ba080986ae4143928c5436" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1af786372165ba080986ae4143928c5436" kindref="member">pthread_barrier_wait</ref>(pthread_barrier_t<sp/>*b);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="pthread_8h_1a6459c2d5e5bb6b8c56de6c70cc9eed47" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a6459c2d5e5bb6b8c56de6c70cc9eed47" kindref="member">pthread_barrier_init</ref>(pthread_barrier_t<sp/>*b,</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_barrierattr_t<sp/>*attr,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a612635fe60af527de1e4d54f66e27b94" kindref="member">count</ref>)</highlight></codeline>
<codeline lineno="357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(attr);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;max<sp/>=<sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a612635fe60af527de1e4d54f66e27b94" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_waitq_init(&amp;b-&gt;wait_q);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="372" refid="pthread_8h_1a405eabdd831e3a28d4520d62dee33a84" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a405eabdd831e3a28d4520d62dee33a84" kindref="member">pthread_barrier_destroy</ref>(pthread_barrier_t<sp/>*b)</highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(b);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="386" refid="pthread_8h_1a9d48daa2c899e05e5f622cb17c3c1830" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a9d48daa2c899e05e5f622cb17c3c1830" kindref="member">pthread_barrierattr_init</ref>(pthread_barrierattr_t<sp/>*b)</highlight></codeline>
<codeline lineno="387"><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(b);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="400" refid="pthread_8h_1a00e50575920d3c9d781eb1910136eecb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a00e50575920d3c9d781eb1910136eecb" kindref="member">pthread_barrierattr_destroy</ref>(pthread_barrierattr_t<sp/>*b)</highlight></codeline>
<codeline lineno="401"><highlight class="normal">{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(b);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Predicates<sp/>and<sp/>setters<sp/>for<sp/>various<sp/>pthread<sp/>attribute<sp/>values<sp/>that<sp/>we</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/>*<sp/>don&apos;t<sp/>support<sp/>(or<sp/>always<sp/>support:<sp/>the<sp/>&quot;process<sp/>shared&quot;<sp/>attribute</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/>*<sp/>can<sp/>only<sp/>be<sp/>true<sp/>given<sp/>the<sp/>way<sp/>Zephyr<sp/>implements<sp/>these</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/>*<sp/>objects).<sp/>Leave<sp/>these<sp/>undefined<sp/>for<sp/>simplicity<sp/>instead<sp/>of<sp/>defining</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/>*<sp/>stubs<sp/>to<sp/>return<sp/>an<sp/>error<sp/>that<sp/>would<sp/>have<sp/>to<sp/>be<sp/>logged<sp/>and</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>*<sp/>interpreted<sp/>just<sp/>to<sp/>figure<sp/>out<sp/>that<sp/>we<sp/>didn&apos;t<sp/>support<sp/>it<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/>*<sp/>first<sp/>place.<sp/>These<sp/>APIs<sp/>are<sp/>very<sp/>rarely<sp/>used<sp/>even<sp/>in<sp/>production</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>*<sp/>Unix<sp/>code.<sp/><sp/>Leave<sp/>the<sp/>declarations<sp/>here<sp/>so<sp/>they<sp/>can<sp/>be<sp/>easily</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>*<sp/>uncommented<sp/>and<sp/>implemented<sp/>as<sp/>needed.</highlight></codeline>
<codeline lineno="416"><highlight class="comment"></highlight></codeline>
<codeline lineno="417"><highlight class="comment">int<sp/>pthread_condattr_getclock(const<sp/>pthread_condattr_t<sp/>*<sp/>clockid_t<sp/>*);</highlight></codeline>
<codeline lineno="418"><highlight class="comment">int<sp/>pthread_condattr_getpshared(const<sp/>pthread_condattr_t<sp/>*<sp/>int<sp/>*);</highlight></codeline>
<codeline lineno="419"><highlight class="comment">int<sp/>pthread_condattr_setclock(pthread_condattr_t<sp/>*,<sp/>clockid_t);</highlight></codeline>
<codeline lineno="420"><highlight class="comment">int<sp/>pthread_condattr_setpshared(pthread_condattr_t<sp/>*,<sp/>int);</highlight></codeline>
<codeline lineno="421"><highlight class="comment">int<sp/>pthread_mutex_consistent(pthread_mutex_t<sp/>*);</highlight></codeline>
<codeline lineno="422"><highlight class="comment">int<sp/>pthread_mutex_getprioceiling(const<sp/>pthread_mutex_t<sp/>*<sp/>int<sp/>*);</highlight></codeline>
<codeline lineno="423"><highlight class="comment">int<sp/>pthread_mutex_setprioceiling(pthread_mutex_t<sp/>*,<sp/>int<sp/>int<sp/>*);</highlight></codeline>
<codeline lineno="424"><highlight class="comment">int<sp/>pthread_mutexattr_getprioceiling(const<sp/>pthread_mutexattr_t<sp/>*,<sp/>int<sp/>*);</highlight></codeline>
<codeline lineno="425"><highlight class="comment">int<sp/>pthread_mutexattr_getpshared(const<sp/>pthread_mutexattr_t<sp/>*<sp/>int<sp/>*);</highlight></codeline>
<codeline lineno="426"><highlight class="comment">int<sp/>pthread_mutexattr_getrobust(const<sp/>pthread_mutexattr_t<sp/>*<sp/>int<sp/>*);</highlight></codeline>
<codeline lineno="427"><highlight class="comment">int<sp/>pthread_mutexattr_setprioceiling(pthread_mutexattr_t<sp/>*,<sp/>int);</highlight></codeline>
<codeline lineno="428"><highlight class="comment">int<sp/>pthread_mutexattr_setpshared(pthread_mutexattr_t<sp/>*,<sp/>int);</highlight></codeline>
<codeline lineno="429"><highlight class="comment">int<sp/>pthread_mutexattr_setrobust(pthread_mutexattr_t<sp/>*,<sp/>int);</highlight></codeline>
<codeline lineno="430"><highlight class="comment">int<sp/>pthread_barrierattr_getpshared(const<sp/>pthread_barrierattr_t<sp/>*,<sp/>int<sp/>*);</highlight></codeline>
<codeline lineno="431"><highlight class="comment">int<sp/>pthread_barrierattr_setpshared(pthread_barrierattr_t<sp/>*,<sp/>int);</highlight></codeline>
<codeline lineno="432"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Base<sp/>Pthread<sp/>related<sp/>APIs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="444" refid="pthread_8h_1af5f2089384724cb7ec6374f45050a621" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>pthread_t<sp/><ref refid="pthread_8h_1af5f2089384724cb7ec6374f45050a621" kindref="member">pthread_self</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="445"><highlight class="normal">{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pthread_t)<ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>();</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="455" refid="pthread_8h_1a8cfb926667bd6b65271355bcf3a6483e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a8cfb926667bd6b65271355bcf3a6483e" kindref="member">pthread_equal</ref>(pthread_t<sp/>pt1,<sp/>pthread_t<sp/>pt2)</highlight></codeline>
<codeline lineno="456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pt1<sp/>==<sp/>pt2);</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="465" refid="pthread_8h_1ac4d2dcfe790eee1dbd83a1db7fdce3dc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1ac4d2dcfe790eee1dbd83a1db7fdce3dc" kindref="member">pthread_rwlockattr_destroy</ref>(pthread_rwlockattr_t<sp/>*attr)</highlight></codeline>
<codeline lineno="466"><highlight class="normal">{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="475" refid="pthread_8h_1a78db2cd33976f604cf85662fffa28307" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a78db2cd33976f604cf85662fffa28307" kindref="member">pthread_rwlockattr_init</ref>(pthread_rwlockattr_t<sp/>*attr)</highlight></codeline>
<codeline lineno="476"><highlight class="normal">{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480" refid="pthread_8h_1ae23600d4670359ab12bfba20db2c9a37" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1ae23600d4670359ab12bfba20db2c9a37" kindref="member">pthread_attr_getstacksize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_attr_t<sp/>*attr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*stacksize);</highlight></codeline>
<codeline lineno="481" refid="pthread_8h_1a79b4c9e71486a87ef3014f1c660b33eb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a79b4c9e71486a87ef3014f1c660b33eb" kindref="member">pthread_attr_setschedpolicy</ref>(pthread_attr_t<sp/>*attr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>policy);</highlight></codeline>
<codeline lineno="482" refid="pthread_8h_1af032906f326f3c209c7eed6bb248ebee" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1af032906f326f3c209c7eed6bb248ebee" kindref="member">pthread_attr_getschedpolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_attr_t<sp/>*attr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*policy);</highlight></codeline>
<codeline lineno="483" refid="pthread_8h_1ae6ee78c307d8467b34a9b0c330993a54" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1ae6ee78c307d8467b34a9b0c330993a54" kindref="member">pthread_attr_setdetachstate</ref>(pthread_attr_t<sp/>*attr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>detachstate);</highlight></codeline>
<codeline lineno="484" refid="pthread_8h_1a391c34da42e68ddd24f5ee0c070d5c4f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a391c34da42e68ddd24f5ee0c070d5c4f" kindref="member">pthread_attr_getdetachstate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_attr_t<sp/>*attr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*detachstate);</highlight></codeline>
<codeline lineno="485" refid="pthread_8h_1a0b85ebb1e3aac081a4c0a5e85ae3cbe9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a0b85ebb1e3aac081a4c0a5e85ae3cbe9" kindref="member">pthread_attr_init</ref>(pthread_attr_t<sp/>*attr);</highlight></codeline>
<codeline lineno="486" refid="pthread_8h_1a4bcdbf47c17c7dcc51e9f05f5cb56d81" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a4bcdbf47c17c7dcc51e9f05f5cb56d81" kindref="member">pthread_attr_destroy</ref>(pthread_attr_t<sp/>*attr);</highlight></codeline>
<codeline lineno="487" refid="pthread_8h_1abcd67baa86ff65d7ce65985d8b50d579" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1abcd67baa86ff65d7ce65985d8b50d579" kindref="member">pthread_attr_getschedparam</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_attr_t<sp/>*attr,</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsched__param" kindref="compound">sched_param</ref><sp/>*schedparam);</highlight></codeline>
<codeline lineno="489" refid="pthread_8h_1ac60393667965dbd06670d3d280b65757" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1ac60393667965dbd06670d3d280b65757" kindref="member">pthread_getschedparam</ref>(pthread_t<sp/>pthread,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*policy,</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsched__param" kindref="compound">sched_param</ref><sp/>*param);</highlight></codeline>
<codeline lineno="491" refid="pthread_8h_1aec19ad460995a9fe8aeb4eaf2bb1ed1d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1aec19ad460995a9fe8aeb4eaf2bb1ed1d" kindref="member">pthread_attr_getstack</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_attr_t<sp/>*attr,</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**stackaddr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*stacksize);</highlight></codeline>
<codeline lineno="493" refid="pthread_8h_1a94ede89b99a3a4fa17e516d30aaf3409" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a94ede89b99a3a4fa17e516d30aaf3409" kindref="member">pthread_attr_setstack</ref>(pthread_attr_t<sp/>*attr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stackaddr,</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stacksize);</highlight></codeline>
<codeline lineno="495" refid="pthread_8h_1ae9243c66c828fb05e484d2ee88e4eabd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1ae9243c66c828fb05e484d2ee88e4eabd" kindref="member">pthread_once</ref>(pthread_once_t<sp/>*once,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*initFunc)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="496" refid="pthread_8h_1a23b28e0f8ac5af2b46a33cdab3a80e44" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a23b28e0f8ac5af2b46a33cdab3a80e44" kindref="member">pthread_exit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*retval);</highlight></codeline>
<codeline lineno="497" refid="pthread_8h_1a6e4d503c2b358be5c98330f9006b3417" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a6e4d503c2b358be5c98330f9006b3417" kindref="member">pthread_join</ref>(pthread_t<sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**status);</highlight></codeline>
<codeline lineno="498" refid="pthread_8h_1a66a8f4bac5afe05538794218ff7c85ea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a66a8f4bac5afe05538794218ff7c85ea" kindref="member">pthread_cancel</ref>(pthread_t<sp/>pthread);</highlight></codeline>
<codeline lineno="499" refid="pthread_8h_1a7c275c509c26566b6dd95a2de1668a2f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a7c275c509c26566b6dd95a2de1668a2f" kindref="member">pthread_detach</ref>(pthread_t<sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>);</highlight></codeline>
<codeline lineno="500" refid="pthread_8h_1acb010e074930d81533ed20d319ca80b1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1acb010e074930d81533ed20d319ca80b1" kindref="member">pthread_create</ref>(pthread_t<sp/>*newthread,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_attr_t<sp/>*attr,</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*threadroutine)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="502" refid="pthread_8h_1a37075410fbbaad7ee93c95375fc86e0e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a37075410fbbaad7ee93c95375fc86e0e" kindref="member">pthread_setcancelstate</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*oldstate);</highlight></codeline>
<codeline lineno="503" refid="pthread_8h_1a18b9aa91fe20481a25650df20c567ff5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a18b9aa91fe20481a25650df20c567ff5" kindref="member">pthread_attr_setschedparam</ref>(pthread_attr_t<sp/>*attr,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsched__param" kindref="compound">sched_param</ref><sp/>*schedparam);</highlight></codeline>
<codeline lineno="505" refid="pthread_8h_1ad8e89d31b56c88d632ba9aeb956fa043" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1ad8e89d31b56c88d632ba9aeb956fa043" kindref="member">pthread_setschedparam</ref>(pthread_t<sp/>pthread,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>policy,</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsched__param" kindref="compound">sched_param</ref><sp/>*param);</highlight></codeline>
<codeline lineno="507" refid="pthread_8h_1a79839f0f4f4a768bf6d218faf377c209" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a79839f0f4f4a768bf6d218faf377c209" kindref="member">pthread_rwlock_destroy</ref>(pthread_rwlock_t<sp/>*rwlock);</highlight></codeline>
<codeline lineno="508" refid="pthread_8h_1a1596a13569ec35ee66cc867586fd643d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a1596a13569ec35ee66cc867586fd643d" kindref="member">pthread_rwlock_init</ref>(pthread_rwlock_t<sp/>*rwlock,</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_rwlockattr_t<sp/>*attr);</highlight></codeline>
<codeline lineno="510" refid="pthread_8h_1acc16fb32464b480d31bc69cce4e206c9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1acc16fb32464b480d31bc69cce4e206c9" kindref="member">pthread_rwlock_rdlock</ref>(pthread_rwlock_t<sp/>*rwlock);</highlight></codeline>
<codeline lineno="511" refid="pthread_8h_1ad791558625e69852e4a435b7c1580468" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1ad791558625e69852e4a435b7c1580468" kindref="member">pthread_rwlock_timedrdlock</ref>(pthread_rwlock_t<sp/>*rwlock,</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtimespec" kindref="compound">timespec</ref><sp/>*abstime);</highlight></codeline>
<codeline lineno="513" refid="pthread_8h_1a16c935f2f6146a95f9adbca71e0455e7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a16c935f2f6146a95f9adbca71e0455e7" kindref="member">pthread_rwlock_timedwrlock</ref>(pthread_rwlock_t<sp/>*rwlock,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtimespec" kindref="compound">timespec</ref><sp/>*abstime);</highlight></codeline>
<codeline lineno="515" refid="pthread_8h_1aae52fb1d3e6d03b18fa5731d0b49d197" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1aae52fb1d3e6d03b18fa5731d0b49d197" kindref="member">pthread_rwlock_tryrdlock</ref>(pthread_rwlock_t<sp/>*rwlock);</highlight></codeline>
<codeline lineno="516" refid="pthread_8h_1a065b618f7b786ed9bc7dddef4490cefb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a065b618f7b786ed9bc7dddef4490cefb" kindref="member">pthread_rwlock_trywrlock</ref>(pthread_rwlock_t<sp/>*rwlock);</highlight></codeline>
<codeline lineno="517" refid="pthread_8h_1a7d3b987d99117fc10c4ef97230011983" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a7d3b987d99117fc10c4ef97230011983" kindref="member">pthread_rwlock_unlock</ref>(pthread_rwlock_t<sp/>*rwlock);</highlight></codeline>
<codeline lineno="518" refid="pthread_8h_1a5ddd4cc028257f9baa9e23c2337abe3b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a5ddd4cc028257f9baa9e23c2337abe3b" kindref="member">pthread_rwlock_wrlock</ref>(pthread_rwlock_t<sp/>*rwlock);</highlight></codeline>
<codeline lineno="519" refid="pthread_8h_1af4b7ced8ecff505380fe8216244a3764" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1af4b7ced8ecff505380fe8216244a3764" kindref="member">pthread_key_create</ref>(pthread_key_t<sp/>*<ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>,</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*destructor)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="521" refid="pthread_8h_1aee96306dc79294927ee840bb4de2244b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1aee96306dc79294927ee840bb4de2244b" kindref="member">pthread_key_delete</ref>(pthread_key_t<sp/><ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="522" refid="pthread_8h_1a2187333dd46ce08d9d2e044f79fad705" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a2187333dd46ce08d9d2e044f79fad705" kindref="member">pthread_setspecific</ref>(pthread_key_t<sp/><ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value);</highlight></codeline>
<codeline lineno="523" refid="pthread_8h_1acdf9f73a16ea40eba1bc174d38e76ca5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="pthread_8h_1acdf9f73a16ea40eba1bc174d38e76ca5" kindref="member">pthread_getspecific</ref>(pthread_key_t<sp/><ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Glibc<sp/>/<sp/>Oracle<sp/>Extension<sp/>Functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="541" refid="pthread_8h_1aa21465e084e7185bfbb94bb50d60cd08" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1aa21465e084e7185bfbb94bb50d60cd08" kindref="member">pthread_setname_np</ref>(pthread_t<sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="558" refid="pthread_8h_1a8d55a60492c979991dc1a361b5453813" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pthread_8h_1a8d55a60492c979991dc1a361b5453813" kindref="member">pthread_getname_np</ref>(pthread_t<sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_POSIX_PTHREAD_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/posix/pthread.h"/>
  </compounddef>
</doxygen>
