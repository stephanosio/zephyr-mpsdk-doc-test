<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="drivers_2i2c_8h" kind="file" language="C++">
    <compoundname>i2c.h</compoundname>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes local="no">device.h</includes>
    <includes refid="stats_2stats_8h" local="no">stats/stats.h</includes>
    <includes local="no">syscalls/i2c.h</includes>
    <incdepgraph>
      <node id="1">
        <label>include/drivers/i2c.h</label>
        <link refid="drivers_2i2c_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stats/stats.h</label>
        <link refid="stats_2stats_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="5">
        <label>device.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="7">
        <label>syscalls/i2c.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structi2c__dt__spec" prot="public">i2c_dt_spec</innerclass>
    <innerclass refid="structi2c__msg" prot="public">i2c_msg</innerclass>
    <innerclass refid="structi2c__slave__callbacks" prot="public">i2c_slave_callbacks</innerclass>
    <innerclass refid="structi2c__slave__config" prot="public">i2c_slave_config</innerclass>
    <innerclass refid="structi2c__device__state" prot="public">i2c_device_state</innerclass>
    <innerclass refid="structi2c__client__config" prot="public">i2c_client_config</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__i2c__interface_1ga5ca8c5fbb2caa99ab0b7007ce2c11633" prot="public" static="no">
        <name>I2C_SPEED_STANDARD</name>
        <initializer>(0x1U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I2C Standard Speed: 100 kHz </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="34" column="9" bodyfile="include/drivers/i2c.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1gaef9d097ed2b58676498a33f3cf76f38d" prot="public" static="no">
        <name>I2C_SPEED_FAST</name>
        <initializer>(0x2U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I2C Fast Speed: 400 kHz </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="37" column="9" bodyfile="include/drivers/i2c.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga9c867195c4a99615ed9c0011293a2155" prot="public" static="no">
        <name>I2C_SPEED_FAST_PLUS</name>
        <initializer>(0x3U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I2C Fast Plus Speed: 1 MHz </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="40" column="9" bodyfile="include/drivers/i2c.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1gac7bce1bbfb422a123d3228e97e2cbb71" prot="public" static="no">
        <name>I2C_SPEED_HIGH</name>
        <initializer>(0x4U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I2C High Speed: 3.4 MHz </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="43" column="9" bodyfile="include/drivers/i2c.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga213468d14d1241632c957873cf2d9628" prot="public" static="no">
        <name>I2C_SPEED_ULTRA</name>
        <initializer>(0x5U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I2C Ultra Fast Speed: 5 MHz </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="46" column="9" bodyfile="include/drivers/i2c.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga6d0aaaec30d1e64e1b4ad674423d131f" prot="public" static="no">
        <name>I2C_SPEED_SHIFT</name>
        <initializer>(1U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="48" column="9" bodyfile="include/drivers/i2c.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga6d64fdac5a2d9008e7856e670b3c4305" prot="public" static="no">
        <name>I2C_SPEED_SET</name>
        <param><defname>speed</defname></param>
        <initializer>						(((speed) &lt;&lt; <ref refid="group__i2c__interface_1ga6d0aaaec30d1e64e1b4ad674423d131f" kindref="member">I2C_SPEED_SHIFT</ref>) \
						&amp; <ref refid="group__i2c__interface_1gade41614d9cb3efd61b22eda9c1715e4c" kindref="member">I2C_SPEED_MASK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="49" column="9" bodyfile="include/drivers/i2c.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1gade41614d9cb3efd61b22eda9c1715e4c" prot="public" static="no">
        <name>I2C_SPEED_MASK</name>
        <initializer>(0x7U &lt;&lt; <ref refid="group__i2c__interface_1ga6d0aaaec30d1e64e1b4ad674423d131f" kindref="member">I2C_SPEED_SHIFT</ref>) /* 3 bits */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="51" column="9" bodyfile="include/drivers/i2c.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga0eda328bb70285895d09154f9a828040" prot="public" static="no">
        <name>I2C_SPEED_GET</name>
        <param><defname>cfg</defname></param>
        <initializer>						(((cfg) &amp; <ref refid="group__i2c__interface_1gade41614d9cb3efd61b22eda9c1715e4c" kindref="member">I2C_SPEED_MASK</ref>) \
						&gt;&gt; <ref refid="group__i2c__interface_1ga6d0aaaec30d1e64e1b4ad674423d131f" kindref="member">I2C_SPEED_SHIFT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="52" column="9" bodyfile="include/drivers/i2c.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga66836d37196ce866681f506c44c8766d" prot="public" static="no">
        <name>I2C_ADDR_10_BITS</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Use 10-bit addressing. DEPRECATED - Use I2C_MSG_ADDR_10_BITS instead. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="56" column="9" bodyfile="include/drivers/i2c.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1gaf5b67041f761d0c4b62d6827239418e2" prot="public" static="no">
        <name>I2C_MODE_MASTER</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Controller to act as Master. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="59" column="9" bodyfile="include/drivers/i2c.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1gabb3ae5225cea677f3f3b36e4477ed045" prot="public" static="no">
        <name>I2C_DT_SPEC_GET</name>
        <param><defname>node_id</defname></param>
        <initializer>	{							     \
		.bus = <ref refid="group__device__model_1ga9a65996ce21f43acb7db061e23b48ec7" kindref="member">DEVICE_DT_GET</ref>(<ref refid="group__devicetree-generic-bus_1ga1082d31ac2dafdf9e085d4c23f2169dc" kindref="member">DT_BUS</ref>(node_id)),		     \
		.addr = <ref refid="group__devicetree-reg-prop_1gac6d8279c32351ced4c0ac7f32270974e" kindref="member">DT_REG_ADDR</ref>(node_id) \
	}</initializer>
        <briefdescription>
<para>Structure initializer for <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> from devicetree. </para>
        </briefdescription>
        <detaileddescription>
<para>This helper macro expands to a static initializer for a <computeroutput>struct <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref></computeroutput> by reading the relevant bus and address data from the devicetree.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Devicetree node identifier for the I2C device whose struct <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> to create an initializer for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="82" column="9" bodyfile="include/drivers/i2c.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga2197cbc5122f0d8b2e0788113bcb5963" prot="public" static="no">
        <name>I2C_DT_SPEC_INST_GET</name>
        <param><defname>inst</defname></param>
        <initializer>	<ref refid="group__i2c__interface_1gabb3ae5225cea677f3f3b36e4477ed045" kindref="member">I2C_DT_SPEC_GET</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst))</initializer>
        <briefdescription>
<para>Structure initializer for <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> from devicetree instance. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to <computeroutput><ref refid="group__i2c__interface_1gabb3ae5225cea677f3f3b36e4477ed045" kindref="member">I2C_DT_SPEC_GET(DT_DRV_INST(inst))</ref></computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Devicetree instance number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="96" column="9" bodyfile="include/drivers/i2c.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1gaf622d3c4aa1c832f90fff7200bb33732" prot="public" static="no">
        <name>I2C_MSG_WRITE</name>
        <initializer>(0U &lt;&lt; 0U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write message to I2C bus. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="105" column="9" bodyfile="include/drivers/i2c.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga6c3042e882e6a817a6498b7a4e1f0a95" prot="public" static="no">
        <name>I2C_MSG_READ</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read message from I2C bus. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="108" column="9" bodyfile="include/drivers/i2c.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1gaad55262ad277ee60b786372c71f217aa" prot="public" static="no">
        <name>I2C_MSG_STOP</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send STOP after this message. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="115" column="9" bodyfile="include/drivers/i2c.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga8c6cf7be2a04979fdb9d0b7dd9c4f831" prot="public" static="no">
        <name>I2C_MSG_RESTART</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RESTART I2C transaction for this message.</para>
<para><simplesect kind="note"><para>Not all I2C drivers have or require explicit support for this feature. Some drivers require this be present on a read message that follows a write, or vice-versa. Some drivers will merge adjacent fragments into a single transaction using this flag; some will not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="124" column="9" bodyfile="include/drivers/i2c.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga5569e8a3e4f6660928dfe443067c472c" prot="public" static="no">
        <name>I2C_MSG_ADDR_10_BITS</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Use 10-bit addressing for this message.</para>
<para><simplesect kind="note"><para>Not all SoC I2C implementations support this feature. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="129" column="9" bodyfile="include/drivers/i2c.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1gad751db45cf2dec40137ffdd088352a4a" prot="public" static="no">
        <name>I2C_SLAVE_FLAGS_ADDR_10_BITS</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Slave device responds to 10-bit addressing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="200" column="9" bodyfile="include/drivers/i2c.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1gaf550b2d134994f1f5b0249a591fac1ec" prot="public" static="no">
        <name>I2C_DEVICE_DT_DEFINE</name>
        <param><defname>node_id</defname></param>
        <param><defname>init_fn</defname></param>
        <param><defname>pm_device</defname></param>
        <param><defname>data_ptr</defname></param>
        <param><defname>cfg_ptr</defname></param>
        <param><defname>level</defname></param>
        <param><defname>prio</defname></param>
        <param><defname>api_ptr</defname></param>
        <param><defname>...</defname></param>
        <initializer>	Z_I2C_DEVICE_STATE_DEFINE(node_id, Z_DEVICE_DT_DEV_NAME(node_id)); \
	Z_I2C_INIT_FN(Z_DEVICE_DT_DEV_NAME(node_id), init_fn)		\
	Z_DEVICE_DEFINE(node_id, Z_DEVICE_DT_DEV_NAME(node_id),		\
			<ref refid="group__device__model_1gad864d7a50ee45285dacd68be1e5a49ce" kindref="member">DEVICE_DT_NAME</ref>(node_id),			\
			&amp;<ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(Z_DEVICE_DT_DEV_NAME(node_id), _init), \
			pm_device,					\
			data_ptr, cfg_ptr, level, prio,			\
			api_ptr,					\
			&amp;(Z_DEVICE_STATE_NAME(Z_DEVICE_DT_DEV_NAME(node_id)).devstate), \
			__VA_ARGS__)</initializer>
        <briefdescription>
<para>Like <ref refid="group__device__model_1gaac590af7705a3223968164406a483548" kindref="member">DEVICE_DT_DEFINE()</ref> with I2C specifics. </para>
        </briefdescription>
        <detaileddescription>
<para>Defines a device which implements the I2C API. May generate a custom <ref refid="structdevice__state" kindref="compound">device_state</ref> container struct and init_fn wrapper when needed depending on I2C <verbatim>embed:rst:inline :kconfig:option:`CONFIG_I2C_STATS` </verbatim>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The devicetree node identifier.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the init function of the driver.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm_device</parametername>
</parameternamelist>
<parameterdescription>
<para>PM device resources reference (NULL if device does not use PM).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s private data.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The address to the structure containing the configuration information for this instance of the driver.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization level. See <ref refid="group__device__model_1ga1e50fdff086356a75b0e91179952cc8d" kindref="member">SYS_INIT()</ref> for details.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority within the selected initialization level. See <ref refid="group__device__model_1ga1e50fdff086356a75b0e91179952cc8d" kindref="member">SYS_INIT()</ref> for details.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>api_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides an initial pointer to the API function struct used by the driver. Can be NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="457" column="9" bodyfile="include/drivers/i2c.h" bodystart="455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1gabfd94bccb99bd1a958cd8d7902b2072a" prot="public" static="no">
        <name>I2C_DEVICE_DT_INST_DEFINE</name>
        <param><defname>inst</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="group__i2c__interface_1gaf550b2d134994f1f5b0249a591fac1ec" kindref="member">I2C_DEVICE_DT_DEFINE</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), __VA_ARGS__)</initializer>
        <briefdescription>
<para>Like <ref refid="group__i2c__interface_1gaf550b2d134994f1f5b0249a591fac1ec" kindref="member">I2C_DEVICE_DT_DEFINE()</ref> for an instance of a DT_DRV_COMPAT compatible. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number. This is replaced by <computeroutput><ref refid="mmio_8c_1a5d94980d4c538356e9abcf30eb73d1d4" kindref="member">DT_DRV_COMPAT(inst)</ref></computeroutput> in the call to <ref refid="group__i2c__interface_1gaf550b2d134994f1f5b0249a591fac1ec" kindref="member">I2C_DEVICE_DT_DEFINE()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>other parameters as expected by <ref refid="group__i2c__interface_1gaf550b2d134994f1f5b0249a591fac1ec" kindref="member">I2C_DEVICE_DT_DEFINE()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="493" column="9" bodyfile="include/drivers/i2c.h" bodystart="493" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga1ea3a529bda7d896262c97bf305641ac" prot="public" static="no">
        <name>I2C_DECLARE_CLIENT_CONFIG</name>
        <initializer>struct <ref refid="structi2c__client__config" kindref="compound">i2c_client_config</ref> i2c_client</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1204" column="9" bodyfile="include/drivers/i2c.h" bodystart="1204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga29d683222a96276b7aee09ddab034af7" prot="public" static="no">
        <name>I2C_CLIENT</name>
        <param><defname>_master</defname></param>
        <param><defname>_addr</defname></param>
        <initializer>	.i2c_client = {				\
		.i2c_master = (_master),	\
		.i2c_addr = (_addr),		\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1206" column="9" bodyfile="include/drivers/i2c.h" bodystart="1206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga2b42e3f282659da16ae5a8a6e569e8d9" prot="public" static="no">
        <name>I2C_GET_MASTER</name>
        <param><defname>_conf</defname></param>
        <initializer>((_conf)-&gt;i2c_client.i2c_master)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1212" column="9" bodyfile="include/drivers/i2c.h" bodystart="1212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1gae26008d851b43232e04b32b1eb1c0dba" prot="public" static="no">
        <name>I2C_GET_ADDR</name>
        <param><defname>_conf</defname></param>
        <initializer>((_conf)-&gt;i2c_client.i2c_addr)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1213" column="9" bodyfile="include/drivers/i2c.h" bodystart="1213" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__i2c__interface_1ga6634657eae50c6316cd39dcf154308ee" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* i2c_slave_write_requested_cb_t) (struct i2c_slave_config *config)</definition>
        <argsstring>)(struct i2c_slave_config *config)</argsstring>
        <name>i2c_slave_write_requested_cb_t</name>
        <briefdescription>
<para>Function called when a write to the device is initiated. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is invoked by the controller when the bus completes a start condition for a write operation to the address associated with a particular device.</para>
<para>A success return shall cause the controller to ACK the next byte received. An error return shall cause the controller to NACK the next byte received.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration structure associated with the device to which the operation is addressed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the write is accepted, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="217" column="9" bodyfile="include/drivers/i2c.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__i2c__interface_1gac126848d8d110e3f91441043ae04bf92" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* i2c_slave_write_received_cb_t) (struct i2c_slave_config *config, uint8_t val)</definition>
        <argsstring>)(struct i2c_slave_config *config, uint8_t val)</argsstring>
        <name>i2c_slave_write_received_cb_t</name>
        <briefdescription>
<para>Function called when a write to the device is continued. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is invoked by the controller when it completes reception of a byte of data in an ongoing write operation to the device.</para>
<para>A success return shall cause the controller to ACK the next byte received. An error return shall cause the controller to NACK the next byte received.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration structure associated with the device to which the operation is addressed.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>the byte received by the controller.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if more data can be accepted, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="238" column="9" bodyfile="include/drivers/i2c.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__i2c__interface_1ga2fcb4c6f2cf5d72406715ce00af621a2" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* i2c_slave_read_requested_cb_t) (struct i2c_slave_config *config, uint8_t *val)</definition>
        <argsstring>)(struct i2c_slave_config *config, uint8_t *val)</argsstring>
        <name>i2c_slave_read_requested_cb_t</name>
        <briefdescription>
<para>Function called when a read from the device is initiated. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is invoked by the controller when the bus completes a start condition for a read operation from the address associated with a particular device.</para>
<para>The value returned in <computeroutput>*val</computeroutput> will be transmitted. A success return shall cause the controller to react to additional read operations. An error return shall cause the controller to ignore bus operations until a new start condition is received.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration structure associated with the device to which the operation is addressed.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to storage for the first byte of data to return for the read request.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if more data can be requested, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="260" column="9" bodyfile="include/drivers/i2c.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__i2c__interface_1ga6a5f74bc6673f7d88e01457818ac2c74" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* i2c_slave_read_processed_cb_t) (struct i2c_slave_config *config, uint8_t *val)</definition>
        <argsstring>)(struct i2c_slave_config *config, uint8_t *val)</argsstring>
        <name>i2c_slave_read_processed_cb_t</name>
        <briefdescription>
<para>Function called when a read from the device is continued. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is invoked by the controller when the bus is ready to provide additional data for a read operation from the address associated with the device device.</para>
<para>The value returned in <computeroutput>*val</computeroutput> will be transmitted. A success return shall cause the controller to react to additional read operations. An error return shall cause the controller to ignore bus operations until a new start condition is received.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration structure associated with the device to which the operation is addressed.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to storage for the next byte of data to return for the read request.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if data has been provided, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="282" column="9" bodyfile="include/drivers/i2c.h" bodystart="282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__i2c__interface_1ga76cd96ad8d9109151f544fc5ecaa6d36" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* i2c_slave_stop_cb_t) (struct i2c_slave_config *config)</definition>
        <argsstring>)(struct i2c_slave_config *config)</argsstring>
        <name>i2c_slave_stop_cb_t</name>
        <briefdescription>
<para>Function called when a stop condition is observed after a start condition addressed to a particular device. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is invoked by the controller when the bus is ready to provide additional data for a read operation from the address associated with the device device. After the function returns the controller shall enter a state where it is ready to react to new start conditions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration structure associated with the device to which the operation is addressed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ignored. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="299" column="9" bodyfile="include/drivers/i2c.h" bodystart="299" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__i2c__interface_1gab2a84398805e2be7662e9ae9cd4f9299" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void i2c_xfer_stats</definition>
        <argsstring>(const struct device *dev, struct i2c_msg *msgs, uint8_t num_msgs)</argsstring>
        <name>i2c_xfer_stats</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structi2c__msg" kindref="compound">i2c_msg</ref> *</type>
          <declname>msgs</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>num_msgs</declname>
        </param>
        <briefdescription>
<para>Updates the i2c stats for i2c transfers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C device to update stats for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of struct <ref refid="structi2c__msg" kindref="compound">i2c_msg</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of i2c_msgs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="378" column="20" bodyfile="include/drivers/i2c.h" bodystart="378" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga75326a6f38c011d35df9f3e72f2259e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_configure</definition>
        <argsstring>(const struct device *dev, uint32_t dev_config)</argsstring>
        <name>i2c_configure</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>dev_config</declname>
        </param>
        <briefdescription>
<para>Configure operation of a host controller. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit-packed 32-bit value to the device runtime configuration for the I2C controller.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error, failed to configure device. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="507" column="6" declfile="include/drivers/i2c.h" declline="507" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga6858e0f1a942b22964105135c334baed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_get_config</definition>
        <argsstring>(const struct device *dev, uint32_t *dev_config)</argsstring>
        <name>i2c_get_config</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>dev_config</declname>
        </param>
        <briefdescription>
<para>Get configuration of a host controller. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine provides a way to get current configuration. It is allowed to call the function before i2c_configure, because some I2C ports can be configured during init process. However, if the I2C port is not configured, i2c_get_config returns an error.</para>
<para>i2c_get_config can return cached config or probe hardware, but it has to be up to date with current configuration.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to return bit-packed 32-bit value of the I2C controller configuration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ERANGE</parametername>
</parameternamelist>
<parameterdescription>
<para>Configured I2C frequency is invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If get config is not implemented </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="538" column="6" declfile="include/drivers/i2c.h" declline="538" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga2958e6fe92ffb17851052d5c9a5c058e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_transfer</definition>
        <argsstring>(const struct device *dev, struct i2c_msg *msgs, uint8_t num_msgs, uint16_t addr)</argsstring>
        <name>i2c_transfer</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structi2c__msg" kindref="compound">i2c_msg</ref> *</type>
          <declname>msgs</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>num_msgs</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Perform data transfer to another I2C device in master mode. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine provides a generic interface to perform data transfer to another I2C device synchronously. Use <ref refid="group__i2c__interface_1ga935d1fdcbf9a40c9a673aa8977048ee7" kindref="member">i2c_read()</ref>/i2c_write() for simple read or write.</para>
<para>The array of message <emphasis>msgs</emphasis> must not be NULL. The number of message <emphasis>num_msgs</emphasis> may be zero,in which case no transfer occurs.</para>
<para><simplesect kind="note"><para>Not all scatter/gather transactions can be supported by all drivers. As an example, a gather write (multiple consecutive <computeroutput><ref refid="structi2c__msg" kindref="compound">i2c_msg</ref></computeroutput> buffers all configured for <computeroutput>I2C_MSG_WRITE</computeroutput>) may be packed into a single transaction by some drivers, but others may emit each fragment as a distinct write transaction, which will not produce the same behavior. See the documentation of <computeroutput>struct <ref refid="structi2c__msg" kindref="compound">i2c_msg</ref></computeroutput> for limitations on support for multi-message bus transactions.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in master mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of messages to transfer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of messages to transfer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the I2C target device.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="578" column="6" declfile="include/drivers/i2c.h" declline="578" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga8dce931e2dd637d811ff651062cec17b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_transfer_dt</definition>
        <argsstring>(const struct i2c_dt_spec *spec, struct i2c_msg *msgs, uint8_t num_msgs)</argsstring>
        <name>i2c_transfer_dt</name>
        <param>
          <type>const struct <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>struct <ref refid="structi2c__msg" kindref="compound">i2c_msg</ref> *</type>
          <declname>msgs</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>num_msgs</declname>
        </param>
        <briefdescription>
<para>Perform data transfer to another I2C device in master mode. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>i2c_transfer(spec-&gt;bus, msgs, num_msgs, spec-&gt;addr);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C specification from devicetree. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of messages to transfer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of messages to transfer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__i2c__interface_1ga2958e6fe92ffb17851052d5c9a5c058e" kindref="member">i2c_transfer()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="609" column="19" bodyfile="include/drivers/i2c.h" bodystart="609" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga93117c531c39259d89ab69d52bbde85c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_recover_bus</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>i2c_recover_bus</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Recover the I2C bus. </para>
        </briefdescription>
        <detaileddescription>
<para>Attempt to recover the I2C bus.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in master mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>If bus is not clear after recovery attempt. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If bus recovery is not implemented </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="627" column="6" declfile="include/drivers/i2c.h" declline="627" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga2b3b52d19b1fe12c6c693bef6f2106ce" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_slave_register</definition>
        <argsstring>(const struct device *dev, struct i2c_slave_config *cfg)</argsstring>
        <name>i2c_slave_register</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structi2c__slave__config" kindref="compound">i2c_slave_config</ref> *</type>
          <declname>cfg</declname>
        </param>
        <briefdescription>
<para>Registers the provided config as Slave device of a controller. </para>
        </briefdescription>
        <detaileddescription>
<para>Enable I2C slave mode for the &apos;dev&apos; I2C bus driver using the provided &apos;config&apos; struct containing the functions and parameters to send bus events. The I2C slave will be registered at the address provided as &apos;address&apos; struct member. Addressing mode - 7 or 10 bit - depends on the &apos;flags&apos; struct member. Any I2C bus events related to the slave mode will be passed onto I2C slave device driver via a set of callback functions provided in the &apos;callbacks&apos; struct member.</para>
<para>Most of the existing hardware allows simultaneous support for master and slave mode. This is however not guaranteed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in slave mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Config struct with functions and parameters used by the I2C driver to send bus events</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Is successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If parameters are invalid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If slave mode is not implemented </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="665" column="19" bodyfile="include/drivers/i2c.h" bodystart="665" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1gaee67eefa3f8cb078c14ff0a3aab2527c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_slave_unregister</definition>
        <argsstring>(const struct device *dev, struct i2c_slave_config *cfg)</argsstring>
        <name>i2c_slave_unregister</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structi2c__slave__config" kindref="compound">i2c_slave_config</ref> *</type>
          <declname>cfg</declname>
        </param>
        <briefdescription>
<para>Unregisters the provided config as Slave device. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine disables I2C slave mode for the &apos;dev&apos; I2C bus driver using the provided &apos;config&apos; struct containing the functions and parameters to send bus events.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in slave mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Config struct with functions and parameters used by the I2C driver to send bus events</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Is successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If parameters are invalid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If slave mode is not implemented </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="694" column="19" bodyfile="include/drivers/i2c.h" bodystart="694" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1gab8f2b9e19ceb0ebc15fdd8fc2bf304a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_slave_driver_register</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>i2c_slave_driver_register</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Instructs the I2C Slave device to register itself to the I2C Controller. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine instructs the I2C Slave device to register itself to the I2C Controller via its parent controller&apos;s <ref refid="group__i2c__interface_1ga2b3b52d19b1fe12c6c693bef6f2106ce" kindref="member">i2c_slave_register()</ref> API.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the I2C slave device (not itself an I2C controller).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Is successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If parameters are invalid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="720" column="6" declfile="include/drivers/i2c.h" declline="720" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga5fce9f78a267f638b111c19cac242278" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_slave_driver_unregister</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>i2c_slave_driver_unregister</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Instructs the I2C Slave device to unregister itself from the I2C Controller. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine instructs the I2C Slave device to unregister itself from the I2C Controller via its parent controller&apos;s <ref refid="group__i2c__interface_1ga2b3b52d19b1fe12c6c693bef6f2106ce" kindref="member">i2c_slave_register()</ref> API.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the I2C slave device (not itself an I2C controller).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Is successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If parameters are invalid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="743" column="6" declfile="include/drivers/i2c.h" declline="743" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga2cc5f49493dce89e128ccbfa9d6149a0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_write</definition>
        <argsstring>(const struct device *dev, const uint8_t *buf, uint32_t num_bytes, uint16_t addr)</argsstring>
        <name>i2c_write</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_bytes</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Write a set amount of data to an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine writes a set amount of data synchronously.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in master mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pool from which the data is transferred. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to the target I2C device for writing.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="771" column="19" bodyfile="include/drivers/i2c.h" bodystart="771" bodyend="781"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga2d17b714ba6ebe47d7bdfcb1cf97e44f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_write_dt</definition>
        <argsstring>(const struct i2c_dt_spec *spec, const uint8_t *buf, uint32_t num_bytes)</argsstring>
        <name>i2c_write_dt</name>
        <param>
          <type>const struct <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
<para>Write a set amount of data to an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>i2c_write(spec-&gt;bus, buf, num_bytes, spec-&gt;addr);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C specification from devicetree. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pool from which the data is transferred. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__i2c__interface_1ga2cc5f49493dce89e128ccbfa9d6149a0" kindref="member">i2c_write()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="796" column="19" bodyfile="include/drivers/i2c.h" bodystart="796" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga935d1fdcbf9a40c9a673aa8977048ee7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_read</definition>
        <argsstring>(const struct device *dev, uint8_t *buf, uint32_t num_bytes, uint16_t addr)</argsstring>
        <name>i2c_read</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_bytes</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Read a set amount of data from an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine reads a set amount of data synchronously.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in master mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pool that stores the retrieved data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the I2C device being read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="816" column="19" bodyfile="include/drivers/i2c.h" bodystart="816" bodyend="826"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga5cf80d20dca0d5f1d16e16c151f57ef6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_read_dt</definition>
        <argsstring>(const struct i2c_dt_spec *spec, uint8_t *buf, uint32_t num_bytes)</argsstring>
        <name>i2c_read_dt</name>
        <param>
          <type>const struct <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
<para>Read a set amount of data from an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>i2c_read(spec-&gt;bus, buf, num_bytes, spec-&gt;addr);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C specification from devicetree. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pool that stores the retrieved data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__i2c__interface_1ga935d1fdcbf9a40c9a673aa8977048ee7" kindref="member">i2c_read()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="841" column="19" bodyfile="include/drivers/i2c.h" bodystart="841" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga1273a9f8bdb002e0d6ece3a8c893a709" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_write_read</definition>
        <argsstring>(const struct device *dev, uint16_t addr, const void *write_buf, size_t num_write, void *read_buf, size_t num_read)</argsstring>
        <name>i2c_write_read</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>write_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_write</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>read_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_read</declname>
        </param>
        <briefdescription>
<para>Write then read data from an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This supports the common operation &quot;this is what I want&quot;, &quot;now give
it to me&quot; transaction pair through a combined write-then-read bus transaction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in master mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the I2C device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_write</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to storage for read data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_read</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>negative</parametername>
</parameternamelist>
<parameterdescription>
<para>on error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="865" column="19" bodyfile="include/drivers/i2c.h" bodystart="865" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga301733586dcc2a353bdf149b49df5758" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_write_read_dt</definition>
        <argsstring>(const struct i2c_dt_spec *spec, const void *write_buf, size_t num_write, void *read_buf, size_t num_read)</argsstring>
        <name>i2c_write_read_dt</name>
        <param>
          <type>const struct <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>write_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_write</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>read_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_read</declname>
        </param>
        <briefdescription>
<para>Write then read data from an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>i2c_write_read(spec-&gt;bus, spec-&gt;addr,
               write_buf, num_write,
               read_buf, num_read);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C specification from devicetree. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_write</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to storage for read data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_read</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__i2c__interface_1ga1273a9f8bdb002e0d6ece3a8c893a709" kindref="member">i2c_write_read()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="899" column="19" bodyfile="include/drivers/i2c.h" bodystart="899" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga4bbb79898f53d0a2fad1bd302369ae9e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_burst_read</definition>
        <argsstring>(const struct device *dev, uint16_t dev_addr, uint8_t start_addr, uint8_t *buf, uint32_t num_bytes)</argsstring>
        <name>i2c_burst_read</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>dev_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
<para>Read multiple bytes from an internal address of an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine reads multiple bytes from an internal address of an I2C device synchronously.</para>
<para>Instances of this may be replaced by <ref refid="group__i2c__interface_1ga1273a9f8bdb002e0d6ece3a8c893a709" kindref="member">i2c_write_read()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in master mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the I2C device for reading. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Internal address from which the data is being read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pool that stores the retrieved data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes being read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="926" column="19" bodyfile="include/drivers/i2c.h" bodystart="926" bodyend="935"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga9d2654bbf80f4d253532adaec8566fc3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_burst_read_dt</definition>
        <argsstring>(const struct i2c_dt_spec *spec, uint8_t start_addr, uint8_t *buf, uint32_t num_bytes)</argsstring>
        <name>i2c_burst_read_dt</name>
        <param>
          <type>const struct <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
<para>Read multiple bytes from an internal address of an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>i2c_burst_read(spec-&gt;bus, spec-&gt;addr, start_addr, buf, num_bytes);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C specification from devicetree. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Internal address from which the data is being read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pool that stores the retrieved data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__i2c__interface_1ga4bbb79898f53d0a2fad1bd302369ae9e" kindref="member">i2c_burst_read()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="951" column="19" bodyfile="include/drivers/i2c.h" bodystart="951" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1gaf995812f31e7bf1ea7f203905db13822" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_burst_write</definition>
        <argsstring>(const struct device *dev, uint16_t dev_addr, uint8_t start_addr, const uint8_t *buf, uint32_t num_bytes)</argsstring>
        <name>i2c_burst_write</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>dev_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
<para>Write multiple bytes to an internal address of an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine writes multiple bytes to an internal address of an I2C device synchronously.</para>
<para><simplesect kind="warning"><para>The combined write synthesized by this API may not be supported on all I2C devices. Uses of this API may be made more portable by replacing them with calls to <ref refid="group__i2c__interface_1ga2cc5f49493dce89e128ccbfa9d6149a0" kindref="member">i2c_write()</ref> passing a buffer containing the combined address and data.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in master mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the I2C device for writing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Internal address to which the data is being written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pool from which the data is transferred. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes being written.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="981" column="19" bodyfile="include/drivers/i2c.h" bodystart="981" bodyend="998"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga0e590c99d3b9c1a7dd8174a318ee5a7d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_burst_write_dt</definition>
        <argsstring>(const struct i2c_dt_spec *spec, uint8_t start_addr, const uint8_t *buf, uint32_t num_bytes)</argsstring>
        <name>i2c_burst_write_dt</name>
        <param>
          <type>const struct <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
<para>Write multiple bytes to an internal address of an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>i2c_burst_write(spec-&gt;bus, spec-&gt;addr, start_addr, buf, num_bytes);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C specification from devicetree. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Internal address to which the data is being written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pool from which the data is transferred. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes being written.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__i2c__interface_1gaf995812f31e7bf1ea7f203905db13822" kindref="member">i2c_burst_write()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1014" column="19" bodyfile="include/drivers/i2c.h" bodystart="1014" bodyend="1021"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1gaf8d1722ff4ebe97122293aef6ccf332a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_reg_read_byte</definition>
        <argsstring>(const struct device *dev, uint16_t dev_addr, uint8_t reg_addr, uint8_t *value)</argsstring>
        <name>i2c_reg_read_byte</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>dev_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Read internal register of an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine reads the value of an 8-bit internal register of an I2C device synchronously.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in master mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the I2C device for reading. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the internal register being read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pool that stores the retrieved register value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1038" column="19" bodyfile="include/drivers/i2c.h" bodystart="1038" bodyend="1045"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga6fc14d75c41b8c8d9dd2f77c59533640" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_reg_read_byte_dt</definition>
        <argsstring>(const struct i2c_dt_spec *spec, uint8_t reg_addr, uint8_t *value)</argsstring>
        <name>i2c_reg_read_byte_dt</name>
        <param>
          <type>const struct <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Read internal register of an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>i2c_reg_read_byte(spec-&gt;bus, spec-&gt;addr, reg_addr, value);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C specification from devicetree. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the internal register being read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pool that stores the retrieved register value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__i2c__interface_1gaf8d1722ff4ebe97122293aef6ccf332a" kindref="member">i2c_reg_read_byte()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1060" column="19" bodyfile="include/drivers/i2c.h" bodystart="1060" bodyend="1064"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga687a0da74c22b299b66db8198c6fdcb1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_reg_write_byte</definition>
        <argsstring>(const struct device *dev, uint16_t dev_addr, uint8_t reg_addr, uint8_t value)</argsstring>
        <name>i2c_reg_write_byte</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>dev_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write internal register of an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine writes a value to an 8-bit internal register of an I2C device synchronously.</para>
<para><simplesect kind="note"><para>This function internally combines the register and value into a single bus transaction.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in master mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the I2C device for writing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the internal register being written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be written to internal register.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1084" column="19" bodyfile="include/drivers/i2c.h" bodystart="1084" bodyend="1091"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga664cd76bf4fae0dba848f5c284699a04" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_reg_write_byte_dt</definition>
        <argsstring>(const struct i2c_dt_spec *spec, uint8_t reg_addr, uint8_t value)</argsstring>
        <name>i2c_reg_write_byte_dt</name>
        <param>
          <type>const struct <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write internal register of an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>i2c_reg_write_byte(spec-&gt;bus, spec-&gt;addr, reg_addr, value);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C specification from devicetree. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the internal register being written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be written to internal register.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__i2c__interface_1ga687a0da74c22b299b66db8198c6fdcb1" kindref="member">i2c_reg_write_byte()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1106" column="19" bodyfile="include/drivers/i2c.h" bodystart="1106" bodyend="1110"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1gad07710d37bf6bd4fa6ccfe62be625eb4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_reg_update_byte</definition>
        <argsstring>(const struct device *dev, uint8_t dev_addr, uint8_t reg_addr, uint8_t mask, uint8_t value)</argsstring>
        <name>i2c_reg_update_byte</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>dev_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Update internal register of an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine updates the value of a set of bits from an 8-bit internal register of an I2C device synchronously.</para>
<para><simplesect kind="note"><para>If the calculated new register value matches the value that was read this function will not generate a write operation.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in master mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the I2C device for updating. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the internal register being updated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask for updating internal register. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for updating internal register.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1131" column="19" bodyfile="include/drivers/i2c.h" bodystart="1131" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga5000c5e49eabe712b5fd532d3842c3f5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_reg_update_byte_dt</definition>
        <argsstring>(const struct i2c_dt_spec *spec, uint8_t reg_addr, uint8_t mask, uint8_t value)</argsstring>
        <name>i2c_reg_update_byte_dt</name>
        <param>
          <type>const struct <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Update internal register of an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>i2c_reg_update_byte(spec-&gt;bus, spec-&gt;addr, reg_addr, mask, value);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C specification from devicetree. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the internal register being updated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask for updating internal register. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for updating internal register.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__i2c__interface_1gad07710d37bf6bd4fa6ccfe62be625eb4" kindref="member">i2c_reg_update_byte()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1166" column="19" bodyfile="include/drivers/i2c.h" bodystart="1166" bodyend="1172"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga685640115771a60564ae1c53c3308c5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void i2c_dump_msgs</definition>
        <argsstring>(const char *name, const struct i2c_msg *msgs, uint8_t num_msgs, uint16_t addr)</argsstring>
        <name>i2c_dump_msgs</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const struct <ref refid="structi2c__msg" kindref="compound">i2c_msg</ref> *</type>
          <declname>msgs</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>num_msgs</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Dump out an I2C message. </para>
        </briefdescription>
        <detaileddescription>
<para>Dumps out a list of I2C messages. For any that are writes (W), the data is displayed in hex.</para>
<para>It looks something like this (with name &quot;testing&quot;):</para>
<para>D: I2C msg: testing, addr=56 D: W len=01: D: contents: D: 06 |. D: W len=0e: D: contents: D: 00 01 02 03 04 05 06 07 |........ D: 08 09 0a 0b 0c 0d |......</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of this dump, displayed at the top. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of messages to dump. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of messages to dump. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the I2C target device. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1196" column="6" declfile="include/drivers/i2c.h" declline="1196" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Public APIs for the I2C drivers. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_DRIVERS_I2C_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_DRIVERS_I2C_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;device.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>The<sp/>following<sp/>#defines<sp/>are<sp/>used<sp/>to<sp/>configure<sp/>the<sp/>I2C<sp/>controller.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="group__i2c__interface_1ga5ca8c5fbb2caa99ab0b7007ce2c11633" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_SPEED_STANDARD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="group__i2c__interface_1gaef9d097ed2b58676498a33f3cf76f38d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_SPEED_FAST<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x2U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="group__i2c__interface_1ga9c867195c4a99615ed9c0011293a2155" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_SPEED_FAST_PLUS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x3U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="group__i2c__interface_1gac7bce1bbfb422a123d3228e97e2cbb71" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_SPEED_HIGH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x4U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="group__i2c__interface_1ga213468d14d1241632c957873cf2d9628" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_SPEED_ULTRA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x5U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="group__i2c__interface_1ga6d0aaaec30d1e64e1b4ad674423d131f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_SPEED_SHIFT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="group__i2c__interface_1ga6d64fdac5a2d9008e7856e670b3c4305" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_SPEED_SET(speed)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((speed)<sp/>&lt;&lt;<sp/>I2C_SPEED_SHIFT)<sp/>\</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>I2C_SPEED_MASK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="group__i2c__interface_1gade41614d9cb3efd61b22eda9c1715e4c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_SPEED_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x7U<sp/>&lt;&lt;<sp/>I2C_SPEED_SHIFT)<sp/></highlight><highlight class="comment">/*<sp/>3<sp/>bits<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="group__i2c__interface_1ga0eda328bb70285895d09154f9a828040" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_SPEED_GET(cfg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((cfg)<sp/>&amp;<sp/>I2C_SPEED_MASK)<sp/>\</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>I2C_SPEED_SHIFT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="group__i2c__interface_1ga66836d37196ce866681f506c44c8766d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_ADDR_10_BITS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="group__i2c__interface_1gaf5b67041f761d0c4b62d6827239418e2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_MODE_MASTER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="structi2c__dt__spec" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref><sp/>{</highlight></codeline>
<codeline lineno="68" refid="structi2c__dt__spec_1a40d5c17c04910927c34eb69b173cbb85" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*<ref refid="structi2c__dt__spec_1a40d5c17c04910927c34eb69b173cbb85" kindref="member">bus</ref>;</highlight></codeline>
<codeline lineno="69" refid="structi2c__dt__spec_1a85242ab56b1e8633b7001353990392fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structi2c__dt__spec_1a85242ab56b1e8633b7001353990392fa" kindref="member">addr</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">};</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="group__i2c__interface_1gabb3ae5225cea677f3f3b36e4477ed045" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_DT_SPEC_GET(node_id)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.bus<sp/>=<sp/>DEVICE_DT_GET(DT_BUS(node_id)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.addr<sp/>=<sp/>DT_REG_ADDR(node_id)<sp/>\</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="group__i2c__interface_1ga2197cbc5122f0d8b2e0788113bcb5963" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_DT_SPEC_INST_GET(inst)<sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C_DT_SPEC_GET(DT_DRV_INST(inst))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>I2C_MSG_*<sp/>are<sp/>I2C<sp/>Message<sp/>flags.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="group__i2c__interface_1gaf622d3c4aa1c832f90fff7200bb33732" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_MSG_WRITE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0U<sp/>&lt;&lt;<sp/>0U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="group__i2c__interface_1ga6c3042e882e6a817a6498b7a4e1f0a95" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_MSG_READ<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_MSG_RW_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="group__i2c__interface_1gaad55262ad277ee60b786372c71f217aa" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_MSG_STOP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="group__i2c__interface_1ga8c6cf7be2a04979fdb9d0b7dd9c4f831" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_MSG_RESTART<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="group__i2c__interface_1ga5569e8a3e4f6660928dfe443067c472c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_MSG_ADDR_10_BITS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="structi2c__msg" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2c__msg" kindref="compound">i2c_msg</ref><sp/>{</highlight></codeline>
<codeline lineno="147" refid="structi2c__msg_1ac4aa590487270589a51964b38f853a37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="structi2c__msg_1ac4aa590487270589a51964b38f853a37" kindref="member">buf</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="structi2c__msg_1ae122c36d1fdc0829321fa116921d7a52" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structi2c__msg_1ae122c36d1fdc0829321fa116921d7a52" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="structi2c__msg_1ae6f9dc8a50b611adbca38e29b529ab9c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structi2c__msg_1ae6f9dc8a50b611adbca38e29b529ab9c" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">};</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2c__slave__config" kindref="compound">i2c_slave_config</ref>;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*i2c_api_configure_t)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>dev_config);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*i2c_api_get_config_t)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*dev_config);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*i2c_api_full_io_t)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2c__msg" kindref="compound">i2c_msg</ref><sp/>*msgs,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>num_msgs,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*i2c_api_slave_register_t)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2c__slave__config" kindref="compound">i2c_slave_config</ref><sp/>*cfg);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*i2c_api_slave_unregister_t)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2c__slave__config" kindref="compound">i2c_slave_config</ref><sp/>*cfg);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*i2c_api_recover_bus_t)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal">__subsystem<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2c_driver_api<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_api_configure_t<sp/>configure;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_api_get_config_t<sp/>get_config;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_api_full_io_t<sp/>transfer;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_api_slave_register_t<sp/>slave_register;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_api_slave_unregister_t<sp/>slave_unregister;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_api_recover_bus_t<sp/>recover_bus;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">};</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*i2c_slave_api_register_t)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*i2c_slave_api_unregister_t)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2c_slave_driver_api<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_slave_api_register_t<sp/>driver_register;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_slave_api_unregister_t<sp/>driver_unregister;</highlight></codeline>
<codeline lineno="193"><highlight class="normal">};</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="group__i2c__interface_1gad751db45cf2dec40137ffdd088352a4a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_SLAVE_FLAGS_ADDR_10_BITS<sp/><sp/><sp/><sp/>BIT(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="group__i2c__interface_1ga6634657eae50c6316cd39dcf154308ee" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__i2c__interface_1ga6634657eae50c6316cd39dcf154308ee" kindref="member">i2c_slave_write_requested_cb_t</ref>)(</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2c__slave__config" kindref="compound">i2c_slave_config</ref><sp/>*config);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="group__i2c__interface_1gac126848d8d110e3f91441043ae04bf92" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__i2c__interface_1gac126848d8d110e3f91441043ae04bf92" kindref="member">i2c_slave_write_received_cb_t</ref>)(</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2c__slave__config" kindref="compound">i2c_slave_config</ref><sp/>*config,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="group__i2c__interface_1ga2fcb4c6f2cf5d72406715ce00af621a2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__i2c__interface_1ga2fcb4c6f2cf5d72406715ce00af621a2" kindref="member">i2c_slave_read_requested_cb_t</ref>)(</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2c__slave__config" kindref="compound">i2c_slave_config</ref><sp/>*config,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*val);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="282" refid="group__i2c__interface_1ga6a5f74bc6673f7d88e01457818ac2c74" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__i2c__interface_1ga6a5f74bc6673f7d88e01457818ac2c74" kindref="member">i2c_slave_read_processed_cb_t</ref>)(</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2c__slave__config" kindref="compound">i2c_slave_config</ref><sp/>*config,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*val);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="group__i2c__interface_1ga76cd96ad8d9109151f544fc5ecaa6d36" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__i2c__interface_1ga76cd96ad8d9109151f544fc5ecaa6d36" kindref="member">i2c_slave_stop_cb_t</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2c__slave__config" kindref="compound">i2c_slave_config</ref><sp/>*config);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="structi2c__slave__callbacks" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2c__slave__callbacks" kindref="compound">i2c_slave_callbacks</ref><sp/>{</highlight></codeline>
<codeline lineno="308" refid="structi2c__slave__callbacks_1a1f15e6074416d9d04118ad93237dae96" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga6634657eae50c6316cd39dcf154308ee" kindref="member">i2c_slave_write_requested_cb_t</ref><sp/><ref refid="structi2c__slave__callbacks_1a1f15e6074416d9d04118ad93237dae96" kindref="member">write_requested</ref>;</highlight></codeline>
<codeline lineno="309" refid="structi2c__slave__callbacks_1acb17ca723af09a5febf0e975d1bbb5fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga2fcb4c6f2cf5d72406715ce00af621a2" kindref="member">i2c_slave_read_requested_cb_t</ref><sp/><ref refid="structi2c__slave__callbacks_1acb17ca723af09a5febf0e975d1bbb5fe" kindref="member">read_requested</ref>;</highlight></codeline>
<codeline lineno="310" refid="structi2c__slave__callbacks_1a3d94d425398c2373161d1b8977d88cb0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gac126848d8d110e3f91441043ae04bf92" kindref="member">i2c_slave_write_received_cb_t</ref><sp/><ref refid="structi2c__slave__callbacks_1a3d94d425398c2373161d1b8977d88cb0" kindref="member">write_received</ref>;</highlight></codeline>
<codeline lineno="311" refid="structi2c__slave__callbacks_1aace9b873c87ac2ac94159e2291b77efb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga6a5f74bc6673f7d88e01457818ac2c74" kindref="member">i2c_slave_read_processed_cb_t</ref><sp/><ref refid="structi2c__slave__callbacks_1aace9b873c87ac2ac94159e2291b77efb" kindref="member">read_processed</ref>;</highlight></codeline>
<codeline lineno="312" refid="structi2c__slave__callbacks_1af707c20ee6a3df63b37729180faf4669" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga76cd96ad8d9109151f544fc5ecaa6d36" kindref="member">i2c_slave_stop_cb_t</ref><sp/><ref refid="structi2c__slave__callbacks_1af707c20ee6a3df63b37729180faf4669" kindref="member">stop</ref>;</highlight></codeline>
<codeline lineno="313"><highlight class="normal">};</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="structi2c__slave__config" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2c__slave__config" kindref="compound">i2c_slave_config</ref><sp/>{</highlight></codeline>
<codeline lineno="328" refid="structi2c__slave__config_1a51fef7fbd17c8a1bc461a8123fad4406" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref><sp/><ref refid="structi2c__slave__config_1a51fef7fbd17c8a1bc461a8123fad4406" kindref="member">node</ref>;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="structi2c__slave__config_1a0671f34c262e3d115bfcfcf9acd9da1c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structi2c__slave__config_1a0671f34c262e3d115bfcfcf9acd9da1c" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="structi2c__slave__config_1ab37059ea24d2cccfb390bf24d08d9e2a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structi2c__slave__config_1ab37059ea24d2cccfb390bf24d08d9e2a" kindref="member">address</ref>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="structi2c__slave__config_1a1f1d179e79cb53b977ec7bf89633a1be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2c__slave__callbacks" kindref="compound">i2c_slave_callbacks</ref><sp/>*<ref refid="structi2c__slave__config_1a1f1d179e79cb53b977ec7bf89633a1be" kindref="member">callbacks</ref>;</highlight></codeline>
<codeline lineno="338"><highlight class="normal">};</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_I2C_STATS)<sp/>||<sp/>defined(__DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stats_2stats_8h" kindref="compound">stats/stats.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><ref refid="stats_2stats_8h_1ae8e85c3ce2d901f4668d7237b19999fe" kindref="member">STATS_SECT_START</ref>(i2c)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><ref refid="stats_2stats_8h_1a592329613cc77cfa5dee3e1d3b16dd93" kindref="member">STATS_SECT_ENTRY32</ref>(bytes_read)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><ref refid="stats_2stats_8h_1a592329613cc77cfa5dee3e1d3b16dd93" kindref="member">STATS_SECT_ENTRY32</ref>(bytes_written)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><ref refid="stats_2stats_8h_1a592329613cc77cfa5dee3e1d3b16dd93" kindref="member">STATS_SECT_ENTRY32</ref>(message_count)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><ref refid="stats_2stats_8h_1a592329613cc77cfa5dee3e1d3b16dd93" kindref="member">STATS_SECT_ENTRY32</ref>(transfer_call_count)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><ref refid="stats_2stats_8h_1a4124f8c0a9ffb78d8be608a780676785" kindref="member">STATS_SECT_END</ref>;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><ref refid="stats_2stats_8h_1abd76143ad82eea7aded01af8cb7bc9ae" kindref="member">STATS_NAME_START</ref>(i2c)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><ref refid="stats_2stats_8h_1a30648b154e6da64aa39551fac123dd1b" kindref="member">STATS_NAME</ref>(i2c,<sp/>bytes_read)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><ref refid="stats_2stats_8h_1a30648b154e6da64aa39551fac123dd1b" kindref="member">STATS_NAME</ref>(i2c,<sp/>bytes_written)</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><ref refid="stats_2stats_8h_1a30648b154e6da64aa39551fac123dd1b" kindref="member">STATS_NAME</ref>(i2c,<sp/>message_count)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><ref refid="stats_2stats_8h_1a30648b154e6da64aa39551fac123dd1b" kindref="member">STATS_NAME</ref>(i2c,<sp/>transfer_call_count)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><ref refid="stats_2stats_8h_1a0de61377bb7c254b68cb39a9b5105e4f" kindref="member">STATS_NAME_END</ref>(i2c);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="366" refid="structi2c__device__state" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2c__device__state" kindref="compound">i2c_device_state</ref><sp/>{</highlight></codeline>
<codeline lineno="367" refid="structi2c__device__state_1ad02c0d18dd2db2c35ccdc4c0913b0f0b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice__state" kindref="compound">device_state</ref><sp/><ref refid="structi2c__device__state_1ad02c0d18dd2db2c35ccdc4c0913b0f0b" kindref="member">devstate</ref>;</highlight></codeline>
<codeline lineno="368" refid="structi2c__device__state_1a2bc920f08c8c88a420d3f63ac55cad8c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stats_i2c<sp/><ref refid="structi2c__device__state_1a2bc920f08c8c88a420d3f63ac55cad8c" kindref="member">stats</ref>;</highlight></codeline>
<codeline lineno="369"><highlight class="normal">};</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="378" refid="group__i2c__interface_1gab2a84398805e2be7662e9ae9cd4f9299" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1gab2a84398805e2be7662e9ae9cd4f9299" kindref="member">i2c_xfer_stats</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structi2c__msg" kindref="compound">i2c_msg</ref><sp/>*msgs,</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>num_msgs)</highlight></codeline>
<codeline lineno="380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2c__device__state" kindref="compound">i2c_device_state</ref><sp/>*<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref><sp/>=</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sys-util_1gac5bc561d1bfd1bf68877fe577779bd2f" kindref="member">CONTAINER_OF</ref>(dev-&gt;<ref refid="structdevice_1a4ea71ed3ab6cdf3a2e70e35a44c1ed3e" kindref="member">state</ref>,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structi2c__device__state" kindref="compound">i2c_device_state</ref>,<sp/><ref refid="structi2c__device__state_1ad02c0d18dd2db2c35ccdc4c0913b0f0b" kindref="member">devstate</ref>);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>bytes_read<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>bytes_written<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stats_2stats_8h_1a725e1bf6b2c486de9603954974d6315a" kindref="member">STATS_INC</ref>(<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>-&gt;stats,<sp/>transfer_call_count);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stats_2stats_8h_1ac5d5050e8684027a3efb5a8e7a830be6" kindref="member">STATS_INCN</ref>(<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>-&gt;stats,<sp/>message_count,<sp/>num_msgs);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>i<sp/>=<sp/>0U;<sp/>i<sp/>&lt;<sp/>num_msgs;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msgs[i].<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/><ref refid="group__i2c__interface_1ga6c3042e882e6a817a6498b7a4e1f0a95" kindref="member">I2C_MSG_READ</ref>)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes_read<sp/>+=<sp/>msgs[i].<ref refid="structi2c__msg_1ae122c36d1fdc0829321fa116921d7a52" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msgs[i].<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/><ref refid="group__i2c__interface_1gaf622d3c4aa1c832f90fff7200bb33732" kindref="member">I2C_MSG_WRITE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes_written<sp/>+=<sp/>msgs[i].<ref refid="structi2c__msg_1ae122c36d1fdc0829321fa116921d7a52" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stats_2stats_8h_1ac5d5050e8684027a3efb5a8e7a830be6" kindref="member">STATS_INCN</ref>(<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>-&gt;stats,<sp/>bytes_read,<sp/>bytes_read);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stats_2stats_8h_1ac5d5050e8684027a3efb5a8e7a830be6" kindref="member">STATS_INCN</ref>(<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>-&gt;stats,<sp/>bytes_written,<sp/>bytes_written);</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_I2C_DEVICE_STATE_DEFINE(node_id,<sp/>dev_name)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="406"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>struct<sp/>i2c_device_state<sp/>Z_DEVICE_STATE_NAME(dev_name)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="407"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__((__section__(&quot;.z_devstate&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_I2C_INIT_FN(dev_name,<sp/>init_fn)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="416"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>int<sp/>UTIL_CAT(dev_name,<sp/>_init)(const<sp/>struct<sp/>device<sp/>*dev)<sp/>\</highlight></codeline>
<codeline lineno="417"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="418"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>i2c_device_state<sp/>*state<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="419"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONTAINER_OF(dev-&gt;state,<sp/>struct<sp/>i2c_device_state,<sp/>devstate);<sp/>\</highlight></codeline>
<codeline lineno="420"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats_init(&amp;state-&gt;stats.s_hdr,<sp/>STATS_SIZE_32,<sp/>4,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="421"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STATS_NAME_INIT_PARMS(i2c));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="422"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats_register(dev-&gt;name,<sp/>&amp;(state-&gt;stats.s_hdr));<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="423"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>init_fn(dev);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="424"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="455" refid="group__i2c__interface_1gaf550b2d134994f1f5b0249a591fac1ec" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_DEVICE_DT_DEFINE(node_id,<sp/>init_fn,<sp/>pm_device,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="456"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_ptr,<sp/>cfg_ptr,<sp/>level,<sp/>prio,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="457"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>api_ptr,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="458"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_I2C_DEVICE_STATE_DEFINE(node_id,<sp/>Z_DEVICE_DT_DEV_NAME(node_id));<sp/>\</highlight></codeline>
<codeline lineno="459"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_I2C_INIT_FN(Z_DEVICE_DT_DEV_NAME(node_id),<sp/>init_fn)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="460"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_DEVICE_DEFINE(node_id,<sp/>Z_DEVICE_DT_DEV_NAME(node_id),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="461"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEVICE_DT_NAME(node_id),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="462"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;UTIL_CAT(Z_DEVICE_DT_DEV_NAME(node_id),<sp/>_init),<sp/>\</highlight></codeline>
<codeline lineno="463"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_device,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="464"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_ptr,<sp/>cfg_ptr,<sp/>level,<sp/>prio,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="465"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>api_ptr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="466"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(Z_DEVICE_STATE_NAME(Z_DEVICE_DT_DEV_NAME(node_id)).devstate),<sp/>\</highlight></codeline>
<codeline lineno="467"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_I2C_STATS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1gab2a84398805e2be7662e9ae9cd4f9299" kindref="member">i2c_xfer_stats</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structi2c__msg" kindref="compound">i2c_msg</ref><sp/>*msgs,</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>num_msgs)</highlight></codeline>
<codeline lineno="473"><highlight class="normal">{</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_DEVICE_DT_DEFINE(node_id,<sp/>init_fn,<sp/>pm_device,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="477"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_ptr,<sp/>cfg_ptr,<sp/>level,<sp/>prio,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="478"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>api_ptr,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="479"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEVICE_DT_DEFINE(node_id,<sp/>&amp;init_fn,<sp/>pm_device,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="480"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_ptr,<sp/>cfg_ptr,<sp/>level,<sp/>prio,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="481"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>api_ptr,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_I2C_STATS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="493" refid="group__i2c__interface_1gabfd94bccb99bd1a958cd8d7902b2072a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_DEVICE_DT_INST_DEFINE(inst,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="494"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C_DEVICE_DT_DEFINE(DT_DRV_INST(inst),<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="507" refid="group__i2c__interface_1ga75326a6f38c011d35df9f3e72f2259e9" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga75326a6f38c011d35df9f3e72f2259e9" kindref="member">i2c_configure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>dev_config);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_i2c_configure(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>dev_config)</highlight></codeline>
<codeline lineno="511"><highlight class="normal">{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2c_driver_api<sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2c_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;configure(dev,<sp/>dev_config);</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="538" refid="group__i2c__interface_1ga6858e0f1a942b22964105135c334baed" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga6858e0f1a942b22964105135c334baed" kindref="member">i2c_get_config</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*dev_config);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_i2c_get_config(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*dev_config)</highlight></codeline>
<codeline lineno="541"><highlight class="normal">{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2c_driver_api<sp/>*api<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2c_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(api-&gt;get_config<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1ga43785b9969e0bd1af532dbde06c5540b" kindref="member">ENOSYS</ref>;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;get_config(dev,<sp/>dev_config);</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="578" refid="group__i2c__interface_1ga2958e6fe92ffb17851052d5c9a5c058e" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga2958e6fe92ffb17851052d5c9a5c058e" kindref="member">i2c_transfer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structi2c__msg" kindref="compound">i2c_msg</ref><sp/>*msgs,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>num_msgs,</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_i2c_transfer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structi2c__msg" kindref="compound">i2c_msg</ref><sp/>*msgs,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>num_msgs,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr)</highlight></codeline>
<codeline lineno="585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2c_driver_api<sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2c_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/><sp/>api-&gt;transfer(dev,<sp/>msgs,<sp/>num_msgs,<sp/>addr);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gab2a84398805e2be7662e9ae9cd4f9299" kindref="member">i2c_xfer_stats</ref>(dev,<sp/>msgs,<sp/>num_msgs);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="609" refid="group__i2c__interface_1ga8dce931e2dd637d811ff651062cec17b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga8dce931e2dd637d811ff651062cec17b" kindref="member">i2c_transfer_dt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref><sp/>*spec,</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structi2c__msg" kindref="compound">i2c_msg</ref><sp/>*msgs,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>num_msgs)</highlight></codeline>
<codeline lineno="611"><highlight class="normal">{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga2958e6fe92ffb17851052d5c9a5c058e" kindref="member">i2c_transfer</ref>(spec-&gt;<ref refid="structi2c__dt__spec_1a40d5c17c04910927c34eb69b173cbb85" kindref="member">bus</ref>,<sp/>msgs,<sp/>num_msgs,<sp/>spec-&gt;<ref refid="structi2c__dt__spec_1a85242ab56b1e8633b7001353990392fa" kindref="member">addr</ref>);</highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="627" refid="group__i2c__interface_1ga93117c531c39259d89ab69d52bbde85c" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga93117c531c39259d89ab69d52bbde85c" kindref="member">i2c_recover_bus</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_i2c_recover_bus(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev)</highlight></codeline>
<codeline lineno="630"><highlight class="normal">{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2c_driver_api<sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2c_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(api-&gt;recover_bus<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1ga43785b9969e0bd1af532dbde06c5540b" kindref="member">ENOSYS</ref>;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;recover_bus(dev);</highlight></codeline>
<codeline lineno="639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="665" refid="group__i2c__interface_1ga2b3b52d19b1fe12c6c693bef6f2106ce" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga2b3b52d19b1fe12c6c693bef6f2106ce" kindref="member">i2c_slave_register</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structi2c__slave__config" kindref="compound">i2c_slave_config</ref><sp/>*cfg)</highlight></codeline>
<codeline lineno="667"><highlight class="normal">{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2c_driver_api<sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2c_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(api-&gt;slave_register<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1ga43785b9969e0bd1af532dbde06c5540b" kindref="member">ENOSYS</ref>;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;slave_register(dev,<sp/>cfg);</highlight></codeline>
<codeline lineno="676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="694" refid="group__i2c__interface_1gaee67eefa3f8cb078c14ff0a3aab2527c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1gaee67eefa3f8cb078c14ff0a3aab2527c" kindref="member">i2c_slave_unregister</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structi2c__slave__config" kindref="compound">i2c_slave_config</ref><sp/>*cfg)</highlight></codeline>
<codeline lineno="696"><highlight class="normal">{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2c_driver_api<sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2c_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(api-&gt;slave_unregister<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1ga43785b9969e0bd1af532dbde06c5540b" kindref="member">ENOSYS</ref>;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;slave_unregister(dev,<sp/>cfg);</highlight></codeline>
<codeline lineno="705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="720" refid="group__i2c__interface_1gab8f2b9e19ceb0ebc15fdd8fc2bf304a1" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1gab8f2b9e19ceb0ebc15fdd8fc2bf304a1" kindref="member">i2c_slave_driver_register</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_i2c_slave_driver_register(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev)</highlight></codeline>
<codeline lineno="723"><highlight class="normal">{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2c_slave_driver_api<sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2c_slave_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;driver_register(dev);</highlight></codeline>
<codeline lineno="728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="743" refid="group__i2c__interface_1ga5fce9f78a267f638b111c19cac242278" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga5fce9f78a267f638b111c19cac242278" kindref="member">i2c_slave_driver_unregister</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_i2c_slave_driver_unregister(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev)</highlight></codeline>
<codeline lineno="746"><highlight class="normal">{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2c_slave_driver_api<sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2c_slave_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;driver_unregister(dev);</highlight></codeline>
<codeline lineno="751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/>*<sp/>Derived<sp/>i2c<sp/>APIs<sp/>--<sp/>all<sp/>implemented<sp/>in<sp/>terms<sp/>of<sp/>i2c_transfer()</highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="771" refid="group__i2c__interface_1ga2cc5f49493dce89e128ccbfa9d6149a0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga2cc5f49493dce89e128ccbfa9d6149a0" kindref="member">i2c_write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*buf,</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>num_bytes,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr)</highlight></codeline>
<codeline lineno="773"><highlight class="normal">{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2c__msg" kindref="compound">i2c_msg</ref><sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>.buf<sp/>=<sp/>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*)<ref refid="structi2c__msg_1ac4aa590487270589a51964b38f853a37" kindref="member">buf</ref>;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>.len<sp/>=<sp/>num_bytes;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>.flags<sp/>=<sp/><ref refid="group__i2c__interface_1gaf622d3c4aa1c832f90fff7200bb33732" kindref="member">I2C_MSG_WRITE</ref><sp/>|<sp/><ref refid="group__i2c__interface_1gaad55262ad277ee60b786372c71f217aa" kindref="member">I2C_MSG_STOP</ref>;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga2958e6fe92ffb17851052d5c9a5c058e" kindref="member">i2c_transfer</ref>(dev,<sp/>&amp;<ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>,<sp/>1,<sp/>addr);</highlight></codeline>
<codeline lineno="781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="796" refid="group__i2c__interface_1ga2d17b714ba6ebe47d7bdfcb1cf97e44f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga2d17b714ba6ebe47d7bdfcb1cf97e44f" kindref="member">i2c_write_dt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref><sp/>*spec,</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="structi2c__msg_1ac4aa590487270589a51964b38f853a37" kindref="member">buf</ref>,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>num_bytes)</highlight></codeline>
<codeline lineno="798"><highlight class="normal">{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga2cc5f49493dce89e128ccbfa9d6149a0" kindref="member">i2c_write</ref>(spec-&gt;<ref refid="structi2c__dt__spec_1a40d5c17c04910927c34eb69b173cbb85" kindref="member">bus</ref>,<sp/><ref refid="structi2c__msg_1ac4aa590487270589a51964b38f853a37" kindref="member">buf</ref>,<sp/>num_bytes,<sp/>spec-&gt;<ref refid="structi2c__dt__spec_1a85242ab56b1e8633b7001353990392fa" kindref="member">addr</ref>);</highlight></codeline>
<codeline lineno="800"><highlight class="normal">}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="816" refid="group__i2c__interface_1ga935d1fdcbf9a40c9a673aa8977048ee7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga935d1fdcbf9a40c9a673aa8977048ee7" kindref="member">i2c_read</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="structi2c__msg_1ac4aa590487270589a51964b38f853a37" kindref="member">buf</ref>,</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>num_bytes,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr)</highlight></codeline>
<codeline lineno="818"><highlight class="normal">{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2c__msg" kindref="compound">i2c_msg</ref><sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>.buf<sp/>=<sp/><ref refid="structi2c__msg_1ac4aa590487270589a51964b38f853a37" kindref="member">buf</ref>;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>.len<sp/>=<sp/>num_bytes;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>.flags<sp/>=<sp/><ref refid="group__i2c__interface_1ga6c3042e882e6a817a6498b7a4e1f0a95" kindref="member">I2C_MSG_READ</ref><sp/>|<sp/><ref refid="group__i2c__interface_1gaad55262ad277ee60b786372c71f217aa" kindref="member">I2C_MSG_STOP</ref>;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga2958e6fe92ffb17851052d5c9a5c058e" kindref="member">i2c_transfer</ref>(dev,<sp/>&amp;<ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>,<sp/>1,<sp/>addr);</highlight></codeline>
<codeline lineno="826"><highlight class="normal">}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="841" refid="group__i2c__interface_1ga5cf80d20dca0d5f1d16e16c151f57ef6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga5cf80d20dca0d5f1d16e16c151f57ef6" kindref="member">i2c_read_dt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref><sp/>*spec,</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="structi2c__msg_1ac4aa590487270589a51964b38f853a37" kindref="member">buf</ref>,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>num_bytes)</highlight></codeline>
<codeline lineno="843"><highlight class="normal">{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga935d1fdcbf9a40c9a673aa8977048ee7" kindref="member">i2c_read</ref>(spec-&gt;<ref refid="structi2c__dt__spec_1a40d5c17c04910927c34eb69b173cbb85" kindref="member">bus</ref>,<sp/><ref refid="structi2c__msg_1ac4aa590487270589a51964b38f853a37" kindref="member">buf</ref>,<sp/>num_bytes,<sp/>spec-&gt;<ref refid="structi2c__dt__spec_1a85242ab56b1e8633b7001353990392fa" kindref="member">addr</ref>);</highlight></codeline>
<codeline lineno="845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="865" refid="group__i2c__interface_1ga1273a9f8bdb002e0d6ece3a8c893a709" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga1273a9f8bdb002e0d6ece3a8c893a709" kindref="member">i2c_write_read</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*write_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_write,</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*read_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_read)</highlight></codeline>
<codeline lineno="868"><highlight class="normal">{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2c__msg" kindref="compound">i2c_msg</ref><sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>[2];</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>[0].buf<sp/>=<sp/>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*)write_buf;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>[0].len<sp/>=<sp/>num_write;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>[0].flags<sp/>=<sp/><ref refid="group__i2c__interface_1gaf622d3c4aa1c832f90fff7200bb33732" kindref="member">I2C_MSG_WRITE</ref>;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>[1].buf<sp/>=<sp/>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*)read_buf;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>[1].len<sp/>=<sp/>num_read;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>[1].flags<sp/>=<sp/><ref refid="group__i2c__interface_1ga8c6cf7be2a04979fdb9d0b7dd9c4f831" kindref="member">I2C_MSG_RESTART</ref><sp/>|<sp/><ref refid="group__i2c__interface_1ga6c3042e882e6a817a6498b7a4e1f0a95" kindref="member">I2C_MSG_READ</ref><sp/>|<sp/><ref refid="group__i2c__interface_1gaad55262ad277ee60b786372c71f217aa" kindref="member">I2C_MSG_STOP</ref>;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga2958e6fe92ffb17851052d5c9a5c058e" kindref="member">i2c_transfer</ref>(dev,<sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>,<sp/>2,<sp/>addr);</highlight></codeline>
<codeline lineno="880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="899" refid="group__i2c__interface_1ga301733586dcc2a353bdf149b49df5758" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga301733586dcc2a353bdf149b49df5758" kindref="member">i2c_write_read_dt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref><sp/>*spec,</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*write_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_write,</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*read_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_read)</highlight></codeline>
<codeline lineno="902"><highlight class="normal">{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga1273a9f8bdb002e0d6ece3a8c893a709" kindref="member">i2c_write_read</ref>(spec-&gt;<ref refid="structi2c__dt__spec_1a40d5c17c04910927c34eb69b173cbb85" kindref="member">bus</ref>,<sp/>spec-&gt;<ref refid="structi2c__dt__spec_1a85242ab56b1e8633b7001353990392fa" kindref="member">addr</ref>,</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_buf,<sp/>num_write,</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_buf,<sp/>num_read);</highlight></codeline>
<codeline lineno="906"><highlight class="normal">}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="926" refid="group__i2c__interface_1ga4bbb79898f53d0a2fad1bd302369ae9e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga4bbb79898f53d0a2fad1bd302369ae9e" kindref="member">i2c_burst_read</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>dev_addr,</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>start_addr,</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="structi2c__msg_1ac4aa590487270589a51964b38f853a37" kindref="member">buf</ref>,</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>num_bytes)</highlight></codeline>
<codeline lineno="931"><highlight class="normal">{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga1273a9f8bdb002e0d6ece3a8c893a709" kindref="member">i2c_write_read</ref>(dev,<sp/>dev_addr,</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;start_addr,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(start_addr),</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structi2c__msg_1ac4aa590487270589a51964b38f853a37" kindref="member">buf</ref>,<sp/>num_bytes);</highlight></codeline>
<codeline lineno="935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="951" refid="group__i2c__interface_1ga9d2654bbf80f4d253532adaec8566fc3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga9d2654bbf80f4d253532adaec8566fc3" kindref="member">i2c_burst_read_dt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref><sp/>*spec,</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>start_addr,</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="structi2c__msg_1ac4aa590487270589a51964b38f853a37" kindref="member">buf</ref>,</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>num_bytes)</highlight></codeline>
<codeline lineno="955"><highlight class="normal">{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga4bbb79898f53d0a2fad1bd302369ae9e" kindref="member">i2c_burst_read</ref>(spec-&gt;<ref refid="structi2c__dt__spec_1a40d5c17c04910927c34eb69b173cbb85" kindref="member">bus</ref>,<sp/>spec-&gt;<ref refid="structi2c__dt__spec_1a85242ab56b1e8633b7001353990392fa" kindref="member">addr</ref>,</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_addr,<sp/><ref refid="structi2c__msg_1ac4aa590487270589a51964b38f853a37" kindref="member">buf</ref>,<sp/>num_bytes);</highlight></codeline>
<codeline lineno="958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="981" refid="group__i2c__interface_1gaf995812f31e7bf1ea7f203905db13822" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1gaf995812f31e7bf1ea7f203905db13822" kindref="member">i2c_burst_write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>dev_addr,</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>start_addr,</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="structi2c__msg_1ac4aa590487270589a51964b38f853a37" kindref="member">buf</ref>,</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>num_bytes)</highlight></codeline>
<codeline lineno="986"><highlight class="normal">{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2c__msg" kindref="compound">i2c_msg</ref><sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>[2];</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>[0].buf<sp/>=<sp/>&amp;start_addr;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>[0].len<sp/>=<sp/>1U;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>[0].flags<sp/>=<sp/><ref refid="group__i2c__interface_1gaf622d3c4aa1c832f90fff7200bb33732" kindref="member">I2C_MSG_WRITE</ref>;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>[1].buf<sp/>=<sp/>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*)<ref refid="structi2c__msg_1ac4aa590487270589a51964b38f853a37" kindref="member">buf</ref>;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>[1].len<sp/>=<sp/>num_bytes;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>[1].flags<sp/>=<sp/><ref refid="group__i2c__interface_1gaf622d3c4aa1c832f90fff7200bb33732" kindref="member">I2C_MSG_WRITE</ref><sp/>|<sp/><ref refid="group__i2c__interface_1gaad55262ad277ee60b786372c71f217aa" kindref="member">I2C_MSG_STOP</ref>;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga2958e6fe92ffb17851052d5c9a5c058e" kindref="member">i2c_transfer</ref>(dev,<sp/><ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>,<sp/>2,<sp/>dev_addr);</highlight></codeline>
<codeline lineno="998"><highlight class="normal">}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014" refid="group__i2c__interface_1ga0e590c99d3b9c1a7dd8174a318ee5a7d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga0e590c99d3b9c1a7dd8174a318ee5a7d" kindref="member">i2c_burst_write_dt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref><sp/>*spec,</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>start_addr,</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="structi2c__msg_1ac4aa590487270589a51964b38f853a37" kindref="member">buf</ref>,</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>num_bytes)</highlight></codeline>
<codeline lineno="1018"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1gaf995812f31e7bf1ea7f203905db13822" kindref="member">i2c_burst_write</ref>(spec-&gt;<ref refid="structi2c__dt__spec_1a40d5c17c04910927c34eb69b173cbb85" kindref="member">bus</ref>,<sp/>spec-&gt;<ref refid="structi2c__dt__spec_1a85242ab56b1e8633b7001353990392fa" kindref="member">addr</ref>,</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_addr,<sp/><ref refid="structi2c__msg_1ac4aa590487270589a51964b38f853a37" kindref="member">buf</ref>,<sp/>num_bytes);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038" refid="group__i2c__interface_1gaf8d1722ff4ebe97122293aef6ccf332a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1gaf8d1722ff4ebe97122293aef6ccf332a" kindref="member">i2c_reg_read_byte</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>dev_addr,</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>reg_addr,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*value)</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga1273a9f8bdb002e0d6ece3a8c893a709" kindref="member">i2c_write_read</ref>(dev,<sp/>dev_addr,</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;reg_addr,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(reg_addr),</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*value));</highlight></codeline>
<codeline lineno="1045"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060" refid="group__i2c__interface_1ga6fc14d75c41b8c8d9dd2f77c59533640" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga6fc14d75c41b8c8d9dd2f77c59533640" kindref="member">i2c_reg_read_byte_dt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref><sp/>*spec,</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>reg_addr,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*value)</highlight></codeline>
<codeline lineno="1062"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1gaf8d1722ff4ebe97122293aef6ccf332a" kindref="member">i2c_reg_read_byte</ref>(spec-&gt;<ref refid="structi2c__dt__spec_1a40d5c17c04910927c34eb69b173cbb85" kindref="member">bus</ref>,<sp/>spec-&gt;<ref refid="structi2c__dt__spec_1a85242ab56b1e8633b7001353990392fa" kindref="member">addr</ref>,<sp/>reg_addr,<sp/>value);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084" refid="group__i2c__interface_1ga687a0da74c22b299b66db8198c6fdcb1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga687a0da74c22b299b66db8198c6fdcb1" kindref="member">i2c_reg_write_byte</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>dev_addr,</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>reg_addr,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>value)</highlight></codeline>
<codeline lineno="1087"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>tx_buf[2]<sp/>=<sp/>{reg_addr,<sp/>value};</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga2cc5f49493dce89e128ccbfa9d6149a0" kindref="member">i2c_write</ref>(dev,<sp/>tx_buf,<sp/>2,<sp/>dev_addr);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106" refid="group__i2c__interface_1ga664cd76bf4fae0dba848f5c284699a04" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga664cd76bf4fae0dba848f5c284699a04" kindref="member">i2c_reg_write_byte_dt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref><sp/>*spec,</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>reg_addr,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>value)</highlight></codeline>
<codeline lineno="1108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga687a0da74c22b299b66db8198c6fdcb1" kindref="member">i2c_reg_write_byte</ref>(spec-&gt;<ref refid="structi2c__dt__spec_1a40d5c17c04910927c34eb69b173cbb85" kindref="member">bus</ref>,<sp/>spec-&gt;<ref refid="structi2c__dt__spec_1a85242ab56b1e8633b7001353990392fa" kindref="member">addr</ref>,<sp/>reg_addr,<sp/>value);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131" refid="group__i2c__interface_1gad07710d37bf6bd4fa6ccfe62be625eb4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1gad07710d37bf6bd4fa6ccfe62be625eb4" kindref="member">i2c_reg_update_byte</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>dev_addr,</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>reg_addr,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>mask,</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>value)</highlight></codeline>
<codeline lineno="1135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>old_value,<sp/>new_value;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/><ref refid="group__i2c__interface_1gaf8d1722ff4ebe97122293aef6ccf332a" kindref="member">i2c_reg_read_byte</ref>(dev,<sp/>dev_addr,<sp/>reg_addr,<sp/>&amp;old_value);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_value<sp/>=<sp/>(old_value<sp/>&amp;<sp/>~mask)<sp/>|<sp/>(value<sp/>&amp;<sp/>mask);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_value<sp/>==<sp/>old_value)<sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga687a0da74c22b299b66db8198c6fdcb1" kindref="member">i2c_reg_write_byte</ref>(dev,<sp/>dev_addr,<sp/>reg_addr,<sp/>new_value);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166" refid="group__i2c__interface_1ga5000c5e49eabe712b5fd532d3842c3f5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga5000c5e49eabe712b5fd532d3842c3f5" kindref="member">i2c_reg_update_byte_dt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref><sp/>*spec,</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>reg_addr,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>mask,</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>value)</highlight></codeline>
<codeline lineno="1169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1gad07710d37bf6bd4fa6ccfe62be625eb4" kindref="member">i2c_reg_update_byte</ref>(spec-&gt;<ref refid="structi2c__dt__spec_1a40d5c17c04910927c34eb69b173cbb85" kindref="member">bus</ref>,<sp/>spec-&gt;<ref refid="structi2c__dt__spec_1a85242ab56b1e8633b7001353990392fa" kindref="member">addr</ref>,</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_addr,<sp/>mask,<sp/>value);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196" refid="group__i2c__interface_1ga685640115771a60564ae1c53c3308c5c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ga685640115771a60564ae1c53c3308c5c" kindref="member">i2c_dump_msgs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structi2c__msg" kindref="compound">i2c_msg</ref><sp/>*msgs,</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>num_msgs,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199" refid="structi2c__client__config" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2c__client__config" kindref="compound">i2c_client_config</ref><sp/>{</highlight></codeline>
<codeline lineno="1200" refid="structi2c__client__config_1ae17174a45e8cb447fbd0c44cc7698fc4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structi2c__client__config_1ae17174a45e8cb447fbd0c44cc7698fc4" kindref="member">i2c_master</ref>;</highlight></codeline>
<codeline lineno="1201" refid="structi2c__client__config_1ac6f718c7bf06e41a29c8014e0377b144" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structi2c__client__config_1ac6f718c7bf06e41a29c8014e0377b144" kindref="member">i2c_addr</ref>;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204" refid="group__i2c__interface_1ga1ea3a529bda7d896262c97bf305641ac" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_DECLARE_CLIENT_CONFIG<sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>i2c_client_config<sp/>i2c_client</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206" refid="group__i2c__interface_1ga29d683222a96276b7aee09ddab034af7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_CLIENT(_master,<sp/>_addr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_client<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1208"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_master<sp/>=<sp/>(_master),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1209"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_addr<sp/>=<sp/>(_addr),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212" refid="group__i2c__interface_1ga2b42e3f282659da16ae5a8a6e569e8d9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_GET_MASTER(_conf)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((_conf)-&gt;i2c_client.i2c_master)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213" refid="group__i2c__interface_1gae26008d851b43232e04b32b1eb1c0dba" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_GET_ADDR(_conf)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((_conf)-&gt;i2c_client.i2c_addr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;syscalls/i2c.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_DRIVERS_I2C_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/drivers/i2c.h"/>
  </compounddef>
</doxygen>
