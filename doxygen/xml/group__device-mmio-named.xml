<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__device-mmio-named" kind="group">
    <compoundname>device-mmio-named</compoundname>
    <title>Named MMIO region macros</title>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__device-mmio-named_1ga92b6570b0f7bd370bbdfbc4e474151e4" prot="public" static="no">
        <name>DEVICE_MMIO_NAMED_RAM</name>
        <param><defname>name</defname></param>
        <initializer><ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref> name</initializer>
        <briefdescription>
<para>Declare storage for MMIO data within a device&apos;s dev_data struct. </para>
        </briefdescription>
        <detaileddescription>
<para>This gets accessed by the <ref refid="group__device-mmio-named_1ga1059bb0020656ce6597e29c7dd6680c1" kindref="member">DEVICE_MMIO_NAMED_MAP()</ref> and <ref refid="group__device-mmio-named_1ga5ca4b0cf0637f475b5da3b1ec0a7c995" kindref="member">DEVICE_MMIO_NAMED_GET()</ref> macros.</para>
<para>Depending on configuration, no memory may be reserved at all. Multiple named regions may be declared.</para>
<para>There must be a corresponding DEVICE_MMIO_ROM in config if the physical address is known at build time, but may be omitted if not (such as with PCIe.</para>
<para>Example for a driver named &quot;foo&quot;:</para>
<para>struct foo_driver_data { int blarg; <ref refid="group__device-mmio-named_1ga92b6570b0f7bd370bbdfbc4e474151e4" kindref="member">DEVICE_MMIO_NAMED_RAM(corge)</ref>; <ref refid="group__device-mmio-named_1ga92b6570b0f7bd370bbdfbc4e474151e4" kindref="member">DEVICE_MMIO_NAMED_RAM(grault)</ref>; int wibble; ... }</para>
<para>No build-time initialization of this memory is necessary; it will be set up in the init function by <ref refid="group__device-mmio-named_1ga1059bb0020656ce6597e29c7dd6680c1" kindref="member">DEVICE_MMIO_NAMED_MAP()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Member name to use to store within dev_data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="338" column="9" bodyfile="include/sys/device_mmio.h" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-named_1ga42737f178f205bd90d4e523ae5d67a09" prot="public" static="no">
        <name>DEVICE_MMIO_NAMED_RAM_PTR</name>
        <param><defname>dev</defname></param>
        <param><defname>name</defname></param>
        <initializer>		(&amp;(<ref refid="mmio_8c_1aa90b045b0cf3a7fe70c69ba16eb135cc" kindref="member">DEV_DATA</ref>(dev)-&gt;name))</initializer>
        <briefdescription>
<para>Return a pointer to the RAM storage for a device&apos;s named MMIO address. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro requires that the macro DEV_DATA is locally defined and returns a properly typed pointer to the particular dev_data struct for this driver.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>device instance object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Member name within dev_data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>mm_reg_t</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to storage location </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="356" column="9" bodyfile="include/sys/device_mmio.h" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-named_1gae3ad012160f657451a3f47487510bffb" prot="public" static="no">
        <name>DEVICE_MMIO_NAMED_ROM</name>
        <param><defname>name</defname></param>
        <initializer>struct z_device_mmio_rom name</initializer>
        <briefdescription>
<para>Declare storage for MMIO data within a device&apos;s config struct. </para>
        </briefdescription>
        <detaileddescription>
<para>This gets accessed by <ref refid="group__device-mmio-named_1ga1059bb0020656ce6597e29c7dd6680c1" kindref="member">DEVICE_MMIO_NAMED_MAP()</ref> and <ref refid="group__device-mmio-named_1ga5ca4b0cf0637f475b5da3b1ec0a7c995" kindref="member">DEVICE_MMIO_NAMED_GET()</ref> macros.</para>
<para>What gets stored here varies considerably by configuration. Multiple named regions may be declared. There must be corresponding entries in the dev_data struct.</para>
<para>This storage is not used if the device is PCIe and may be omitted.</para>
<para>If used, this must be initialized at build time with information from DTS using <ref refid="group__device-mmio-named_1ga727a1946d2a315af720706a9c9e80465" kindref="member">DEVICE_MMIO_NAMED_ROM_INIT()</ref></para>
<para>A pointer to this memory may be obtained with <ref refid="group__device-mmio-named_1ga7f018db0d820b72a782759a4b674de94" kindref="member">DEVICE_MMIO_NAMED_ROM_PTR()</ref>.</para>
<para>Example for a driver named &quot;foo&quot;:</para>
<para>struct foo_config { int bar; <ref refid="group__device-mmio-named_1gae3ad012160f657451a3f47487510bffb" kindref="member">DEVICE_MMIO_NAMED_ROM(corge)</ref>; <ref refid="group__device-mmio-named_1gae3ad012160f657451a3f47487510bffb" kindref="member">DEVICE_MMIO_NAMED_ROM(grault)</ref>; int baz; ... }</para>
<para><simplesect kind="see"><para><ref refid="group__device-mmio-named_1ga727a1946d2a315af720706a9c9e80465" kindref="member">DEVICE_MMIO_NAMED_ROM_INIT()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Member name to store within config </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="393" column="9" bodyfile="include/sys/device_mmio.h" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-named_1ga7f018db0d820b72a782759a4b674de94" prot="public" static="no">
        <name>DEVICE_MMIO_NAMED_ROM_PTR</name>
        <param><defname>dev</defname></param>
        <param><defname>name</defname></param>
        <initializer>(&amp;(<ref refid="mmio_8c_1ab5c3864067257693d9bef98c3fe8fc2b" kindref="member">DEV_CFG</ref>(dev)-&gt;name))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a pointer to the ROM-based storage area for a device&apos;s MMIO information.</para>
<para>This macro requires that the macro DEV_CFG is locally defined and returns a properly typed pointer to the particular config struct for this driver.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>device instance object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Member name within config </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>struct</parametername>
</parameternamelist>
<parameterdescription>
<para>device_mmio_rom * pointer to storage location </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="409" column="9" bodyfile="include/sys/device_mmio.h" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-named_1ga727a1946d2a315af720706a9c9e80465" prot="public" static="no">
        <name>DEVICE_MMIO_NAMED_ROM_INIT</name>
        <param><defname>name</defname></param>
        <param><defname>node_id</defname></param>
        <initializer>	.name = Z_DEVICE_MMIO_ROM_INITIALIZER(node_id)</initializer>
        <briefdescription>
<para>Initialize a named DEVICE_MMIO_NAMED_ROM member. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize MMIO-related information within a specific instance of a device config struct, using information from DTS.</para>
<para>Example for an instance of a driver belonging to the &quot;foo&quot; subsystem that will have two regions named &apos;corge&apos; and &apos;grault&apos;:</para>
<para>struct foo_config my_config = { bar = 7; <ref refid="group__device-mmio-named_1ga727a1946d2a315af720706a9c9e80465" kindref="member">DEVICE_MMIO_NAMED_ROM_INIT(corge, DT_DRV_INST(...))</ref>; <ref refid="group__device-mmio-named_1ga727a1946d2a315af720706a9c9e80465" kindref="member">DEVICE_MMIO_NAMED_ROM_INIT(grault, DT_DRV_INST(...))</ref>; baz = 2; ... }</para>
<para><simplesect kind="see"><para><ref refid="group__device-mmio-named_1gae3ad012160f657451a3f47487510bffb" kindref="member">DEVICE_MMIO_NAMED_ROM()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Member name within config for the MMIO region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>DTS node identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="435" column="9" bodyfile="include/sys/device_mmio.h" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-named_1ga1059bb0020656ce6597e29c7dd6680c1" prot="public" static="no">
        <name>DEVICE_MMIO_NAMED_MAP</name>
        <param><defname>dev</defname></param>
        <param><defname>name</defname></param>
        <param><defname>flags</defname></param>
        <initializer>	<ref refid="group__device-mmio_1ga6b4a9841a5176104e1b63f7475d3d2a2" kindref="member">device_map</ref>(<ref refid="group__device-mmio-named_1ga42737f178f205bd90d4e523ae5d67a09" kindref="member">DEVICE_MMIO_NAMED_RAM_PTR</ref>((dev), name), \
		   (<ref refid="group__device-mmio-named_1ga7f018db0d820b72a782759a4b674de94" kindref="member">DEVICE_MMIO_NAMED_ROM_PTR</ref>((dev), name)-&gt;phys_addr), \
		   (<ref refid="group__device-mmio-named_1ga7f018db0d820b72a782759a4b674de94" kindref="member">DEVICE_MMIO_NAMED_ROM_PTR</ref>((dev), name)-&gt;size), \
		   (<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>))</initializer>
        <briefdescription>
<para>Set up memory for a named MMIO region. </para>
        </briefdescription>
        <detaileddescription>
<para>This performs the necessary PCI probing and/or MMU virtual memory mapping such that <ref refid="group__device-mmio-single_1ga8cb49d87ef6dc3b017d5b68860530b63" kindref="member">DEVICE_MMIO_GET(name)</ref> returns a suitable linear memory address for the MMIO region.</para>
<para>If such operations are not required by the target hardware, this expands to nothing.</para>
<para>This should be called from the driver&apos;s init function, once for each MMIO region that needs to be mapped.</para>
<para>This macro requires that the macros DEV_DATA and DEV_CFG are locally defined and return properly typed pointers to the particular dev_data and config structs for this driver.</para>
<para>The flags argument is currently used for caching mode, which should be one of the DEVICE_CACHE_* macros. Unused bits are reserved for future expansion.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Member name for MMIO information, as declared with DEVICE_MMIO_NAMED_RAM/DEVICE_MMIO_NAMED_ROM </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the DEVICE_CACHE_* caching modes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="467" column="9" bodyfile="include/sys/device_mmio.h" bodystart="467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-named_1ga5ca4b0cf0637f475b5da3b1ec0a7c995" prot="public" static="no">
        <name>DEVICE_MMIO_NAMED_GET</name>
        <param><defname>dev</defname></param>
        <param><defname>name</defname></param>
        <initializer>		(*<ref refid="group__device-mmio-named_1ga42737f178f205bd90d4e523ae5d67a09" kindref="member">DEVICE_MMIO_NAMED_RAM_PTR</ref>((dev), name))</initializer>
        <briefdescription>
<para>Obtain a named MMIO address for a device. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro returns the MMIO base address for a named region from the appropriate place within the device object&apos;s linked data structures.</para>
<para>This is for drivers which have multiple MMIO regions.</para>
<para>This macro requires that the macros DEV_DATA and DEV_CFG are locally defined and return properly typed pointers to the particular dev_data and config structs for this driver.</para>
<para><simplesect kind="see"><para><ref refid="group__device-mmio-single_1ga8cb49d87ef6dc3b017d5b68860530b63" kindref="member">DEVICE_MMIO_GET</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Member name for MMIO information, as declared with DEVICE_MMIO_NAMED_RAM/DEVICE_MMIO_NAMED_ROM </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>mm_reg_t linear address of the MMIO region </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="498" column="9" bodyfile="include/sys/device_mmio.h" bodystart="498" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>For drivers which need to manage multiple MMIO regions, which will be referenced by name. </para>
    </detaileddescription>
  </compounddef>
</doxygen>
