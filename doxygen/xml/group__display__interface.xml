<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__display__interface" kind="group">
    <compoundname>display_interface</compoundname>
    <title>Display Interface</title>
    <innerclass refid="structdisplay__capabilities" prot="public">display_capabilities</innerclass>
    <innerclass refid="structdisplay__buffer__descriptor" prot="public">display_buffer_descriptor</innerclass>
    <innerclass refid="structdisplay__driver__api" prot="public">display_driver_api</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__display__interface_1gac346bc56771052a8fe919c3ec23d7c9c" prot="public" static="no" strong="no">
        <type></type>
        <name>display_pixel_format</name>
        <enumvalue id="group__display__interface_1ggac346bc56771052a8fe919c3ec23d7c9cac99044ebc0258de7ab8f4ef46edeb44a" prot="public">
          <name>PIXEL_FORMAT_RGB_888</name>
          <initializer>= BIT(0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__display__interface_1ggac346bc56771052a8fe919c3ec23d7c9cabb19ccb2fad2d8f809819dd0a94b1d9c" prot="public">
          <name>PIXEL_FORMAT_MONO01</name>
          <initializer>= BIT(1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__display__interface_1ggac346bc56771052a8fe919c3ec23d7c9ca4ab51591eb10fe72365f703d70bc7b6c" prot="public">
          <name>PIXEL_FORMAT_MONO10</name>
          <initializer>= BIT(2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__display__interface_1ggac346bc56771052a8fe919c3ec23d7c9ca90eeb0d7507e2872774d0026eb100ee9" prot="public">
          <name>PIXEL_FORMAT_ARGB_8888</name>
          <initializer>= BIT(3)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__display__interface_1ggac346bc56771052a8fe919c3ec23d7c9cac0ae1813354b024a4806f5012c5c4e16" prot="public">
          <name>PIXEL_FORMAT_RGB_565</name>
          <initializer>= BIT(4)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__display__interface_1ggac346bc56771052a8fe919c3ec23d7c9cae9fdd617aaf49148d4c4cb5d47189289" prot="public">
          <name>PIXEL_FORMAT_BGR_565</name>
          <initializer>= BIT(5)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Display pixel formats. </para>
        </briefdescription>
        <detaileddescription>
<para>Display pixel format enumeration.</para>
<para>In case a pixel format consists out of multiple bytes the byte order is big endian. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="38" column="1" bodyfile="include/drivers/display.h" bodystart="38" bodyend="45"/>
      </memberdef>
      <memberdef kind="enum" id="group__display__interface_1ga23030b6c27446c4579103fe38e821341" prot="public" static="no" strong="no">
        <type></type>
        <name>display_screen_info</name>
        <enumvalue id="group__display__interface_1gga23030b6c27446c4579103fe38e821341ade1ec91a372b3b2208ebf5729184b804" prot="public">
          <name>SCREEN_INFO_MONO_VTILED</name>
          <initializer>= BIT(0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>If selected, one octet represents 8 pixels ordered vertically, otherwise ordered horizontally. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__display__interface_1gga23030b6c27446c4579103fe38e821341ade5bb2006e547450bac0edaa2a8b9c7d" prot="public">
          <name>SCREEN_INFO_MONO_MSB_FIRST</name>
          <initializer>= BIT(1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>If selected, the MSB represents the first pixel, otherwise MSB represents the last pixel. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__display__interface_1gga23030b6c27446c4579103fe38e821341ac65e80206de09cb63e871ce18deefb85" prot="public">
          <name>SCREEN_INFO_EPD</name>
          <initializer>= BIT(2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Electrophoretic Display. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__display__interface_1gga23030b6c27446c4579103fe38e821341ad22c69026d0b4573aaebe0b3ef274842" prot="public">
          <name>SCREEN_INFO_DOUBLE_BUFFER</name>
          <initializer>= BIT(3)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Screen has two alternating ram buffers </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__display__interface_1gga23030b6c27446c4579103fe38e821341a1c51db66639919571af38bbc91eb28c1" prot="public">
          <name>SCREEN_INFO_X_ALIGNMENT_WIDTH</name>
          <initializer>= BIT(4)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Screen has x alignment constrained to width. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="47" column="1" bodyfile="include/drivers/display.h" bodystart="47" bodyend="70"/>
      </memberdef>
      <memberdef kind="enum" id="group__display__interface_1gac59b091a3ed39431ab97a5f19fdc4855" prot="public" static="no" strong="no">
        <type></type>
        <name>display_orientation</name>
        <enumvalue id="group__display__interface_1ggac59b091a3ed39431ab97a5f19fdc4855adb3975e2caf6c28374e20a5e0ac26ed2" prot="public">
          <name>DISPLAY_ORIENTATION_NORMAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__display__interface_1ggac59b091a3ed39431ab97a5f19fdc4855a632483591b572c0945df3f65cb4e52bc" prot="public">
          <name>DISPLAY_ORIENTATION_ROTATED_90</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__display__interface_1ggac59b091a3ed39431ab97a5f19fdc4855a7f71ba80f09d5b17f7cdfa7456ed0e29" prot="public">
          <name>DISPLAY_ORIENTATION_ROTATED_180</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__display__interface_1ggac59b091a3ed39431ab97a5f19fdc4855af81128a85915f41c22bc0581f51455b4" prot="public">
          <name>DISPLAY_ORIENTATION_ROTATED_270</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration with possible display orientation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="77" column="1" bodyfile="include/drivers/display.h" bodystart="77" bodyend="82"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__display__interface_1gacf5d3b83962fce0d9b9be1e0cf9e1920" prot="public" static="no">
        <type>int(*</type>
        <definition>display_blanking_on_api</definition>
        <argsstring>)(const struct device *dev)</argsstring>
        <name>display_blanking_on_api</name>
        <briefdescription>
<para>Callback API to turn on display blanking See <ref refid="group__display__interface_1gac6ad1f33067165e4c3bf7c0c345bb4e4" kindref="member">display_blanking_on()</ref> for argument description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="117" column="9" bodyfile="include/drivers/display.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__display__interface_1ga0683a54a4d65a4d76b347927c2192d8b" prot="public" static="no">
        <type>int(*</type>
        <definition>display_blanking_off_api</definition>
        <argsstring>)(const struct device *dev)</argsstring>
        <name>display_blanking_off_api</name>
        <briefdescription>
<para>Callback API to turn off display blanking See <ref refid="group__display__interface_1ga4d9e288891a6bde679c3aa00b9913e1d" kindref="member">display_blanking_off()</ref> for argument description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="124" column="9" bodyfile="include/drivers/display.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__display__interface_1gae933cb491a1f6bb6198e40a2cd9152ac" prot="public" static="no">
        <type>int(*</type>
        <definition>display_write_api</definition>
        <argsstring>)(const struct device *dev, const uint16_t x, const uint16_t y, const struct display_buffer_descriptor *desc, const void *buf)</argsstring>
        <name>display_write_api</name>
        <briefdescription>
<para>Callback API for writing data to the display See <ref refid="group__display__interface_1ga3a5114b4537039fc4d3258678b82cd18" kindref="member">display_write()</ref> for argument description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="131" column="9" bodyfile="include/drivers/display.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__display__interface_1gab901e84f47c6ac79997e519b0b86a9bd" prot="public" static="no">
        <type>int(*</type>
        <definition>display_read_api</definition>
        <argsstring>)(const struct device *dev, const uint16_t x, const uint16_t y, const struct display_buffer_descriptor *desc, void *buf)</argsstring>
        <name>display_read_api</name>
        <briefdescription>
<para>Callback API for reading data from the display See <ref refid="group__display__interface_1ga3f497776520b0eac16b8aea80ccbbcfc" kindref="member">display_read()</ref> for argument description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="141" column="9" bodyfile="include/drivers/display.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__display__interface_1gae3508b6854c60aa5edbecd718bb4d903" prot="public" static="no">
        <type>void *(*</type>
        <definition>display_get_framebuffer_api</definition>
        <argsstring>)(const struct device *dev)</argsstring>
        <name>display_get_framebuffer_api</name>
        <briefdescription>
<para>Callback API to get framebuffer pointer See <ref refid="group__display__interface_1ga4b66d380e46909caaa7317857f84a9e8" kindref="member">display_get_framebuffer()</ref> for argument description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="151" column="9" bodyfile="include/drivers/display.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__display__interface_1gaa43303c973344ba935439bb62fcc23b8" prot="public" static="no">
        <type>int(*</type>
        <definition>display_set_brightness_api</definition>
        <argsstring>)(const struct device *dev, const uint8_t brightness)</argsstring>
        <name>display_set_brightness_api</name>
        <briefdescription>
<para>Callback API to set display brightness See <ref refid="group__display__interface_1gad5cdeb245d17c8d680a5843b3cce1f8c" kindref="member">display_set_brightness()</ref> for argument description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="158" column="9" bodyfile="include/drivers/display.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__display__interface_1ga1300cd75771d14de011d7a81abbe5062" prot="public" static="no">
        <type>int(*</type>
        <definition>display_set_contrast_api</definition>
        <argsstring>)(const struct device *dev, const uint8_t contrast)</argsstring>
        <name>display_set_contrast_api</name>
        <briefdescription>
<para>Callback API to set display contrast See <ref refid="group__display__interface_1ga855c72f72238b25f23e95e50546e2f27" kindref="member">display_set_contrast()</ref> for argument description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="166" column="9" bodyfile="include/drivers/display.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__display__interface_1gafd2804b3d8b7d9791a4a3404bb8d0b99" prot="public" static="no">
        <type>void(*</type>
        <definition>display_get_capabilities_api</definition>
        <argsstring>)(const struct device *dev, struct display_capabilities *capabilities)</argsstring>
        <name>display_get_capabilities_api</name>
        <briefdescription>
<para>Callback API to get display capabilities See <ref refid="group__display__interface_1ga6a13e42773be13b141ebd8f047f8db50" kindref="member">display_get_capabilities()</ref> for argument description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="174" column="9" bodyfile="include/drivers/display.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__display__interface_1ga022c7c360e8fab3309aa01f5fceb7eb1" prot="public" static="no">
        <type>int(*</type>
        <definition>display_set_pixel_format_api</definition>
        <argsstring>)(const struct device *dev, const enum display_pixel_format pixel_format)</argsstring>
        <name>display_set_pixel_format_api</name>
        <briefdescription>
<para>Callback API to set pixel format used by the display See <ref refid="group__display__interface_1ga7ede828663090760c2558a231d9f2150" kindref="member">display_set_pixel_format()</ref> for argument description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="183" column="9" bodyfile="include/drivers/display.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__display__interface_1ga34813b1d1872e4124a85baa4b285a7b5" prot="public" static="no">
        <type>int(*</type>
        <definition>display_set_orientation_api</definition>
        <argsstring>)(const struct device *dev, const enum display_orientation orientation)</argsstring>
        <name>display_set_orientation_api</name>
        <briefdescription>
<para>Callback API to set orientation used by the display See <ref refid="group__display__interface_1ga4e0a4dc2e434144874af014b8e7c4394" kindref="member">display_set_orientation()</ref> for argument description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="192" column="9" bodyfile="include/drivers/display.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__display__interface_1ga3a5114b4537039fc4d3258678b82cd18" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int display_write</definition>
        <argsstring>(const struct device *dev, const uint16_t x, const uint16_t y, const struct display_buffer_descriptor *desc, const void *buf)</argsstring>
        <name>display_write</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdisplay__buffer__descriptor" kindref="compound">display_buffer_descriptor</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Write data to display. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x Coordinate of the upper left corner where to write the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>y Coordinate of the upper left corner where to write the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>desc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a structure describing the buffer layout </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to buffer array</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success else negative errno code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="224" column="19" bodyfile="include/drivers/display.h" bodystart="224" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="group__display__interface_1ga3f497776520b0eac16b8aea80ccbbcfc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int display_read</definition>
        <argsstring>(const struct device *dev, const uint16_t x, const uint16_t y, const struct display_buffer_descriptor *desc, void *buf)</argsstring>
        <name>display_read</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdisplay__buffer__descriptor" kindref="compound">display_buffer_descriptor</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Read data from display. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x Coordinate of the upper left corner where to read from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>y Coordinate of the upper left corner where to read from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>desc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a structure describing the buffer layout </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to buffer array</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success else negative errno code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="246" column="19" bodyfile="include/drivers/display.h" bodystart="246" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="group__display__interface_1ga4b66d380e46909caaa7317857f84a9e8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void * display_get_framebuffer</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>display_get_framebuffer</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Get pointer to framebuffer for direct access. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to device structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>to frame buffer or NULL if direct framebuffer access is not supported </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="266" column="20" bodyfile="include/drivers/display.h" bodystart="266" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="group__display__interface_1gac6ad1f33067165e4c3bf7c0c345bb4e4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int display_blanking_on</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>display_blanking_on</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Turn display blanking on. </para>
        </briefdescription>
        <detaileddescription>
<para>This function blanks the complete display. The content of the frame buffer will be retained while blanking is enabled and the frame buffer will be accessible for read and write operations.</para>
<para>In case backlight control is supported by the driver the backlight is turned off. The backlight configuration is retained and accessible for configuration.</para>
<para>In case the driver supports display blanking the initial state of the driver would be the same as if this function was called.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to device structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success else negative errno code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="292" column="19" bodyfile="include/drivers/display.h" bodystart="292" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="group__display__interface_1ga4d9e288891a6bde679c3aa00b9913e1d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int display_blanking_off</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>display_blanking_off</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Turn display blanking off. </para>
        </briefdescription>
        <detaileddescription>
<para>Restore the frame buffer content to the display. In case backlight control is supported by the driver the backlight configuration is restored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to device structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success else negative errno code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="311" column="19" bodyfile="include/drivers/display.h" bodystart="311" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="group__display__interface_1gad5cdeb245d17c8d680a5843b3cce1f8c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int display_set_brightness</definition>
        <argsstring>(const struct device *dev, uint8_t brightness)</argsstring>
        <name>display_set_brightness</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>brightness</declname>
        </param>
        <briefdescription>
<para>Set the brightness of the display. </para>
        </briefdescription>
        <detaileddescription>
<para>Set the brightness of the display in steps of 1/256, where 255 is full brightness and 0 is minimal.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>brightness</parametername>
</parameternamelist>
<parameterdescription>
<para>Brightness in steps of 1/256</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success else negative errno code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="330" column="19" bodyfile="include/drivers/display.h" bodystart="330" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="group__display__interface_1ga855c72f72238b25f23e95e50546e2f27" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int display_set_contrast</definition>
        <argsstring>(const struct device *dev, uint8_t contrast)</argsstring>
        <name>display_set_contrast</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>contrast</declname>
        </param>
        <briefdescription>
<para>Set the contrast of the display. </para>
        </briefdescription>
        <detaileddescription>
<para>Set the contrast of the display in steps of 1/256, where 255 is maximum difference and 0 is minimal.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>contrast</parametername>
</parameternamelist>
<parameterdescription>
<para>Contrast in steps of 1/256</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success else negative errno code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="350" column="19" bodyfile="include/drivers/display.h" bodystart="350" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="group__display__interface_1ga6a13e42773be13b141ebd8f047f8db50" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void display_get_capabilities</definition>
        <argsstring>(const struct device *dev, struct display_capabilities *capabilities)</argsstring>
        <name>display_get_capabilities</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structdisplay__capabilities" kindref="compound">display_capabilities</ref> *</type>
          <declname>capabilities</declname>
        </param>
        <briefdescription>
<para>Get display capabilities. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>capabilities</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to capabilities structure to populate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="364" column="20" bodyfile="include/drivers/display.h" bodystart="364" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="group__display__interface_1ga7ede828663090760c2558a231d9f2150" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int display_set_pixel_format</definition>
        <argsstring>(const struct device *dev, const enum display_pixel_format pixel_format)</argsstring>
        <name>display_set_pixel_format</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const enum <ref refid="group__display__interface_1gac346bc56771052a8fe919c3ec23d7c9c" kindref="member">display_pixel_format</ref></type>
          <declname>pixel_format</declname>
        </param>
        <briefdescription>
<para>Set pixel format used by the display. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pixel_format</parametername>
</parameternamelist>
<parameterdescription>
<para>Pixel format to be used by display</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success else negative errno code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="383" column="1" bodyfile="include/drivers/display.h" bodystart="383" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="group__display__interface_1ga4e0a4dc2e434144874af014b8e7c4394" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int display_set_orientation</definition>
        <argsstring>(const struct device *dev, const enum display_orientation orientation)</argsstring>
        <name>display_set_orientation</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const enum <ref refid="group__display__interface_1gac59b091a3ed39431ab97a5f19fdc4855" kindref="member">display_orientation</ref></type>
          <declname>orientation</declname>
        </param>
        <briefdescription>
<para>Set display orientation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orientation</parametername>
</parameternamelist>
<parameterdescription>
<para>Orientation to be used by display</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success else negative errno code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/display.h" line="400" column="19" bodyfile="include/drivers/display.h" bodystart="400" bodyend="408"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Display Interface. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
