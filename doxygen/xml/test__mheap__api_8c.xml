<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="test__mheap__api_8c" kind="file" language="C++">
    <compoundname>test_mheap_api.c</compoundname>
    <includes refid="ztest_8h" local="no">ztest.h</includes>
    <includes local="no">kernel_internal.h</includes>
    <includes refid="irq__offload_8h" local="no">irq_offload.h</includes>
    <includes refid="multi__heap_8h" local="no">sys/multi_heap.h</includes>
    <includes refid="test__mheap_8h" local="yes">test_mheap.h</includes>
    <incdepgraph>
      <node id="17">
        <label>app_memory/app_memdomain.h</label>
        <link refid="app__memdomain_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>app_memory/mem_domain.h</label>
        <link refid="mem__domain_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>arch/arch_inlines.h</label>
        <link refid="arch__inlines_8h"/>
      </node>
      <node id="66">
        <label>arch/cpu.h</label>
        <link refid="include_2arch_2cpu_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>arch/structs.h</label>
        <link refid="structs_8h"/>
      </node>
      <node id="65">
        <label>arch/syscall.h</label>
        <link refid="arch_2syscall_8h"/>
      </node>
      <node id="29">
        <label>devicetree.h</label>
        <link refid="devicetree_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>devicetree/clocks.h</label>
        <link refid="clocks_8h"/>
      </node>
      <node id="36">
        <label>devicetree/dma.h</label>
        <link refid="devicetree_2dma_8h"/>
      </node>
      <node id="38">
        <label>devicetree/fixed-partitions.h</label>
        <link refid="fixed-partitions_8h"/>
      </node>
      <node id="34">
        <label>devicetree/gpio.h</label>
        <link refid="devicetree_2gpio_8h"/>
      </node>
      <node id="32">
        <label>devicetree/io-channels.h</label>
        <link refid="io-channels_8h"/>
      </node>
      <node id="40">
        <label>devicetree/ordinals.h</label>
        <link refid="ordinals_8h"/>
      </node>
      <node id="41">
        <label>devicetree/pinctrl.h</label>
        <link refid="devicetree_2pinctrl_8h"/>
      </node>
      <node id="37">
        <label>devicetree/pwms.h</label>
        <link refid="pwms_8h"/>
      </node>
      <node id="35">
        <label>devicetree/spi.h</label>
        <link refid="devicetree_2spi_8h"/>
      </node>
      <node id="39">
        <label>devicetree/zephyr.h</label>
        <link refid="devicetree_2zephyr_8h"/>
      </node>
      <node id="75">
        <label>fatal.h</label>
        <link refid="fatal_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>init.h</label>
        <link refid="init_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>irq_offload.h</label>
        <link refid="irq__offload_8h"/>
      </node>
      <node id="45">
        <label>kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>kernel/mempool_heap.h</label>
        <link refid="mempool__heap_8h"/>
      </node>
      <node id="51">
        <label>kernel/sched_priq.h</label>
        <link refid="sched__priq_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>kernel/stats.h</label>
        <link refid="kernel_2stats_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>kernel/thread.h</label>
        <link refid="kernel_2thread_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>kernel/thread_stack.h</label>
        <link refid="kernel_2thread__stack_8h"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>kernel_includes.h</label>
        <link refid="kernel__includes_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>kernel_structs.h</label>
        <link refid="kernel__structs_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>kernel_version.h</label>
        <link refid="kernel__version_8h"/>
      </node>
      <node id="28">
        <label>linker/devicetree_reserved.h</label>
        <link refid="devicetree__reserved_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>linker/linker-defs.h</label>
        <link refid="linker-defs_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>linker/section_tags.h</label>
        <link refid="section__tags_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>linker/sections.h</label>
        <link refid="sections_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>sys/arch_interface.h</label>
        <link refid="arch__interface_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="42">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>sys/kobject.h</label>
        <link refid="include_2sys_2kobject_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>sys/multi_heap.h</label>
        <link refid="multi__heap_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>sys/rb.h</label>
        <link refid="rb_8h"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>sys/sflist.h</label>
        <link refid="sflist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>sys/sys_heap.h</label>
        <link refid="sys__heap_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>sys/time_units.h</label>
        <link refid="time__units_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="23">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>sys_clock.h</label>
        <link refid="include_2sys__clock_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>timing/types.h</label>
        <link refid="include_2timing_2types_8h"/>
      </node>
      <node id="4">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="19">
        <label>toolchain/common.h</label>
        <link refid="common_8h"/>
      </node>
      <node id="86">
        <label>tracing/tracing.h</label>
        <link refid="tracing_2tracing_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>tracing/tracing_macros.h</label>
        <link refid="tracing__macros_8h"/>
      </node>
      <node id="87">
        <label>tracking.h</label>
        <link refid="tracking_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="13">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="8">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="11">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>offsets.h</label>
        <link refid="offsets_8h"/>
      </node>
      <node id="64">
        <label>syscall_list.h</label>
        <link refid="syscall__list_8h"/>
      </node>
      <node id="88">
        <label>syscalls/kernel.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kernel_8h"/>
      </node>
      <node id="81">
        <label>syscalls/kobject.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kobject_8h"/>
      </node>
      <node id="2">
        <label>ztest.h</label>
        <link refid="ztest_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ztest_assert.h</label>
        <link refid="ztest__assert_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ztest_mock.h</label>
        <link refid="ztest__mock_8h"/>
      </node>
      <node id="15">
        <label>ztest_test.h</label>
        <link refid="ztest__test_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>ztest_test_deprecated.h</label>
        <link refid="ztest__test__deprecated_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>test_mheap.h</label>
        <link refid="test__mheap_8h"/>
      </node>
      <node id="1">
        <label>tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c</label>
        <link refid="test__mheap__api_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>alloca.h</label>
      </node>
      <node id="68">
        <label>arch/cpu.h</label>
      </node>
      <node id="31">
        <label>devicetree_fixups.h</label>
      </node>
      <node id="30">
        <label>devicetree_unfixed.h</label>
      </node>
      <node id="43">
        <label>kernel.h</label>
      </node>
      <node id="91">
        <label>kernel_internal.h</label>
      </node>
      <node id="6">
        <label>stdarg.h</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="84">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="89">
        <label>syscalls/ztest_test.h</label>
      </node>
      <node id="90">
        <label>tc_util.h</label>
      </node>
      <node id="9">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="test__mheap__api_8c_1a6423a880df59733d2d9b509c7718d3a9" prot="public" static="no">
        <name>STACK_SIZE</name>
        <initializer>(512 + CONFIG_TEST_EXTRA_STACKSIZE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="13" column="9" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__mheap__api_8c_1a804fad267ae9af96b202f8bfce8dc966" prot="public" static="no">
        <name>OVERFLOW_SIZE</name>
        <initializer><ref refid="stdint_8h_1a3c75bb398badb69c7577b21486f9963f" kindref="member">SIZE_MAX</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="14" column="9" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__mheap__api_8c_1a5dabd2acee9fd97b71ac7ea5cd4d9171" prot="public" static="no">
        <name>NMEMB</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="93" column="9" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__mheap__api_8c_1a70ed59adcb4159ac551058053e649640" prot="public" static="no">
        <name>SIZE</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="94" column="9" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__mheap__api_8c_1a9c837392eb49a7d3b5e9963d77688968" prot="public" static="no">
        <name>BOUNDS</name>
        <initializer>(<ref refid="test__mheap__api_8c_1a5dabd2acee9fd97b71ac7ea5cd4d9171" kindref="member">NMEMB</ref> * <ref refid="test__mheap__api_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="95" column="9" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__mheap__api_8c_1ab58c1d8c137392a6bc9aa8ebe68a49ab" prot="public" static="no">
        <name>N_MULTI_HEAPS</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="241" column="9" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__mheap__api_8c_1a9d040456742e31b2f19746caaa9e1967" prot="public" static="no">
        <name>MHEAP_BYTES</name>
        <initializer>128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="242" column="9" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="242" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="test__mheap__api_8c_1aa15baae19d44279cac3d8bf47c9e707f" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref></type>
        <definition>struct k_thread tdata</definition>
        <argsstring></argsstring>
        <name>tdata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="18" column="15" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__mheap__api_8c_1ade9c3382ccf488bd2f39973aef9069be" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structsys__multi__heap" kindref="compound">sys_multi_heap</ref></type>
        <definition>struct sys_multi_heap multi_heap</definition>
        <argsstring></argsstring>
        <name>multi_heap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="244" column="28" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__mheap__api_8c_1a3d889d326c91e50ff646d95a6ce22e29" prot="public" static="yes" mutable="no">
        <type>char</type>
        <definition>char heap_mem[4][128]</definition>
        <argsstring>[4][128]</argsstring>
        <name>heap_mem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="245" column="13" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__mheap__api_8c_1a9b0c47b4566c6d02d381ab883c05fe31" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structsys__heap" kindref="compound">sys_heap</ref></type>
        <definition>struct sys_heap mheaps[4]</definition>
        <argsstring>[4]</argsstring>
        <name>mheaps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="246" column="22" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="246" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__mheap__api_8c_1abd593c4a226f06ed3dc0583a565f37dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_SEM_DEFINE</definition>
        <argsstring>(thread_sem, 0, 1)</argsstring>
        <name>K_SEM_DEFINE</name>
        <param>
          <type>thread_sem</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="16" column="1" declfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" declline="16" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test__mheap__api_8c_1a92d3d873c3cf4cd0327c5aa5bf8a0fc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_THREAD_STACK_DEFINE</definition>
        <argsstring>(tstack,(512+CONFIG_TEST_EXTRA_STACKSIZE))</argsstring>
        <name>K_THREAD_STACK_DEFINE</name>
        <param>
          <type><ref refid="pipe_2pipe__api_2src_2main_8c_1a8b6a52348bfbfba409bf38688d31b8a8" kindref="member">tstack</ref></type>
        </param>
        <param>
          <type>(512+CONFIG_TEST_EXTRA_STACKSIZE)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="17" column="1" declfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" declline="17" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test__mheap__api_8c_1a2a6b990ee0aeb1f8f8f28de3f0bd07ff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tIsr_malloc_and_free</definition>
        <argsstring>(void *data)</argsstring>
        <name>tIsr_malloc_and_free</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="20" column="13" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="20" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="test__mheap__api_8c_1ac8d72017cdde7fad33f88bae68426254" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void thread_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>thread_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="30" column="13" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="30" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__heap__tests_1gaa654f7a6ac7167de7dbbfcc2c0358112" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mheap_malloc_free</definition>
        <argsstring>(void)</argsstring>
        <name>test_mheap_malloc_free</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to demonstrate <ref refid="group__heap__apis_1gaa8edf1e63e5d5dd78d7adcfd787394ee" kindref="member">k_malloc()</ref> and <ref refid="group__heap__apis_1ga79b63cc93b3358cf82d74f40e73b69d5" kindref="member">k_free()</ref> API usage. </para>
        </briefdescription>
        <detaileddescription>
<para>The test allocates 4 blocks from heap memory pool using <ref refid="group__heap__apis_1gaa8edf1e63e5d5dd78d7adcfd787394ee" kindref="member">k_malloc()</ref> API. It also tries to allocate a block of size 64 bytes which fails as all the memory is allocated up. It then validates <ref refid="group__heap__apis_1ga79b63cc93b3358cf82d74f40e73b69d5" kindref="member">k_free()</ref> API by freeing up all the blocks which were allocated from the heap memory.</para>
<para><simplesect kind="see"><para><ref refid="group__heap__apis_1gaa8edf1e63e5d5dd78d7adcfd787394ee" kindref="member">k_malloc()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: This routine provides traditional <ref refid="stdlib_8h_1a9c36d0fe3ec4675cbffdc9b52f5fb399" kindref="member">malloc()</ref> semantics. Memory is allocated from the heap memory pool.</para>
<para>TESTPOINT: Return NULL if fail.</para>
<para>TESTPOINT: This routine provides traditional <ref refid="stdlib_8h_1afbedc913aa4651b3c3b4b3aecd9b4711" kindref="member">free()</ref> semantics. The memory being returned must have been allocated from the heap memory pool.</para>
<para>TESTPOINT: If ptr is NULL, no operation is performed.</para>
<para>TESTPOINT: Return NULL if fail.</para>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="57" column="6" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="57" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__heap__tests_1gaa6c30663f6376f5ed00daf6b76ae7c64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mheap_calloc</definition>
        <argsstring>(void)</argsstring>
        <name>test_mheap_calloc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to demonstrate <ref refid="group__heap__apis_1gad031d50ed62d08202a5dcf992c20246c" kindref="member">k_calloc()</ref> API functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>The test validates <ref refid="group__heap__apis_1gad031d50ed62d08202a5dcf992c20246c" kindref="member">k_calloc()</ref> API. When requesting a huge size of space or a space larger than heap memory, the API will return NULL. The 8 blocks of memory of size 16 bytes are allocated by <ref refid="group__heap__apis_1gad031d50ed62d08202a5dcf992c20246c" kindref="member">k_calloc()</ref> API. When allocated using <ref refid="group__heap__apis_1gad031d50ed62d08202a5dcf992c20246c" kindref="member">k_calloc()</ref> the memory buffers have to be zeroed. Check is done, if the blocks are memset to 0 and read/write is allowed. The test is then teared up by freeing all the blocks allocated.</para>
<para><simplesect kind="see"><para><ref refid="group__heap__apis_1gad031d50ed62d08202a5dcf992c20246c" kindref="member">k_calloc()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="112" column="6" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="112" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="test__mheap__api_8c_1ac5ce6f4f45628dfdb759682a2fb83daa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_aligned_alloc</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_aligned_alloc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="136" column="6" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="136" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__heap__tests_1ga1fc1b44587fbbac9c871f6e5c01856aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sys_heap_mem_pool_assign</definition>
        <argsstring>(void)</argsstring>
        <name>test_sys_heap_mem_pool_assign</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate allocation and free from system heap memory pool. </para>
        </briefdescription>
        <detaileddescription>
<para>Set heap memory as resource pool. It will success when alloc a block of memory smaller than the pool and will fail when alloc a block of memory larger than the pool.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga220d22dc35115fcdc0badb262e7a019d" kindref="member">k_thread_system_pool_assign()</ref>, z_thread_malloc(), <ref refid="group__heap__apis_1ga79b63cc93b3358cf82d74f40e73b69d5" kindref="member">k_free()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="178" column="6" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="178" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__heap__tests_1ga3064c284d543a8a788271139d58e7e91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_malloc_in_isr</definition>
        <argsstring>(void)</argsstring>
        <name>test_malloc_in_isr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate allocation and free from system heap memory pool in isr context. </para>
        </briefdescription>
        <detaileddescription>
<para>When in isr context, the kernel will successfully alloc a block of memory because in this situation, the kernel will assign the heap memory as resource pool.</para>
<para><simplesect kind="see"><para>z_thread_malloc(), <ref refid="group__heap__apis_1ga79b63cc93b3358cf82d74f40e73b69d5" kindref="member">k_free()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="207" column="6" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="207" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__heap__tests_1ga4654b80624f77420086d9fd48ad3e551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_malloc_in_thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_malloc_in_thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate allocation and free failure when thread&apos;s resource pool is not assigned. </para>
        </briefdescription>
        <detaileddescription>
<para>When a thread&apos;s resource pool is not assigned, alloc memory will fail.</para>
<para><simplesect kind="see"><para>z_thread_malloc() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="226" column="6" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="226" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="test__mheap__api_8c_1a23a50d8e137d5b6c8471335bdae329a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * multi_heap_choice</definition>
        <argsstring>(struct sys_multi_heap *mheap, void *cfg, size_t align, size_t size)</argsstring>
        <name>multi_heap_choice</name>
        <param>
          <type>struct <ref refid="structsys__multi__heap" kindref="compound">sys_multi_heap</ref> *</type>
          <declname>mheap</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>align</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="248" column="6" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="248" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="test__mheap__api_8c_1a03c5aaa6f5788b570b24e6289a435525" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_multi_heap</definition>
        <argsstring>(void)</argsstring>
        <name>test_multi_heap</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="256" column="6" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="256" bodyend="298"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ztest_8h" kindref="compound">ztest.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;kernel_internal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="irq__offload_8h" kindref="compound">irq_offload.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="multi__heap_8h" kindref="compound">sys/multi_heap.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="test__mheap_8h" kindref="compound">test_mheap.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STACK_SIZE<sp/>(512<sp/>+<sp/>CONFIG_TEST_EXTRA_STACKSIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OVERFLOW_SIZE<sp/><sp/><sp/><sp/>SIZE_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><ref refid="test__mheap__api_8c_1abd593c4a226f06ed3dc0583a565f37dc" kindref="member">K_SEM_DEFINE</ref>(thread_sem,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><ref refid="test__mheap__api_8c_1a92d3d873c3cf4cd0327c5aa5bf8a0fc7" kindref="member">K_THREAD_STACK_DEFINE</ref>(<ref refid="pipe_2pipe__api_2src_2main_8c_1a8b6a52348bfbfba409bf38688d31b8a8" kindref="member">tstack</ref>,<sp/><ref refid="test__mheap__api_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/><ref refid="test__mheap__api_8c_1aa15baae19d44279cac3d8bf47c9e707f" kindref="member">tdata</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__mheap__api_8c_1a2a6b990ee0aeb1f8f8f28de3f0bd07ff" kindref="member">tIsr_malloc_and_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>)</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)z_thread_malloc(<ref refid="test__mheap_8h_1abf2f644fd3fbae3f1262ece9914b49cf" kindref="member">BLK_SIZE_MIN</ref>);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gad78332e6bd37812e56ccc4af601542e4" kindref="member">zassert_not_null</ref>(<ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;bytes<sp/>allocation<sp/>failed<sp/>from<sp/>system<sp/>pool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__heap__apis_1ga79b63cc93b3358cf82d74f40e73b69d5" kindref="member">k_free</ref>(<ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__mheap__api_8c_1ac8d72017cdde7fad33f88bae68426254" kindref="member">thread_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>()-&gt;<ref refid="structk__thread_1a35b859bded3a270f25ccc40efece7583" kindref="member">resource_pool</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)z_thread_malloc(<ref refid="test__mheap_8h_1abf2f644fd3fbae3f1262ece9914b49cf" kindref="member">BLK_SIZE_MIN</ref>);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga0380ea00fa3775f9a8a05faaf4de71b7" kindref="member">zassert_is_null</ref>(<ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;bytes<sp/>allocation<sp/>failed<sp/>from<sp/>system<sp/>pool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gab9be3cf1988af2cd6afdace52d497c84" kindref="member">k_sem_give</ref>(&amp;thread_sem);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">/*test<sp/>cases*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__heap__tests_1gaa654f7a6ac7167de7dbbfcc2c0358112" kindref="member">test_mheap_malloc_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__threads__cancel__abort_8c_1ad9dc995b581e61d5b3a7f92a0a600526" kindref="member">block</ref>[2<sp/>*<sp/><ref refid="test__mheap_8h_1a178957a5641420997da764653ff30bc4" kindref="member">BLK_NUM_MAX</ref>],<sp/>*block_fail;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(nb<sp/>=<sp/>0;<sp/>nb<sp/>&lt;<sp/><ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(<ref refid="test__threads__cancel__abort_8c_1ad9dc995b581e61d5b3a7f92a0a600526" kindref="member">block</ref>);<sp/>nb++)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__threads__cancel__abort_8c_1ad9dc995b581e61d5b3a7f92a0a600526" kindref="member">block</ref>[nb]<sp/>=<sp/><ref refid="group__heap__apis_1gaa8edf1e63e5d5dd78d7adcfd787394ee" kindref="member">k_malloc</ref>(<ref refid="test__mheap_8h_1abf2f644fd3fbae3f1262ece9914b49cf" kindref="member">BLK_SIZE_MIN</ref>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="test__threads__cancel__abort_8c_1ad9dc995b581e61d5b3a7f92a0a600526" kindref="member">block</ref>[nb]<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_fail<sp/>=<sp/><ref refid="group__heap__apis_1gaa8edf1e63e5d5dd78d7adcfd787394ee" kindref="member">k_malloc</ref>(<ref refid="test__mheap_8h_1abf2f644fd3fbae3f1262ece9914b49cf" kindref="member">BLK_SIZE_MIN</ref>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga0380ea00fa3775f9a8a05faaf4de71b7" kindref="member">zassert_is_null</ref>(block_fail,<sp/>NULL);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nb;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__heap__apis_1ga79b63cc93b3358cf82d74f40e73b69d5" kindref="member">k_free</ref>(<ref refid="test__threads__cancel__abort_8c_1ad9dc995b581e61d5b3a7f92a0a600526" kindref="member">block</ref>[i]);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__heap__apis_1ga79b63cc93b3358cf82d74f40e73b69d5" kindref="member">k_free</ref>(NULL);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_fail<sp/>=<sp/><ref refid="group__heap__apis_1gaa8edf1e63e5d5dd78d7adcfd787394ee" kindref="member">k_malloc</ref>(<ref refid="test__mheap__api_8c_1a804fad267ae9af96b202f8bfce8dc966" kindref="member">OVERFLOW_SIZE</ref>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga0380ea00fa3775f9a8a05faaf4de71b7" kindref="member">zassert_is_null</ref>(block_fail,<sp/>NULL);</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NMEMB<sp/><sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SIZE<sp/><sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOUNDS<sp/><sp/>(NMEMB<sp/>*<sp/>SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__heap__tests_1gaa6c30663f6376f5ed00daf6b76ae7c64" kindref="member">test_mheap_calloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mem;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Requesting<sp/>a<sp/>huge<sp/>size<sp/>to<sp/>validate<sp/>overflow<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/><ref refid="group__heap__apis_1gad031d50ed62d08202a5dcf992c20246c" kindref="member">k_calloc</ref>(<ref refid="test__mheap__api_8c_1a5dabd2acee9fd97b71ac7ea5cd4d9171" kindref="member">NMEMB</ref>,<sp/><ref refid="test__mheap__api_8c_1a804fad267ae9af96b202f8bfce8dc966" kindref="member">OVERFLOW_SIZE</ref>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga0380ea00fa3775f9a8a05faaf4de71b7" kindref="member">zassert_is_null</ref>(mem,<sp/></highlight><highlight class="stringliteral">&quot;calloc<sp/>operation<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Requesting<sp/>a<sp/>space<sp/>large<sp/>than<sp/>heap<sp/>memory<sp/>lead<sp/>to<sp/>failure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/><ref refid="group__heap__apis_1gad031d50ed62d08202a5dcf992c20246c" kindref="member">k_calloc</ref>(<ref refid="test__mheap__api_8c_1a5dabd2acee9fd97b71ac7ea5cd4d9171" kindref="member">NMEMB</ref><sp/>*<sp/>3,<sp/><ref refid="test__mheap__api_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga0380ea00fa3775f9a8a05faaf4de71b7" kindref="member">zassert_is_null</ref>(mem,<sp/></highlight><highlight class="stringliteral">&quot;calloc<sp/>operation<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/><ref refid="group__heap__apis_1gad031d50ed62d08202a5dcf992c20246c" kindref="member">k_calloc</ref>(<ref refid="test__mheap__api_8c_1a5dabd2acee9fd97b71ac7ea5cd4d9171" kindref="member">NMEMB</ref>,<sp/><ref refid="test__mheap__api_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gad78332e6bd37812e56ccc4af601542e4" kindref="member">zassert_not_null</ref>(mem,<sp/></highlight><highlight class="stringliteral">&quot;calloc<sp/>operation<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Memory<sp/>should<sp/>be<sp/>zeroed<sp/>and<sp/>not<sp/>crash<sp/>us<sp/>if<sp/>we<sp/>read/write<sp/>to<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="test__mheap__api_8c_1a9c837392eb49a7d3b5e9963d77688968" kindref="member">BOUNDS</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(mem[i],<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__heap__apis_1ga79b63cc93b3358cf82d74f40e73b69d5" kindref="member">k_free</ref>(mem);</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__mheap__api_8c_1ac5ce6f4f45628dfdb759682a2fb83daa" kindref="member">test_k_aligned_alloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="asm-macro-32-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Allow<sp/>sizes<sp/>that<sp/>are<sp/>not<sp/>necessarily<sp/>a<sp/>multiple<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>alignment.<sp/>The<sp/>backing<sp/>allocator<sp/>would<sp/>naturally<sp/>round<sp/>up<sp/>to</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>some<sp/>minimal<sp/>block<sp/>size.<sp/>This<sp/>would<sp/>make<sp/>k_aligned_alloc()</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>more<sp/>like<sp/>posix_memalign()<sp/>instead<sp/>of<sp/>aligned_alloc(),<sp/>but</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>benefit<sp/>is<sp/>that<sp/>k_malloc()<sp/>can<sp/>then<sp/>just<sp/>be<sp/>a<sp/>wrapper</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>around<sp/>k_aligned_alloc().</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="asm-macro-32-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref><sp/>=<sp/><ref refid="group__heap__apis_1gae16d486aa250f9c07fa6a57342bcd3b4" kindref="member">k_aligned_alloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/>1);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocation<sp/>succeeds<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga9591c44c125ca0a073c0d80dc0d84a3b" kindref="member">zassert_not_equal</ref>(NULL,<sp/><ref refid="asm-macro-32-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref>,<sp/></highlight><highlight class="stringliteral">&quot;aligned<sp/>alloc<sp/>of<sp/>1<sp/>byte<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>r<sp/>is<sp/>suitably<sp/>aligned<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(0,<sp/>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>)<ref refid="asm-macro-32-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref><sp/>%<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%p<sp/>not<sp/>%u-byte-aligned&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="asm-macro-32-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__heap__apis_1ga79b63cc93b3358cf82d74f40e73b69d5" kindref="member">k_free</ref>(<ref refid="asm-macro-32-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>with<sp/>&gt;<sp/>8<sp/>byte<sp/>alignment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="asm-macro-32-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref><sp/>=<sp/><ref refid="group__heap__apis_1gae16d486aa250f9c07fa6a57342bcd3b4" kindref="member">k_aligned_alloc</ref>(16,<sp/>1);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocation<sp/>succeeds<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga9591c44c125ca0a073c0d80dc0d84a3b" kindref="member">zassert_not_equal</ref>(NULL,<sp/><ref refid="asm-macro-32-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref>,<sp/></highlight><highlight class="stringliteral">&quot;16-byte-aligned<sp/>alloc<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>r<sp/>is<sp/>suitably<sp/>aligned<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(0,<sp/>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>)<ref refid="asm-macro-32-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref><sp/>%<sp/>16,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%p<sp/>not<sp/>16-byte-aligned&quot;</highlight><highlight class="normal">,<sp/><ref refid="asm-macro-32-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__heap__apis_1ga79b63cc93b3358cf82d74f40e73b69d5" kindref="member">k_free</ref>(<ref refid="asm-macro-32-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__heap__tests_1ga1fc1b44587fbbac9c871f6e5c01856aa" kindref="member">test_sys_heap_mem_pool_assign</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(CONFIG_MULTITHREADING))<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga220d22dc35115fcdc0badb262e7a019d" kindref="member">k_thread_system_pool_assign</ref>(<ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>());</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)z_thread_malloc(<ref refid="test__mheap_8h_1abf2f644fd3fbae3f1262ece9914b49cf" kindref="member">BLK_SIZE_MIN</ref>/2);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gad78332e6bd37812e56ccc4af601542e4" kindref="member">zassert_not_null</ref>(<ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;bytes<sp/>allocation<sp/>failed<sp/>from<sp/>system<sp/>pool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__heap__apis_1ga79b63cc93b3358cf82d74f40e73b69d5" kindref="member">k_free</ref>(<ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref>);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga0380ea00fa3775f9a8a05faaf4de71b7" kindref="member">zassert_is_null</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)z_thread_malloc(<ref refid="test__mheap_8h_1a75341588e628cc8059088830880e11ce" kindref="member">BLK_SIZE_MAX</ref><sp/>*<sp/>2),</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;overflow<sp/>check<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__heap__tests_1ga3064c284d543a8a788271139d58e7e91" kindref="member">test_malloc_in_isr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(CONFIG_IRQ_OFFLOAD))<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="irq__offload_8h_1a429859dd7ac3d88a4b7ae858835847ce" kindref="member">irq_offload</ref>((<ref refid="irq__offload_8h_1a5bcf9956ddbf5ea75619f0cef91e1214" kindref="member">irq_offload_routine_t</ref>)<ref refid="test__mheap__api_8c_1a2a6b990ee0aeb1f8f8f28de3f0bd07ff" kindref="member">tIsr_malloc_and_free</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__heap__tests_1ga4654b80624f77420086d9fd48ad3e551" kindref="member">test_malloc_in_thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(CONFIG_MULTITHREADING))<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref><sp/>=<sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="test__mheap__api_8c_1aa15baae19d44279cac3d8bf47c9e707f" kindref="member">tdata</ref>,<sp/><ref refid="pipe_2pipe__api_2src_2main_8c_1a8b6a52348bfbfba409bf38688d31b8a8" kindref="member">tstack</ref>,<sp/><ref refid="test__mheap__api_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__mheap__api_8c_1ac8d72017cdde7fad33f88bae68426254" kindref="member">thread_entry</ref>,<sp/>NULL,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>0,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gac71e2383c1920dddc45a561cacfef090" kindref="member">k_sem_take</ref>(&amp;thread_sem,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>N_MULTI_HEAPS<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MHEAP_BYTES<sp/>128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsys__multi__heap" kindref="compound">sys_multi_heap</ref><sp/><ref refid="test__mheap__api_8c_1ade9c3382ccf488bd2f39973aef9069be" kindref="member">multi_heap</ref>;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="test__mheap__api_8c_1a3d889d326c91e50ff646d95a6ce22e29" kindref="member">heap_mem</ref>[<ref refid="test__mheap__api_8c_1ab58c1d8c137392a6bc9aa8ebe68a49ab" kindref="member">N_MULTI_HEAPS</ref>][<ref refid="test__mheap__api_8c_1a9d040456742e31b2f19746caaa9e1967" kindref="member">MHEAP_BYTES</ref>];</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsys__heap" kindref="compound">sys_heap</ref><sp/><ref refid="test__mheap__api_8c_1a9b0c47b4566c6d02d381ab883c05fe31" kindref="member">mheaps</ref>[<ref refid="test__mheap__api_8c_1ab58c1d8c137392a6bc9aa8ebe68a49ab" kindref="member">N_MULTI_HEAPS</ref>];</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__mheap__api_8c_1a23a50d8e137d5b6c8471335bdae329a7" kindref="member">multi_heap_choice</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsys__multi__heap" kindref="compound">sys_multi_heap</ref><sp/>*mheap,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cfg,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>align,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="250"><highlight class="normal">{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsys__heap" kindref="compound">sys_heap</ref><sp/>*h<sp/>=<sp/>&amp;<ref refid="test__mheap__api_8c_1a9b0c47b4566c6d02d381ab883c05fe31" kindref="member">mheaps</ref>[(int)(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)cfg];</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="sys__heap_8h_1a92a973158860c6863e1aba8516311076" kindref="member">sys_heap_aligned_alloc</ref>(h,<sp/>align,<sp/>size);</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__mheap__api_8c_1a03c5aaa6f5788b570b24e6289a435525" kindref="member">test_multi_heap</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*blocks[<ref refid="test__mheap__api_8c_1ab58c1d8c137392a6bc9aa8ebe68a49ab" kindref="member">N_MULTI_HEAPS</ref>];</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="multi__heap_8h_1a50ded513b50c7aed7d89386bb8f425cc" kindref="member">sys_multi_heap_init</ref>(&amp;<ref refid="test__mheap__api_8c_1ade9c3382ccf488bd2f39973aef9069be" kindref="member">multi_heap</ref>,<sp/><ref refid="test__mheap__api_8c_1a23a50d8e137d5b6c8471335bdae329a7" kindref="member">multi_heap_choice</ref>);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="test__mheap__api_8c_1ab58c1d8c137392a6bc9aa8ebe68a49ab" kindref="member">N_MULTI_HEAPS</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sys__heap_8h_1a520768606a3c28b084cf11f8ec82fae6" kindref="member">sys_heap_init</ref>(&amp;<ref refid="test__mheap__api_8c_1a9b0c47b4566c6d02d381ab883c05fe31" kindref="member">mheaps</ref>[i],<sp/>&amp;<ref refid="test__mheap__api_8c_1a3d889d326c91e50ff646d95a6ce22e29" kindref="member">heap_mem</ref>[i][0],<sp/><ref refid="test__mheap__api_8c_1a9d040456742e31b2f19746caaa9e1967" kindref="member">MHEAP_BYTES</ref>);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="multi__heap_8h_1a815e36620517f9efb938202309748bc1" kindref="member">sys_multi_heap_add_heap</ref>(&amp;<ref refid="test__mheap__api_8c_1ade9c3382ccf488bd2f39973aef9069be" kindref="member">multi_heap</ref>,<sp/>&amp;<ref refid="test__mheap__api_8c_1a9b0c47b4566c6d02d381ab883c05fe31" kindref="member">mheaps</ref>[i]);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>half<sp/>the<sp/>buffer<sp/>from<sp/>each<sp/>heap,<sp/>make<sp/>sure<sp/>it<sp/>works</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>that<sp/>the<sp/>pointer<sp/>is<sp/>in<sp/>the<sp/>correct<sp/>memory</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="test__mheap__api_8c_1ab58c1d8c137392a6bc9aa8ebe68a49ab" kindref="member">N_MULTI_HEAPS</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blocks[i]<sp/>=<sp/><ref refid="multi__heap_8h_1a050d7499b982ed62f85d5fc15f79548b" kindref="member">sys_multi_heap_alloc</ref>(&amp;<ref refid="test__mheap__api_8c_1ade9c3382ccf488bd2f39973aef9069be" kindref="member">multi_heap</ref>,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)i,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__mheap__api_8c_1a9d040456742e31b2f19746caaa9e1967" kindref="member">MHEAP_BYTES</ref><sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gad78332e6bd37812e56ccc4af601542e4" kindref="member">zassert_not_null</ref>(blocks[i],<sp/></highlight><highlight class="stringliteral">&quot;allocation<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(blocks[i]<sp/>&gt;=<sp/>&amp;<ref refid="test__mheap__api_8c_1a3d889d326c91e50ff646d95a6ce22e29" kindref="member">heap_mem</ref>[i][0]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blocks[i]<sp/>&lt;<sp/>&amp;<ref refid="test__mheap__api_8c_1a3d889d326c91e50ff646d95a6ce22e29" kindref="member">heap_mem</ref>[i+1][0],</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;allocation<sp/>not<sp/>in<sp/>correct<sp/>heap&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>all<sp/>heaps<sp/>fail<sp/>to<sp/>allocate<sp/>another<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="test__mheap__api_8c_1ab58c1d8c137392a6bc9aa8ebe68a49ab" kindref="member">N_MULTI_HEAPS</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/><ref refid="multi__heap_8h_1a050d7499b982ed62f85d5fc15f79548b" kindref="member">sys_multi_heap_alloc</ref>(&amp;<ref refid="test__mheap__api_8c_1ade9c3382ccf488bd2f39973aef9069be" kindref="member">multi_heap</ref>,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)i,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__mheap__api_8c_1a9d040456742e31b2f19746caaa9e1967" kindref="member">MHEAP_BYTES</ref><sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga0380ea00fa3775f9a8a05faaf4de71b7" kindref="member">zassert_is_null</ref>(b,<sp/></highlight><highlight class="stringliteral">&quot;second<sp/>allocation<sp/>succeeded?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>all<sp/>blocks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="test__mheap__api_8c_1ab58c1d8c137392a6bc9aa8ebe68a49ab" kindref="member">N_MULTI_HEAPS</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="multi__heap_8h_1ac6f913a3bbf247807ba80408a242db73" kindref="member">sys_multi_heap_free</ref>(&amp;<ref refid="test__mheap__api_8c_1ade9c3382ccf488bd2f39973aef9069be" kindref="member">multi_heap</ref>,<sp/>blocks[i]);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>again<sp/>to<sp/>make<sp/>sure<sp/>they&apos;re<sp/>still<sp/>valid<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="test__mheap__api_8c_1ab58c1d8c137392a6bc9aa8ebe68a49ab" kindref="member">N_MULTI_HEAPS</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blocks[i]<sp/>=<sp/><ref refid="multi__heap_8h_1a050d7499b982ed62f85d5fc15f79548b" kindref="member">sys_multi_heap_alloc</ref>(&amp;<ref refid="test__mheap__api_8c_1ade9c3382ccf488bd2f39973aef9069be" kindref="member">multi_heap</ref>,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)i,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__mheap__api_8c_1a9d040456742e31b2f19746caaa9e1967" kindref="member">MHEAP_BYTES</ref><sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gad78332e6bd37812e56ccc4af601542e4" kindref="member">zassert_not_null</ref>(blocks[i],<sp/></highlight><highlight class="stringliteral">&quot;final<sp/>re-allocation<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c"/>
  </compounddef>
</doxygen>
