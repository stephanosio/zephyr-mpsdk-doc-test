<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__user__semaphore__apis" kind="group">
    <compoundname>user_semaphore_apis</compoundname>
    <title>User mode semaphore APIs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__user__semaphore__apis_1gae20385545bbf7a9dfd59afa74bf1120a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_sem_init</definition>
        <argsstring>(struct sys_sem *sem, unsigned int initial_count, unsigned int limit)</argsstring>
        <name>sys_sem_init</name>
        <param>
          <type>struct <ref refid="structsys__sem" kindref="compound">sys_sem</ref> *</type>
          <declname>sem</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>initial_count</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Initialize a semaphore. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a semaphore instance, prior to its first use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the semaphore. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initial_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial semaphore count. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum permitted semaphore count.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Bad parameters, the value of limit should be located in (0, INT_MAX] and initial_count shouldn&apos;t be greater than limit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sem.h" line="95" column="5" declfile="include/sys/sem.h" declline="95" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__user__semaphore__apis_1gaae32032398db1f693ad3f876863f78b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_sem_give</definition>
        <argsstring>(struct sys_sem *sem)</argsstring>
        <name>sys_sem_give</name>
        <param>
          <type>struct <ref refid="structsys__sem" kindref="compound">sys_sem</ref> *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
<para>Give a semaphore. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine gives <emphasis>sem</emphasis>, unless the semaphore is already at its maximum permitted count.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the semaphore.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Semaphore given. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter address not recognized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EACCES</parametername>
</parameternamelist>
<parameterdescription>
<para>Caller does not have enough access. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Count reached Maximum permitted count and try again. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sem.h" line="111" column="5" declfile="include/sys/sem.h" declline="111" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__user__semaphore__apis_1gaf742a29f89a816fa34b8d6d33e221b77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_sem_take</definition>
        <argsstring>(struct sys_sem *sem, k_timeout_t timeout)</argsstring>
        <name>sys_sem_take</name>
        <param>
          <type>struct <ref refid="structsys__sem" kindref="compound">sys_sem</ref> *</type>
          <declname>sem</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Take a <ref refid="structsys__sem" kindref="compound">sys_sem</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine takes <emphasis>sem</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the <ref refid="structsys__sem" kindref="compound">sys_sem</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period to take the <ref refid="structsys__sem" kindref="compound">sys_sem</ref>, or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structsys__sem" kindref="compound">sys_sem</ref> taken. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter address not recognized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ETIMEDOUT</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EACCES</parametername>
</parameternamelist>
<parameterdescription>
<para>Caller does not have enough access. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sem.h" line="127" column="5" declfile="include/sys/sem.h" declline="127" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__user__semaphore__apis_1ga7b287ca3cc3ab2766d7c1beec1849894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
        <definition>unsigned int sys_sem_count_get</definition>
        <argsstring>(struct sys_sem *sem)</argsstring>
        <name>sys_sem_count_get</name>
        <param>
          <type>struct <ref refid="structsys__sem" kindref="compound">sys_sem</ref> *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="structsys__sem" kindref="compound">sys_sem</ref>&apos;s value. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine returns the current value of <emphasis>sem</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the <ref refid="structsys__sem" kindref="compound">sys_sem</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current value of <ref refid="structsys__sem" kindref="compound">sys_sem</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sem.h" line="138" column="14" declfile="include/sys/sem.h" declline="138" declcolumn="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__user__semaphore__apis_1gad7b4e3a8910b78e4beb0ec20524426e1" prot="public" static="no">
        <name>SYS_SEM_DEFINE</name>
        <param><defname>_name</defname></param>
        <param><defname>_initial_count</defname></param>
        <param><defname>_count_limit</defname></param>
        <initializer>	struct <ref refid="structsys__sem" kindref="compound">sys_sem</ref> _name = { \
		.futex = { _initial_count }, \
		.limit = _count_limit \
	}; \
	BUILD_ASSERT(((_count_limit) != 0) &amp;&amp; \
		     ((_initial_count) &lt;= (_count_limit)))</initializer>
        <briefdescription>
<para>Statically define and initialize a <ref refid="structsys__sem" kindref="compound">sys_sem</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The semaphore can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>sys_sem<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para>Route this to memory domains using <ref refid="mem__protect_2userspace_2src_2main_8c_1a9067a0a2728b358c511417b2de42c731" kindref="member">K_APP_DMEM()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the semaphore. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_initial_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial semaphore count. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_count_limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum permitted semaphore count. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sem.h" line="62" column="9" bodyfile="include/sys/sem.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
