<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="asm-macro-32-bit-mwdt_8h" kind="file" language="C++">
    <compoundname>asm-macro-32-bit-mwdt.h</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1a62c92c2e7e269b0afb80256c5207da7b" prot="public" static="no" mutable="no">
        <type>macro</type>
        <definition>macro MOVR</definition>
        <argsstring></argsstring>
        <name>MOVR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="8" column="7" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" prot="public" static="no" mutable="no">
        <type>macro</type>
        <definition>macro s mov&amp; $suffix s endm macro off if else ld&amp; $suffix endif endm macro off if else st&amp; $suffix endif endm macro r push r endm macro r pop r endm macro aux lr aux endm macro aux sr aux endm macro v add&amp; $suffix v endm macro v add2&amp; $suffix v endm macro v add3 v endm macro v sub v endm macro v bmskn v endm macro v lsr v endm macro v asl v endm macro v and v endm macro v or v endm macro lbl br&amp; $suffix lbl endm macro lbl breq d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="8" column="12" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1a1a46311eefaef8a6a42bae236b114d6b" prot="public" static="no" mutable="no">
        <type>macro <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> mov &amp;$suffix <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> endm macro</type>
        <definition>macro s mov&amp; $suffix s endm macro LDR</definition>
        <argsstring></argsstring>
        <name>LDR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="13" column="7" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" prot="public" static="no" mutable="no">
        <type>macro s mov &amp;$suffix s endm macro</type>
        <definition>macro s mov&amp; $suffix s endm macro off if else ld&amp; $suffix endif endm macro off if else st&amp; $suffix endif endm macro r push r endm macro r pop r endm macro aux lr aux endm macro aux sr aux endm macro v add&amp; $suffix v endm macro v add2&amp; $suffix v endm macro v add3 v endm macro v sub v endm macro v bmskn v endm macro v lsr v endm macro v asl v endm macro v and v endm macro v or v endm macro lbl br&amp; $suffix lbl endm macro lbl breq s</definition>
        <argsstring></argsstring>
        <name>s</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="13" column="13" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1a0098100be3ff37847ef34bae6d45cd57" prot="public" static="no" mutable="no">
        <type>macro <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> mov &amp;$suffix <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if</type>
        <definition>macro s mov &amp;$suffix s endm macro off if else ld &amp;$suffix endif endm macro off if $narg</definition>
        <argsstring></argsstring>
        <name>$narg</name>
        <initializer>== 2
		ld\&amp;$suffix  <ref refid="asm-macro-64-bit-gnu_8h_1a6b6a358e951559f7fd95cb1da716005c" kindref="member">d</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="14" column="4" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1a2559ca808b98187e087954aafba01ad1" prot="public" static="no" mutable="no">
        <type>macro <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> mov &amp;$suffix <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else ld &amp;$suffix endif endm macro</type>
        <definition>macro s mov&amp; $suffix s endm macro off if else ld&amp; $suffix endif endm macro STR</definition>
        <argsstring></argsstring>
        <name>STR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="21" column="7" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1aaecb2f53890260a5b5518501ac4ae55b" prot="public" static="no" mutable="no">
        <type>macro <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> mov &amp;$suffix <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else ld &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else st &amp;$suffix endif endm macro</type>
        <definition>macro s mov&amp; $suffix s endm macro off if else ld&amp; $suffix endif endm macro off if else st&amp; $suffix endif endm macro PUSHR</definition>
        <argsstring></argsstring>
        <name>PUSHR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="30" column="7" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1a0f674b4d35f1df924883bff738f5c288" prot="public" static="no" mutable="no">
        <type>macro <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> mov &amp;$suffix <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else ld &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else st &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> push <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro</type>
        <definition>macro s mov&amp; $suffix s endm macro off if else ld&amp; $suffix endif endm macro off if else st&amp; $suffix endif endm macro r push r endm macro POPR</definition>
        <argsstring></argsstring>
        <name>POPR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="34" column="7" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1af065467bfff1489bf1d38337a5d60988" prot="public" static="no" mutable="no">
        <type>macro <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> mov &amp;$suffix <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else ld &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else st &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> push <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> pop <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro</type>
        <definition>macro s mov&amp; $suffix s endm macro off if else ld&amp; $suffix endif endm macro off if else st&amp; $suffix endif endm macro r push r endm macro r pop r endm macro LRR</definition>
        <argsstring></argsstring>
        <name>LRR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="38" column="7" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1a4ab637a402c195c93f2e5f1d0fcccf78" prot="public" static="no" mutable="no">
        <type>macro <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> mov &amp;$suffix <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else ld &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else st &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> push <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> pop <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro aux lr aux endm macro</type>
        <definition>macro s mov&amp; $suffix s endm macro off if else ld&amp; $suffix endif endm macro off if else st&amp; $suffix endif endm macro r push r endm macro r pop r endm macro aux lr aux endm macro SRR</definition>
        <argsstring></argsstring>
        <name>SRR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="42" column="7" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1a74d94870ad16a58f150bf43374bcc908" prot="public" static="no" mutable="no">
        <type>macro <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> mov &amp;$suffix <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else ld &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else st &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> push <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> pop <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro aux lr aux endm macro aux sr aux endm macro</type>
        <definition>macro s mov&amp; $suffix s endm macro off if else ld&amp; $suffix endif endm macro off if else st&amp; $suffix endif endm macro r push r endm macro r pop r endm macro aux lr aux endm macro aux sr aux endm macro ADDR</definition>
        <argsstring></argsstring>
        <name>ADDR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="47" column="7" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1a4213081f87edc43524180616979bd1b8" prot="public" static="no" mutable="no">
        <type>macro <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> mov &amp;$suffix <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else ld &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else st &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> push <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> pop <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro aux lr aux endm macro aux sr aux endm macro v add &amp;$suffix v endm macro</type>
        <definition>macro s mov&amp; $suffix s endm macro off if else ld&amp; $suffix endif endm macro off if else st&amp; $suffix endif endm macro r push r endm macro r pop r endm macro aux lr aux endm macro aux sr aux endm macro v add&amp; $suffix v endm macro ADD2R</definition>
        <argsstring></argsstring>
        <name>ADD2R</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="51" column="7" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1a9cb390b45f968e4859be09505e376ff6" prot="public" static="no" mutable="no">
        <type>macro <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> mov &amp;$suffix <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else ld &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else st &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> push <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> pop <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro aux lr aux endm macro aux sr aux endm macro v add &amp;$suffix v endm macro v add2 &amp;$suffix v endm macro</type>
        <definition>macro s mov&amp; $suffix s endm macro off if else ld&amp; $suffix endif endm macro off if else st&amp; $suffix endif endm macro r push r endm macro r pop r endm macro aux lr aux endm macro aux sr aux endm macro v add&amp; $suffix v endm macro v add2&amp; $suffix v endm macro ADD3R</definition>
        <argsstring></argsstring>
        <name>ADD3R</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="55" column="7" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1a1548d46b55a34b4830367a41995f6f48" prot="public" static="no" mutable="no">
        <type>macro <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> mov &amp;$suffix <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else ld &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else st &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> push <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> pop <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro aux lr aux endm macro aux sr aux endm macro v add &amp;$suffix v endm macro v add2 &amp;$suffix v endm macro v add3 v endm macro</type>
        <definition>macro s mov&amp; $suffix s endm macro off if else ld&amp; $suffix endif endm macro off if else st&amp; $suffix endif endm macro r push r endm macro r pop r endm macro aux lr aux endm macro aux sr aux endm macro v add&amp; $suffix v endm macro v add2&amp; $suffix v endm macro v add3 v endm macro SUBR</definition>
        <argsstring></argsstring>
        <name>SUBR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="59" column="7" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1aa4129c1e4b6617f30740aada9bdd872d" prot="public" static="no" mutable="no">
        <type>macro <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> mov &amp;$suffix <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else ld &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else st &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> push <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> pop <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro aux lr aux endm macro aux sr aux endm macro v add &amp;$suffix v endm macro v add2 &amp;$suffix v endm macro v add3 v endm macro v sub v endm macro</type>
        <definition>macro s mov&amp; $suffix s endm macro off if else ld&amp; $suffix endif endm macro off if else st&amp; $suffix endif endm macro r push r endm macro r pop r endm macro aux lr aux endm macro aux sr aux endm macro v add&amp; $suffix v endm macro v add2&amp; $suffix v endm macro v add3 v endm macro v sub v endm macro BMSKNR</definition>
        <argsstring></argsstring>
        <name>BMSKNR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="63" column="7" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1a8667c7c46bc57aff0cac0ca728023ed5" prot="public" static="no" mutable="no">
        <type>macro <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> mov &amp;$suffix <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else ld &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else st &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> push <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> pop <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro aux lr aux endm macro aux sr aux endm macro v add &amp;$suffix v endm macro v add2 &amp;$suffix v endm macro v add3 v endm macro v sub v endm macro v bmskn v endm macro</type>
        <definition>macro s mov&amp; $suffix s endm macro off if else ld&amp; $suffix endif endm macro off if else st&amp; $suffix endif endm macro r push r endm macro r pop r endm macro aux lr aux endm macro aux sr aux endm macro v add&amp; $suffix v endm macro v add2&amp; $suffix v endm macro v add3 v endm macro v sub v endm macro v bmskn v endm macro LSRR</definition>
        <argsstring></argsstring>
        <name>LSRR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="67" column="7" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1aaff8d26b5c5198b247467cb55a7df38b" prot="public" static="no" mutable="no">
        <type>macro <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> mov &amp;$suffix <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else ld &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else st &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> push <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> pop <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro aux lr aux endm macro aux sr aux endm macro v add &amp;$suffix v endm macro v add2 &amp;$suffix v endm macro v add3 v endm macro v sub v endm macro v bmskn v endm macro v lsr v endm macro</type>
        <definition>macro s mov&amp; $suffix s endm macro off if else ld&amp; $suffix endif endm macro off if else st&amp; $suffix endif endm macro r push r endm macro r pop r endm macro aux lr aux endm macro aux sr aux endm macro v add&amp; $suffix v endm macro v add2&amp; $suffix v endm macro v add3 v endm macro v sub v endm macro v bmskn v endm macro v lsr v endm macro ASLR</definition>
        <argsstring></argsstring>
        <name>ASLR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="71" column="7" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1abf83bab508dfaea0c41d8093d7b1c551" prot="public" static="no" mutable="no">
        <type>macro <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> mov &amp;$suffix <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else ld &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else st &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> push <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> pop <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro aux lr aux endm macro aux sr aux endm macro v add &amp;$suffix v endm macro v add2 &amp;$suffix v endm macro v add3 v endm macro v sub v endm macro v bmskn v endm macro v lsr v endm macro v asl v endm macro</type>
        <definition>macro s mov&amp; $suffix s endm macro off if else ld&amp; $suffix endif endm macro off if else st&amp; $suffix endif endm macro r push r endm macro r pop r endm macro aux lr aux endm macro aux sr aux endm macro v add&amp; $suffix v endm macro v add2&amp; $suffix v endm macro v add3 v endm macro v sub v endm macro v bmskn v endm macro v lsr v endm macro v asl v endm macro ANDR</definition>
        <argsstring></argsstring>
        <name>ANDR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="75" column="7" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1ac61c6a6fd2801a19a8746a437a7b2a4a" prot="public" static="no" mutable="no">
        <type>macro <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> mov &amp;$suffix <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else ld &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else st &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> push <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> pop <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro aux lr aux endm macro aux sr aux endm macro v add &amp;$suffix v endm macro v add2 &amp;$suffix v endm macro v add3 v endm macro v sub v endm macro v bmskn v endm macro v lsr v endm macro v asl v endm macro v and v endm macro</type>
        <definition>macro s mov&amp; $suffix s endm macro off if else ld&amp; $suffix endif endm macro off if else st&amp; $suffix endif endm macro r push r endm macro r pop r endm macro aux lr aux endm macro aux sr aux endm macro v add&amp; $suffix v endm macro v add2&amp; $suffix v endm macro v add3 v endm macro v sub v endm macro v bmskn v endm macro v lsr v endm macro v asl v endm macro v and v endm macro ORR</definition>
        <argsstring></argsstring>
        <name>ORR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="79" column="7" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1a3b737f39fe46787abeecc3661fad4946" prot="public" static="no" mutable="no">
        <type>macro <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> mov &amp;$suffix <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else ld &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else st &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> push <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> pop <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro aux lr aux endm macro aux sr aux endm macro v add &amp;$suffix v endm macro v add2 &amp;$suffix v endm macro v add3 v endm macro v sub v endm macro v bmskn v endm macro v lsr v endm macro v asl v endm macro v and v endm macro v or v endm macro</type>
        <definition>macro s mov&amp; $suffix s endm macro off if else ld&amp; $suffix endif endm macro off if else st&amp; $suffix endif endm macro r push r endm macro r pop r endm macro aux lr aux endm macro aux sr aux endm macro v add&amp; $suffix v endm macro v add2&amp; $suffix v endm macro v add3 v endm macro v sub v endm macro v bmskn v endm macro v lsr v endm macro v asl v endm macro v and v endm macro v or v endm macro BRR</definition>
        <argsstring></argsstring>
        <name>BRR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="83" column="7" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1abe3bac34bb316244a20ddc88ebc75937" prot="public" static="no" mutable="no">
        <type>macro <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> mov &amp;$suffix <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else ld &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else st &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> push <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> pop <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro aux lr aux endm macro aux sr aux endm macro v add &amp;$suffix v endm macro v add2 &amp;$suffix v endm macro v add3 v endm macro v sub v endm macro v bmskn v endm macro v lsr v endm macro v asl v endm macro v and v endm macro v or v endm macro lbl br &amp;$suffix lbl endm macro</type>
        <definition>macro s mov&amp; $suffix s endm macro off if else ld&amp; $suffix endif endm macro off if else st&amp; $suffix endif endm macro r push r endm macro r pop r endm macro aux lr aux endm macro aux sr aux endm macro v add&amp; $suffix v endm macro v add2&amp; $suffix v endm macro v add3 v endm macro v sub v endm macro v bmskn v endm macro v lsr v endm macro v asl v endm macro v and v endm macro v or v endm macro lbl br&amp; $suffix lbl endm macro BREQR</definition>
        <argsstring></argsstring>
        <name>BREQR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="87" column="7" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1a2914e6612b9957eba801ab818e2cbded" prot="public" static="no" mutable="no">
        <type>macro <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> mov &amp;$suffix <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else ld &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else st &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> push <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> pop <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro aux lr aux endm macro aux sr aux endm macro v add &amp;$suffix v endm macro v add2 &amp;$suffix v endm macro v add3 v endm macro v sub v endm macro v bmskn v endm macro v lsr v endm macro v asl v endm macro v and v endm macro v or v endm macro lbl br &amp;$suffix lbl endm macro lbl breq lbl endm macro</type>
        <definition>macro s mov&amp; $suffix s endm macro off if else ld&amp; $suffix endif endm macro off if else st&amp; $suffix endif endm macro r push r endm macro r pop r endm macro aux lr aux endm macro aux sr aux endm macro v add&amp; $suffix v endm macro v add2&amp; $suffix v endm macro v add3 v endm macro v sub v endm macro v bmskn v endm macro v lsr v endm macro v asl v endm macro v and v endm macro v or v endm macro lbl br&amp; $suffix lbl endm macro lbl breq lbl endm macro CMPR</definition>
        <argsstring></argsstring>
        <name>CMPR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="91" column="7" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="asm-macro-32-bit-mwdt_8h_1a511259cb12c7f1112602eda6a77fab92" prot="public" static="no" mutable="no">
        <type>macro <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> mov &amp;$suffix <ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else ld &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref> if else st &amp;$suffix endif endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> push <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> pop <ref refid="asm-macro-64-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref> endm macro aux lr aux endm macro aux sr aux endm macro v add &amp;$suffix v endm macro v add2 &amp;$suffix v endm macro v add3 v endm macro v sub v endm macro v bmskn v endm macro v lsr v endm macro v asl v endm macro v and v endm macro v or v endm macro lbl br &amp;$suffix lbl endm macro lbl breq lbl endm macro</type>
        <definition>macro s mov&amp; $suffix s endm macro off if else ld&amp; $suffix endif endm macro off if else st&amp; $suffix endif endm macro r push r endm macro r pop r endm macro aux lr aux endm macro aux sr aux endm macro v add&amp; $suffix v endm macro v add2&amp; $suffix v endm macro v add3 v endm macro v sub v endm macro v bmskn v endm macro v lsr v endm macro v asl v endm macro v and v endm macro v or v endm macro lbl br&amp; $suffix lbl endm macro lbl breq lbl endm macro op2 cmp op1</definition>
        <argsstring></argsstring>
        <name>op1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" line="91" column="12" bodyfile="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2021<sp/>Synopsys,<sp/>Inc.<sp/>(www.synopsys.com)</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>ALU/Memory<sp/>instructions<sp/>pseudo-mnemonics<sp/>for<sp/>ARCv2<sp/>and<sp/>ARC32<sp/>ISA</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" refkind="member"><highlight class="normal">.macro<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a62c92c2e7e269b0afb80256c5207da7b" kindref="member">MOVR</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov\&amp;$suffix<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref></highlight></codeline>
<codeline lineno="10"><highlight class="normal">.endm</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="asm-macro-32-bit-mwdt_8h_1a1a46311eefaef8a6a42bae236b114d6b" refkind="member"><highlight class="normal">.macro<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a1a46311eefaef8a6a42bae236b114d6b" kindref="member">LDR</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/><ref refid="asm-macro-32-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref></highlight></codeline>
<codeline lineno="14" refid="asm-macro-32-bit-mwdt_8h_1a0098100be3ff37847ef34bae6d45cd57" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.if<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a0098100be3ff37847ef34bae6d45cd57" kindref="member">$narg</ref><sp/>==<sp/>2</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ld\&amp;$suffix<sp/><sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/>[<ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>]</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.else</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ld\&amp;$suffix<sp/><sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/>[<ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/><ref refid="asm-macro-32-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref>]</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.endif</highlight></codeline>
<codeline lineno="19"><highlight class="normal">.endm</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="asm-macro-32-bit-mwdt_8h_1a2559ca808b98187e087954aafba01ad1" refkind="member"><highlight class="normal">.macro<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a2559ca808b98187e087954aafba01ad1" kindref="member">STR</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/><ref refid="asm-macro-32-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.if<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a0098100be3ff37847ef34bae6d45cd57" kindref="member">$narg</ref><sp/>==<sp/>2</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>st\&amp;$suffix<sp/><sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/>[<ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>]</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.else</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>st\&amp;$suffix<sp/><sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/>[<ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/><ref refid="asm-macro-32-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref>]</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.endif</highlight></codeline>
<codeline lineno="27"><highlight class="normal">.endm</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="asm-macro-32-bit-mwdt_8h_1aaecb2f53890260a5b5518501ac4ae55b" refkind="member"><highlight class="normal">.macro<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aaecb2f53890260a5b5518501ac4ae55b" kindref="member">PUSHR</ref>,<sp/><ref refid="asm-macro-32-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push<sp/><ref refid="asm-macro-32-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref></highlight></codeline>
<codeline lineno="32"><highlight class="normal">.endm</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="asm-macro-32-bit-mwdt_8h_1a0f674b4d35f1df924883bff738f5c288" refkind="member"><highlight class="normal">.macro<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a0f674b4d35f1df924883bff738f5c288" kindref="member">POPR</ref>,<sp/><ref refid="asm-macro-32-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pop<sp/><ref refid="asm-macro-32-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref></highlight></codeline>
<codeline lineno="36"><highlight class="normal">.endm</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="asm-macro-32-bit-mwdt_8h_1af065467bfff1489bf1d38337a5d60988" refkind="member"><highlight class="normal">.macro<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1af065467bfff1489bf1d38337a5d60988" kindref="member">LRR</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/>aux</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lr<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/>aux</highlight></codeline>
<codeline lineno="40"><highlight class="normal">.endm</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="asm-macro-32-bit-mwdt_8h_1a4ab637a402c195c93f2e5f1d0fcccf78" refkind="member"><highlight class="normal">.macro<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a4ab637a402c195c93f2e5f1d0fcccf78" kindref="member">SRR</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/>aux</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sr<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/>aux</highlight></codeline>
<codeline lineno="44"><highlight class="normal">.endm</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="asm-macro-32-bit-mwdt_8h_1a74d94870ad16a58f150bf43374bcc908" refkind="member"><highlight class="normal">.macro<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a74d94870ad16a58f150bf43374bcc908" kindref="member">ADDR</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/>v</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add\&amp;$suffix<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/>v</highlight></codeline>
<codeline lineno="49"><highlight class="normal">.endm</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="asm-macro-32-bit-mwdt_8h_1a4213081f87edc43524180616979bd1b8" refkind="member"><highlight class="normal">.macro<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a4213081f87edc43524180616979bd1b8" kindref="member">ADD2R</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/>v</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add2\&amp;$suffix<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/>v</highlight></codeline>
<codeline lineno="53"><highlight class="normal">.endm</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="asm-macro-32-bit-mwdt_8h_1a9cb390b45f968e4859be09505e376ff6" refkind="member"><highlight class="normal">.macro<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a9cb390b45f968e4859be09505e376ff6" kindref="member">ADD3R</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/>v</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add3<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/>v</highlight></codeline>
<codeline lineno="57"><highlight class="normal">.endm</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="asm-macro-32-bit-mwdt_8h_1a1548d46b55a34b4830367a41995f6f48" refkind="member"><highlight class="normal">.macro<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a1548d46b55a34b4830367a41995f6f48" kindref="member">SUBR</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/>v</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/>v</highlight></codeline>
<codeline lineno="61"><highlight class="normal">.endm</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="asm-macro-32-bit-mwdt_8h_1aa4129c1e4b6617f30740aada9bdd872d" refkind="member"><highlight class="normal">.macro<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aa4129c1e4b6617f30740aada9bdd872d" kindref="member">BMSKNR</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/>v</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bmskn<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/>v</highlight></codeline>
<codeline lineno="65"><highlight class="normal">.endm</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="asm-macro-32-bit-mwdt_8h_1a8667c7c46bc57aff0cac0ca728023ed5" refkind="member"><highlight class="normal">.macro<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a8667c7c46bc57aff0cac0ca728023ed5" kindref="member">LSRR</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/>v</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lsr<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/>v</highlight></codeline>
<codeline lineno="69"><highlight class="normal">.endm</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="asm-macro-32-bit-mwdt_8h_1aaff8d26b5c5198b247467cb55a7df38b" refkind="member"><highlight class="normal">.macro<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aaff8d26b5c5198b247467cb55a7df38b" kindref="member">ASLR</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/>v</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asl<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/>v</highlight></codeline>
<codeline lineno="73"><highlight class="normal">.endm</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="asm-macro-32-bit-mwdt_8h_1abf83bab508dfaea0c41d8093d7b1c551" refkind="member"><highlight class="normal">.macro<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1abf83bab508dfaea0c41d8093d7b1c551" kindref="member">ANDR</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/>v</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/>v</highlight></codeline>
<codeline lineno="77"><highlight class="normal">.endm</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="asm-macro-32-bit-mwdt_8h_1ac61c6a6fd2801a19a8746a437a7b2a4a" refkind="member"><highlight class="normal">.macro<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1ac61c6a6fd2801a19a8746a437a7b2a4a" kindref="member">ORR</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/>v</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/>v</highlight></codeline>
<codeline lineno="81"><highlight class="normal">.endm</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="asm-macro-32-bit-mwdt_8h_1a3b737f39fe46787abeecc3661fad4946" refkind="member"><highlight class="normal">.macro<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a3b737f39fe46787abeecc3661fad4946" kindref="member">BRR</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/>lbl</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>br\&amp;$suffix<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/>lbl</highlight></codeline>
<codeline lineno="85"><highlight class="normal">.endm</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="asm-macro-32-bit-mwdt_8h_1abe3bac34bb316244a20ddc88ebc75937" refkind="member"><highlight class="normal">.macro<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1abe3bac34bb316244a20ddc88ebc75937" kindref="member">BREQR</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/>lbl</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>breq<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1aabf7c54edb88081579e2b6fc941f10e9" kindref="member">d</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a54157b9c4080ed8fdbe7272d4ffe2b34" kindref="member">s</ref>,<sp/>lbl</highlight></codeline>
<codeline lineno="89"><highlight class="normal">.endm</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="asm-macro-32-bit-mwdt_8h_1a2914e6612b9957eba801ab818e2cbded" refkind="member"><highlight class="normal">.macro<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a2914e6612b9957eba801ab818e2cbded" kindref="member">CMPR</ref>,<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a511259cb12c7f1112602eda6a77fab92" kindref="member">op1</ref>,<sp/>op2</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/><ref refid="asm-macro-32-bit-mwdt_8h_1a511259cb12c7f1112602eda6a77fab92" kindref="member">op1</ref>,<sp/>op2</highlight></codeline>
<codeline lineno="93"><highlight class="normal">.endm</highlight></codeline>
    </programlisting>
    <location file="include/arch/arc/asm-compat/asm-macro-32-bit-mwdt.h"/>
  </compounddef>
</doxygen>
