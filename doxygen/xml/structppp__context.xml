<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structppp__context" kind="struct" language="C++" prot="public">
    <compoundname>ppp_context</compoundname>
    <includes refid="ppp_8h" local="no">ppp.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structppp__context_1a6b327cafe07a0807163589471a9bdae8" prot="public" static="no" mutable="no">
        <type><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref></type>
        <definition>atomic_t ppp_context::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flags representing PPP state, which are accessed from multiple threads. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="382" column="10" bodyfile="include/net/ppp.h" bodystart="382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1a5671d7ba465c424004f0460e5ed0d3ba" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref></type>
        <definition>struct k_work_delayable ppp_context::startup</definition>
        <argsstring></argsstring>
        <name>startup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PPP startup worker. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="385" column="23" bodyfile="include/net/ppp.h" bodystart="385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1a6a45323d57ded072cca7f6cea8d91732" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__work" kindref="compound">k_work</ref></type>
        <definition>struct k_work ppp_context::carrier_work</definition>
        <argsstring></argsstring>
        <name>carrier_work</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Carrier ON/OFF handler worker. This is used to create network interface UP/DOWN event when PPP L2 driver notices carrier ON/OFF situation. We must not create another network management event from inside management handler thus we use worker thread to trigger the UP/DOWN event. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="393" column="13" bodyfile="include/net/ppp.h" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1ac555024228a1e1d830c915a098428bc5" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structppp__fsm" kindref="compound">ppp_fsm</ref></type>
        <definition>struct ppp_fsm ppp_context::fsm</definition>
        <argsstring></argsstring>
        <name>fsm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finite state machine for LCP </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="397" column="14" bodyfile="include/net/ppp.h" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1a37f609192ee6b739d7018d5a07ce179f" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structlcp__options" kindref="compound">lcp_options</ref></type>
        <definition>struct lcp_options ppp_context::my_options</definition>
        <argsstring></argsstring>
        <name>my_options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Options that we want to request </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="400" column="18" bodyfile="include/net/ppp.h" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1a80fffd30b145b0842e36299ac78d5da8" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structlcp__options" kindref="compound">lcp_options</ref></type>
        <definition>struct lcp_options ppp_context::peer_options</definition>
        <argsstring></argsstring>
        <name>peer_options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Options that peer want to request </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="403" column="18" bodyfile="include/net/ppp.h" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1a4d91bf9e6e36415b13be02ccf03d3e40" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t ppp_context::magic</definition>
        <argsstring></argsstring>
        <name>magic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Magic-Number value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="406" column="10" bodyfile="include/net/ppp.h" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1a0bf92bb809edfb6c703c78c0d503f43c" prot="public" static="no" mutable="no">
        <type>struct ppp_context::@188</type>
        <definition>struct ppp_context::@188 ppp_context::lcp</definition>
        <argsstring></argsstring>
        <name>lcp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="410" column="5"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1a3b0bfb9c3ceece34565b282efa74390e" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
        <definition>struct net_if* ppp_context::iface</definition>
        <argsstring></argsstring>
        <name>iface</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Network interface related to this PPP connection </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="477" column="13" bodyfile="include/net/ppp.h" bodystart="477" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1a6afb964ef87696fdadb5cb0c714bd841" prot="public" static="no" mutable="no">
        <type>enum <ref refid="group__ppp_1ga284e237a6323f2daffc444a73a4b8b6b" kindref="member">ppp_phase</ref></type>
        <definition>enum ppp_phase ppp_context::phase</definition>
        <argsstring></argsstring>
        <name>phase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Current phase of PPP link </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="480" column="15" bodyfile="include/net/ppp.h" bodystart="480" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1a1c6674bad19047abcc3097bf5ff5f31d" prot="public" static="no" mutable="no">
        <type>enum <ref refid="group__net__l2_1gac7db0cc6c56d371a5803873074ec2516" kindref="member">net_l2_flags</ref></type>
        <definition>enum net_l2_flags ppp_context::ppp_l2_flags</definition>
        <argsstring></argsstring>
        <name>ppp_l2_flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This tells what features the PPP supports. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="483" column="18" bodyfile="include/net/ppp.h" bodystart="483" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1a2e04c6e411fe5b07d9d2cda1a61db57f" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int ppp_context::network_protos_open</definition>
        <argsstring></argsstring>
        <name>network_protos_open</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This tells how many network protocols are open </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="486" column="5" bodyfile="include/net/ppp.h" bodystart="486" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1a9dd6e156897c53d488344bbbe05d4ae1" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int ppp_context::network_protos_up</definition>
        <argsstring></argsstring>
        <name>network_protos_up</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This tells how many network protocols are up </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="489" column="5" bodyfile="include/net/ppp.h" bodystart="489" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1a62195bd0143eea777affddc87a92b4e7" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t ppp_context::is_net_carrier_up</definition>
        <argsstring></argsstring>
        <name>is_net_carrier_up</name>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is network carrier up </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="492" column="10" bodyfile="include/net/ppp.h" bodystart="492" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1a3d97c93b183ca455daf0e3bc2b9c25e1" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t ppp_context::is_ready_to_serve</definition>
        <argsstring></argsstring>
        <name>is_ready_to_serve</name>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is PPP ready to receive packets </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="495" column="10" bodyfile="include/net/ppp.h" bodystart="495" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1a7f103857c7412a6ee9471b6c67baea71" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t ppp_context::is_enabled</definition>
        <argsstring></argsstring>
        <name>is_enabled</name>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is PPP L2 enabled or not </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="498" column="10" bodyfile="include/net/ppp.h" bodystart="498" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1a8f6bdca27d6ba4dcc1e673025bab38dc" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t ppp_context::is_startup_pending</definition>
        <argsstring></argsstring>
        <name>is_startup_pending</name>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PPP startup pending </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="501" column="10" bodyfile="include/net/ppp.h" bodystart="501" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1acdee16f229cb6aa0672630de1d3ee39b" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t ppp_context::is_enable_done</definition>
        <argsstring></argsstring>
        <name>is_enable_done</name>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PPP enable pending </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="504" column="10" bodyfile="include/net/ppp.h" bodystart="504" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1a861216f943c5af5d5db58f10ba4263ac" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t ppp_context::is_ipcp_up</definition>
        <argsstring></argsstring>
        <name>is_ipcp_up</name>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>IPCP status (up / down) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="507" column="10" bodyfile="include/net/ppp.h" bodystart="507" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1a7ef9ac6bb1f86ea417032fe93fc7e8a0" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t ppp_context::is_ipcp_open</definition>
        <argsstring></argsstring>
        <name>is_ipcp_open</name>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>IPCP open status (open / closed) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="510" column="10" bodyfile="include/net/ppp.h" bodystart="510" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1a7b4ee6988626cb69c012a0b58c27bef5" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t ppp_context::is_ipv6cp_up</definition>
        <argsstring></argsstring>
        <name>is_ipv6cp_up</name>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>IPV6CP status (up / down) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="513" column="10" bodyfile="include/net/ppp.h" bodystart="513" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1ab139c8d6f1d16c702cb9ca92a7f82178" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t ppp_context::is_ipv6cp_open</definition>
        <argsstring></argsstring>
        <name>is_ipv6cp_open</name>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>IPV6CP open status (open / closed) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="516" column="10" bodyfile="include/net/ppp.h" bodystart="516" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1a52227a05ce8a63f3a4f7535e60fdf979" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t ppp_context::is_pap_up</definition>
        <argsstring></argsstring>
        <name>is_pap_up</name>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PAP status (up / down) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="519" column="10" bodyfile="include/net/ppp.h" bodystart="519" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__context_1a80c2c3248c47fac7fce8d463cfbc0c9f" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t ppp_context::is_pap_open</definition>
        <argsstring></argsstring>
        <name>is_pap_open</name>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PAP open status (open / closed) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="522" column="10" bodyfile="include/net/ppp.h" bodystart="522" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>PPP L2 context specific to certain network interface </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="10">
        <label>__thread_entry</label>
      </node>
      <node id="8">
        <label>_callee_saved</label>
      </node>
      <node id="12">
        <label>_mem_domain_info</label>
      </node>
      <node id="18">
        <label>_slist</label>
      </node>
      <node id="4">
        <label>_snode</label>
      </node>
      <node id="17">
        <label>_thread_arch</label>
      </node>
      <node id="7">
        <label>_thread_base</label>
      </node>
      <node id="11">
        <label>_thread_stack_info</label>
      </node>
      <node id="19">
        <label>_timeout</label>
      </node>
      <node id="9">
        <label>_wait_q_t</label>
      </node>
      <node id="30">
        <label>device</label>
        <link refid="structdevice"/>
        <childnode refid="31" relation="usage">
          <edgelabel>state</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>device_state</label>
        <link refid="structdevice__state"/>
      </node>
      <node id="14">
        <label>k_heap</label>
        <link refid="structk__heap"/>
        <childnode refid="15" relation="usage">
          <edgelabel>heap</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>wait_q</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>lock</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>k_mutex</label>
        <link refid="structk__mutex"/>
        <childnode refid="9" relation="usage">
          <edgelabel>wait_q</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>k_spinlock</label>
        <link refid="structk__spinlock"/>
      </node>
      <node id="6">
        <label>k_thread</label>
        <link refid="structk__thread"/>
        <childnode refid="7" relation="usage">
          <edgelabel>base</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>callee_saved</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>join_queue</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>entry</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>next_thread</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>stack_info</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>mem_domain_info</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>stack_obj</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>resource_pool</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>arch</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>k_work</label>
        <link refid="structk__work"/>
        <childnode refid="4" relation="usage">
          <edgelabel>node</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>handler</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>queue</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>k_work_delayable</label>
        <link refid="structk__work__delayable"/>
        <childnode refid="3" relation="usage">
          <edgelabel>work</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>timeout</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>queue</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>k_work_q</label>
        <link refid="structk__work__q"/>
        <childnode refid="6" relation="usage">
          <edgelabel>thread</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>pending</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>drainq</edgelabel>
          <edgelabel>notifyq</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>lcp_options</label>
        <link refid="structlcp__options"/>
      </node>
      <node id="22">
        <label>net_buf</label>
        <link refid="structnet__buf"/>
        <childnode refid="4" relation="usage">
          <edgelabel>node</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>frags</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>b</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>net_buf_simple</label>
        <link refid="structnet__buf__simple"/>
      </node>
      <node id="25">
        <label>net_context</label>
        <link refid="structnet__context"/>
        <childnode refid="26" relation="usage">
          <edgelabel>lock</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>remote</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>connect_cb</edgelabel>
          <edgelabel>recv_cb</edgelabel>
          <edgelabel>send_cb</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>net_if</label>
        <link refid="structnet__if"/>
        <childnode refid="29" relation="usage">
          <edgelabel>if_dev</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>config</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>net_if_config</label>
        <link refid="structnet__if__config"/>
        <childnode refid="35" relation="usage">
          <edgelabel>ip</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>net_if_dev</label>
        <link refid="structnet__if__dev"/>
        <childnode refid="30" relation="usage">
          <edgelabel>dev</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>l2</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>link_addr</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>net_if_ip</label>
        <link refid="structnet__if__ip"/>
      </node>
      <node id="32">
        <label>net_l2</label>
        <link refid="structnet__l2"/>
      </node>
      <node id="33">
        <label>net_linkaddr</label>
        <link refid="structnet__linkaddr"/>
      </node>
      <node id="21">
        <label>net_pkt</label>
        <link refid="structnet__pkt"/>
        <childnode refid="22" relation="usage">
          <edgelabel>buffer</edgelabel>
          <edgelabel>frags</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>cursor</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>context</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>iface</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>net_pkt_cursor</label>
        <link refid="structnet__pkt__cursor"/>
        <childnode refid="22" relation="usage">
          <edgelabel>buf</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>ppp_context</label>
        <link refid="structppp__context"/>
        <childnode refid="2" relation="usage">
          <edgelabel>startup</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>carrier_work</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>fsm</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>my_options</edgelabel>
          <edgelabel>peer_options</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>iface</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>ppp_fsm</label>
        <link refid="structppp__fsm"/>
        <childnode refid="2" relation="usage">
          <edgelabel>timer</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>config_info_add</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="36">
        <label>ppp_my_option_data</label>
        <link refid="structppp__my__option__data"/>
      </node>
      <node id="27">
        <label>sockaddr</label>
        <link refid="structsockaddr"/>
      </node>
      <node id="15">
        <label>sys_heap</label>
        <link refid="structsys__heap"/>
      </node>
      <node id="13">
        <label>z_thread_stack_element</label>
      </node>
    </collaborationgraph>
    <location file="include/net/ppp.h" line="378" column="1" bodyfile="include/net/ppp.h" bodystart="378" bodyend="523"/>
    <listofallmembers>
      <member refid="structppp__context_1a6a45323d57ded072cca7f6cea8d91732" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>carrier_work</name></member>
      <member refid="structppp__context_1a6b327cafe07a0807163589471a9bdae8" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>flags</name></member>
      <member refid="structppp__context_1ac555024228a1e1d830c915a098428bc5" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>fsm</name></member>
      <member refid="structppp__context_1a3b0bfb9c3ceece34565b282efa74390e" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>iface</name></member>
      <member refid="structppp__context_1acdee16f229cb6aa0672630de1d3ee39b" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>is_enable_done</name></member>
      <member refid="structppp__context_1a7f103857c7412a6ee9471b6c67baea71" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>is_enabled</name></member>
      <member refid="structppp__context_1a7ef9ac6bb1f86ea417032fe93fc7e8a0" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>is_ipcp_open</name></member>
      <member refid="structppp__context_1a861216f943c5af5d5db58f10ba4263ac" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>is_ipcp_up</name></member>
      <member refid="structppp__context_1ab139c8d6f1d16c702cb9ca92a7f82178" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>is_ipv6cp_open</name></member>
      <member refid="structppp__context_1a7b4ee6988626cb69c012a0b58c27bef5" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>is_ipv6cp_up</name></member>
      <member refid="structppp__context_1a62195bd0143eea777affddc87a92b4e7" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>is_net_carrier_up</name></member>
      <member refid="structppp__context_1a80c2c3248c47fac7fce8d463cfbc0c9f" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>is_pap_open</name></member>
      <member refid="structppp__context_1a52227a05ce8a63f3a4f7535e60fdf979" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>is_pap_up</name></member>
      <member refid="structppp__context_1a3d97c93b183ca455daf0e3bc2b9c25e1" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>is_ready_to_serve</name></member>
      <member refid="structppp__context_1a8f6bdca27d6ba4dcc1e673025bab38dc" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>is_startup_pending</name></member>
      <member refid="structppp__context_1a0bf92bb809edfb6c703c78c0d503f43c" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>lcp</name></member>
      <member refid="structppp__context_1a4d91bf9e6e36415b13be02ccf03d3e40" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>magic</name></member>
      <member refid="structppp__context_1a37f609192ee6b739d7018d5a07ce179f" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>my_options</name></member>
      <member refid="structppp__context_1a2e04c6e411fe5b07d9d2cda1a61db57f" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>network_protos_open</name></member>
      <member refid="structppp__context_1a9dd6e156897c53d488344bbbe05d4ae1" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>network_protos_up</name></member>
      <member refid="structppp__context_1a80fffd30b145b0842e36299ac78d5da8" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>peer_options</name></member>
      <member refid="structppp__context_1a6afb964ef87696fdadb5cb0c714bd841" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>phase</name></member>
      <member refid="structppp__context_1a1c6674bad19047abcc3097bf5ff5f31d" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>ppp_l2_flags</name></member>
      <member refid="structppp__context_1a5671d7ba465c424004f0460e5ed0d3ba" prot="public" virt="non-virtual"><scope>ppp_context</scope><name>startup</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
