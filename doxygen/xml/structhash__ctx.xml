<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structhash__ctx" kind="struct" language="C++" prot="public">
    <compoundname>hash_ctx</compoundname>
    <includes refid="hash_8h" local="no">hash.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structhash__ctx_1abe1e70bd23305296e54564b5966ff310" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
        <definition>const struct device* hash_ctx::device</definition>
        <argsstring></argsstring>
        <name>device</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The device driver instance this crypto context relates to. Will be populated by the begin_session() API. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/crypto/hash.h" line="51" column="19" bodyfile="include/crypto/hash.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhash__ctx_1ad9c9bb4472975ba6999986bb6c01b501" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* hash_ctx::drv_sessn_state</definition>
        <argsstring></argsstring>
        <name>drv_sessn_state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the driver supports multiple simultaneously crypto sessions, this will identify the specific driver state this crypto session relates to. Since dynamic memory allocation is not possible, it is suggested that at build time drivers allocate space for the max simultaneous sessions they intend to support. To be populated by the driver on return from begin_session(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/crypto/hash.h" line="60" column="6" bodyfile="include/crypto/hash.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhash__ctx_1a72a2e7af667bed1ee1dabb8411b01e40" prot="public" static="no" mutable="no">
        <type><ref refid="group__crypto__hash_1ga955369c6da6aa70ded229d8861292070" kindref="member">hash_op_t</ref></type>
        <definition>hash_op_t hash_ctx::hash_hndlr</definition>
        <argsstring></argsstring>
        <name>hash_hndlr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hash handler set up when the session begins. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/crypto/hash.h" line="65" column="11" bodyfile="include/crypto/hash.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhash__ctx_1a33dbeb54cd8663f1f5391988d8ee642e" prot="public" static="no" mutable="no">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool hash_ctx::started</definition>
        <argsstring></argsstring>
        <name>started</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If it has started a multipart hash operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/crypto/hash.h" line="70" column="6" bodyfile="include/crypto/hash.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhash__ctx_1ab550711912423a0eb03c410aef491854" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t hash_ctx::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>How certain fields are to be interpreted for this session. (A bitmask of CAP_* below.) To be populated by the app before calling <ref refid="group__crypto__hash_1ga9b736d047cbfb7530ffa0bc4b64d6ad1" kindref="member">hash_begin_session()</ref>. An app can obtain the capability flags supported by a hw/driver by calling <ref refid="group__crypto_1gadb2c24136bb56927bb14d4cfffdd5d80" kindref="member">crypto_query_hwcaps()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/crypto/hash.h" line="78" column="10" bodyfile="include/crypto/hash.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Structure encoding session parameters.</para>
<para>Refer to comments for individual fields to know the contract in terms of who fills what and when w.r.t begin_session() call. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>device</label>
        <link refid="structdevice"/>
        <childnode refid="3" relation="usage">
          <edgelabel>state</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>device_state</label>
        <link refid="structdevice__state"/>
      </node>
      <node id="1">
        <label>hash_ctx</label>
        <link refid="structhash__ctx"/>
        <childnode refid="2" relation="usage">
          <edgelabel>device</edgelabel>
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>hash_hndlr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/crypto/hash.h" line="47" column="1" bodyfile="include/crypto/hash.h" bodystart="47" bodyend="79"/>
    <listofallmembers>
      <member refid="structhash__ctx_1abe1e70bd23305296e54564b5966ff310" prot="public" virt="non-virtual"><scope>hash_ctx</scope><name>device</name></member>
      <member refid="structhash__ctx_1ad9c9bb4472975ba6999986bb6c01b501" prot="public" virt="non-virtual"><scope>hash_ctx</scope><name>drv_sessn_state</name></member>
      <member refid="structhash__ctx_1ab550711912423a0eb03c410aef491854" prot="public" virt="non-virtual"><scope>hash_ctx</scope><name>flags</name></member>
      <member refid="structhash__ctx_1a72a2e7af667bed1ee1dabb8411b01e40" prot="public" virt="non-virtual"><scope>hash_ctx</scope><name>hash_hndlr</name></member>
      <member refid="structhash__ctx_1a33dbeb54cd8663f1f5391988d8ee642e" prot="public" virt="non-virtual"><scope>hash_ctx</scope><name>started</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
