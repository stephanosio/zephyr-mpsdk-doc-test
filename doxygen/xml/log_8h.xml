<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="log_8h" kind="file" language="C++">
    <compoundname>log.h</compoundname>
    <includes refid="log__instance_8h" local="no">logging/log_instance.h</includes>
    <includes refid="include_2logging_2log__core_8h" local="no">logging/log_core.h</includes>
    <includedby refid="stack_8h" local="no">include/debug/stack.h</includedby>
    <includedby refid="net__core_8h" local="no">include/net/net_core.h</includedby>
    <includedby refid="shell_2shell_8h" local="no">include/shell/shell.h</includedby>
    <includedby refid="syscall__handler_8h" local="no">include/syscall_handler.h</includedby>
    <includedby refid="usb__device_8h" local="no">include/usb/usb_device.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/logging/log.h</label>
        <link refid="log_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>logging/log_core.h</label>
        <link refid="include_2logging_2log__core_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>logging/log_instance.h</label>
        <link refid="log__instance_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>logging/log_msg.h</label>
        <link refid="log__msg_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>logging/log_msg2.h</label>
        <link refid="include_2logging_2log__msg2_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="19">
        <label>sys/cbprintf.h</label>
        <link refid="cbprintf_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>sys/cbprintf_cxx.h</label>
        <link refid="cbprintf__cxx_8h"/>
      </node>
      <node id="22">
        <label>sys/cbprintf_internal.h</label>
        <link refid="cbprintf__internal_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>sys/mpsc_packet.h</label>
        <link refid="mpsc__packet_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="11">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="3">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="5">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="21">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>syscalls/log_core.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2log__core_8h"/>
      </node>
      <node id="28">
        <label>syscalls/log_msg2.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2log__msg2_8h"/>
      </node>
      <node id="27">
        <label>alloca.h</label>
      </node>
      <node id="20">
        <label>stdarg.h</label>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
      <node id="29">
        <label>syscall.h</label>
      </node>
      <node id="25">
        <label>syscalls/errno_private.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/debug/stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>include/drivers/ptp_clock.h</label>
        <link refid="ptp__clock_8h"/>
      </node>
      <node id="1">
        <label>include/logging/log.h</label>
        <link refid="log_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>include/net/bt.h</label>
        <link refid="bt_8h"/>
      </node>
      <node id="10">
        <label>include/net/can.h</label>
        <link refid="net_2can_8h"/>
      </node>
      <node id="20">
        <label>include/net/dns_resolve.h</label>
        <link refid="dns__resolve_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>include/net/dsa.h</label>
        <link refid="dsa_8h"/>
      </node>
      <node id="12">
        <label>include/net/dummy.h</label>
        <link refid="dummy_8h"/>
      </node>
      <node id="13">
        <label>include/net/ethernet.h</label>
        <link refid="ethernet_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>include/net/ethernet_mgmt.h</label>
        <link refid="ethernet__mgmt_8h"/>
      </node>
      <node id="8">
        <label>include/net/gptp.h</label>
        <link refid="gptp_8h"/>
      </node>
      <node id="46">
        <label>include/net/ieee802154.h</label>
        <link refid="ieee802154_8h"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>include/net/ieee802154_mgmt.h</label>
        <link refid="ieee802154__mgmt_8h"/>
      </node>
      <node id="16">
        <label>include/net/ieee802154_radio.h</label>
        <link refid="ieee802154__radio_8h"/>
      </node>
      <node id="17">
        <label>include/net/igmp.h</label>
        <link refid="igmp_8h"/>
      </node>
      <node id="18">
        <label>include/net/net_config.h</label>
        <link refid="net__config_8h"/>
      </node>
      <node id="19">
        <label>include/net/net_context.h</label>
        <link refid="net__context_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>include/net/net_core.h</label>
        <link refid="net__core_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>include/net/net_if.h</label>
        <link refid="net__if_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>include/net/net_mgmt.h</label>
        <link refid="net__mgmt_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>include/net/net_offload.h</label>
        <link refid="net__offload_8h"/>
      </node>
      <node id="34">
        <label>include/net/net_pkt.h</label>
        <link refid="net__pkt_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>include/net/net_pkt_filter.h</label>
        <link refid="net__pkt__filter_8h"/>
      </node>
      <node id="48">
        <label>include/net/net_stats.h</label>
        <link refid="net__stats_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>include/net/openthread.h</label>
        <link refid="openthread_8h"/>
      </node>
      <node id="35">
        <label>include/net/ppp.h</label>
        <link refid="ppp_8h"/>
      </node>
      <node id="36">
        <label>include/net/promiscuous.h</label>
        <link refid="promiscuous_8h"/>
      </node>
      <node id="49">
        <label>include/net/ptp_time.h</label>
        <link refid="ptp__time_8h"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>include/net/sntp.h</label>
        <link refid="sntp_8h"/>
      </node>
      <node id="21">
        <label>include/net/socket.h</label>
        <link refid="net_2socket_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>include/net/socket_can.h</label>
        <link refid="socket__can_8h"/>
      </node>
      <node id="42">
        <label>include/net/socket_net_mgmt.h</label>
        <link refid="socket__net__mgmt_8h"/>
      </node>
      <node id="22">
        <label>include/net/socket_offload.h</label>
        <link refid="socket__offload_8h"/>
      </node>
      <node id="27">
        <label>include/net/socketutils.h</label>
        <link refid="socketutils_8h"/>
      </node>
      <node id="23">
        <label>include/net/tftp.h</label>
        <link refid="tftp_8h"/>
      </node>
      <node id="51">
        <label>include/net/trickle.h</label>
        <link refid="trickle_8h"/>
      </node>
      <node id="37">
        <label>include/net/udp.h</label>
        <link refid="udp_8h"/>
      </node>
      <node id="38">
        <label>include/net/virtual.h</label>
        <link refid="virtual_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>include/net/virtual_mgmt.h</label>
        <link refid="virtual__mgmt_8h"/>
      </node>
      <node id="43">
        <label>include/net/wifi_mgmt.h</label>
        <link refid="wifi__mgmt_8h"/>
      </node>
      <node id="24">
        <label>include/posix/arpa/inet.h</label>
        <link refid="inet_8h"/>
      </node>
      <node id="25">
        <label>include/posix/net/if.h</label>
        <link refid="if_8h"/>
      </node>
      <node id="26">
        <label>include/posix/netdb.h</label>
        <link refid="netdb_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>include/posix/netinet/in.h</label>
        <link refid="in_8h"/>
      </node>
      <node id="29">
        <label>include/posix/netinet/tcp.h</label>
        <link refid="tcp_8h"/>
      </node>
      <node id="30">
        <label>include/posix/poll.h</label>
        <link refid="poll_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>include/posix/sys/socket.h</label>
        <link refid="posix_2sys_2socket_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>include/shell/shell.h</label>
        <link refid="shell_2shell_8h"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>include/shell/shell_dummy.h</label>
        <link refid="shell__dummy_8h"/>
      </node>
      <node id="54">
        <label>include/shell/shell_rtt.h</label>
        <link refid="shell__rtt_8h"/>
      </node>
      <node id="55">
        <label>include/shell/shell_telnet.h</label>
        <link refid="shell__telnet_8h"/>
      </node>
      <node id="56">
        <label>include/shell/shell_uart.h</label>
        <link refid="shell__uart_8h"/>
      </node>
      <node id="57">
        <label>include/syscall_handler.h</label>
        <link refid="syscall__handler_8h"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>include/usb/usb_device.h</label>
        <link refid="usb__device_8h"/>
      </node>
      <node id="58">
        <label>tests/kernel/fatal/exception/src/main.c</label>
        <link refid="fatal_2exception_2src_2main_8c"/>
      </node>
      <node id="59">
        <label>tests/kernel/mem_protect/mem_protect/src/inherit.c</label>
        <link refid="inherit_8c"/>
      </node>
      <node id="60">
        <label>tests/kernel/mem_protect/mem_protect/src/kobject.c</label>
        <link refid="kobject_8c"/>
      </node>
      <node id="61">
        <label>tests/kernel/mem_protect/obj_validation/src/main.c</label>
        <link refid="mem__protect_2obj__validation_2src_2main_8c"/>
      </node>
      <node id="62">
        <label>tests/kernel/mem_protect/syscalls/src/main.c</label>
        <link refid="mem__protect_2syscalls_2src_2main_8c"/>
      </node>
      <node id="3">
        <label>tests/kernel/mem_protect/userspace/src/main.c</label>
        <link refid="mem__protect_2userspace_2src_2main_8c"/>
      </node>
      <node id="4">
        <label>tests/kernel/profiling/profiling_api/src/main.c</label>
        <link refid="profiling_2profiling__api_2src_2main_8c"/>
      </node>
      <node id="5">
        <label>tests/kernel/threads/dynamic_thread/src/main.c</label>
        <link refid="threads_2dynamic__thread_2src_2main_8c"/>
      </node>
      <node id="6">
        <label>tests/kernel/threads/thread_apis/src/test_kthread_for_each.c</label>
        <link refid="test__kthread__for__each_8c"/>
      </node>
      <node id="63">
        <label>tests/kernel/threads/thread_stack/src/main.c</label>
        <link refid="threads_2thread__stack_2src_2main_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__log__api_1gad6db28c61c838c1f7316417e1e4847f2" prot="public" static="no">
        <name>LOG_ERR</name>
        <param><defname>...</defname></param>
        <initializer>Z_LOG(<ref refid="include_2logging_2log__core_8h_1ab3a03740685cbdaa375e2bde8247fdc6" kindref="member">LOG_LEVEL_ERR</ref>, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Writes an ERROR level message to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s meant to report severe errors, such as those from which it&apos;s not possible to recover.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A string optionally containing printk valid conversion specifier, followed by as many values as specifiers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="40" column="9" bodyfile="include/logging/log.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga644db4299681d9ebf06f8745ad984c65" prot="public" static="no">
        <name>LOG_WRN</name>
        <param><defname>...</defname></param>
        <initializer>Z_LOG(<ref refid="include_2logging_2log__core_8h_1a54f5db1327d9fdbaecbb03a6969de97b" kindref="member">LOG_LEVEL_WRN</ref>, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Writes a WARNING level message to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s meant to register messages related to unusual situations that are not necessarily errors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A string optionally containing printk valid conversion specifier, followed by as many values as specifiers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="51" column="9" bodyfile="include/logging/log.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga9c338f3170acf38a8532d1181d26704e" prot="public" static="no">
        <name>LOG_INF</name>
        <param><defname>...</defname></param>
        <initializer>Z_LOG(<ref refid="include_2logging_2log__core_8h_1a281bc2ce5315e6fae369796c0fdf5c1d" kindref="member">LOG_LEVEL_INF</ref>, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Writes an INFO level message to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s meant to write generic user oriented messages.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A string optionally containing printk valid conversion specifier, followed by as many values as specifiers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="61" column="9" bodyfile="include/logging/log.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1gafb97e6291db24665313453d192941330" prot="public" static="no">
        <name>LOG_DBG</name>
        <param><defname>...</defname></param>
        <initializer>Z_LOG(<ref refid="include_2logging_2log__core_8h_1ad1f7d41b1af28ba81ea63d24c9b690cc" kindref="member">LOG_LEVEL_DBG</ref>, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Writes a DEBUG level message to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s meant to write developer oriented information.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A string optionally containing printk valid conversion specifier, followed by as many values as specifiers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="71" column="9" bodyfile="include/logging/log.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga4ab5cae247b853bf9f4f0bf761c1c71e" prot="public" static="no">
        <name>LOG_PRINTK</name>
        <param><defname>...</defname></param>
        <initializer>Z_LOG_PRINTK(__VA_ARGS__)</initializer>
        <briefdescription>
<para>Unconditionally print raw log message. </para>
        </briefdescription>
        <detaileddescription>
<para>The result is same as if printk was used but it goes through logging infrastructure thus utilizes logging mode, e.g. deferred mode.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A string optionally containing printk valid conversion specifier, followed by as many values as specifiers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="82" column="9" bodyfile="include/logging/log.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga830f32743847c52e01a510ab0716fe90" prot="public" static="no">
        <name>LOG_INST_ERR</name>
        <param><defname>_log_inst</defname></param>
        <param><defname>...</defname></param>
        <initializer>	Z_LOG_INSTANCE(<ref refid="include_2logging_2log__core_8h_1ab3a03740685cbdaa375e2bde8247fdc6" kindref="member">LOG_LEVEL_ERR</ref>, _log_inst, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Writes an ERROR level message associated with the instance to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>Message is associated with specific instance of the module which has independent filtering settings (if runtime filtering is enabled) and message prefix (&lt;module_name&gt;.&lt;instance_name&gt;). It&apos;s meant to report severe errors, such as those from which it&apos;s not possible to recover.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_log_inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log structure associated with the instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A string optionally containing printk valid conversion specifier, followed by as many values as specifiers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="96" column="9" bodyfile="include/logging/log.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga76057f789dfc164adbb1dbc9f3aff417" prot="public" static="no">
        <name>LOG_INST_WRN</name>
        <param><defname>_log_inst</defname></param>
        <param><defname>...</defname></param>
        <initializer>	Z_LOG_INSTANCE(<ref refid="include_2logging_2log__core_8h_1a54f5db1327d9fdbaecbb03a6969de97b" kindref="member">LOG_LEVEL_WRN</ref>, _log_inst, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Writes a WARNING level message associated with the instance to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>Message is associated with specific instance of the module which has independent filtering settings (if runtime filtering is enabled) and message prefix (&lt;module_name&gt;.&lt;instance_name&gt;). It&apos;s meant to register messages related to unusual situations that are not necessarily errors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_log_inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log structure associated with the instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A string optionally containing printk valid conversion specifier, followed by as many values as specifiers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="112" column="9" bodyfile="include/logging/log.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga222c5b535fb3ecb36dea97885c794188" prot="public" static="no">
        <name>LOG_INST_INF</name>
        <param><defname>_log_inst</defname></param>
        <param><defname>...</defname></param>
        <initializer>	Z_LOG_INSTANCE(<ref refid="include_2logging_2log__core_8h_1a281bc2ce5315e6fae369796c0fdf5c1d" kindref="member">LOG_LEVEL_INF</ref>, _log_inst, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Writes an INFO level message associated with the instance to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>Message is associated with specific instance of the module which has independent filtering settings (if runtime filtering is enabled) and message prefix (&lt;module_name&gt;.&lt;instance_name&gt;). It&apos;s meant to write generic user oriented messages.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_log_inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log structure associated with the instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A string optionally containing printk valid conversion specifier, followed by as many values as specifiers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="127" column="9" bodyfile="include/logging/log.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1gae10014012020ea5a6b9a86a5224f19b0" prot="public" static="no">
        <name>LOG_INST_DBG</name>
        <param><defname>_log_inst</defname></param>
        <param><defname>...</defname></param>
        <initializer>	Z_LOG_INSTANCE(<ref refid="include_2logging_2log__core_8h_1ad1f7d41b1af28ba81ea63d24c9b690cc" kindref="member">LOG_LEVEL_DBG</ref>, _log_inst, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Writes a DEBUG level message associated with the instance to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>Message is associated with specific instance of the module which has independent filtering settings (if runtime filtering is enabled) and message prefix (&lt;module_name&gt;.&lt;instance_name&gt;). It&apos;s meant to write developer oriented information.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_log_inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log structure associated with the instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A string optionally containing printk valid conversion specifier, followed by as many values as specifiers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="142" column="9" bodyfile="include/logging/log.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1gabdae4f5b8b16804b53f83a85c3023134" prot="public" static="no">
        <name>LOG_HEXDUMP_ERR</name>
        <param><defname>_data</defname></param>
        <param><defname>_length</defname></param>
        <param><defname>_str</defname></param>
        <initializer>	Z_LOG_HEXDUMP(<ref refid="include_2logging_2log__core_8h_1ab3a03740685cbdaa375e2bde8247fdc6" kindref="member">LOG_LEVEL_ERR</ref>, _data, _length, _str)</initializer>
        <briefdescription>
<para>Writes an ERROR level hexdump message to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s meant to report severe errors, such as those from which it&apos;s not possible to recover.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be logged. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Persistent, raw string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="155" column="9" bodyfile="include/logging/log.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1gaf73802661fea926bb2b7e628727cdceb" prot="public" static="no">
        <name>LOG_HEXDUMP_WRN</name>
        <param><defname>_data</defname></param>
        <param><defname>_length</defname></param>
        <param><defname>_str</defname></param>
        <initializer>	Z_LOG_HEXDUMP(<ref refid="include_2logging_2log__core_8h_1a54f5db1327d9fdbaecbb03a6969de97b" kindref="member">LOG_LEVEL_WRN</ref>, _data, _length, _str)</initializer>
        <briefdescription>
<para>Writes a WARNING level message to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s meant to register messages related to unusual situations that are not necessarily errors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be logged. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Persistent, raw string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="168" column="9" bodyfile="include/logging/log.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga8e060bbe660c246a38adccd873e58c6c" prot="public" static="no">
        <name>LOG_HEXDUMP_INF</name>
        <param><defname>_data</defname></param>
        <param><defname>_length</defname></param>
        <param><defname>_str</defname></param>
        <initializer>	Z_LOG_HEXDUMP(<ref refid="include_2logging_2log__core_8h_1a281bc2ce5315e6fae369796c0fdf5c1d" kindref="member">LOG_LEVEL_INF</ref>, _data, _length, _str)</initializer>
        <briefdescription>
<para>Writes an INFO level message to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s meant to write generic user oriented messages.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be logged. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Persistent, raw string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="180" column="9" bodyfile="include/logging/log.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga01dda8273f7d453a855542a52524dca8" prot="public" static="no">
        <name>LOG_HEXDUMP_DBG</name>
        <param><defname>_data</defname></param>
        <param><defname>_length</defname></param>
        <param><defname>_str</defname></param>
        <initializer>	Z_LOG_HEXDUMP(<ref refid="include_2logging_2log__core_8h_1ad1f7d41b1af28ba81ea63d24c9b690cc" kindref="member">LOG_LEVEL_DBG</ref>, _data, _length, _str)</initializer>
        <briefdescription>
<para>Writes a DEBUG level message to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s meant to write developer oriented information.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be logged. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Persistent, raw string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="192" column="9" bodyfile="include/logging/log.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1gaf2f504a779917dc0f40767cba9f940b9" prot="public" static="no">
        <name>LOG_INST_HEXDUMP_ERR</name>
        <param><defname>_log_inst</defname></param>
        <param><defname>_data</defname></param>
        <param><defname>_length</defname></param>
        <param><defname>_str</defname></param>
        <initializer>	Z_LOG_HEXDUMP_INSTANCE(<ref refid="include_2logging_2log__core_8h_1ab3a03740685cbdaa375e2bde8247fdc6" kindref="member">LOG_LEVEL_ERR</ref>, _log_inst, _data, _length, _str)</initializer>
        <briefdescription>
<para>Writes an ERROR hexdump message associated with the instance to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>Message is associated with specific instance of the module which has independent filtering settings (if runtime filtering is enabled) and message prefix (&lt;module_name&gt;.&lt;instance_name&gt;). It&apos;s meant to report severe errors, such as those from which it&apos;s not possible to recover.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_log_inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log structure associated with the instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be logged. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Persistent, raw string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="209" column="9" bodyfile="include/logging/log.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1gab6542651f88fbb0991fb2339102b52a5" prot="public" static="no">
        <name>LOG_INST_HEXDUMP_WRN</name>
        <param><defname>_log_inst</defname></param>
        <param><defname>_data</defname></param>
        <param><defname>_length</defname></param>
        <param><defname>_str</defname></param>
        <initializer>	Z_LOG_HEXDUMP_INSTANCE(<ref refid="include_2logging_2log__core_8h_1a54f5db1327d9fdbaecbb03a6969de97b" kindref="member">LOG_LEVEL_WRN</ref>, _log_inst, _data, _length, _str)</initializer>
        <briefdescription>
<para>Writes a WARNING level hexdump message associated with the instance to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s meant to register messages related to unusual situations that are not necessarily errors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_log_inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log structure associated with the instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be logged. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Persistent, raw string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="224" column="9" bodyfile="include/logging/log.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga8e38c461c6058ee604b4dddad662d4ca" prot="public" static="no">
        <name>LOG_INST_HEXDUMP_INF</name>
        <param><defname>_log_inst</defname></param>
        <param><defname>_data</defname></param>
        <param><defname>_length</defname></param>
        <param><defname>_str</defname></param>
        <initializer>	Z_LOG_HEXDUMP_INSTANCE(<ref refid="include_2logging_2log__core_8h_1a281bc2ce5315e6fae369796c0fdf5c1d" kindref="member">LOG_LEVEL_INF</ref>, _log_inst, _data, _length, _str)</initializer>
        <briefdescription>
<para>Writes an INFO level hexdump message associated with the instance to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s meant to write generic user oriented messages.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_log_inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log structure associated with the instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be logged. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Persistent, raw string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="238" column="9" bodyfile="include/logging/log.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga4b73e6d51cff26ea5595df8680c00563" prot="public" static="no">
        <name>LOG_INST_HEXDUMP_DBG</name>
        <param><defname>_log_inst</defname></param>
        <param><defname>_data</defname></param>
        <param><defname>_length</defname></param>
        <param><defname>_str</defname></param>
        <initializer>	Z_LOG_HEXDUMP_INSTANCE(<ref refid="include_2logging_2log__core_8h_1ad1f7d41b1af28ba81ea63d24c9b690cc" kindref="member">LOG_LEVEL_DBG</ref>, _log_inst, _data, _length, _str)</initializer>
        <briefdescription>
<para>Writes a DEBUG level hexdump message associated with the instance to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s meant to write developer oriented information.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_log_inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log structure associated with the instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be logged. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Persistent, raw string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="252" column="9" bodyfile="include/logging/log.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga2404243df68fb6e51129d1c7ecc5ca45" prot="public" static="no">
        <name>LOG_MODULE_REGISTER</name>
        <param><defname>...</defname></param>
        <initializer>	Z_LOG_EVAL(							\
		_LOG_LEVEL_RESOLVE(__VA_ARGS__),			\
		(_LOG_MODULE_DATA_CREATE(<ref refid="group__sys-util_1gabbe04a4d59a495b2b86196304b937ec6" kindref="member">GET_ARG_N</ref>(1, __VA_ARGS__),	\
				      _LOG_LEVEL_RESOLVE(__VA_ARGS__))),\
		()/*Empty*/						\
	)								\
	<ref refid="group__log__api_1ga8193b0e10e5ee64b86848bb52be31869" kindref="member">LOG_MODULE_DECLARE</ref>(__VA_ARGS__)</initializer>
        <briefdescription>
<para>Create module-specific state and register the module with Logger. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro normally must be used after including &lt;<ref refid="log_8h" kindref="compound">logging/log.h</ref>&gt; to complete the initialization of the module.</para>
<para>Module registration can be skipped in two cases:</para>
<para><itemizedlist>
<listitem><para>The module consists of more than one file, and another file invokes this macro. (<ref refid="group__log__api_1ga8193b0e10e5ee64b86848bb52be31869" kindref="member">LOG_MODULE_DECLARE()</ref> should be used instead in all of the module&apos;s other files.)</para>
</listitem><listitem><para>Instance logging is used and there is no need to create module entry. In that case <ref refid="group__log__api_1gac396852328a77360a0c27dbf7b52356e" kindref="member">LOG_LEVEL_SET()</ref> should be used to set log level used within the file.</para>
</listitem></itemizedlist>
</para>
<para>Macro accepts one or two parameters:<itemizedlist>
<listitem><para>module name</para>
</listitem><listitem><para>optional log level. If not provided then default log level is used in the file.</para>
</listitem></itemizedlist>
</para>
<para>Example usage:<itemizedlist>
<listitem><para><ref refid="group__log__api_1ga2404243df68fb6e51129d1c7ecc5ca45" kindref="member">LOG_MODULE_REGISTER(foo, CONFIG_FOO_LOG_LEVEL)</ref></para>
</listitem><listitem><para><ref refid="group__log__api_1ga2404243df68fb6e51129d1c7ecc5ca45" kindref="member">LOG_MODULE_REGISTER(foo)</ref></para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>The module&apos;s state is defined, and the module is registered, only if LOG_LEVEL for the current source file is non-zero or it is not defined and CONFIG_LOG_DEFAULT_LEVEL is non-zero. In other cases, this macro has no effect. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__log__api_1ga8193b0e10e5ee64b86848bb52be31869" kindref="member">LOG_MODULE_DECLARE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="373" column="9" bodyfile="include/logging/log.h" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga8193b0e10e5ee64b86848bb52be31869" prot="public" static="no">
        <name>LOG_MODULE_DECLARE</name>
        <param><defname>...</defname></param>
        <initializer>	extern const struct <ref refid="structlog__source__const__data" kindref="compound">log_source_const_data</ref>			      \
			Z_LOG_ITEM_CONST_DATA(<ref refid="group__sys-util_1gabbe04a4d59a495b2b86196304b937ec6" kindref="member">GET_ARG_N</ref>(1, __VA_ARGS__));     \
	extern struct <ref refid="structlog__source__dynamic__data" kindref="compound">log_source_dynamic_data</ref>				      \
			<ref refid="include_2logging_2log__core_8h_1a86c2e55bace38c6e71b4d1d0736b1160" kindref="member">LOG_ITEM_DYNAMIC_DATA</ref>(<ref refid="group__sys-util_1gabbe04a4d59a495b2b86196304b937ec6" kindref="member">GET_ARG_N</ref>(1, __VA_ARGS__));     \
									      \
	static const struct <ref refid="structlog__source__const__data" kindref="compound">log_source_const_data</ref> *			      \
		__log_current_const_data __unused =			      \
			_LOG_LEVEL_RESOLVE(__VA_ARGS__) ?		      \
			&amp;Z_LOG_ITEM_CONST_DATA(<ref refid="group__sys-util_1gabbe04a4d59a495b2b86196304b937ec6" kindref="member">GET_ARG_N</ref>(1, __VA_ARGS__)) :   \
			NULL;						      \
									      \
	static struct <ref refid="structlog__source__dynamic__data" kindref="compound">log_source_dynamic_data</ref> *				      \
		__log_current_dynamic_data __unused =			      \
			(_LOG_LEVEL_RESOLVE(__VA_ARGS__) &amp;&amp;		      \
			<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(CONFIG_LOG_RUNTIME_FILTERING)) ?	      \
			&amp;<ref refid="include_2logging_2log__core_8h_1a86c2e55bace38c6e71b4d1d0736b1160" kindref="member">LOG_ITEM_DYNAMIC_DATA</ref>(<ref refid="group__sys-util_1gabbe04a4d59a495b2b86196304b937ec6" kindref="member">GET_ARG_N</ref>(1, __VA_ARGS__)) :   \
			NULL;						      \
									      \
	static const <ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> __log_level __unused =			      \
					_LOG_LEVEL_RESOLVE(__VA_ARGS__)</initializer>
        <briefdescription>
<para>Macro for declaring a log module (not registering it). </para>
        </briefdescription>
        <detaileddescription>
<para>Modules which are split up over multiple files must have exactly one file use <ref refid="group__log__api_1ga2404243df68fb6e51129d1c7ecc5ca45" kindref="member">LOG_MODULE_REGISTER()</ref> to create module-specific state and register the module with the logger core.</para>
<para>The other files in the module should use this macro instead to declare that same state. (Otherwise, <ref refid="group__log__api_1ga9c338f3170acf38a8532d1181d26704e" kindref="member">LOG_INF()</ref> etc. will not be able to refer to module-specific state variables.)</para>
<para>Macro accepts one or two parameters:<itemizedlist>
<listitem><para>module name</para>
</listitem><listitem><para>optional log level. If not provided then default log level is used in the file.</para>
</listitem></itemizedlist>
</para>
<para>Example usage:<itemizedlist>
<listitem><para><ref refid="group__log__api_1ga8193b0e10e5ee64b86848bb52be31869" kindref="member">LOG_MODULE_DECLARE(foo, CONFIG_FOO_LOG_LEVEL)</ref></para>
</listitem><listitem><para><ref refid="group__log__api_1ga8193b0e10e5ee64b86848bb52be31869" kindref="member">LOG_MODULE_DECLARE(foo)</ref></para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>The module&apos;s state is declared only if LOG_LEVEL for the current source file is non-zero or it is not defined and CONFIG_LOG_DEFAULT_LEVEL is non-zero. In other cases, this macro has no effect. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__log__api_1ga2404243df68fb6e51129d1c7ecc5ca45" kindref="member">LOG_MODULE_REGISTER</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="408" column="9" bodyfile="include/logging/log.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1gac396852328a77360a0c27dbf7b52356e" prot="public" static="no">
        <name>LOG_LEVEL_SET</name>
        <param><defname>level</defname></param>
        <initializer>				static const <ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> __log_level __unused = \
				Z_LOG_RESOLVED_LEVEL(level, 0)</initializer>
        <briefdescription>
<para>Macro for setting log level in the file or function where instance logging API is used. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Level used in file or in function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="437" column="9" bodyfile="include/logging/log.h" bodystart="437" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__log__api_1ga70ca6d2316d1bbfb208969d3fcc56aa1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char *</type>
        <definition>static char * log_strdup</definition>
        <argsstring>(const char *str)</argsstring>
        <name>log_strdup</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="288" column="20" bodyfile="include/logging/log.h" bodystart="288" bodyend="295"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_LOGGING_LOG_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_LOGGING_LOG_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="log__instance_8h" kindref="compound">logging/log_instance.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2logging_2log__core_8h" kindref="compound">logging/log_core.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="group__log__api_1gad6db28c61c838c1f7316417e1e4847f2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_ERR(...)<sp/><sp/><sp/><sp/>Z_LOG(LOG_LEVEL_ERR,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="group__log__api_1ga644db4299681d9ebf06f8745ad984c65" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_WRN(...)<sp/><sp/><sp/>Z_LOG(LOG_LEVEL_WRN,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="group__log__api_1ga9c338f3170acf38a8532d1181d26704e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_INF(...)<sp/><sp/><sp/>Z_LOG(LOG_LEVEL_INF,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="group__log__api_1gafb97e6291db24665313453d192941330" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_DBG(...)<sp/><sp/><sp/><sp/>Z_LOG(LOG_LEVEL_DBG,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="group__log__api_1ga4ab5cae247b853bf9f4f0bf761c1c71e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_PRINTK(...)<sp/>Z_LOG_PRINTK(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="group__log__api_1ga830f32743847c52e01a510ab0716fe90" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_INST_ERR(_log_inst,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_LOG_INSTANCE(LOG_LEVEL_ERR,<sp/>_log_inst,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="group__log__api_1ga76057f789dfc164adbb1dbc9f3aff417" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_INST_WRN(_log_inst,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_LOG_INSTANCE(LOG_LEVEL_WRN,<sp/>_log_inst,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="group__log__api_1ga222c5b535fb3ecb36dea97885c794188" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_INST_INF(_log_inst,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_LOG_INSTANCE(LOG_LEVEL_INF,<sp/>_log_inst,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="group__log__api_1gae10014012020ea5a6b9a86a5224f19b0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_INST_DBG(_log_inst,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_LOG_INSTANCE(LOG_LEVEL_DBG,<sp/>_log_inst,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="group__log__api_1gabdae4f5b8b16804b53f83a85c3023134" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_HEXDUMP_ERR(_data,<sp/>_length,<sp/>_str)<sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_LOG_HEXDUMP(LOG_LEVEL_ERR,<sp/>_data,<sp/>_length,<sp/>_str)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="group__log__api_1gaf73802661fea926bb2b7e628727cdceb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_HEXDUMP_WRN(_data,<sp/>_length,<sp/>_str)<sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_LOG_HEXDUMP(LOG_LEVEL_WRN,<sp/>_data,<sp/>_length,<sp/>_str)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="group__log__api_1ga8e060bbe660c246a38adccd873e58c6c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_HEXDUMP_INF(_data,<sp/>_length,<sp/>_str)<sp/>\</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_LOG_HEXDUMP(LOG_LEVEL_INF,<sp/>_data,<sp/>_length,<sp/>_str)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="group__log__api_1ga01dda8273f7d453a855542a52524dca8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_HEXDUMP_DBG(_data,<sp/>_length,<sp/>_str)<sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_LOG_HEXDUMP(LOG_LEVEL_DBG,<sp/>_data,<sp/>_length,<sp/>_str)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="group__log__api_1gaf2f504a779917dc0f40767cba9f940b9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_INST_HEXDUMP_ERR(_log_inst,<sp/>_data,<sp/>_length,<sp/>_str)<sp/>\</highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_LOG_HEXDUMP_INSTANCE(LOG_LEVEL_ERR,<sp/>_log_inst,<sp/>_data,<sp/>_length,<sp/>_str)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="group__log__api_1gab6542651f88fbb0991fb2339102b52a5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_INST_HEXDUMP_WRN(_log_inst,<sp/>_data,<sp/>_length,<sp/>_str)<sp/>\</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_LOG_HEXDUMP_INSTANCE(LOG_LEVEL_WRN,<sp/>_log_inst,<sp/>_data,<sp/>_length,<sp/>_str)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="group__log__api_1ga8e38c461c6058ee604b4dddad662d4ca" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_INST_HEXDUMP_INF(_log_inst,<sp/>_data,<sp/>_length,<sp/>_str)<sp/>\</highlight></codeline>
<codeline lineno="239"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_LOG_HEXDUMP_INSTANCE(LOG_LEVEL_INF,<sp/>_log_inst,<sp/>_data,<sp/>_length,<sp/>_str)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="group__log__api_1ga4b73e6d51cff26ea5595df8680c00563" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_INST_HEXDUMP_DBG(_log_inst,<sp/>_data,<sp/>_length,<sp/>_str)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="253"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_LOG_HEXDUMP_INSTANCE(LOG_LEVEL_DBG,<sp/>_log_inst,<sp/>_data,<sp/>_length,<sp/>_str)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>z_log_vprintk(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>va_list<sp/>ap);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*z_log_strdup(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="288" refid="group__log__api_1ga70ca6d2316d1bbfb208969d3fcc56aa1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__log__api_1ga70ca6d2316d1bbfb208969d3fcc56aa1" kindref="member">log_strdup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(CONFIG_LOG_MODE_MINIMAL)<sp/>||<sp/><ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(CONFIG_LOG2))<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)str;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z_log_strdup(str);</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_IN_CPLUSPLUS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macro<sp/>expects<sp/>that<sp/>optionally<sp/>on<sp/>second<sp/>argument<sp/>local<sp/>log<sp/>level<sp/>is<sp/>provided.</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/>If<sp/>provided<sp/>it<sp/>is<sp/>returned,<sp/>otherwise<sp/>default<sp/>log<sp/>level<sp/>is<sp/>returned<sp/>or</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*<sp/>LOG_LEVEL,<sp/>if<sp/>it<sp/>was<sp/>locally<sp/>defined.</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CONFIG_LOG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_LOG_LEVEL_RESOLVE(...)<sp/>LOG_LEVEL_NONE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_LOG_LEVEL_RESOLVE(...)<sp/>\</highlight></codeline>
<codeline lineno="309"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_LOG_EVAL(LOG_LEVEL,<sp/>\</highlight></codeline>
<codeline lineno="310"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GET_ARG_N(2,<sp/>__VA_ARGS__,<sp/>LOG_LEVEL)),<sp/>\</highlight></codeline>
<codeline lineno="311"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GET_ARG_N(2,<sp/>__VA_ARGS__,<sp/>CONFIG_LOG_DEFAULT_LEVEL)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>first<sp/>argument<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_LOG_ARG1(arg1,<sp/>...)<sp/>arg1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_LOG_MODULE_CONST_DATA_CREATE(_name,<sp/>_level)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="318"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IF_ENABLED(LOG_IN_CPLUSPLUS,<sp/>(extern))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="319"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>struct<sp/>log_source_const_data<sp/>Z_LOG_ITEM_CONST_DATA(_name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="320"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__<sp/>((section(&quot;.&quot;</highlight><highlight class="normal"><sp/>STRINGIFY(Z_LOG_ITEM_CONST_DATA(_name)))))<sp/>\</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__((used))<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.name<sp/>=<sp/>STRINGIFY(_name),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.level<sp/>=<sp/>_level<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_LOG_MODULE_DYNAMIC_DATA_CREATE(_name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="327"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>log_source_dynamic_data<sp/>LOG_ITEM_DYNAMIC_DATA(_name)<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="328"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__<sp/>((section(&quot;.&quot;</highlight><highlight class="normal"><sp/>STRINGIFY(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_ITEM_DYNAMIC_DATA(_name))))<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__((used))</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_LOG_MODULE_DYNAMIC_DATA_COND_CREATE(_name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="334"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IF_ENABLED(CONFIG_LOG_RUNTIME_FILTERING,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="335"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(_LOG_MODULE_DYNAMIC_DATA_CREATE(_name);))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_LOG_MODULE_DATA_CREATE(_name,<sp/>_level)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="338"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_LOG_MODULE_CONST_DATA_CREATE(_name,<sp/>_level);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="339"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_LOG_MODULE_DYNAMIC_DATA_COND_CREATE(_name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="group__log__api_1ga2404243df68fb6e51129d1c7ecc5ca45" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_MODULE_REGISTER(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="374"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_LOG_EVAL(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="375"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_LOG_LEVEL_RESOLVE(__VA_ARGS__),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="376"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(_LOG_MODULE_DATA_CREATE(GET_ARG_N(1,<sp/>__VA_ARGS__),<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="377"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_LOG_LEVEL_RESOLVE(__VA_ARGS__))),\</highlight></codeline>
<codeline lineno="378"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>()</highlight><highlight class="comment">/*Empty*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="379"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="380"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_MODULE_DECLARE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="group__log__api_1ga8193b0e10e5ee64b86848bb52be31869" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_MODULE_DECLARE(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="409"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extern<sp/>const<sp/>struct<sp/>log_source_const_data<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="410"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_LOG_ITEM_CONST_DATA(GET_ARG_N(1,<sp/>__VA_ARGS__));<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="411"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extern<sp/>struct<sp/>log_source_dynamic_data<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="412"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_ITEM_DYNAMIC_DATA(GET_ARG_N(1,<sp/>__VA_ARGS__));<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="413"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="414"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>struct<sp/>log_source_const_data<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="415"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__log_current_const_data<sp/>__unused<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="416"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_LOG_LEVEL_RESOLVE(__VA_ARGS__)<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="417"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Z_LOG_ITEM_CONST_DATA(GET_ARG_N(1,<sp/>__VA_ARGS__))<sp/>:<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="418"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="419"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="420"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>struct<sp/>log_source_dynamic_data<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="421"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__log_current_dynamic_data<sp/>__unused<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="422"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(_LOG_LEVEL_RESOLVE(__VA_ARGS__)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="423"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING))<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="424"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;LOG_ITEM_DYNAMIC_DATA(GET_ARG_N(1,<sp/>__VA_ARGS__))<sp/>:<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="425"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="426"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="427"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>uint32_t<sp/>__log_level<sp/>__unused<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="428"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_LOG_LEVEL_RESOLVE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="437" refid="group__log__api_1gac396852328a77360a0c27dbf7b52356e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_LEVEL_SET(level)<sp/>static<sp/>const<sp/>uint32_t<sp/>__log_level<sp/>__unused<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="438"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_LOG_RESOLVED_LEVEL(level,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*<sp/>Eclipse<sp/>CDT<sp/>parser<sp/>is<sp/>sometimes<sp/>confused<sp/>by<sp/>logging<sp/>API<sp/>code<sp/>and<sp/>freezes<sp/>the</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>*<sp/>whole<sp/>IDE.<sp/>Following<sp/>lines<sp/>hides<sp/>LOG_x<sp/>macros<sp/>from<sp/>CDT.</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__CDT_PARSER__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>LOG_ERR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>LOG_WRN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>LOG_INF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>LOG_DBG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>LOG_HEXDUMP_ERR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>LOG_HEXDUMP_WRN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>LOG_HEXDUMP_INF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>LOG_HEXDUMP_DBG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_ERR(...)<sp/>(void)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_WRN(...)<sp/>(void)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_DBG(...)<sp/>(void)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_INF(...)<sp/>(void)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_HEXDUMP_ERR(...)<sp/>(void)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_HEXDUMP_WRN(...)<sp/>(void)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_HEXDUMP_DBG(...)<sp/>(void)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_HEXDUMP_INF(...)<sp/>(void)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_LOGGING_LOG_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/logging/log.h"/>
  </compounddef>
</doxygen>
