<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__subsys__pm__device__runtime" kind="group">
    <compoundname>subsys_pm_device_runtime</compoundname>
    <title>Device Runtime</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__subsys__pm__device__runtime_1gaabcd2cc694c9e201dd87bf42f02b454c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pm_device_runtime_enable</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>pm_device_runtime_enable</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Enable device runtime PM. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will enable runtime PM on the given device. If the device is in <ref refid="group__subsys__pm__device_1gga561c0789071e3c3963f21f4c4a1bb2c6a54b207e01b4dfc5e1ff56149817120c7" kindref="member">PM_DEVICE_STATE_ACTIVE</ref> state, the device will be suspended.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> pre-kernel-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_pre-kernel-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the device runtime PM is enabled successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EPERM</parametername>
</parameternamelist>
<parameterdescription>
<para>If device has power state locked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If the functionality is not available. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Other negative errno, result of suspending the device.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__subsys__pm__device__runtime_1gac69c6b91803e7ee985b57143d7526e17" kindref="member">pm_device_runtime_init_suspended()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device_runtime.h" line="42" column="5" declfile="include/pm/device_runtime.h" declline="42" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device__runtime_1gaa7fc78138e282b0eae7da67876baee80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pm_device_runtime_disable</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>pm_device_runtime_disable</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Disable device runtime PM. </para>
        </briefdescription>
        <detaileddescription>
<para>If the device is currently suspended it will be resumed.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> pre-kernel-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_pre-kernel-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the device runtime PM is disabled successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If the functionality is not available. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Other negative errno, result of resuming the device. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device_runtime.h" line="57" column="5" declfile="include/pm/device_runtime.h" declline="57" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device__runtime_1ga530d4be65757fb2276ab6f631953e045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pm_device_runtime_get</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>pm_device_runtime_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Resume a device based on usage count. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will resume the device if the device is suspended (usage count equal to 0). In case of a resume failure, usage count and device state will be left unchanged. In all other cases, usage count will be incremented.</para>
<para>If the device is still being suspended as a result of calling <ref refid="group__subsys__pm__device__runtime_1gab3eedd20c986f2ef8bd837263337b34b" kindref="member">pm_device_runtime_put_async()</ref>, this function will wait for the operation to finish to then resume the device.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> pre-kernel-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_pre-kernel-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If it succeeds. In case device runtime PM is not enabled or not available this function will be a no-op and will also return 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Other negative errno, result of the PM action callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device_runtime.h" line="78" column="5" declfile="include/pm/device_runtime.h" declline="78" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device__runtime_1ga98daba53a992fb6bd2c2b31cb445844f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pm_device_runtime_put</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>pm_device_runtime_put</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Suspend a device based on usage count. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will suspend the device if the device is no longer required (usage count equal to 0). In case of suspend failure, usage count and device state will be left unchanged. In all other cases, usage count will be decremented (down to 0).</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> pre-kernel-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_pre-kernel-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If it succeeds. In case device runtime PM is not enabled or not available this function will be a no-op and will also return 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>If device is already suspended (can only happen if get/put calls are unbalanced). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Other negative errno, result of the action callback.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__subsys__pm__device__runtime_1gab3eedd20c986f2ef8bd837263337b34b" kindref="member">pm_device_runtime_put_async()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device_runtime.h" line="100" column="5" declfile="include/pm/device_runtime.h" declline="100" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device__runtime_1gab3eedd20c986f2ef8bd837263337b34b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pm_device_runtime_put_async</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>pm_device_runtime_put_async</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Suspend a device based on usage count (asynchronously). </para>
        </briefdescription>
        <detaileddescription>
<para>This function will schedule the device suspension if the device is no longer required (usage count equal to 0). In all other cases, usage count will be decremented (down to 0).</para>
<para><simplesect kind="note"><para>Asynchronous operations are not supported when in pre-kernel mode. In this case, the function will be blocking (equivalent to <ref refid="group__subsys__pm__device__runtime_1ga98daba53a992fb6bd2c2b31cb445844f" kindref="member">pm_device_runtime_put()</ref>).</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> pre-kernel-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_pre-kernel-ok`</verbatim> , <htmlonly> async </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_async`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If it succeeds. In case device runtime PM is not enabled or not available this function will be a no-op and will also return 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>If device is already suspended (can only happen if get/put calls are unbalanced).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__subsys__pm__device__runtime_1ga98daba53a992fb6bd2c2b31cb445844f" kindref="member">pm_device_runtime_put()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device_runtime.h" line="124" column="5" declfile="include/pm/device_runtime.h" declline="124" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device__runtime_1ga605cd2a3d0ea31efe6bd0b9a6f723219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool pm_device_runtime_is_enabled</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>pm_device_runtime_is_enabled</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Check if device runtime is enabled for a given device. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> pre-kernel-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_pre-kernel-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>If device has device runtime PM enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>If the device has device runtime PM disabled.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__subsys__pm__device__runtime_1gaabcd2cc694c9e201dd87bf42f02b454c" kindref="member">pm_device_runtime_enable()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device_runtime.h" line="138" column="6" declfile="include/pm/device_runtime.h" declline="138" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device__runtime_1gac69c6b91803e7ee985b57143d7526e17" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void pm_device_runtime_init_suspended</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>pm_device_runtime_init_suspended</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Initialize a device state to <ref refid="group__subsys__pm__device_1gga561c0789071e3c3963f21f4c4a1bb2c6a03f61cb7cd5e4820c1c731500fd053b5" kindref="member">PM_DEVICE_STATE_SUSPENDED</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>By default device state is initialized to <ref refid="group__subsys__pm__device_1gga561c0789071e3c3963f21f4c4a1bb2c6a54b207e01b4dfc5e1ff56149817120c7" kindref="member">PM_DEVICE_STATE_ACTIVE</ref>. In general, this makes sense because the device initialization function will resume and configure a device, leaving it operational. However, when device runtime PM is enabled, the device may not be resumed and the init function will just enable device runtime PM. If that is the case, this function can be used to set the initial device state to <ref refid="group__subsys__pm__device_1gga561c0789071e3c3963f21f4c4a1bb2c6a03f61cb7cd5e4820c1c731500fd053b5" kindref="member">PM_DEVICE_STATE_SUSPENDED</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device_runtime.h" line="152" column="20" bodyfile="include/pm/device_runtime.h" bodystart="152" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device__runtime_1ga6536a4c3bfaf286f70cec164da665f01" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void pm_device_runtime_init_off</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>pm_device_runtime_init_off</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Initialize a device state to <ref refid="group__subsys__pm__device_1gga561c0789071e3c3963f21f4c4a1bb2c6a2456389354b744d4e96847e38f8b61c2" kindref="member">PM_DEVICE_STATE_OFF</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>By default device state is initialized to <ref refid="group__subsys__pm__device_1gga561c0789071e3c3963f21f4c4a1bb2c6a54b207e01b4dfc5e1ff56149817120c7" kindref="member">PM_DEVICE_STATE_ACTIVE</ref>. In general, this makes sense because the device initialization function will resume and configure a device, leaving it operational. However, when device runtime PM is enabled, the device may be connected to a power domain, at which case it won&apos;t be powered at boot.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device_runtime.h" line="170" column="20" bodyfile="include/pm/device_runtime.h" bodystart="170" bodyend="175"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Device Runtime Power Management API. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
