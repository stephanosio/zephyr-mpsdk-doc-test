<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="pm_8h" kind="file" language="C++">
    <compoundname>pm.h</compoundname>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes refid="slist_8h" local="no">sys/slist.h</includes>
    <includes refid="state_8h" local="no">pm/state.h</includes>
    <includes refid="toolchain_8h" local="no">toolchain.h</includes>
    <includes refid="errno_8h" local="no">errno.h</includes>
    <includes refid="stdbool_8h" local="no">stdbool.h</includes>
    <includedby refid="x86_2ia32_2arch_8h" local="no">include/arch/x86/ia32/arch.h</includedby>
    <includedby refid="profiling_2profiling__api_2src_2main_8c" local="no">tests/kernel/profiling/profiling_api/src/main.c</includedby>
    <includedby refid="tickless_2tickless__concept_2src_2main_8c" local="no">tests/kernel/tickless/tickless_concept/src/main.c</includedby>
    <incdepgraph>
      <node id="13">
        <label>devicetree.h</label>
        <link refid="devicetree_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>devicetree/clocks.h</label>
        <link refid="clocks_8h"/>
      </node>
      <node id="20">
        <label>devicetree/dma.h</label>
        <link refid="devicetree_2dma_8h"/>
      </node>
      <node id="22">
        <label>devicetree/fixed-partitions.h</label>
        <link refid="fixed-partitions_8h"/>
      </node>
      <node id="18">
        <label>devicetree/gpio.h</label>
        <link refid="devicetree_2gpio_8h"/>
      </node>
      <node id="16">
        <label>devicetree/io-channels.h</label>
        <link refid="io-channels_8h"/>
      </node>
      <node id="24">
        <label>devicetree/ordinals.h</label>
        <link refid="ordinals_8h"/>
      </node>
      <node id="25">
        <label>devicetree/pinctrl.h</label>
        <link refid="devicetree_2pinctrl_8h"/>
      </node>
      <node id="21">
        <label>devicetree/pwms.h</label>
        <link refid="pwms_8h"/>
      </node>
      <node id="19">
        <label>devicetree/spi.h</label>
        <link refid="devicetree_2spi_8h"/>
      </node>
      <node id="23">
        <label>devicetree/zephyr.h</label>
        <link refid="devicetree_2zephyr_8h"/>
      </node>
      <node id="1">
        <label>include/pm/pm.h</label>
        <link refid="pm_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>pm/state.h</label>
        <link refid="state_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="9">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="2">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="4">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="15">
        <label>devicetree_fixups.h</label>
      </node>
      <node id="14">
        <label>devicetree_unfixed.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="29">
        <label>syscalls/errno_private.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>include/arch/x86/arch.h</label>
        <link refid="x86_2arch_8h"/>
      </node>
      <node id="2">
        <label>include/arch/x86/ia32/arch.h</label>
        <link refid="x86_2ia32_2arch_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/pm/pm.h</label>
        <link refid="pm_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>tests/kernel/profiling/profiling_api/src/main.c</label>
        <link refid="profiling_2profiling__api_2src_2main_8c"/>
      </node>
      <node id="5">
        <label>tests/kernel/tickless/tickless_concept/src/main.c</label>
        <link refid="tickless_2tickless__concept_2src_2main_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structpm__notifier" prot="public">pm_notifier</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__subsys__pm__sys_1ga075be307983f4efdcc93252a31a4258a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool pm_state_force</definition>
        <argsstring>(uint8_t cpu, const struct pm_state_info *info)</argsstring>
        <name>pm_state_force</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>cpu</declname>
        </param>
        <param>
          <type>const struct <ref refid="structpm__state__info" kindref="compound">pm_state_info</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Force usage of given power state. </para>
        </briefdescription>
        <detaileddescription>
<para>This function overrides decision made by PM policy forcing usage of given power state upon next entry of the idle thread.</para>
<para><simplesect kind="note"><para>This function can only run in thread context</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpu</parametername>
</parameternamelist>
<parameterdescription>
<para>CPU index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Power state which should be used in the ongoing suspend operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/pm.h" line="81" column="6" declfile="include/pm/pm.h" declline="81" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__sys_1ga066945118b8f287ee56aacf41b677a78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pm_notifier_register</definition>
        <argsstring>(struct pm_notifier *notifier)</argsstring>
        <name>pm_notifier_register</name>
        <param>
          <type>struct <ref refid="structpm__notifier" kindref="compound">pm_notifier</ref> *</type>
          <declname>notifier</declname>
        </param>
        <briefdescription>
<para>Register a power management notifier. </para>
        </briefdescription>
        <detaileddescription>
<para>Register the given notifier from the power management notification list.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notifier</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpm__notifier" kindref="compound">pm_notifier</ref> object to be registered. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/pm.h" line="91" column="6" declfile="include/pm/pm.h" declline="91" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__sys_1gab0856d662e50a3847a1b70cb8370849a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pm_notifier_unregister</definition>
        <argsstring>(struct pm_notifier *notifier)</argsstring>
        <name>pm_notifier_unregister</name>
        <param>
          <type>struct <ref refid="structpm__notifier" kindref="compound">pm_notifier</ref> *</type>
          <declname>notifier</declname>
        </param>
        <briefdescription>
<para>Unregister a power management notifier. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove the given notifier from the power management notification list. After that this object callbacks will not be called.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notifier</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpm__notifier" kindref="compound">pm_notifier</ref> object to be unregistered.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the notifier was successfully removed, a negative value otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/pm.h" line="104" column="5" declfile="include/pm/pm.h" declline="104" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__sys_1ga3861a1a0009b96d15de00059257848dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="structpm__state__info" kindref="compound">pm_state_info</ref> *</type>
        <definition>const struct pm_state_info * pm_state_next_get</definition>
        <argsstring>(uint8_t cpu)</argsstring>
        <name>pm_state_next_get</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Gets the next power state that will be used. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the next power state that will be used by the SoC.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpu</parametername>
</parameternamelist>
<parameterdescription>
<para>CPU index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>next <ref refid="structpm__state__info" kindref="compound">pm_state_info</ref> that will be used </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/pm.h" line="115" column="26" declfile="include/pm/pm.h" declline="115" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__sys__constraint_1ga0b2764efe4b8ec19aa78ad638b4f47d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pm_constraint_set</definition>
        <argsstring>(enum pm_state state)</argsstring>
        <name>pm_constraint_set</name>
        <param>
          <type>enum <ref refid="group__subsys__pm__states_1ga20e2f5ea9027a3653e5b9cc5aa1e21d5" kindref="member">pm_state</ref></type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Set a constraint for a power state. </para>
        </briefdescription>
        <detaileddescription>
<para>Disabled state cannot be selected by the Zephyr power management policies. Application defined policy should use the <ref refid="group__subsys__pm__sys__constraint_1ga5c3d6808b51499d3375a72ed1a2191c6" kindref="member">pm_constraint_get</ref> function to check if given state is enabled and could be used.</para>
<para><simplesect kind="note"><para>This API is refcount</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>Power state to be disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/pm.h" line="140" column="6" declfile="include/pm/pm.h" declline="140" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__sys__constraint_1gac72b5d3d2a6b24e46afd63289c9c3024" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pm_constraint_release</definition>
        <argsstring>(enum pm_state state)</argsstring>
        <name>pm_constraint_release</name>
        <param>
          <type>enum <ref refid="group__subsys__pm__states_1ga20e2f5ea9027a3653e5b9cc5aa1e21d5" kindref="member">pm_state</ref></type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Release a constraint for a power state. </para>
        </briefdescription>
        <detaileddescription>
<para>Enabled state can be selected by the Zephyr power management policies. Application defined policy should use the <ref refid="group__subsys__pm__sys__constraint_1ga5c3d6808b51499d3375a72ed1a2191c6" kindref="member">pm_constraint_get</ref> function to check if given state is enabled and could be used. By default all power states are enabled.</para>
<para><simplesect kind="note"><para>This API is refcount</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>Power state to be enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/pm.h" line="155" column="6" declfile="include/pm/pm.h" declline="155" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__sys__constraint_1ga5c3d6808b51499d3375a72ed1a2191c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool pm_constraint_get</definition>
        <argsstring>(enum pm_state state)</argsstring>
        <name>pm_constraint_get</name>
        <param>
          <type>enum <ref refid="group__subsys__pm__states_1ga20e2f5ea9027a3653e5b9cc5aa1e21d5" kindref="member">pm_state</ref></type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Check if particular power state is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns true if given power state is enabled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>Power state. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/pm.h" line="164" column="6" declfile="include/pm/pm.h" declline="164" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__sys__hooks_1gaa5c707f5c9c14494a388c6c2144e8f61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pm_state_set</definition>
        <argsstring>(enum pm_state state, uint8_t substate_id)</argsstring>
        <name>pm_state_set</name>
        <param>
          <type>enum <ref refid="group__subsys__pm__states_1ga20e2f5ea9027a3653e5b9cc5aa1e21d5" kindref="member">pm_state</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>substate_id</declname>
        </param>
        <briefdescription>
<para>Put processor into a power state. </para>
        </briefdescription>
        <detaileddescription>
<para>This function implements the SoC specific details necessary to put the processor into available power states.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>Power state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>substate_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Power substate id. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/pm.h" line="186" column="6" declfile="include/pm/pm.h" declline="186" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__sys__hooks_1ga7594e7e9b41c180ac760b7b0c47673b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pm_state_exit_post_ops</definition>
        <argsstring>(enum pm_state state, uint8_t substate_id)</argsstring>
        <name>pm_state_exit_post_ops</name>
        <param>
          <type>enum <ref refid="group__subsys__pm__states_1ga20e2f5ea9027a3653e5b9cc5aa1e21d5" kindref="member">pm_state</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>substate_id</declname>
        </param>
        <briefdescription>
<para>Do any SoC or architecture specific post ops after sleep state exits. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is a place holder to do any operations that may be needed to be done after sleep state exits. Currently it enables interrupts after resuming from sleep state. In future, the enabling of interrupts may be moved into the kernel.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>Power state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>substate_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Power substate id. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/pm.h" line="199" column="6" declfile="include/pm/pm.h" declline="199" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2012-2014<sp/>Wind<sp/>River<sp/>Systems,<sp/>Inc.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_PM_PM_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_PM_PM_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="slist_8h" kindref="compound">sys/slist.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="state_8h" kindref="compound">pm/state.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="toolchain_8h" kindref="compound">toolchain.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="errno_8h" kindref="compound">errno.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdbool_8h" kindref="compound">stdbool.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="structpm__notifier" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpm__notifier" kindref="compound">pm_notifier</ref><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref><sp/>_node;</highlight></codeline>
<codeline lineno="60" refid="structpm__notifier_1ab84353bcc32f4262ea1a34f316d21278" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structpm__notifier_1ab84353bcc32f4262ea1a34f316d21278" kindref="member">state_entry</ref>)(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__states_1ga20e2f5ea9027a3653e5b9cc5aa1e21d5" kindref="member">pm_state</ref><sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="65" refid="structpm__notifier_1aeb6bcf67d2d4c5342d8d81cea3728ec5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structpm__notifier_1aeb6bcf67d2d4c5342d8d81cea3728ec5" kindref="member">state_exit</ref>)(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__states_1ga20e2f5ea9027a3653e5b9cc5aa1e21d5" kindref="member">pm_state</ref><sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal">};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_PM)<sp/>||<sp/>defined(__DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="group__subsys__pm__sys_1ga075be307983f4efdcc93252a31a4258a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__sys_1ga075be307983f4efdcc93252a31a4258a" kindref="member">pm_state_force</ref>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>cpu,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpm__state__info" kindref="compound">pm_state_info</ref><sp/>*info);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="group__subsys__pm__sys_1ga066945118b8f287ee56aacf41b677a78" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__sys_1ga066945118b8f287ee56aacf41b677a78" kindref="member">pm_notifier_register</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpm__notifier" kindref="compound">pm_notifier</ref><sp/>*notifier);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="group__subsys__pm__sys_1gab0856d662e50a3847a1b70cb8370849a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__sys_1gab0856d662e50a3847a1b70cb8370849a" kindref="member">pm_notifier_unregister</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpm__notifier" kindref="compound">pm_notifier</ref><sp/>*notifier);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="group__subsys__pm__sys_1ga3861a1a0009b96d15de00059257848dd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpm__state__info" kindref="compound">pm_state_info</ref><sp/>*<ref refid="group__subsys__pm__sys_1ga3861a1a0009b96d15de00059257848dd" kindref="member">pm_state_next_get</ref>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>cpu);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="group__subsys__pm__sys__constraint_1ga0b2764efe4b8ec19aa78ad638b4f47d4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__sys__constraint_1ga0b2764efe4b8ec19aa78ad638b4f47d4" kindref="member">pm_constraint_set</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__states_1ga20e2f5ea9027a3653e5b9cc5aa1e21d5" kindref="member">pm_state</ref><sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="group__subsys__pm__sys__constraint_1gac72b5d3d2a6b24e46afd63289c9c3024" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__sys__constraint_1gac72b5d3d2a6b24e46afd63289c9c3024" kindref="member">pm_constraint_release</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__states_1ga20e2f5ea9027a3653e5b9cc5aa1e21d5" kindref="member">pm_state</ref><sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="group__subsys__pm__sys__constraint_1ga5c3d6808b51499d3375a72ed1a2191c6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__sys__constraint_1ga5c3d6808b51499d3375a72ed1a2191c6" kindref="member">pm_constraint_get</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__states_1ga20e2f5ea9027a3653e5b9cc5aa1e21d5" kindref="member">pm_state</ref><sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="group__subsys__pm__sys__hooks_1gaa5c707f5c9c14494a388c6c2144e8f61" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__sys__hooks_1gaa5c707f5c9c14494a388c6c2144e8f61" kindref="member">pm_state_set</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__states_1ga20e2f5ea9027a3653e5b9cc5aa1e21d5" kindref="member">pm_state</ref><sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structpm__state__info_1a422bc0c9aedc107dbfa57c3ac8eb2445" kindref="member">substate_id</ref>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="group__subsys__pm__sys__hooks_1ga7594e7e9b41c180ac760b7b0c47673b2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__sys__hooks_1ga7594e7e9b41c180ac760b7b0c47673b2" kindref="member">pm_state_exit_post_ops</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__states_1ga20e2f5ea9027a3653e5b9cc5aa1e21d5" kindref="member">pm_state</ref><sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structpm__state__info_1a422bc0c9aedc107dbfa57c3ac8eb2445" kindref="member">substate_id</ref>);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">/*<sp/>CONFIG_PM<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__sys_1ga066945118b8f287ee56aacf41b677a78" kindref="member">pm_notifier_register</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpm__notifier" kindref="compound">pm_notifier</ref><sp/>*notifier)</highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(notifier);</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__sys_1gab0856d662e50a3847a1b70cb8370849a" kindref="member">pm_notifier_unregister</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpm__notifier" kindref="compound">pm_notifier</ref><sp/>*notifier)</highlight></codeline>
<codeline lineno="213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(notifier);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1ga43785b9969e0bd1af532dbde06c5540b" kindref="member">ENOSYS</ref>;</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__sys__constraint_1ga0b2764efe4b8ec19aa78ad638b4f47d4" kindref="member">pm_constraint_set</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__states_1ga20e2f5ea9027a3653e5b9cc5aa1e21d5" kindref="member">pm_state</ref><sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__sys__constraint_1gac72b5d3d2a6b24e46afd63289c9c3024" kindref="member">pm_constraint_release</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__states_1ga20e2f5ea9027a3653e5b9cc5aa1e21d5" kindref="member">pm_state</ref><sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>)</highlight></codeline>
<codeline lineno="225"><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__sys__constraint_1ga5c3d6808b51499d3375a72ed1a2191c6" kindref="member">pm_constraint_get</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__states_1ga20e2f5ea9027a3653e5b9cc5aa1e21d5" kindref="member">pm_state</ref><sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__sys__hooks_1gaa5c707f5c9c14494a388c6c2144e8f61" kindref="member">pm_state_set</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__states_1ga20e2f5ea9027a3653e5b9cc5aa1e21d5" kindref="member">pm_state</ref><sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structpm__state__info_1a422bc0c9aedc107dbfa57c3ac8eb2445" kindref="member">substate_id</ref>)</highlight></codeline>
<codeline lineno="237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(<ref refid="structpm__state__info_1a422bc0c9aedc107dbfa57c3ac8eb2445" kindref="member">substate_id</ref>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__sys__hooks_1ga7594e7e9b41c180ac760b7b0c47673b2" kindref="member">pm_state_exit_post_ops</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__subsys__pm__states_1ga20e2f5ea9027a3653e5b9cc5aa1e21d5" kindref="member">pm_state</ref><sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structpm__state__info_1a422bc0c9aedc107dbfa57c3ac8eb2445" kindref="member">substate_id</ref>)</highlight></codeline>
<codeline lineno="244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(<ref refid="structpm__state__info_1a422bc0c9aedc107dbfa57c3ac8eb2445" kindref="member">substate_id</ref>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpm__state__info" kindref="compound">pm_state_info</ref><sp/>*<ref refid="group__subsys__pm__sys_1ga3861a1a0009b96d15de00059257848dd" kindref="member">pm_state_next_get</ref>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>cpu)</highlight></codeline>
<codeline lineno="250"><highlight class="normal">{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(cpu);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_PM<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>z_pm_save_idle_exit(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_PM_PM_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/pm/pm.h"/>
  </compounddef>
</doxygen>
