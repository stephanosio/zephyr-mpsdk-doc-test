<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__eth__bridge" kind="group">
    <compoundname>eth_bridge</compoundname>
    <title>Ethernet Bridging API</title>
    <innerclass refid="structeth__bridge__iface__context" prot="public">eth_bridge_iface_context</innerclass>
    <innerclass refid="structeth__bridge__listener" prot="public">eth_bridge_listener</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__eth__bridge_1ga747f39669dca01dca72d10d581f93346" prot="public" static="no">
        <type>void(*</type>
        <definition>eth_bridge_cb_t</definition>
        <argsstring>)(struct eth_bridge *br, void *user_data)</argsstring>
        <name>eth_bridge_cb_t</name>
        <briefdescription>
<para>Callback used while iterating over bridge instances. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>br</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to bridge instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User supplied data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet_bridge.h" line="169" column="9" bodyfile="include/net/ethernet_bridge.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__eth__bridge_1ga2a2f2fad28df21210bed17ef2a38fb00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int eth_bridge_iface_add</definition>
        <argsstring>(struct eth_bridge *br, struct net_if *iface)</argsstring>
        <name>eth_bridge_iface_add</name>
        <param>
          <type>struct eth_bridge *</type>
          <declname>br</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Add an Ethernet network interface to a bridge. </para>
        </briefdescription>
        <detaileddescription>
<para>This adds a network interface to a bridge. The interface is then put into promiscuous mode, all packets received by this interface are sent to the bridge, and any other packets sent to the bridge (with some exceptions) are transmitted via this interface.</para>
<para>For transmission from the bridge to occur via this interface, it is necessary to enable TX mode with eth_bridge_iface_tx(). TX mode is initially disabled.</para>
<para>Once an interface is added to a bridge, all its incoming traffic is diverted to the bridge. However, packets sent out with <ref refid="group__net__if_1ga56c4d37edcea540be09ebcdf97265aed" kindref="member">net_if_queue_tx()</ref> via this interface are not subjected to the bridge.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>br</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an initialized bridge object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to add</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if OK, negative error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet_bridge.h" line="89" column="5" declfile="include/net/ethernet_bridge.h" declline="89" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__eth__bridge_1ga08a44cd033b2b3aa565bbec4d815fdd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int eth_bridge_iface_remove</definition>
        <argsstring>(struct eth_bridge *br, struct net_if *iface)</argsstring>
        <name>eth_bridge_iface_remove</name>
        <param>
          <type>struct eth_bridge *</type>
          <declname>br</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Remove an Ethernet network interface from a bridge. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>br</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an initialized bridge object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to remove</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if OK, negative error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet_bridge.h" line="99" column="5" declfile="include/net/ethernet_bridge.h" declline="99" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__eth__bridge_1gac7124d2ab5bbd11908a86709ba0e85ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int eth_bridge_iface_allow_tx</definition>
        <argsstring>(struct net_if *iface, bool allow)</argsstring>
        <name>eth_bridge_iface_allow_tx</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>allow</declname>
        </param>
        <briefdescription>
<para>Enable/disable transmission mode for a bridged interface. </para>
        </briefdescription>
        <detaileddescription>
<para>When TX mode is off, the interface may receive packets and send them to the bridge but no packets coming from the bridge will be sent through this interface. When TX mode is on, both incoming and outgoing packets are allowed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to configure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow</parametername>
</parameternamelist>
<parameterdescription>
<para>true to activate TX mode, false otherwise</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if OK, negative error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet_bridge.h" line="114" column="5" declfile="include/net/ethernet_bridge.h" declline="114" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__eth__bridge_1ga06ff0ece90f1aee17e4fa448ccfa44a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int eth_bridge_listener_add</definition>
        <argsstring>(struct eth_bridge *br, struct eth_bridge_listener *l)</argsstring>
        <name>eth_bridge_listener_add</name>
        <param>
          <type>struct eth_bridge *</type>
          <declname>br</declname>
        </param>
        <param>
          <type>struct <ref refid="structeth__bridge__listener" kindref="compound">eth_bridge_listener</ref> *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Add (register) a listener to the bridge. </para>
        </briefdescription>
        <detaileddescription>
<para>This lets a software listener register a pointer to a provided FIFO for receiving packets sent to the bridge. The listener is responsible for emptying the FIFO with <ref refid="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" kindref="member">k_fifo_get()</ref> which will return a struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> pointer, and releasing the packet with <ref refid="group__net__pkt_1ga893d1660fd18ad5842224fda78466099" kindref="member">net_pkt_unref()</ref> when done with it.</para>
<para>The listener wishing not to receive any more packets should simply unregister itself with <ref refid="group__eth__bridge_1gafe7ea985453c51223d62f5e84509ef59" kindref="member">eth_bridge_listener_remove()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>br</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an initialized bridge object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an initialized listener instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if OK, negative error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet_bridge.h" line="132" column="5" declfile="include/net/ethernet_bridge.h" declline="132" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__eth__bridge_1gafe7ea985453c51223d62f5e84509ef59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int eth_bridge_listener_remove</definition>
        <argsstring>(struct eth_bridge *br, struct eth_bridge_listener *l)</argsstring>
        <name>eth_bridge_listener_remove</name>
        <param>
          <type>struct eth_bridge *</type>
          <declname>br</declname>
        </param>
        <param>
          <type>struct <ref refid="structeth__bridge__listener" kindref="compound">eth_bridge_listener</ref> *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Remove (unregister) a listener from the bridge. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>br</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an initialized bridge object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the listener instance to be removed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if OK, negative error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet_bridge.h" line="142" column="5" declfile="include/net/ethernet_bridge.h" declline="142" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__eth__bridge_1gaaec8cb29a13b3a439b0f9d7cef358bb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int eth_bridge_get_index</definition>
        <argsstring>(struct eth_bridge *br)</argsstring>
        <name>eth_bridge_get_index</name>
        <param>
          <type>struct eth_bridge *</type>
          <declname>br</declname>
        </param>
        <briefdescription>
<para>Get bridge index according to pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>br</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to bridge instance</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Bridge index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet_bridge.h" line="151" column="5" declfile="include/net/ethernet_bridge.h" declline="151" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__eth__bridge_1ga94bd48c3f6ff6e51dcb4d194515db8b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct eth_bridge *</type>
        <definition>struct eth_bridge * eth_bridge_get_by_index</definition>
        <argsstring>(int index)</argsstring>
        <name>eth_bridge_get_by_index</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get bridge instance according to index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Bridge instance index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to bridge instance or NULL if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet_bridge.h" line="160" column="17" declfile="include/net/ethernet_bridge.h" declline="160" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__eth__bridge_1ga5bb8dba7fbde9f2095e19f1912855d31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_eth_bridge_foreach</definition>
        <argsstring>(eth_bridge_cb_t cb, void *user_data)</argsstring>
        <name>net_eth_bridge_foreach</name>
        <param>
          <type><ref refid="group__eth__bridge_1ga747f39669dca01dca72d10d581f93346" kindref="member">eth_bridge_cb_t</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Go through all the bridge instances in order to get information about them. This is mainly useful in net-shell to print data about currently active bridges. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback to call for each bridge instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User supplied data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet_bridge.h" line="179" column="6" declfile="include/net/ethernet_bridge.h" declline="179" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__eth__bridge_1gaeafd2e30e2f484117797570dd5834de0" prot="public" static="no">
        <name>ETH_BRIDGE_INIT</name>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(eth_bridge, name) = \
		ETH_BRIDGE_INITIALIZER(name)</initializer>
        <briefdescription>
<para>Statically define and initialize a bridge instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the bridge object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet_bridge.h" line="53" column="9" bodyfile="include/net/ethernet_bridge.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Ethernet Bridging API. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
