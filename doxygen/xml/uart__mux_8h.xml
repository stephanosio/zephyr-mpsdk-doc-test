<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="uart__mux_8h" kind="file" language="C++">
    <compoundname>uart_mux.h</compoundname>
    <includes local="no">device.h</includes>
    <includes refid="uart_8h" local="no">drivers/uart.h</includes>
    <includes local="no">syscalls/uart_mux.h</includes>
    <incdepgraph>
      <node id="1">
        <label>include/drivers/console/uart_mux.h</label>
        <link refid="uart__mux_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>drivers/uart.h</label>
        <link refid="uart_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="4">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>device.h</label>
      </node>
      <node id="8">
        <label>stddef.h</label>
      </node>
      <node id="7">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="9">
        <label>syscalls/uart.h</label>
      </node>
      <node id="10">
        <label>syscalls/uart_mux.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structuart__mux__driver__api" prot="public">uart_mux_driver_api</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__uart__mux__interface_1gad1328cd6cb078835566a4f9b052fae9c" prot="public" static="no">
        <type>void(*</type>
        <definition>uart_mux_attach_cb_t</definition>
        <argsstring>)(const struct device *mux, int dlci_address, bool connected, void *user_data)</argsstring>
        <name>uart_mux_attach_cb_t</name>
        <briefdescription>
<para>Define the user callback function which is called when the UART mux is attached properly. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mux</parametername>
</parameternamelist>
<parameterdescription>
<para>UART mux device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dlci_address</parametername>
</parameternamelist>
<parameterdescription>
<para>DLCI id for the virtual muxing channel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>connected</parametername>
</parameternamelist>
<parameterdescription>
<para>True if DLCI is connected, false otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Arbitrary user data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/console/uart_mux.h" line="42" column="9" bodyfile="include/drivers/console/uart_mux.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__uart__mux__interface_1gae084a3e547ec672bd543fe4bd15c27a1" prot="public" static="no">
        <type>void(*</type>
        <definition>uart_mux_cb_t</definition>
        <argsstring>)(const struct device *uart, const struct device *dev, int dlci_address, void *user_data)</argsstring>
        <name>uart_mux_cb_t</name>
        <briefdescription>
<para>Callback used while iterating over UART muxes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to UART device where the mux is running </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to UART mux device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dlci_address</parametername>
</parameternamelist>
<parameterdescription>
<para>DLCI channel id this UART is muxed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to user data or NULL </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/console/uart_mux.h" line="118" column="9" bodyfile="include/drivers/console/uart_mux.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__uart__mux__interface_1gaae2cc4e03f5e4536b945746cf689fe56" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int uart_mux_attach</definition>
        <argsstring>(const struct device *mux, const struct device *uart, int dlci_address, uart_mux_attach_cb_t cb, void *user_data)</argsstring>
        <name>uart_mux_attach</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>mux</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>uart</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dlci_address</declname>
        </param>
        <param>
          <type><ref refid="group__uart__mux__interface_1gad1328cd6cb078835566a4f9b052fae9c" kindref="member">uart_mux_attach_cb_t</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Attach physical/real UART to UART muxing device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mux</parametername>
</parameternamelist>
<parameterdescription>
<para>UART mux device structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uart</parametername>
</parameternamelist>
<parameterdescription>
<para>Real UART device structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dlci_address</parametername>
</parameternamelist>
<parameterdescription>
<para>DLCI id for the virtual muxing channel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback is called when the DLCI is ready and connected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Caller supplied optional data</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>No errors, the attachment was successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>Error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/console/uart_mux.h" line="76" column="19" bodyfile="include/drivers/console/uart_mux.h" bodystart="76" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__mux__interface_1ga551b58a43626981af2be757f44206ccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
        <definition>const struct device * uart_mux_find</definition>
        <argsstring>(int dlci_address)</argsstring>
        <name>uart_mux_find</name>
        <param>
          <type>int</type>
          <declname>dlci_address</declname>
        </param>
        <briefdescription>
<para>Get UART related to a specific DLCI channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dlci_address</parametername>
</parameternamelist>
<parameterdescription>
<para>DLCI address, value &gt;0 and &lt;63</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>UART device if found, NULL otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/console/uart_mux.h" line="94" column="20" declfile="include/drivers/console/uart_mux.h" declline="94" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__mux__interface_1gaac6d68c5f53f60b5dfb1191a85429144" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
        <definition>const struct device * uart_mux_alloc</definition>
        <argsstring>(void)</argsstring>
        <name>uart_mux_alloc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Allocate muxing UART device. </para>
        </briefdescription>
        <detaileddescription>
<para>This will return next available uart mux driver that will mux the data when read or written. This device corresponds to one DLCI channel. User must first call this to allocate the DLCI and then call the attach function to fully enable the muxing.</para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>New UART device that will automatically mux data sent to it. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>if error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/console/uart_mux.h" line="107" column="19" declfile="include/drivers/console/uart_mux.h" declline="107" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__mux__interface_1gae7f1271a6fac1edd388bd8add3b01614" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_mux_foreach</definition>
        <argsstring>(uart_mux_cb_t cb, void *user_data)</argsstring>
        <name>uart_mux_foreach</name>
        <param>
          <type><ref refid="group__uart__mux__interface_1gae084a3e547ec672bd543fe4bd15c27a1" kindref="member">uart_mux_cb_t</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Go through all the UART muxes and call callback for each of them. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>User-supplied callback function to call </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User specified data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/console/uart_mux.h" line="129" column="6" declfile="include/drivers/console/uart_mux.h" declline="129" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__mux__interface_1ga3e9871415092eba11a7be262ae4da0a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_mux_disable</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>uart_mux_disable</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Disable the mux. </para>
        </briefdescription>
        <detaileddescription>
<para>Disable does not re-instate whatever ISRs and configs were present before the mux was enabled. This must be done by the user.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART mux device pointer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/console/uart_mux.h" line="139" column="6" declfile="include/drivers/console/uart_mux.h" declline="139" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__mux__interface_1gad832440ec0f4157fc895a1ec05081337" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_mux_enable</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>uart_mux_enable</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Enable the mux. </para>
        </briefdescription>
        <detaileddescription>
<para>Enables the correct ISRs for the UART mux.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART mux device pointer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/console/uart_mux.h" line="148" column="6" declfile="include/drivers/console/uart_mux.h" declline="148" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Public APIs for UART MUX drivers. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2020<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_DRIVERS_UART_MUX_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_DRIVERS_UART_MUX_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;device.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="uart_8h" kindref="compound">drivers/uart.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gsm_dlci;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="group__uart__mux__interface_1gad1328cd6cb078835566a4f9b052fae9c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__uart__mux__interface_1gad1328cd6cb078835566a4f9b052fae9c" kindref="member">uart_mux_attach_cb_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*mux,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dlci_address,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>connected,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="structuart__mux__driver__api" refkind="compound"><highlight class="normal">__subsystem<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structuart__mux__driver__api" kindref="compound">uart_mux_driver_api</ref><sp/>{</highlight></codeline>
<codeline lineno="53" refid="structuart__mux__driver__api_1a600ea39ef3bcfcd8949ab3f38c8a454c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">uart_driver_api<sp/><ref refid="structuart__mux__driver__api_1a600ea39ef3bcfcd8949ab3f38c8a454c" kindref="member">uart_api</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="structuart__mux__driver__api_1a312a7c8724c885d9f8fdcd9434ce44c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structuart__mux__driver__api_1a312a7c8724c885d9f8fdcd9434ce44c2" kindref="member">attach</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*mux,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*uart,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dlci_address,<sp/><ref refid="group__uart__mux__interface_1gad1328cd6cb078835566a4f9b052fae9c" kindref="member">uart_mux_attach_cb_t</ref><sp/>cb,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="group__uart__mux__interface_1gaae2cc4e03f5e4536b945746cf689fe56" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__uart__mux__interface_1gaae2cc4e03f5e4536b945746cf689fe56" kindref="member">uart_mux_attach</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*mux,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*uart,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dlci_address,<sp/><ref refid="group__uart__mux__interface_1gad1328cd6cb078835566a4f9b052fae9c" kindref="member">uart_mux_attach_cb_t</ref><sp/>cb,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structuart__mux__driver__api" kindref="compound">uart_mux_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structuart__mux__driver__api" kindref="compound">uart_mux_driver_api</ref><sp/>*)mux-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;<ref refid="structuart__mux__driver__api_1a312a7c8724c885d9f8fdcd9434ce44c2" kindref="member">attach</ref>(mux,<sp/>uart,<sp/>dlci_address,<sp/>cb,<sp/><ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="group__uart__mux__interface_1ga551b58a43626981af2be757f44206ccc" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*<ref refid="group__uart__mux__interface_1ga551b58a43626981af2be757f44206ccc" kindref="member">uart_mux_find</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dlci_address);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="group__uart__mux__interface_1gaac6d68c5f53f60b5dfb1191a85429144" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*<ref refid="group__uart__mux__interface_1gaac6d68c5f53f60b5dfb1191a85429144" kindref="member">uart_mux_alloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="group__uart__mux__interface_1gae084a3e547ec672bd543fe4bd15c27a1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__uart__mux__interface_1gae084a3e547ec672bd543fe4bd15c27a1" kindref="member">uart_mux_cb_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*uart,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dlci_address,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="group__uart__mux__interface_1gae7f1271a6fac1edd388bd8add3b01614" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__uart__mux__interface_1gae7f1271a6fac1edd388bd8add3b01614" kindref="member">uart_mux_foreach</ref>(<ref refid="group__uart__mux__interface_1gae084a3e547ec672bd543fe4bd15c27a1" kindref="member">uart_mux_cb_t</ref><sp/>cb,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="group__uart__mux__interface_1ga3e9871415092eba11a7be262ae4da0a2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__uart__mux__interface_1ga3e9871415092eba11a7be262ae4da0a2" kindref="member">uart_mux_disable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="group__uart__mux__interface_1gad832440ec0f4157fc895a1ec05081337" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__uart__mux__interface_1gad832440ec0f4157fc895a1ec05081337" kindref="member">uart_mux_enable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;syscalls/uart_mux.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_DRIVERS_UART_MUX_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/drivers/console/uart_mux.h"/>
  </compounddef>
</doxygen>
