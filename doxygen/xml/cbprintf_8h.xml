<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="cbprintf_8h" kind="file" language="C++">
    <compoundname>cbprintf.h</compoundname>
    <includes local="no">stdarg.h</includes>
    <includes local="no">stddef.h</includes>
    <includes refid="stdint_8h" local="no">stdint.h</includes>
    <includes refid="toolchain_8h" local="no">toolchain.h</includes>
    <includes refid="stdio_8h" local="no">stdio.h</includes>
    <includes refid="cbprintf__internal_8h" local="no">sys/cbprintf_internal.h</includes>
    <includedby refid="include_2logging_2log__msg2_8h" local="no">include/logging/log_msg2.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/sys/cbprintf.h</label>
        <link refid="cbprintf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>sys/cbprintf_cxx.h</label>
        <link refid="cbprintf__cxx_8h"/>
      </node>
      <node id="7">
        <label>sys/cbprintf_internal.h</label>
        <link refid="cbprintf__internal_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="12">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="16">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="4">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="6">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdarg.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="10">
        <label>syscalls/errno_private.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="13">
        <label>include/debug/stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>include/drivers/ptp_clock.h</label>
        <link refid="ptp__clock_8h"/>
      </node>
      <node id="12">
        <label>include/logging/log.h</label>
        <link refid="log_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/logging/log_backend.h</label>
        <link refid="log__backend_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>include/logging/log_backend_std.h</label>
        <link refid="log__backend__std_8h"/>
      </node>
      <node id="11">
        <label>include/logging/log_core.h</label>
        <link refid="include_2logging_2log__core_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>include/logging/log_ctrl.h</label>
        <link refid="include_2logging_2log__ctrl_8h"/>
      </node>
      <node id="71">
        <label>include/logging/log_frontend.h</label>
        <link refid="log__frontend_8h"/>
      </node>
      <node id="72">
        <label>include/logging/log_internal.h</label>
        <link refid="log__internal_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>include/logging/log_msg.h</label>
        <link refid="log__msg_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/logging/log_msg2.h</label>
        <link refid="include_2logging_2log__msg2_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>include/logging/log_output.h</label>
        <link refid="log__output_8h"/>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>include/logging/log_output_dict.h</label>
        <link refid="log__output__dict_8h"/>
      </node>
      <node id="56">
        <label>include/net/bt.h</label>
        <link refid="bt_8h"/>
      </node>
      <node id="21">
        <label>include/net/can.h</label>
        <link refid="net_2can_8h"/>
      </node>
      <node id="31">
        <label>include/net/dns_resolve.h</label>
        <link refid="dns__resolve_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>include/net/dsa.h</label>
        <link refid="dsa_8h"/>
      </node>
      <node id="23">
        <label>include/net/dummy.h</label>
        <link refid="dummy_8h"/>
      </node>
      <node id="24">
        <label>include/net/ethernet.h</label>
        <link refid="ethernet_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>include/net/ethernet_mgmt.h</label>
        <link refid="ethernet__mgmt_8h"/>
      </node>
      <node id="19">
        <label>include/net/gptp.h</label>
        <link refid="gptp_8h"/>
      </node>
      <node id="57">
        <label>include/net/ieee802154.h</label>
        <link refid="ieee802154_8h"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>include/net/ieee802154_mgmt.h</label>
        <link refid="ieee802154__mgmt_8h"/>
      </node>
      <node id="27">
        <label>include/net/ieee802154_radio.h</label>
        <link refid="ieee802154__radio_8h"/>
      </node>
      <node id="28">
        <label>include/net/igmp.h</label>
        <link refid="igmp_8h"/>
      </node>
      <node id="29">
        <label>include/net/net_config.h</label>
        <link refid="net__config_8h"/>
      </node>
      <node id="30">
        <label>include/net/net_context.h</label>
        <link refid="net__context_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>include/net/net_core.h</label>
        <link refid="net__core_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>include/net/net_if.h</label>
        <link refid="net__if_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>include/net/net_mgmt.h</label>
        <link refid="net__mgmt_8h"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>include/net/net_offload.h</label>
        <link refid="net__offload_8h"/>
      </node>
      <node id="45">
        <label>include/net/net_pkt.h</label>
        <link refid="net__pkt_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>include/net/net_pkt_filter.h</label>
        <link refid="net__pkt__filter_8h"/>
      </node>
      <node id="59">
        <label>include/net/net_stats.h</label>
        <link refid="net__stats_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>include/net/openthread.h</label>
        <link refid="openthread_8h"/>
      </node>
      <node id="46">
        <label>include/net/ppp.h</label>
        <link refid="ppp_8h"/>
      </node>
      <node id="47">
        <label>include/net/promiscuous.h</label>
        <link refid="promiscuous_8h"/>
      </node>
      <node id="60">
        <label>include/net/ptp_time.h</label>
        <link refid="ptp__time_8h"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>include/net/sntp.h</label>
        <link refid="sntp_8h"/>
      </node>
      <node id="32">
        <label>include/net/socket.h</label>
        <link refid="net_2socket_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>include/net/socket_can.h</label>
        <link refid="socket__can_8h"/>
      </node>
      <node id="53">
        <label>include/net/socket_net_mgmt.h</label>
        <link refid="socket__net__mgmt_8h"/>
      </node>
      <node id="33">
        <label>include/net/socket_offload.h</label>
        <link refid="socket__offload_8h"/>
      </node>
      <node id="38">
        <label>include/net/socketutils.h</label>
        <link refid="socketutils_8h"/>
      </node>
      <node id="34">
        <label>include/net/tftp.h</label>
        <link refid="tftp_8h"/>
      </node>
      <node id="62">
        <label>include/net/trickle.h</label>
        <link refid="trickle_8h"/>
      </node>
      <node id="48">
        <label>include/net/udp.h</label>
        <link refid="udp_8h"/>
      </node>
      <node id="49">
        <label>include/net/virtual.h</label>
        <link refid="virtual_8h"/>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>include/net/virtual_mgmt.h</label>
        <link refid="virtual__mgmt_8h"/>
      </node>
      <node id="54">
        <label>include/net/wifi_mgmt.h</label>
        <link refid="wifi__mgmt_8h"/>
      </node>
      <node id="35">
        <label>include/posix/arpa/inet.h</label>
        <link refid="inet_8h"/>
      </node>
      <node id="36">
        <label>include/posix/net/if.h</label>
        <link refid="if_8h"/>
      </node>
      <node id="37">
        <label>include/posix/netdb.h</label>
        <link refid="netdb_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>include/posix/netinet/in.h</label>
        <link refid="in_8h"/>
      </node>
      <node id="40">
        <label>include/posix/netinet/tcp.h</label>
        <link refid="tcp_8h"/>
      </node>
      <node id="41">
        <label>include/posix/poll.h</label>
        <link refid="poll_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>include/posix/sys/socket.h</label>
        <link refid="posix_2sys_2socket_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>include/shell/shell.h</label>
        <link refid="shell_2shell_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>include/shell/shell_dummy.h</label>
        <link refid="shell__dummy_8h"/>
      </node>
      <node id="5">
        <label>include/shell/shell_log_backend.h</label>
        <link refid="shell__log__backend_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>include/shell/shell_rtt.h</label>
        <link refid="shell__rtt_8h"/>
      </node>
      <node id="9">
        <label>include/shell/shell_telnet.h</label>
        <link refid="shell__telnet_8h"/>
      </node>
      <node id="10">
        <label>include/shell/shell_uart.h</label>
        <link refid="shell__uart_8h"/>
      </node>
      <node id="1">
        <label>include/sys/cbprintf.h</label>
        <link refid="cbprintf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>include/syscall_handler.h</label>
        <link refid="syscall__handler_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>include/usb/usb_device.h</label>
        <link refid="usb__device_8h"/>
      </node>
      <node id="64">
        <label>tests/kernel/fatal/exception/src/main.c</label>
        <link refid="fatal_2exception_2src_2main_8c"/>
      </node>
      <node id="65">
        <label>tests/kernel/mem_protect/mem_protect/src/inherit.c</label>
        <link refid="inherit_8c"/>
      </node>
      <node id="66">
        <label>tests/kernel/mem_protect/mem_protect/src/kobject.c</label>
        <link refid="kobject_8c"/>
      </node>
      <node id="67">
        <label>tests/kernel/mem_protect/obj_validation/src/main.c</label>
        <link refid="mem__protect_2obj__validation_2src_2main_8c"/>
      </node>
      <node id="68">
        <label>tests/kernel/mem_protect/syscalls/src/main.c</label>
        <link refid="mem__protect_2syscalls_2src_2main_8c"/>
      </node>
      <node id="14">
        <label>tests/kernel/mem_protect/userspace/src/main.c</label>
        <link refid="mem__protect_2userspace_2src_2main_8c"/>
      </node>
      <node id="15">
        <label>tests/kernel/profiling/profiling_api/src/main.c</label>
        <link refid="profiling_2profiling__api_2src_2main_8c"/>
      </node>
      <node id="16">
        <label>tests/kernel/threads/dynamic_thread/src/main.c</label>
        <link refid="threads_2dynamic__thread_2src_2main_8c"/>
      </node>
      <node id="17">
        <label>tests/kernel/threads/thread_apis/src/test_kthread_for_each.c</label>
        <link refid="test__kthread__for__each_8c"/>
      </node>
      <node id="69">
        <label>tests/kernel/threads/thread_stack/src/main.c</label>
        <link refid="threads_2thread__stack_2src_2main_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__cbprintf__apis_1ga3b917fb81bb246a0910066e2708dbd78" prot="public" static="no">
        <name>CBPRINTF_PACKAGE_ALIGNMENT</name>
        <initializer>	(<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(CONFIG_CBPRINTF_PACKAGE_LONGDOUBLE) ? \
		sizeof(long double) : <ref refid="group__sys-util_1gafa99ec4acc4ecb2dc3c2d05da15d0e3f" kindref="member">MAX</ref>(sizeof(double), sizeof(long long)))</initializer>
        <briefdescription>
<para>Required alignment of the buffer used for packaging. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/cbprintf.h" line="63" column="10" bodyfile="include/sys/cbprintf.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__CBPRINTF__PACKAGE__FLAGS_1ga95b0b7f91303781b8bad610f7cac3fa3" prot="public" static="no">
        <name>CBPRINTF_PACKAGE_ADD_STRING_IDXS</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(0)</initializer>
        <briefdescription>
<para>Append indexes of read-only string arguments in the package. </para>
        </briefdescription>
        <detaileddescription>
<para>When used, package contains locations of read-only string arguments. Package with that information can be converted to fully self-contain package using <ref refid="group__cbprintf__apis_1ga4f71af38815a9873217fa3a8edc48b0c" kindref="member">cbprintf_fsc_package</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/cbprintf.h" line="78" column="9" bodyfile="include/sys/cbprintf.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__CBPRINTF__MUST__RUNTIME__PACKAGE__FLAGS_1ga6f959e54db274fa111af63b7014c60f9" prot="public" static="no">
        <name>CBPRINTF_MUST_RUNTIME_PACKAGE_CONST_CHAR</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(0)</initializer>
        <briefdescription>
<para>Consider constant string pointers as pointing to fixed strings. </para>
        </briefdescription>
        <detaileddescription>
<para>When flag is set then const (w)char pointers arguments in the string does not trigger runtime packaging. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/cbprintf.h" line="91" column="9" bodyfile="include/sys/cbprintf.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__cbprintf__apis_1ga464cc00d557fa9e8582b809165e2e4c8" prot="public" static="no">
        <name>CBPRINTF_MUST_RUNTIME_PACKAGE</name>
        <param><defname>skip</defname></param>
        <param><defname>flags</defname></param>
        <param><defname>...</defname></param>
        <initializer>	Z_CBPRINTF_MUST_RUNTIME_PACKAGE(skip, <ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Determine if string must be packaged in run time. </para>
        </briefdescription>
        <detaileddescription>
<para>Static packaging can be applied if size of the package can be determined at compile time. In general, package size can be determined at compile time if there are no string arguments which might be copied into package body if they are considered transient.</para>
<para><simplesect kind="note"><para>By default any char pointers are considered to be pointing at transient strings. This can be narrowed down to non const pointers by using <ref refid="group__CBPRINTF__MUST__RUNTIME__PACKAGE__FLAGS_1ga6f959e54db274fa111af63b7014c60f9" kindref="member">CBPRINTF_MUST_RUNTIME_PACKAGE_CONST_CHAR</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>skip</parametername>
</parameternamelist>
<parameterdescription>
<para>number of read only string arguments in the parameter list. It shall be non-zero if there are known read only string arguments present in the string (e.g. function name prefix in the log message).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>String with arguments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>option flags. See <ref refid="group__CBPRINTF__MUST__RUNTIME__PACKAGE__FLAGS" kindref="compound">Package flags.</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>if string must be packaged in run time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>string can be statically packaged. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/cbprintf.h" line="156" column="9" bodyfile="include/sys/cbprintf.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__cbprintf__apis_1ga1ac0f7d0956fc96a9d850d2fef928285" prot="public" static="no">
        <name>CBPRINTF_STATIC_PACKAGE</name>
        <param><defname>packaged</defname></param>
        <param><defname>inlen</defname></param>
        <param><defname>outlen</defname></param>
        <param><defname>align_offset</defname></param>
        <param><defname>flags</defname></param>
        <param><defname>...</defname></param>
        <initializer>	Z_CBPRINTF_STATIC_PACKAGE(packaged, inlen, outlen, \
				  align_offset, <ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Statically package string. </para>
        </briefdescription>
        <detaileddescription>
<para>Build string package from formatted string. It assumes that formatted string is in the read only memory.</para>
<para>If _Generic is not supported then runtime packaging is performed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>packaged</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to where the packaged data can be stored. Pass a null pointer to skip packaging but still calculate the total space required. The data stored here is relocatable, that is it can be moved to another contiguous block of memory. It must be aligned to the size of the longest argument. It is recommended to use CBPRINTF_PACKAGE_ALIGNMENT for alignment.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inlen</parametername>
</parameternamelist>
<parameterdescription>
<para>set to the number of bytes available at <computeroutput>packaged</computeroutput>. If <computeroutput>packaged</computeroutput> is NULL the value is ignored.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outlen</parametername>
</parameternamelist>
<parameterdescription>
<para>variable updated to the number of bytes required to completely store the packed information. If input buffer was too small it is set to -ENOSPC.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>align_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>input buffer alignment offset in bytes. Where offset 0 means that buffer is aligned to CBPRINTF_PACKAGE_ALIGNMENT. Xtensa requires that <computeroutput>packaged</computeroutput> is aligned to CBPRINTF_PACKAGE_ALIGNMENT so it must be multiply of CBPRINTF_PACKAGE_ALIGNMENT or 0.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>option flags. See <ref refid="group__CBPRINTF__PACKAGE__FLAGS" kindref="compound">Package flags.</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>formatted string with arguments. Format string must be constant. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/cbprintf.h" line="189" column="9" bodyfile="include/sys/cbprintf.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__cbprintf__apis_1gaca8362dda031a176d96855a604395a83" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* cbprintf_cb) ()</definition>
        <argsstring>)()</argsstring>
        <name>cbprintf_cb</name>
        <briefdescription>
<para>Signature for a cbprintf callback function. </para>
        </briefdescription>
        <detaileddescription>
<para>This function expects two parameters:</para>
<para><itemizedlist>
<listitem><para><computeroutput>c</computeroutput> a character to output. The output behavior should be as if this was cast to an unsigned char.</para>
</listitem><listitem><para><computeroutput>ctx</computeroutput> a pointer to an object that provides context for the output operation.</para>
</listitem></itemizedlist>
</para>
<para>The declaration does not specify the parameter types. This allows a function like <computeroutput>fputc</computeroutput> to be used without requiring all context pointers to be to a <computeroutput>FILE</computeroutput> object.</para>
<para><simplesect kind="return"><para>the value of <computeroutput>c</computeroutput> cast to an unsigned char then back to int, or a negative error code that will be returned from <ref refid="group__cbprintf__apis_1ga0cebdbf4f142ee28c5bd80a1615647da" kindref="member">cbprintf()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/cbprintf.h" line="112" column="9" bodyfile="include/sys/cbprintf.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__cbprintf__apis_1gacf080321312296d57ff59d94e26a0dcc" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* cbvprintf_exteral_formatter_func) (cbprintf_cb out, void *ctx, const char *fmt, va_list ap)</definition>
        <argsstring>)(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)</argsstring>
        <name>cbvprintf_exteral_formatter_func</name>
        <briefdescription>
<para>Signature for a external formatter function identical to cbvprintf. </para>
        </briefdescription>
        <detaileddescription>
<para>This function expects the following parameters:</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the function used to emit each generated character.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to an object that provides context for the external formatter.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>a standard ISO C format string with characters and conversion specifications.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>captured stack arguments corresponding to the conversion specifications found within <computeroutput>fmt</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vprintf like return values: the number of characters printed, or a negative error value returned from external formatter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/cbprintf.h" line="132" column="9" bodyfile="include/sys/cbprintf.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__cbprintf__apis_1gad9c56f0a84f60cc53fa9e687069a8f1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cbprintf_package</definition>
        <argsstring>(void *packaged, size_t len, uint32_t flags, const char *format,...)</argsstring>
        <name>cbprintf_package</name>
        <param>
          <type>void *</type>
          <declname>packaged</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Capture state required to output formatted data later. </para>
        </briefdescription>
        <detaileddescription>
<para>Like <ref refid="group__cbprintf__apis_1ga0cebdbf4f142ee28c5bd80a1615647da" kindref="member">cbprintf()</ref> but instead of processing the arguments and emitting the formatted results immediately all arguments are captured so this can be done in a different context, e.g. when the output function can block.</para>
<para>In addition to the values extracted from arguments this will ensure that copies are made of the necessary portions of any string parameters that are not confirmed to be stored in read-only memory (hence assumed to be safe to refer to directly later).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>packaged</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to where the packaged data can be stored. Pass a null pointer to store nothing but still calculate the total space required. The data stored here is relocatable, that is it can be moved to another contiguous block of memory. However, under condition that alignment is maintained. It must be aligned to at least the size of a pointer.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>this must be set to the number of bytes available at <computeroutput>packaged</computeroutput> if it is not null. If <computeroutput>packaged</computeroutput> is null then it indicates hypothetical buffer alignment offset in bytes compared to CBPRINTF_PACKAGE_ALIGNMENT alignment. Buffer alignment offset impacts returned size of the package. Xtensa requires that buffer is always aligned to CBPRINTF_PACKAGE_ALIGNMENT so it must be multiply of CBPRINTF_PACKAGE_ALIGNMENT or 0 when <computeroutput>packaged</computeroutput> is null.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>option flags. See <ref refid="group__CBPRINTF__PACKAGE__FLAGS" kindref="compound">Package flags.</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>a standard ISO C format string with characters and conversion specifications.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments corresponding to the conversion specifications found within <computeroutput>format</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>nonegative</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes successfully stored at <computeroutput>packaged</computeroutput>. This will not exceed <computeroutput>len</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>format</computeroutput> is not acceptable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EFAULT</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>packaged</computeroutput> alignment is not acceptable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSPC</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>packaged</computeroutput> was not null and the space required to store exceed <computeroutput>len</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/cbprintf.h" line="234" column="5" declfile="include/sys/cbprintf.h" declline="234" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__cbprintf__apis_1gaa83f17925daa9747d329b6f1078ab15a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cbvprintf_package</definition>
        <argsstring>(void *packaged, size_t len, uint32_t flags, const char *format, va_list ap)</argsstring>
        <name>cbvprintf_package</name>
        <param>
          <type>void *</type>
          <declname>packaged</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>Capture state required to output formatted data later. </para>
        </briefdescription>
        <detaileddescription>
<para>Like <ref refid="group__cbprintf__apis_1ga0cebdbf4f142ee28c5bd80a1615647da" kindref="member">cbprintf()</ref> but instead of processing the arguments and emitting the formatted results immediately all arguments are captured so this can be done in a different context, e.g. when the output function can block.</para>
<para>In addition to the values extracted from arguments this will ensure that copies are made of the necessary portions of any string parameters that are not confirmed to be stored in read-only memory (hence assumed to be safe to refer to directly later).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>packaged</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to where the packaged data can be stored. Pass a null pointer to store nothing but still calculate the total space required. The data stored here is relocatable, that is it can be moved to another contiguous block of memory. The pointer must be aligned to a multiple of the largest element in the argument list.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>this must be set to the number of bytes available at <computeroutput>packaged</computeroutput>. Ignored if <computeroutput>packaged</computeroutput> is NULL.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>option flags. See <ref refid="group__CBPRINTF__PACKAGE__FLAGS" kindref="compound">Package flags.</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>a standard ISO C format string with characters and conversion specifications.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>captured stack arguments corresponding to the conversion specifications found within <computeroutput>format</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>nonegative</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes successfully stored at <computeroutput>packaged</computeroutput>. This will not exceed <computeroutput>len</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>format</computeroutput> is not acceptable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSPC</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>packaged</computeroutput> was not null and the space required to store exceed <computeroutput>len</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/cbprintf.h" line="274" column="5" declfile="include/sys/cbprintf.h" declline="274" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__cbprintf__apis_1ga4f71af38815a9873217fa3a8edc48b0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cbprintf_fsc_package</definition>
        <argsstring>(void *in_packaged, size_t in_len, void *packaged, size_t len)</argsstring>
        <name>cbprintf_fsc_package</name>
        <param>
          <type>void *</type>
          <declname>in_packaged</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>in_len</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>packaged</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Convert package to fully self-contained (fsc) package. </para>
        </briefdescription>
        <detaileddescription>
<para>By default, package does not contain read only strings. However, if needed it may be converted to a fully self-contained package which contains all strings. In order to allow such conversion, original package must be created with <ref refid="group__CBPRINTF__PACKAGE__FLAGS_1ga95b0b7f91303781b8bad610f7cac3fa3" kindref="member">CBPRINTF_PACKAGE_ADD_STRING_IDXS</ref> flag. Such package will contain necessary data to find read only strings in the package and copy them into package body.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in_packaged</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to original package created with <ref refid="group__CBPRINTF__PACKAGE__FLAGS_1ga95b0b7f91303781b8bad610f7cac3fa3" kindref="member">CBPRINTF_PACKAGE_ADD_STRING_IDXS</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in_len</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>in_packaged</computeroutput> length.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packaged</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to location where fully self-contained version of the input package will be written. Pass a null pointer to calculate space required.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>must be set to the number of bytes available at <computeroutput>packaged</computeroutput>. Not used if <computeroutput>packaged</computeroutput> is null.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>nonegative</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes successfully stored at <computeroutput>packaged</computeroutput>. This will not exceed <computeroutput>len</computeroutput>. If <computeroutput>packaged</computeroutput> is null, calculated length. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSPC</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>packaged</computeroutput> was not null and the space required to store exceed <computeroutput>len</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>in_packaged</computeroutput> is null. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/cbprintf.h" line="306" column="5" declfile="include/sys/cbprintf.h" declline="306" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__cbprintf__apis_1ga0a419dfaa1873bca5a9f4e0fb3609e7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cbpprintf_external</definition>
        <argsstring>(cbprintf_cb out, cbvprintf_exteral_formatter_func formatter, void *ctx, void *packaged)</argsstring>
        <name>cbpprintf_external</name>
        <param>
          <type><ref refid="group__cbprintf__apis_1gaca8362dda031a176d96855a604395a83" kindref="member">cbprintf_cb</ref></type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="group__cbprintf__apis_1gacf080321312296d57ff59d94e26a0dcc" kindref="member">cbvprintf_exteral_formatter_func</ref></type>
          <declname>formatter</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>packaged</declname>
        </param>
        <briefdescription>
<para>Generate the output for a previously captured format operation using an external formatter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the function used to emit each generated character.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>formatter</parametername>
</parameternamelist>
<parameterdescription>
<para>external formatter function.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to an object that provides context for the external formatter.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packaged</parametername>
</parameternamelist>
<parameterdescription>
<para>the data required to generate the formatted output, as captured by <ref refid="group__cbprintf__apis_1gad9c56f0a84f60cc53fa9e687069a8f1b" kindref="member">cbprintf_package()</ref> or <ref refid="group__cbprintf__apis_1gaa83f17925daa9747d329b6f1078ab15a" kindref="member">cbvprintf_package()</ref>. The alignment requirement on this data is the same as when it was initially created.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Memory indicated by <computeroutput>packaged</computeroutput> will be modified in a non-destructive way, meaning that it could still be reused with this function again.</para>
</simplesect>
<simplesect kind="return"><para>printf like return values: the number of characters printed, or a negative error value returned from external formatter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/cbprintf.h" line="331" column="5" declfile="include/sys/cbprintf.h" declline="331" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__cbprintf__apis_1ga0cebdbf4f142ee28c5bd80a1615647da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cbprintf</definition>
        <argsstring>(cbprintf_cb out, void *ctx, const char *format,...)</argsstring>
        <name>cbprintf</name>
        <param>
          <type><ref refid="group__cbprintf__apis_1gaca8362dda031a176d96855a604395a83" kindref="member">cbprintf_cb</ref></type>
          <declname>out</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>*printf-like output through a callback. </para>
        </briefdescription>
        <detaileddescription>
<para>This is essentially <ref refid="stdio_8h_1a6c67912b5a18e7d7ac03ca4e77425715" kindref="member">printf()</ref> except the output is generated character-by-character using the provided <computeroutput>out</computeroutput> function. This allows formatting text of unbounded length without incurring the cost of a temporary buffer.</para>
<para>All formatting specifiers of C99 are recognized, and most are supported if the functionality is enabled.</para>
<para><simplesect kind="note"><para>The functionality of this function is significantly reduced when <verbatim>embed:rst:inline :kconfig:`CONFIG_CBPRINTF_NANO` </verbatim> is selected.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the function used to emit each generated character.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context provided when invoking out</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>a standard ISO C format string with characters and conversion specifications.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments corresponding to the conversion specifications found within <computeroutput>format</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of characters printed, or a negative error value returned from invoking <computeroutput>out</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/cbprintf.h" line="363" column="5" declfile="include/sys/cbprintf.h" declline="363" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__cbprintf__apis_1ga3d4847cb6900851ec11e39a35f833b26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cbvprintf</definition>
        <argsstring>(cbprintf_cb out, void *ctx, const char *format, va_list ap)</argsstring>
        <name>cbvprintf</name>
        <param>
          <type><ref refid="group__cbprintf__apis_1gaca8362dda031a176d96855a604395a83" kindref="member">cbprintf_cb</ref></type>
          <declname>out</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>varargs-aware *printf-like output through a callback. </para>
        </briefdescription>
        <detaileddescription>
<para>This is essentially <ref refid="stdio_8h_1a0cf1b75a23729bcc1669ce788d01aa63" kindref="member">vsprintf()</ref> except the output is generated character-by-character using the provided <computeroutput>out</computeroutput> function. This allows formatting text of unbounded length without incurring the cost of a temporary buffer.</para>
<para><simplesect kind="note"><para>This function is available only when <verbatim>embed:rst:inline :kconfig:`CONFIG_CBPRINTF_LIBC_SUBSTS` </verbatim> is selected.</para>
</simplesect>
<simplesect kind="note"><para>The functionality of this function is significantly reduced when <verbatim>embed:rst:inline :kconfig:`CONFIG_CBPRINTF_NANO` </verbatim> is selected.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the function used to emit each generated character.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context provided when invoking out</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>a standard ISO C format string with characters and conversion specifications.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference to the values to be converted.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of characters generated, or a negative error value returned from invoking <computeroutput>out</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/cbprintf.h" line="390" column="5" declfile="include/sys/cbprintf.h" declline="390" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__cbprintf__apis_1ga150fa7bb8dfb96db886006c9115e1dd7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int cbpprintf</definition>
        <argsstring>(cbprintf_cb out, void *ctx, void *packaged)</argsstring>
        <name>cbpprintf</name>
        <param>
          <type><ref refid="group__cbprintf__apis_1gaca8362dda031a176d96855a604395a83" kindref="member">cbprintf_cb</ref></type>
          <declname>out</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>packaged</declname>
        </param>
        <briefdescription>
<para>Generate the output for a previously captured format operation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the function used to emit each generated character.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context provided when invoking out</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packaged</parametername>
</parameternamelist>
<parameterdescription>
<para>the data required to generate the formatted output, as captured by <ref refid="group__cbprintf__apis_1gad9c56f0a84f60cc53fa9e687069a8f1b" kindref="member">cbprintf_package()</ref> or <ref refid="group__cbprintf__apis_1gaa83f17925daa9747d329b6f1078ab15a" kindref="member">cbvprintf_package()</ref>. The alignment requirement on this data is the same as when it was initially created.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Memory indicated by <computeroutput>packaged</computeroutput> will be modified in a non-destructive way, meaning that it could still be reused with this function again.</para>
</simplesect>
<simplesect kind="return"><para>the number of characters printed, or a negative error value returned from invoking <computeroutput>out</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/cbprintf.h" line="410" column="5" bodyfile="include/sys/cbprintf.h" bodystart="410" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="group__cbprintf__apis_1ga2636e91fd5d78835cfaffe5b5012638b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fprintfcb</definition>
        <argsstring>(FILE *stream, const char *format,...)</argsstring>
        <name>fprintfcb</name>
        <param>
          <type><ref refid="stdio_8h_1ac15bbd02a147d1595cdfb8b2979693d7" kindref="member">FILE</ref> *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>fprintf using Zephyrs cbprintf infrastructure. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is available only when <verbatim>embed:rst:inline :kconfig:`CONFIG_CBPRINTF_LIBC_SUBSTS` </verbatim> is selected.</para>
</simplesect>
<simplesect kind="note"><para>The functionality of this function is significantly reduced when <verbatim>embed:rst:inline :kconfig:`CONFIG_CBPRINTF_NANO` </verbatim> is selected.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>the stream to which the output should be written.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>a standard ISO C format string with characters and conversion specifications.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments corresponding to the conversion specifications found within <computeroutput>format</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
return The number of characters printed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/cbprintf.h" line="436" column="5" declfile="include/sys/cbprintf.h" declline="436" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__cbprintf__apis_1ga24d7226976f3acbe579b6d6b5d530ade" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vfprintfcb</definition>
        <argsstring>(FILE *stream, const char *format, va_list ap)</argsstring>
        <name>vfprintfcb</name>
        <param>
          <type><ref refid="stdio_8h_1ac15bbd02a147d1595cdfb8b2979693d7" kindref="member">FILE</ref> *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>vfprintf using Zephyrs cbprintf infrastructure. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is available only when <verbatim>embed:rst:inline :kconfig:`CONFIG_CBPRINTF_LIBC_SUBSTS` </verbatim> is selected.</para>
</simplesect>
<simplesect kind="note"><para>The functionality of this function is significantly reduced when <verbatim>embed:rst:inline :kconfig:`CONFIG_CBPRINTF_NANO` </verbatim> is selected.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>the stream to which the output should be written.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>a standard ISO C format string with characters and conversion specifications.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference to the values to be converted.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of characters printed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/cbprintf.h" line="455" column="5" declfile="include/sys/cbprintf.h" declline="455" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__cbprintf__apis_1ga17aa694ea800f8188a3de3babd524c3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int printfcb</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>printfcb</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>printf using Zephyrs cbprintf infrastructure. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is available only when <verbatim>embed:rst:inline :kconfig:`CONFIG_CBPRINTF_LIBC_SUBSTS` </verbatim> is selected.</para>
</simplesect>
<simplesect kind="note"><para>The functionality of this function is significantly reduced when <verbatim>embed:rst:inline :kconfig:`CONFIG_CBPRINTF_NANO` </verbatim> is selected.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>a standard ISO C format string with characters and conversion specifications.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments corresponding to the conversion specifications found within <computeroutput>format</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of characters printed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/cbprintf.h" line="474" column="5" declfile="include/sys/cbprintf.h" declline="474" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__cbprintf__apis_1gaa70a1b73fb04b88b40c1fa5fd65efd15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vprintfcb</definition>
        <argsstring>(const char *format, va_list ap)</argsstring>
        <name>vprintfcb</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>vprintf using Zephyrs cbprintf infrastructure. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is available only when <verbatim>embed:rst:inline :kconfig:`CONFIG_CBPRINTF_LIBC_SUBSTS` </verbatim> is selected.</para>
</simplesect>
<simplesect kind="note"><para>The functionality of this function is significantly reduced when <verbatim>embed:rst:inline :kconfig:`CONFIG_CBPRINTF_NANO` </verbatim> is selected.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>a standard ISO C format string with characters and conversion specifications.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference to the values to be converted.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of characters printed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/cbprintf.h" line="491" column="5" declfile="include/sys/cbprintf.h" declline="491" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__cbprintf__apis_1ga909f859afbc2a596cd0174f711a60047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snprintfcb</definition>
        <argsstring>(char *str, size_t size, const char *format,...)</argsstring>
        <name>snprintfcb</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>snprintf using Zephyrs cbprintf infrastructure. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is available only when <verbatim>embed:rst:inline :kconfig:`CONFIG_CBPRINTF_LIBC_SUBSTS` </verbatim> is selected.</para>
</simplesect>
<simplesect kind="note"><para>The functionality of this function is significantly reduced when <verbatim>embed:rst:inline :kconfig:`CONFIG_CBPRINTF_NANO` </verbatim> is selected.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>where the formatted content should be written</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum number of chaacters for the formatted output, including the terminating null byte.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>a standard ISO C format string with characters and conversion specifications.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments corresponding to the conversion specifications found within <computeroutput>format</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of characters that would have been written to <computeroutput>str</computeroutput>, excluding the terminating null byte. This is greater than the number actually written if <computeroutput>size</computeroutput> is too small. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/cbprintf.h" line="517" column="5" declfile="include/sys/cbprintf.h" declline="517" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__cbprintf__apis_1ga37b0f96a7b9c025659a902e8fd614b33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vsnprintfcb</definition>
        <argsstring>(char *str, size_t size, const char *format, va_list ap)</argsstring>
        <name>vsnprintfcb</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>vsnprintf using Zephyrs cbprintf infrastructure. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is available only when <verbatim>embed:rst:inline :kconfig:`CONFIG_CBPRINTF_LIBC_SUBSTS` </verbatim> is selected.</para>
</simplesect>
<simplesect kind="note"><para>The functionality of this function is significantly reduced when <verbatim>embed:rst:inline :kconfig:`CONFIG_CBPRINTF_NANO` </verbatim> is selected.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>where the formatted content should be written</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum number of chaacters for the formatted output, including the terminating null byte.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>a standard ISO C format string with characters and conversion specifications.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference to the values to be converted.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of characters that would have been written to <computeroutput>str</computeroutput>, excluding the terminating null byte. This is greater than the number actually written if <computeroutput>size</computeroutput> is too small. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/cbprintf.h" line="541" column="5" declfile="include/sys/cbprintf.h" declline="541" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2020<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_SYS_CBPRINTF_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_SYS_CBPRINTF_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdint_8h" kindref="compound">stdint.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="toolchain_8h" kindref="compound">toolchain.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_CBPRINTF_LIBC_SUBSTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdio_8h" kindref="compound">stdio.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_CBPRINTF_LIBC_SUBSTS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Determine<sp/>if<sp/>_Generic<sp/>is<sp/>supported.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>In<sp/>general<sp/>it&apos;s<sp/>a<sp/>C11<sp/>feature<sp/>but<sp/>it<sp/>is<sp/>supported<sp/>in<sp/>releases<sp/>after:</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>-<sp/>GCC<sp/>4.9.0<sp/>https://gcc.gnu.org/gcc-4.9/changes.html</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>-<sp/>Clang<sp/>3.8<sp/>Introduced<sp/>in<sp/>3.0<sp/>(https://releases.llvm.org/3.0/docs/ClangReleaseNotes.html)</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/><sp/>but<sp/>with<sp/>bug<sp/>(http://www.open-std.org/jtc1/sc22/wg14/www/docs/summary.htm#dr_481)</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/><sp/>that<sp/>was<sp/>fixed<sp/>in<sp/>3.8.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>@note<sp/>Z_C_GENERIC<sp/>is<sp/>also<sp/>set<sp/>for<sp/>C++<sp/>where<sp/>functionality<sp/>is<sp/>implemented</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>using<sp/>overloading<sp/>and<sp/>templates.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Z_C_GENERIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cplusplus)<sp/>||<sp/>(((__STDC_VERSION__<sp/>&gt;=<sp/>201112L)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((__GNUC__<sp/>*<sp/>10000<sp/>+<sp/>__GNUC_MINOR__<sp/>*<sp/>100<sp/>+<sp/>__GNUC_PATCHLEVEL__)<sp/>&gt;=<sp/>40900)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((__clang_major__<sp/>*<sp/>10000<sp/>+<sp/>__clang_minor__<sp/>*<sp/>100<sp/>+<sp/>__clang_patchlevel__)<sp/>&gt;=<sp/>30800)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_C_GENERIC<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_C_GENERIC<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Z_C_GENERIC<sp/>is<sp/>used<sp/>there<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cbprintf__internal_8h" kindref="compound">sys/cbprintf_internal.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__xtensa__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CBPRINTF_PACKAGE_ALIGNMENT<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CONFIG_X86)<sp/>&amp;&amp;<sp/>!defined(CONFIG_64BIT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>sizeof(long<sp/>double)<sp/>is<sp/>12<sp/>on<sp/>x86-32,<sp/>which<sp/>is<sp/>not<sp/>power<sp/>of<sp/>2.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>So<sp/>set<sp/>it<sp/>manually.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CBPRINTF_PACKAGE_ALIGNMENT<sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(IS_ENABLED(CONFIG_CBPRINTF_PACKAGE_LONGDOUBLE)<sp/>?<sp/>\</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>16<sp/>:<sp/>MAX(sizeof(double),<sp/>sizeof(long<sp/>long)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="group__cbprintf__apis_1ga3b917fb81bb246a0910066e2708dbd78" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CBPRINTF_PACKAGE_ALIGNMENT<sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(IS_ENABLED(CONFIG_CBPRINTF_PACKAGE_LONGDOUBLE)<sp/>?<sp/>\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(long<sp/>double)<sp/>:<sp/>MAX(sizeof(double),<sp/>sizeof(long<sp/>long)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="group__CBPRINTF__PACKAGE__FLAGS_1ga95b0b7f91303781b8bad610f7cac3fa3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CBPRINTF_PACKAGE_ADD_STRING_IDXS<sp/>BIT(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="group__CBPRINTF__MUST__RUNTIME__PACKAGE__FLAGS_1ga6f959e54db274fa111af63b7014c60f9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CBPRINTF_MUST_RUNTIME_PACKAGE_CONST_CHAR<sp/>BIT(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="group__cbprintf__apis_1gaca8362dda031a176d96855a604395a83" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__cbprintf__apis_1gaca8362dda031a176d96855a604395a83" kindref="member">cbprintf_cb</ref>)(</highlight><highlight class="comment">/*<sp/>int<sp/>c,<sp/>void<sp/>*ctx<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="group__cbprintf__apis_1gacf080321312296d57ff59d94e26a0dcc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__cbprintf__apis_1gacf080321312296d57ff59d94e26a0dcc" kindref="member">cbvprintf_exteral_formatter_func</ref>)(<ref refid="group__cbprintf__apis_1gaca8362dda031a176d96855a604395a83" kindref="member">cbprintf_cb</ref><sp/>out,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>va_list<sp/>ap);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="group__cbprintf__apis_1ga464cc00d557fa9e8582b809165e2e4c8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CBPRINTF_MUST_RUNTIME_PACKAGE(skip,<sp/>flags,<sp/>...<sp/></highlight><highlight class="comment">/*<sp/>fmt,<sp/>...<sp/>*/</highlight><highlight class="preprocessor">)<sp/>\</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_CBPRINTF_MUST_RUNTIME_PACKAGE(skip,<sp/>flags,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="group__cbprintf__apis_1ga1ac0f7d0956fc96a9d850d2fef928285" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CBPRINTF_STATIC_PACKAGE(packaged,<sp/>inlen,<sp/>outlen,<sp/>align_offset,<sp/>flags,<sp/>\</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/></highlight><highlight class="comment">/*<sp/>fmt,<sp/>...<sp/>*/</highlight><highlight class="preprocessor">)<sp/>\</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_CBPRINTF_STATIC_PACKAGE(packaged,<sp/>inlen,<sp/>outlen,<sp/>\</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>align_offset,<sp/>flags,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">__printf_like(4,<sp/>5)</highlight></codeline>
<codeline lineno="234" refid="group__cbprintf__apis_1gad9c56f0a84f60cc53fa9e687069a8f1b" refkind="member"><highlight class="normal">int<sp/><ref refid="group__cbprintf__apis_1gad9c56f0a84f60cc53fa9e687069a8f1b" kindref="member">cbprintf_package</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*packaged,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="group__cbprintf__apis_1gaa83f17925daa9747d329b6f1078ab15a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__cbprintf__apis_1gaa83f17925daa9747d329b6f1078ab15a" kindref="member">cbvprintf_package</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*packaged,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_list<sp/>ap);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="group__cbprintf__apis_1ga4f71af38815a9873217fa3a8edc48b0c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__cbprintf__apis_1ga4f71af38815a9873217fa3a8edc48b0c" kindref="member">cbprintf_fsc_package</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*in_packaged,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>in_len,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*packaged,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="group__cbprintf__apis_1ga0a419dfaa1873bca5a9f4e0fb3609e7e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__cbprintf__apis_1ga0a419dfaa1873bca5a9f4e0fb3609e7e" kindref="member">cbpprintf_external</ref>(<ref refid="group__cbprintf__apis_1gaca8362dda031a176d96855a604395a83" kindref="member">cbprintf_cb</ref><sp/>out,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__cbprintf__apis_1gacf080321312296d57ff59d94e26a0dcc" kindref="member">cbvprintf_exteral_formatter_func</ref><sp/>formatter,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*packaged);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal">__printf_like(3,<sp/>4)</highlight></codeline>
<codeline lineno="363" refid="group__cbprintf__apis_1ga0cebdbf4f142ee28c5bd80a1615647da" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__cbprintf__apis_1ga0cebdbf4f142ee28c5bd80a1615647da" kindref="member">cbprintf</ref>(<ref refid="group__cbprintf__apis_1gaca8362dda031a176d96855a604395a83" kindref="member">cbprintf_cb</ref><sp/>out,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,<sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="390" refid="group__cbprintf__apis_1ga3d4847cb6900851ec11e39a35f833b26" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__cbprintf__apis_1ga3d4847cb6900851ec11e39a35f833b26" kindref="member">cbvprintf</ref>(<ref refid="group__cbprintf__apis_1gaca8362dda031a176d96855a604395a83" kindref="member">cbprintf_cb</ref><sp/>out,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,<sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>va_list<sp/>ap);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal">static<sp/>inline</highlight></codeline>
<codeline lineno="410" refid="group__cbprintf__apis_1ga150fa7bb8dfb96db886006c9115e1dd7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__cbprintf__apis_1ga150fa7bb8dfb96db886006c9115e1dd7" kindref="member">cbpprintf</ref>(<ref refid="group__cbprintf__apis_1gaca8362dda031a176d96855a604395a83" kindref="member">cbprintf_cb</ref><sp/>out,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*packaged)</highlight></codeline>
<codeline lineno="411"><highlight class="normal">{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__cbprintf__apis_1ga0a419dfaa1873bca5a9f4e0fb3609e7e" kindref="member">cbpprintf_external</ref>(out,<sp/><ref refid="group__cbprintf__apis_1ga3d4847cb6900851ec11e39a35f833b26" kindref="member">cbvprintf</ref>,<sp/>ctx,<sp/>packaged);</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_CBPRINTF_LIBC_SUBSTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal">__printf_like(2,<sp/>3)</highlight></codeline>
<codeline lineno="436" refid="group__cbprintf__apis_1ga2636e91fd5d78835cfaffe5b5012638b" refkind="member"><highlight class="normal">int<sp/><ref refid="group__cbprintf__apis_1ga2636e91fd5d78835cfaffe5b5012638b" kindref="member">fprintfcb</ref>(<ref refid="stdio_8h_1ac15bbd02a147d1595cdfb8b2979693d7" kindref="member">FILE</ref><sp/>*<sp/>stream,<sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="455" refid="group__cbprintf__apis_1ga24d7226976f3acbe579b6d6b5d530ade" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__cbprintf__apis_1ga24d7226976f3acbe579b6d6b5d530ade" kindref="member">vfprintfcb</ref>(<ref refid="stdio_8h_1ac15bbd02a147d1595cdfb8b2979693d7" kindref="member">FILE</ref><sp/>*stream,<sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>va_list<sp/>ap);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal">__printf_like(1,<sp/>2)</highlight></codeline>
<codeline lineno="474" refid="group__cbprintf__apis_1ga17aa694ea800f8188a3de3babd524c3f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__cbprintf__apis_1ga17aa694ea800f8188a3de3babd524c3f" kindref="member">printfcb</ref>(const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="491" refid="group__cbprintf__apis_1gaa70a1b73fb04b88b40c1fa5fd65efd15" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__cbprintf__apis_1gaa70a1b73fb04b88b40c1fa5fd65efd15" kindref="member">vprintfcb</ref>(const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>va_list<sp/>ap);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal">__printf_like(3,<sp/>4)</highlight></codeline>
<codeline lineno="517" refid="group__cbprintf__apis_1ga909f859afbc2a596cd0174f711a60047" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__cbprintf__apis_1ga909f859afbc2a596cd0174f711a60047" kindref="member">snprintfcb</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="541" refid="group__cbprintf__apis_1ga37b0f96a7b9c025659a902e8fd614b33" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__cbprintf__apis_1ga37b0f96a7b9c025659a902e8fd614b33" kindref="member">vsnprintfcb</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>va_list<sp/>ap);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_CBPRINTF_LIBC_SUBSTS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_SYS_CBPRINTF_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/sys/cbprintf.h"/>
  </compounddef>
</doxygen>
