<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="thread__analyzer_8h" kind="file" language="C++">
    <compoundname>thread_analyzer.h</compoundname>
    <includes local="no">stddef.h</includes>
    <incdepgraph>
      <node id="1">
        <label>include/debug/thread_analyzer.h</label>
        <link refid="thread__analyzer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structthread__analyzer__info" prot="public">thread_analyzer_info</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__thread__analyzer_1ga7ac3e88ca6d905ba0efe4afe5822485c" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* thread_analyzer_cb) (struct thread_analyzer_info *info)</definition>
        <argsstring>)(struct thread_analyzer_info *info)</argsstring>
        <name>thread_analyzer_cb</name>
        <briefdescription>
<para>Thread analyzer stack size callback function. </para>
        </briefdescription>
        <detaileddescription>
<para>Callback function with thread analysis information.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread analysis information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/debug/thread_analyzer.h" line="47" column="9" bodyfile="include/debug/thread_analyzer.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__thread__analyzer_1ga21ae4723422fb96bf4f20ddb3cc1bb8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void thread_analyzer_run</definition>
        <argsstring>(thread_analyzer_cb cb)</argsstring>
        <name>thread_analyzer_run</name>
        <param>
          <type><ref refid="group__thread__analyzer_1ga7ac3e88ca6d905ba0efe4afe5822485c" kindref="member">thread_analyzer_cb</ref></type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Run the thread analyzer and provide information to the callback. </para>
        </briefdescription>
        <detaileddescription>
<para>This function analyzes the current state for all threads and calls a given callback on every thread found.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback function handler </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/debug/thread_analyzer.h" line="56" column="6" declfile="include/debug/thread_analyzer.h" declline="56" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__analyzer_1ga9ff07e2eff100f4b8c79440483c89836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void thread_analyzer_print</definition>
        <argsstring>(void)</argsstring>
        <name>thread_analyzer_print</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Run the thread analyzer and print stack size statistics. </para>
        </briefdescription>
        <detaileddescription>
<para>This function runs the thread analyzer and prints the output in standard form. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/debug/thread_analyzer.h" line="63" column="6" declfile="include/debug/thread_analyzer.h" declline="63" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>-<sp/>2020<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__STACK_SIZE_ANALYZER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__STACK_SIZE_ANALYZER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="structthread__analyzer__info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structthread__analyzer__info" kindref="compound">thread_analyzer_info</ref><sp/>{</highlight></codeline>
<codeline lineno="27" refid="structthread__analyzer__info_1a972c2f720864788fa657be15c04c9424" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structthread__analyzer__info_1a972c2f720864788fa657be15c04c9424" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="29" refid="structthread__analyzer__info_1ad4b6eb4a085f1c250314a452f4005e2e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structthread__analyzer__info_1ad4b6eb4a085f1c250314a452f4005e2e" kindref="member">stack_size</ref>;</highlight></codeline>
<codeline lineno="31" refid="structthread__analyzer__info_1ac24b93b5fe53d0d1928eb904af6f2a36" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structthread__analyzer__info_1ac24b93b5fe53d0d1928eb904af6f2a36" kindref="member">stack_used</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_THREAD_RUNTIME_STATS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>utilization;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_SCHED_THREAD_USAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread__runtime__stats" kindref="compound">k_thread_runtime_stats_t</ref><sp/><sp/>usage;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="group__thread__analyzer_1ga7ac3e88ca6d905ba0efe4afe5822485c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__thread__analyzer_1ga7ac3e88ca6d905ba0efe4afe5822485c" kindref="member">thread_analyzer_cb</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structthread__analyzer__info" kindref="compound">thread_analyzer_info</ref><sp/>*info);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="group__thread__analyzer_1ga21ae4723422fb96bf4f20ddb3cc1bb8d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread__analyzer_1ga21ae4723422fb96bf4f20ddb3cc1bb8d" kindref="member">thread_analyzer_run</ref>(<ref refid="group__thread__analyzer_1ga7ac3e88ca6d905ba0efe4afe5822485c" kindref="member">thread_analyzer_cb</ref><sp/>cb);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="group__thread__analyzer_1ga9ff07e2eff100f4b8c79440483c89836" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread__analyzer_1ga9ff07e2eff100f4b8c79440483c89836" kindref="member">thread_analyzer_print</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__STACK_SIZE_ANALYZER_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/debug/thread_analyzer.h"/>
  </compounddef>
</doxygen>
