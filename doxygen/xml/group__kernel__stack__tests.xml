<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__kernel__stack__tests" kind="group">
    <compoundname>kernel_stack_tests</compoundname>
    <title>Stacks</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__kernel__stack__tests_1ga63ff12b661e06b32517cea03f012ad4d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_single_stack_play</definition>
        <argsstring>(void)</argsstring>
        <name>test_single_stack_play</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify data passing between threads using single stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref>, <ref refid="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" kindref="member">K_STACK_DEFINE(x)</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="194" column="13" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="194" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga6f50b38507a133bca918502af4610a42" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_dual_stack_play</definition>
        <argsstring>(void)</argsstring>
        <name>test_dual_stack_play</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify data passing between threads using dual stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref>, <ref refid="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" kindref="member">K_STACK_DEFINE(x)</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="231" column="13" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="231" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1gabae0e2066040a8f20bd69395bfdedd09" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_isr_stack_play</definition>
        <argsstring>(void)</argsstring>
        <name>test_isr_stack_play</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify data passing between thread and ISR. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref>, <ref refid="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" kindref="member">K_STACK_DEFINE(x)</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="260" column="13" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="260" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga5ee5d8c8d91951e976c377aad77092f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void thread_entry_wait</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>thread_entry_wait</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="288" column="6" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="288" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga0c527106c2441f8d2c033fc0c36c4418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_pop_can_wait</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_pop_can_wait</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test that the stack pop can be waited if no item availablle. </para>
        </briefdescription>
        <detaileddescription>
<para>Create and initialize a new stack Set two timeout parameters to indicate the maximum amount of time the thread will wait.</para>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref>, <ref refid="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" kindref="member">K_STACK_DEFINE(x)</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="308" column="6" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="308" bodyend="335" declfile="tests/kernel/stack/stack/src/main.c" declline="79" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga969dfd191f24488451037a01f743fb45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_thread2thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_thread2thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to verify data passing between threads via stack. </para>
        </briefdescription>
        <detaileddescription>
<para>Static define and Dynamic define stacks, Then initialize them. Current thread push or pop data item into the stack. Create a new thread pop or push data item into the stack. Controlled by semaphore. Verify data passing between threads via stack And verify stack can be define at compile time.</para>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1ga4400a39ef48289305cf66a092d5c6c7d" kindref="member">k_stack_init()</ref>, <ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref>, <ref refid="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" kindref="member">K_STACK_DEFINE(x)</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: test k_stack_init stack</para>
<para>TESTPOINT: test K_STACK_DEFINE stack</para>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="116" column="6" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="116" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1gad464dd62dbebefeff5ee3b1a4f82fcb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_user_thread2thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_user_thread2thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verifies data passing between user threads via stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1ga4400a39ef48289305cf66a092d5c6c7d" kindref="member">k_stack_init()</ref>, <ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref>, <ref refid="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" kindref="member">K_STACK_DEFINE(x)</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="131" column="6" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="131" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1gaf06348e349a2076ea86503cedce2b9ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_thread2isr</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_thread2isr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verifies data passing between thread and ISR via stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1ga4400a39ef48289305cf66a092d5c6c7d" kindref="member">k_stack_init()</ref>, <ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref>, <ref refid="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" kindref="member">K_STACK_DEFINE(x)</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: test k_stack_init stack</para>
<para>TESTPOINT: test K_STACK_DEFINE stack</para>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="147" column="6" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="147" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga9677d2b8125bcd28a15635a7e0d960fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_alloc_thread2thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_alloc_thread2thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1gab97d924db1aef3f6adade156a107d45c" kindref="member">k_stack_alloc_init()</ref>, <ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref>, <ref refid="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" kindref="member">K_STACK_DEFINE(x)</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref>, <ref refid="group__stack__apis_1ga819f4e7b2cf11cf2e1b80933fdcb67ea" kindref="member">k_stack_cleanup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: thread-thread data passing via stack</para>
<para>Requested buffer allocation from the test pool.</para>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="161" column="6" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="161" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga740c522468d2a3f4e6525124ebd6c99b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void low_prio_wait_for_stack</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>low_prio_wait_for_stack</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="189" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="189" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1gadc9a51dfcee171b7a0b0dceea7cd2582" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void high_prio_t1_wait_for_stack</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>high_prio_t1_wait_for_stack</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="199" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="199" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga293923cc3111ca27e16a185ee1351f81" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void high_prio_t2_wait_for_stack</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>high_prio_t2_wait_for_stack</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="209" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="209" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga8afe7ec83d6d7cfd369954c194a0e820" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_multithread_competition</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_multithread_competition</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test multi-threads to get data from stack. </para>
        </briefdescription>
        <detaileddescription>
<para>Define three threads, and set a higher priority for two of them, and set a lower priority for the last one. Then Add a delay between creating the two high priority threads. Test point:<orderedlist>
<listitem><para>Any number of threads may wait(K_FOREVER set) on an empty stack simultaneously.</para>
</listitem><listitem><para>When data is pushed, it is given to the highest priority thread that has waited longest. </para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="233" column="6" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="233" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga9ebcc1991c52c1882e5a22da1e15fdc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_alloc_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_alloc_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test case of requesting a buffer larger than resource pool. </para>
        </briefdescription>
        <detaileddescription>
<para>Try to request a buffer larger than resource pool for stack, then see if returns an expected value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="290" column="6" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="290" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1gafd3225aaa1a28e80809fcdf795235dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tStack_pop_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>tStack_pop_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_fail.c" line="36" column="6" bodyfile="tests/kernel/stack/stack/src/test_stack_fail.c" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga10c0d7a266192050fde52f8d92b0a902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_pop_fail</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_pop_fail</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verifies stack pop functionality. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1ga4400a39ef48289305cf66a092d5c6c7d" kindref="member">k_stack_init()</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_fail.c" line="45" column="6" bodyfile="tests/kernel/stack/stack/src/test_stack_fail.c" bodystart="45" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1gae5e87cb1b3de61f6124574a09729db38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_cleanup_error</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_cleanup_error</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verifies cleanup a stack that still be needed by another thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1ga819f4e7b2cf11cf2e1b80933fdcb67ea" kindref="member">k_stack_cleanup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_fail.c" line="57" column="6" bodyfile="tests/kernel/stack/stack/src/test_stack_fail.c" bodystart="57" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1gabe16f26904c1e1ec7a21be8d84122ad0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_push_full</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_push_full</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verifies push a data in the full stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_fail.c" line="79" column="6" bodyfile="tests/kernel/stack/stack/src/test_stack_fail.c" bodystart="79" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1gadcd6c968abc5a6c26b4bf4bbb7cb5416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_user_pop_fail</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_user_pop_fail</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verifies stack pop from a user thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1ga4400a39ef48289305cf66a092d5c6c7d" kindref="member">k_stack_init()</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_fail.c" line="97" column="6" bodyfile="tests/kernel/stack/stack/src/test_stack_fail.c" bodystart="97" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1gaba94c90db8907ff8931b462ed58fbbff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_user_init_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_user_init_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verifies stack alloc and initialize a null pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1gab97d924db1aef3f6adade156a107d45c" kindref="member">k_stack_alloc_init()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_fail.c" line="112" column="6" bodyfile="tests/kernel/stack/stack/src/test_stack_fail.c" bodystart="112" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga613658fe6fe89d1e4a21a64e2e9d389c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_user_init_invalid_value</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_user_init_invalid_value</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify that alloc and initialize a stack with 0 memory. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1gab97d924db1aef3f6adade156a107d45c" kindref="member">k_stack_alloc_init()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_fail.c" line="123" column="6" bodyfile="tests/kernel/stack/stack/src/test_stack_fail.c" bodystart="123" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga0a907159f4ecb44bab62f5e4a0dfe153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_user_push_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_user_push_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify that push some data into a NULL pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_fail.c" line="137" column="6" bodyfile="tests/kernel/stack/stack/src/test_stack_fail.c" bodystart="137" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1gabdc234f1604211e05ea9317c9a9cb709" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_user_pop_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_user_pop_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verifies pop data from a NULL pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_fail.c" line="147" column="6" bodyfile="tests/kernel/stack/stack/src/test_stack_fail.c" bodystart="147" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga62551fca8b73e3c535ea34befda6ac4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_user_pop_permission</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_user_pop_permission</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verifies cleanup a stack that its data still be waited by another thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_fail.c" line="158" column="6" bodyfile="tests/kernel/stack/stack/src/test_stack_fail.c" bodystart="158" bodyend="168"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Tests for Kernel stack objects. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
