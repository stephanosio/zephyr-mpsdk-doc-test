<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__devicetree-ranges-prop" kind="group">
    <compoundname>devicetree-ranges-prop</compoundname>
    <title>ranges property</title>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__devicetree-ranges-prop_1ga784cff5ee4c0439c429cc3c26c4410fc" prot="public" static="no">
        <name>DT_NUM_RANGES</name>
        <param><defname>node_id</defname></param>
        <initializer><ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _RANGES_NUM)</initializer>
        <briefdescription>
<para>Get the number of range blocks in the ranges property. </para>
        </briefdescription>
        <detaileddescription>
<para>Use this instead of <ref refid="group__devicetree-generic-prop_1gaa7f5afcedd1f54be79a5337e8e28a5b6" kindref="member">DT_PROP_LEN(node_id, ranges)</ref>.</para>
<para>Example devicetree fragment: <verbatim>pcie0: pcie@0 {
        compatible = &quot;intel,pcie&quot;;
        reg = &lt;0 1&gt;;
        #address-cells = &lt;3&gt;;
        #size-cells = &lt;2&gt;;

        ranges = &lt;0x1000000 0 0 0 0x3eff0000 0 0x10000&gt;,
                 &lt;0x2000000 0 0x10000000 0 0x10000000 0 0x2eff0000&gt;,
                 &lt;0x3000000 0x80 0 0x80 0 0x80 0&gt;;
};

other: other@1 {
        reg = &lt;1 1&gt;;

        ranges = &lt;0x0 0x0 0x0 0x3eff0000 0x10000&gt;,
                 &lt;0x0 0x10000000 0x0 0x10000000 0x2eff0000&gt;;
};
</verbatim> Example usage: <verbatim>DT_NUM_RANGES(DT_NODELABEL(pcie0)) // 3
DT_NUM_RANGES(DT_NODELABEL(other)) // 2
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1217" column="9" bodyfile="include/devicetree.h" bodystart="1217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-ranges-prop_1gac6f54058c58b06935bd2deae9f1ec2db" prot="public" static="no">
        <name>DT_RANGES_HAS_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(<ref refid="devicetree_8h_1a28493e4c0eb55f3065dc52e3946f8879" kindref="member">DT_CAT4</ref>(node_id, _RANGES_IDX_, idx, _EXISTS))</initializer>
        <briefdescription>
<para>Is &quot;idx&quot; a valid range block index? </para>
        </briefdescription>
        <detaileddescription>
<para>If this returns 1, then <ref refid="group__devicetree-ranges-prop_1ga449940559213086b15151ec00e46607d" kindref="member">DT_RANGES_CHILD_BUS_ADDRESS_BY_IDX(node_id, idx)</ref>, <ref refid="group__devicetree-ranges-prop_1ga48d493ad616438ace2396c0312a242ba" kindref="member">DT_RANGES_PARENT_BUS_ADDRESS_BY_IDX(node_id, idx)</ref> or <ref refid="group__devicetree-ranges-prop_1ga52677a5bc86f9132a09b6bc37153afb2" kindref="member">DT_RANGES_LENGTH_BY_IDX(node_id, idx)</ref> are valid. For <ref refid="group__devicetree-ranges-prop_1ga32a9c873d3ec1f5d7922c38eaafd1af8" kindref="member">DT_RANGES_CHILD_BUS_FLAGS_BY_IDX(node_id, idx)</ref> the return value of <ref refid="group__devicetree-ranges-prop_1ga3730c9176911bd8cc762f447eb020ecd" kindref="member">DT_RANGES_HAS_CHILD_BUS_FLAGS_AT_IDX(node_id, idx)</ref> will indicate validity. If it returns 0, it is an error to use those macros with index &quot;idx&quot;, including <ref refid="group__devicetree-ranges-prop_1ga32a9c873d3ec1f5d7922c38eaafd1af8" kindref="member">DT_RANGES_CHILD_BUS_FLAGS_BY_IDX(node_id, idx)</ref>.</para>
<para>Example devicetree fragment:</para>
<para><verbatim>pcie0: pcie@0 {
        compatible = &quot;intel,pcie&quot;;
        reg = &lt;0 1&gt;;
        #address-cells = &lt;3&gt;;
        #size-cells = &lt;2&gt;;

        ranges = &lt;0x1000000 0 0 0 0x3eff0000 0 0x10000&gt;,
                 &lt;0x2000000 0 0x10000000 0 0x10000000 0 0x2eff0000&gt;,
                 &lt;0x3000000 0x80 0 0x80 0 0x80 0&gt;;
};

other: other@1 {
        reg = &lt;1 1&gt;;

        ranges = &lt;0x0 0x0 0x0 0x3eff0000 0x10000&gt;,
                 &lt;0x0 0x10000000 0x0 0x10000000 0x2eff0000&gt;;
};
</verbatim> Example usage: <verbatim>DT_RANGES_HAS_IDX(DT_NODELABEL(pcie0), 0) // 1
DT_RANGES_HAS_IDX(DT_NODELABEL(pcie0), 1) // 1
DT_RANGES_HAS_IDX(DT_NODELABEL(pcie0), 2) // 1
DT_RANGES_HAS_IDX(DT_NODELABEL(pcie0), 3) // 0
DT_RANGES_HAS_IDX(DT_NODELABEL(other), 0) // 1
DT_RANGES_HAS_IDX(DT_NODELABEL(other), 1) // 1
DT_RANGES_HAS_IDX(DT_NODELABEL(other), 2) // 0
DT_RANGES_HAS_IDX(DT_NODELABEL(other), 3) // 0
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if &quot;idx&quot; is a valid register block index, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1268" column="9" bodyfile="include/devicetree.h" bodystart="1268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-ranges-prop_1ga3730c9176911bd8cc762f447eb020ecd" prot="public" static="no">
        <name>DT_RANGES_HAS_CHILD_BUS_FLAGS_AT_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(<ref refid="devicetree_8h_1a28493e4c0eb55f3065dc52e3946f8879" kindref="member">DT_CAT4</ref>(node_id, _RANGES_IDX_, idx, _VAL_CHILD_BUS_FLAGS_EXISTS))</initializer>
        <briefdescription>
<para>Does a ranges property have child bus flags at index? </para>
        </briefdescription>
        <detaileddescription>
<para>If this returns 1, then <ref refid="group__devicetree-ranges-prop_1ga32a9c873d3ec1f5d7922c38eaafd1af8" kindref="member">DT_RANGES_CHILD_BUS_FLAGS_BY_IDX(node_id, idx)</ref> is valid. If it returns 0, it is an error to use this macro with index &quot;idx&quot;. This macro only returns 1 for PCIe buses (i.e. nodes whose bindings specify they are &quot;pcie&quot; bus nodes.)</para>
<para>Example devicetree fragment: <verbatim>parent {
        #address-cells = &lt;2&gt;;

        pcie0: pcie@0 {
                compatible = &quot;intel,pcie&quot;;
                reg = &lt;0 0 1&gt;;
                #address-cells = &lt;3&gt;;
                #size-cells = &lt;2&gt;;

                ranges = &lt;0x1000000 0 0 0 0x3eff0000 0 0x10000&gt;,
                         &lt;0x2000000 0 0x10000000 0 0x10000000 0 0x2eff0000&gt;,
                         &lt;0x3000000 0x80 0 0x80 0 0x80 0&gt;;
        };

        other: other@1 {
                reg = &lt;0 1 1&gt;;

                ranges = &lt;0x0 0x0 0x0 0x3eff0000 0x10000&gt;,
                         &lt;0x0 0x10000000 0x0 0x10000000 0x2eff0000&gt;;
        };
};
</verbatim> Example usage: <verbatim>DT_RANGES_HAS_CHILD_BUS_FLAGS_AT_IDX(DT_NODELABEL(pcie0), 0) // 1
DT_RANGES_HAS_CHILD_BUS_FLAGS_AT_IDX(DT_NODELABEL(pcie0), 1) // 1
DT_RANGES_HAS_CHILD_BUS_FLAGS_AT_IDX(DT_NODELABEL(pcie0), 2) // 1
DT_RANGES_HAS_CHILD_BUS_FLAGS_AT_IDX(DT_NODELABEL(pcie0), 3) // 0
DT_RANGES_HAS_CHILD_BUS_FLAGS_AT_IDX(DT_NODELABEL(other), 0) // 0
DT_RANGES_HAS_CHILD_BUS_FLAGS_AT_IDX(DT_NODELABEL(other), 1) // 0
DT_RANGES_HAS_CHILD_BUS_FLAGS_AT_IDX(DT_NODELABEL(other), 2) // 0
DT_RANGES_HAS_CHILD_BUS_FLAGS_AT_IDX(DT_NODELABEL(other), 3) // 0
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into the ranges array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if &quot;idx&quot; is a valid child bus flags index, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1319" column="9" bodyfile="include/devicetree.h" bodystart="1319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-ranges-prop_1ga32a9c873d3ec1f5d7922c38eaafd1af8" prot="public" static="no">
        <name>DT_RANGES_CHILD_BUS_FLAGS_BY_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a28493e4c0eb55f3065dc52e3946f8879" kindref="member">DT_CAT4</ref>(node_id, _RANGES_IDX_, idx, _VAL_CHILD_BUS_FLAGS)</initializer>
        <briefdescription>
<para>Get the ranges property child bus flags at index. </para>
        </briefdescription>
        <detaileddescription>
<para>When the node is a PCIe bus, the Child Bus Address has an extra cell used to store some flags, thus this cell is extracted from the Child Bus Address as Child Bus Flags field.</para>
<para>Example devicetree fragments: <verbatim>parent {
        #address-cells = &lt;2&gt;;

        pcie0: pcie@0 {
                compatible = &quot;intel,pcie&quot;;
                reg = &lt;0 0 1&gt;;
                #address-cells = &lt;3&gt;;
                #size-cells = &lt;2&gt;;

                ranges = &lt;0x1000000 0 0 0 0x3eff0000 0 0x10000&gt;,
                         &lt;0x2000000 0 0x10000000 0 0x10000000 0 0x2eff0000&gt;,
                         &lt;0x3000000 0x80 0 0x80 0 0x80 0&gt;;
        };
};
</verbatim> Example usage: <verbatim>DT_RANGES_CHILD_BUS_FLAGS_BY_IDX(DT_NODELABEL(pcie0), 0) // 0x1000000
DT_RANGES_CHILD_BUS_FLAGS_BY_IDX(DT_NODELABEL(pcie0), 1) // 0x2000000
DT_RANGES_CHILD_BUS_FLAGS_BY_IDX(DT_NODELABEL(pcie0), 2) // 0x3000000
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into the ranges array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>range child bus flags field at idx </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1355" column="9" bodyfile="include/devicetree.h" bodystart="1355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-ranges-prop_1ga449940559213086b15151ec00e46607d" prot="public" static="no">
        <name>DT_RANGES_CHILD_BUS_ADDRESS_BY_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a28493e4c0eb55f3065dc52e3946f8879" kindref="member">DT_CAT4</ref>(node_id, _RANGES_IDX_, idx, _VAL_CHILD_BUS_ADDRESS)</initializer>
        <briefdescription>
<para>Get the ranges property child bus address at index. </para>
        </briefdescription>
        <detaileddescription>
<para>When the node is a PCIe bus, the Child Bus Address has an extra cell used to store some flags, thus this cell is removed from the Child Bus Address.</para>
<para>Example devicetree fragments: <verbatim>parent {
        #address-cells = &lt;2&gt;;

        pcie0: pcie@0 {
                compatible = &quot;intel,pcie&quot;;
                reg = &lt;0 0 1&gt;;
                #address-cells = &lt;3&gt;;
                #size-cells = &lt;2&gt;;

                ranges = &lt;0x1000000 0 0 0 0x3eff0000 0 0x10000&gt;,
                         &lt;0x2000000 0 0x10000000 0 0x10000000 0 0x2eff0000&gt;,
                         &lt;0x3000000 0x80 0 0x80 0 0x80 0&gt;;
        };

        other: other@1 {
                reg = &lt;0 1 1&gt;;

                ranges = &lt;0x0 0x0 0x0 0x3eff0000 0x10000&gt;,
                         &lt;0x0 0x10000000 0x0 0x10000000 0x2eff0000&gt;;
        };
};
</verbatim> Example usage: <verbatim>DT_RANGES_CHILD_BUS_ADDRESS_BY_IDX(DT_NODELABEL(pcie0), 0) // 0
DT_RANGES_CHILD_BUS_ADDRESS_BY_IDX(DT_NODELABEL(pcie0), 1) // 0x10000000
DT_RANGES_CHILD_BUS_ADDRESS_BY_IDX(DT_NODELABEL(pcie0), 2) // 0x8000000000
DT_RANGES_CHILD_BUS_ADDRESS_BY_IDX(DT_NODELABEL(other), 0) // 0
DT_RANGES_CHILD_BUS_ADDRESS_BY_IDX(DT_NODELABEL(other), 1) // 0x10000000
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into the ranges array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>range child bus address field at idx </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1400" column="9" bodyfile="include/devicetree.h" bodystart="1400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-ranges-prop_1ga48d493ad616438ace2396c0312a242ba" prot="public" static="no">
        <name>DT_RANGES_PARENT_BUS_ADDRESS_BY_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a28493e4c0eb55f3065dc52e3946f8879" kindref="member">DT_CAT4</ref>(node_id, _RANGES_IDX_, idx, _VAL_PARENT_BUS_ADDRESS)</initializer>
        <briefdescription>
<para>Get the ranges property parent bus address at index. </para>
        </briefdescription>
        <detaileddescription>
<para>Similarly to <ref refid="group__devicetree-ranges-prop_1ga449940559213086b15151ec00e46607d" kindref="member">DT_RANGES_CHILD_BUS_ADDRESS_BY_IDX()</ref>, this properly accounts for child bus flags cells when the node is a PCIe bus.</para>
<para>Example devicetree fragment: <verbatim>parent {
        #address-cells = &lt;2&gt;;

        pcie0: pcie@0 {
                compatible = &quot;intel,pcie&quot;;
                reg = &lt;0 0 1&gt;;
                #address-cells = &lt;3&gt;;
                #size-cells = &lt;2&gt;;

                ranges = &lt;0x1000000 0 0 0 0x3eff0000 0 0x10000&gt;,
                         &lt;0x2000000 0 0x10000000 0 0x10000000 0 0x2eff0000&gt;,
                         &lt;0x3000000 0x80 0 0x80 0 0x80 0&gt;;
        };

        other: other@1 {
                reg = &lt;0 1 1&gt;;

                ranges = &lt;0x0 0x0 0x0 0x3eff0000 0x10000&gt;,
                         &lt;0x0 0x10000000 0x0 0x10000000 0x2eff0000&gt;;
        };
};
</verbatim> Example usage: <verbatim>DT_RANGES_PARENT_BUS_ADDRESS_BY_IDX(DT_NODELABEL(pcie0), 0) // 0x3eff0000
DT_RANGES_PARENT_BUS_ADDRESS_BY_IDX(DT_NODELABEL(pcie0), 1) // 0x10000000
DT_RANGES_PARENT_BUS_ADDRESS_BY_IDX(DT_NODELABEL(pcie0), 2) // 0x8000000000
DT_RANGES_PARENT_BUS_ADDRESS_BY_IDX(DT_NODELABEL(other), 0) // 0x3eff0000
DT_RANGES_PARENT_BUS_ADDRESS_BY_IDX(DT_NODELABEL(other), 1) // 0x10000000
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into the ranges array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>range parent bus address field at idx </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1445" column="9" bodyfile="include/devicetree.h" bodystart="1445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-ranges-prop_1ga52677a5bc86f9132a09b6bc37153afb2" prot="public" static="no">
        <name>DT_RANGES_LENGTH_BY_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a28493e4c0eb55f3065dc52e3946f8879" kindref="member">DT_CAT4</ref>(node_id, _RANGES_IDX_, idx, _VAL_LENGTH)</initializer>
        <briefdescription>
<para>Get the ranges property length at index. </para>
        </briefdescription>
        <detaileddescription>
<para>Similarly to <ref refid="group__devicetree-ranges-prop_1ga449940559213086b15151ec00e46607d" kindref="member">DT_RANGES_CHILD_BUS_ADDRESS_BY_IDX()</ref>, this properly accounts for child bus flags cells when the node is a PCIe bus.</para>
<para>Example devicetree fragment: <verbatim>parent {
        #address-cells = &lt;2&gt;;

        pcie0: pcie@0 {
                compatible = &quot;intel,pcie&quot;;
                reg = &lt;0 0 1&gt;;
                #address-cells = &lt;3&gt;;
                #size-cells = &lt;2&gt;;

                ranges = &lt;0x1000000 0 0 0 0x3eff0000 0 0x10000&gt;,
                         &lt;0x2000000 0 0x10000000 0 0x10000000 0 0x2eff0000&gt;,
                         &lt;0x3000000 0x80 0 0x80 0 0x80 0&gt;;
        };

        other: other@1 {
                reg = &lt;0 1 1&gt;;

                ranges = &lt;0x0 0x0 0x0 0x3eff0000 0x10000&gt;,
                         &lt;0x0 0x10000000 0x0 0x10000000 0x2eff0000&gt;;
        };
};
</verbatim> Example usage: <verbatim>DT_RANGES_LENGTH_BY_IDX(DT_NODELABEL(pcie0), 0) // 0x10000
DT_RANGES_LENGTH_BY_IDX(DT_NODELABEL(pcie0), 1) // 0x2eff0000
DT_RANGES_LENGTH_BY_IDX(DT_NODELABEL(pcie0), 2) // 0x8000000000
DT_RANGES_LENGTH_BY_IDX(DT_NODELABEL(other), 0) // 0x10000
DT_RANGES_LENGTH_BY_IDX(DT_NODELABEL(other), 1) // 0x2eff0000
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into the ranges array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>range length field at idx </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1490" column="9" bodyfile="include/devicetree.h" bodystart="1490" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-ranges-prop_1ga4c71a8adcfe6c53b480775510c92a632" prot="public" static="no">
        <name>DT_FOREACH_RANGE</name>
        <param><defname>node_id</defname></param>
        <param><defname>fn</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _FOREACH_RANGE)(fn)</initializer>
        <briefdescription>
<para>Invokes &quot;fn&quot; for each entry of &quot;node_id&quot; ranges property. </para>
        </briefdescription>
        <detaileddescription>
<para>The macro &quot;fn&quot; must take two parameters, &quot;node_id&quot; which will be the node identifier of the node with the ranges property and &quot;idx&quot; the index of the ranges block.</para>
<para>Example devicetree fragment: <verbatim>n: node@0 {
        reg = &lt;0 0 1&gt;;

        ranges = &lt;0x0 0x0 0x0 0x3eff0000 0x10000&gt;,
                 &lt;0x0 0x10000000 0x0 0x10000000 0x2eff0000&gt;;
};
</verbatim> Example usage: <verbatim>#define RANGE_LENGTH(node_id, idx) DT_RANGES_LENGTH_BY_IDX(node_id, idx),

const uint64_t *ranges_length[] = {
        DT_FOREACH_RANGE(DT_NODELABEL(n), RANGE_LENGTH)
};
</verbatim> This expands to: <verbatim>const char *ranges_length[] = {
    0x10000, 0x2eff0000,
};
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>macro to invoke </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1526" column="9" bodyfile="include/devicetree.h" bodystart="1526" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
