<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__arch-pm" kind="group">
    <compoundname>arch-pm</compoundname>
    <title>Architecture-specific power management APIs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__arch-pm_1ga6ce051203e6cc091d0fb42a15f662a48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arch_cpu_idle</definition>
        <argsstring>(void)</argsstring>
        <name>arch_cpu_idle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Power save idle routine. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will be called by the kernel idle loop or possibly within an implementation of z_pm_save_idle in the kernel when the &apos;_pm_save_flag&apos; variable is non-zero.</para>
<para>Architectures that do not implement power management instructions may immediately return, otherwise a power-saving instruction should be issued to wait for an interrupt.</para>
<para><simplesect kind="note"><para>The function is expected to return after the interrupt that has caused the CPU to exit power-saving mode has been serviced, although this is not a firm requirement.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__cpu__idle__apis_1ga7b25e1bed511a813b32fbd0f91b09356" kindref="member">k_cpu_idle()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="167" column="6" declfile="include/sys/arch_interface.h" declline="167" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-pm_1ga4d0297717c23a3cc5df434549e26924d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arch_cpu_atomic_idle</definition>
        <argsstring>(unsigned int key)</argsstring>
        <name>arch_cpu_atomic_idle</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Atomically re-enable interrupts and enter low power mode. </para>
        </briefdescription>
        <detaileddescription>
<para>The requirements for <ref refid="group__arch-pm_1ga4d0297717c23a3cc5df434549e26924d" kindref="member">arch_cpu_atomic_idle()</ref> are as follows:</para>
<para><orderedlist>
<listitem><para>Enabling interrupts and entering a low-power mode needs to be atomic, i.e. there should be no period of time where interrupts are enabled before the processor enters a low-power mode. See the comments in <ref refid="group__lifo__apis_1gad5f1775947b07a2a77f667aa9e41db5a" kindref="member">k_lifo_get()</ref>, for example, of the race condition that occurs if this requirement is not met.</para>
</listitem><listitem><para>After waking up from the low-power mode, the interrupt lockout state must be restored as indicated in the &apos;key&apos; input parameter.</para>
</listitem></orderedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__cpu__idle__apis_1gadf88ece6447b65b7d0d2f3a70ab4fe8f" kindref="member">k_cpu_atomic_idle()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Lockout key returned by previous invocation of <ref refid="group__arch-irq_1ga25bca3069cb999b6d4f924b87bf7de38" kindref="member">arch_irq_lock()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="187" column="6" declfile="include/sys/arch_interface.h" declline="187" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-pm_1gada83bf3beb5004a39a1f9c8c7ce35348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FUNC_NORETURN void</type>
        <definition>FUNC_NORETURN void arch_system_halt</definition>
        <argsstring>(unsigned int reason)</argsstring>
        <name>arch_system_halt</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Halt the system, optionally propagating a reason code </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kernel/include/kernel_arch_interface.h" line="219" column="20" declfile="kernel/include/kernel_arch_interface.h" declline="219" declcolumn="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
