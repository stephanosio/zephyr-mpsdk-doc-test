<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="cfg__cli_8h" kind="file" language="C++">
    <compoundname>cfg_cli.h</compoundname>
    <includedby refid="mesh_8h" local="no">include/bluetooth/mesh.h</includedby>
    <invincdepgraph>
      <node id="2">
        <label>include/bluetooth/mesh.h</label>
        <link refid="mesh_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/bluetooth/mesh/cfg_cli.h</label>
        <link refid="cfg__cli_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/bluetooth/mesh/shell.h</label>
        <link refid="bluetooth_2mesh_2shell_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structbt__mesh__cfg__cli" prot="public">bt_mesh_cfg_cli</innerclass>
    <innerclass refid="structbt__mesh__cfg__mod__pub" prot="public">bt_mesh_cfg_mod_pub</innerclass>
    <innerclass refid="structbt__mesh__cfg__hb__sub" prot="public">bt_mesh_cfg_hb_sub</innerclass>
    <innerclass refid="structbt__mesh__cfg__hb__pub" prot="public">bt_mesh_cfg_hb_pub</innerclass>
    <innerclass refid="structbt__mesh__comp__p0" prot="public">bt_mesh_comp_p0</innerclass>
    <innerclass refid="structbt__mesh__comp__p0__elem" prot="public">bt_mesh_comp_p0_elem</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__bt__mesh__cfg__cli_1ga2f0df6906a27ebbd86dcd11951114001" prot="public" static="no">
        <name>BT_MESH_MODEL_CFG_CLI</name>
        <param><defname>cli_data</defname></param>
        <initializer>	<ref refid="group__bt__mesh__access_1gac062c101b7310020e11a527de9c40d3a" kindref="member">BT_MESH_MODEL_CB</ref>(<ref refid="group__bt__mesh__access_1ga3f8442dcd1a110ea0d0023f50057139f" kindref="member">BT_MESH_MODEL_ID_CFG_CLI</ref>, bt_mesh_cfg_cli_op, NULL,   \
			 cli_data, &amp;bt_mesh_cfg_cli_cb)</initializer>
        <briefdescription>
<para>Generic Configuration Client model composition data entry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cli_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <ref refid="group__bt__mesh__cfg__cli" kindref="compound">Configuration Client Model</ref> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="39" column="9" bodyfile="include/bluetooth/mesh/cfg_cli.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__mesh__cfg__cli_1gab542c707fb5bad0a15088fefda775a42" prot="public" static="no">
        <name>BT_MESH_PUB_PERIOD_100MS</name>
        <param><defname>steps</defname></param>
        <initializer>((steps) &amp; <ref refid="group__sys-util_1ga3c12c6d36ad0aa481a3436923d21f4f8" kindref="member">BIT_MASK</ref>(6))</initializer>
        <briefdescription>
<para>Helper macro to encode model publication period in units of 100ms. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>steps</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of 100ms steps.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Encoded value that can be assigned to <ref refid="structbt__mesh__cfg__mod__pub_1a4ec60d2b7334af2be461da7b73083a08" kindref="member">bt_mesh_cfg_mod_pub.period</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="576" column="9" bodyfile="include/bluetooth/mesh/cfg_cli.h" bodystart="576" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__mesh__cfg__cli_1ga29435e527a73ff6e19339b773c8eb79e" prot="public" static="no">
        <name>BT_MESH_PUB_PERIOD_SEC</name>
        <param><defname>steps</defname></param>
        <initializer>(((steps) &amp; <ref refid="group__sys-util_1ga3c12c6d36ad0aa481a3436923d21f4f8" kindref="member">BIT_MASK</ref>(6)) | (1 &lt;&lt; 6))</initializer>
        <briefdescription>
<para>Helper macro to encode model publication period in units of 1 second. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>steps</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of 1 second steps.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Encoded value that can be assigned to <ref refid="structbt__mesh__cfg__mod__pub_1a4ec60d2b7334af2be461da7b73083a08" kindref="member">bt_mesh_cfg_mod_pub.period</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="586" column="9" bodyfile="include/bluetooth/mesh/cfg_cli.h" bodystart="586" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__mesh__cfg__cli_1ga654204077adaa08259d1afbfe92e070e" prot="public" static="no">
        <name>BT_MESH_PUB_PERIOD_10SEC</name>
        <param><defname>steps</defname></param>
        <initializer>(((steps) &amp; <ref refid="group__sys-util_1ga3c12c6d36ad0aa481a3436923d21f4f8" kindref="member">BIT_MASK</ref>(6)) | (2 &lt;&lt; 6))</initializer>
        <briefdescription>
<para>Helper macro to encode model publication period in units of 10 seconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>steps</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of 10 second steps.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Encoded value that can be assigned to <ref refid="structbt__mesh__cfg__mod__pub_1a4ec60d2b7334af2be461da7b73083a08" kindref="member">bt_mesh_cfg_mod_pub.period</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="597" column="9" bodyfile="include/bluetooth/mesh/cfg_cli.h" bodystart="597" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__mesh__cfg__cli_1ga36c37f644ee39ad91b6167f68c806b7e" prot="public" static="no">
        <name>BT_MESH_PUB_PERIOD_10MIN</name>
        <param><defname>steps</defname></param>
        <initializer>(((steps) &amp; <ref refid="group__sys-util_1ga3c12c6d36ad0aa481a3436923d21f4f8" kindref="member">BIT_MASK</ref>(6)) | (3 &lt;&lt; 6))</initializer>
        <briefdescription>
<para>Helper macro to encode model publication period in units of 10 minutes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>steps</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of 10 minute steps.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Encoded value that can be assigned to <ref refid="structbt__mesh__cfg__mod__pub_1a4ec60d2b7334af2be461da7b73083a08" kindref="member">bt_mesh_cfg_mod_pub.period</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="608" column="9" bodyfile="include/bluetooth/mesh/cfg_cli.h" bodystart="608" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga9be7cf6d3141b41393cbe89a44d70992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_node_reset</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, bool *status)</argsstring>
        <name>bt_mesh_cfg_node_reset</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Reset the target node and remove it from the network. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="51" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="51" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gae5f940f5a65ab127c32a228d7d2e4168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_comp_data_get</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint8_t page, uint8_t *rsp, struct net_buf_simple *comp)</argsstring>
        <name>bt_mesh_cfg_comp_data_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>page</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>rsp</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
<para>Get the target node&apos;s composition data. </para>
        </briefdescription>
        <detaileddescription>
<para>If the other device does not have the given composition data page, it will return the largest page number it supports that is less than the requested page index. The actual page the device responds with is returned in <computeroutput>rsp</computeroutput>.</para>
<para>This method can be used asynchronously by setting <computeroutput>rsp</computeroutput> and <computeroutput>comp</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>page</parametername>
</parameternamelist>
<parameterdescription>
<para>Composition data page, or 0xff to request the first available page. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rsp</parametername>
</parameternamelist>
<parameterdescription>
<para>Return parameter for the returned page number, or NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>Composition data buffer to fill.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="72" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="72" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga527455050c908d4f1c8fe198e2fb0fad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_beacon_get</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_beacon_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Get the target node&apos;s network beacon state. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter, returns one of <ref refid="group__bt__mesh__cfg_1ga8fa3d0ac3cb9f69464c4068ca61689b9" kindref="member">BT_MESH_BEACON_DISABLED</ref> or <ref refid="group__bt__mesh__cfg_1ga01235217559423b93d7e6cf2236278f0" kindref="member">BT_MESH_BEACON_ENABLED</ref> on success.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="89" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="89" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gab266bd45313198641c75fd503b944f8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_krp_get</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t key_net_idx, uint8_t *status, uint8_t *phase)</argsstring>
        <name>bt_mesh_cfg_krp_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>key_net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>phase</declname>
        </param>
        <briefdescription>
<para>Get the target node&apos;s network key refresh phase state. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> and <computeroutput>phase</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network key index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phase</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the Key Refresh variable to fill.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="105" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="105" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga7db6912578e6b1f175fa2ebfa2ca45b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_krp_set</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t key_net_idx, uint8_t transition, uint8_t *status, uint8_t *phase)</argsstring>
        <name>bt_mesh_cfg_krp_set</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>key_net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>transition</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>phase</declname>
        </param>
        <briefdescription>
<para>Set the target node&apos;s network key refresh phase parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> and <computeroutput>phase</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network key index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transition</parametername>
</parameternamelist>
<parameterdescription>
<para>Transition parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phase</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the new Key Refresh phase. Will return the actual Key Refresh phase after updating.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="124" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="124" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga39fef9d9f11b00ef518850f3ac27c115" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_beacon_set</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint8_t val, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_beacon_set</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Set the target node&apos;s network beacon state. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>New network beacon state, should be one of <ref refid="group__bt__mesh__cfg_1ga8fa3d0ac3cb9f69464c4068ca61689b9" kindref="member">BT_MESH_BEACON_DISABLED</ref> or <ref refid="group__bt__mesh__cfg_1ga01235217559423b93d7e6cf2236278f0" kindref="member">BT_MESH_BEACON_ENABLED</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter. Returns one of <ref refid="group__bt__mesh__cfg_1ga8fa3d0ac3cb9f69464c4068ca61689b9" kindref="member">BT_MESH_BEACON_DISABLED</ref> or <ref refid="group__bt__mesh__cfg_1ga01235217559423b93d7e6cf2236278f0" kindref="member">BT_MESH_BEACON_ENABLED</ref> on success.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="143" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="143" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga7da9f87b6274f53ef98f2a01c547171e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_ttl_get</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint8_t *ttl)</argsstring>
        <name>bt_mesh_cfg_ttl_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>ttl</declname>
        </param>
        <briefdescription>
<para>Get the target node&apos;s Time To Live value. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>ttl</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ttl</parametername>
</parameternamelist>
<parameterdescription>
<para>TTL response buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="157" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="157" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga43883e10e0950ed72b56ba4714418e29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_ttl_set</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint8_t val, uint8_t *ttl)</argsstring>
        <name>bt_mesh_cfg_ttl_set</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>ttl</declname>
        </param>
        <briefdescription>
<para>Set the target node&apos;s Time To Live value. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>ttl</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>New Time To Live value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ttl</parametername>
</parameternamelist>
<parameterdescription>
<para>TTL response buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="172" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="172" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga7b1069259e9e7d00e116098d20a30d84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_friend_get</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_friend_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Get the target node&apos;s Friend feature status. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter. Returns one of <ref refid="group__bt__mesh__cfg_1ga29fe48989e760438f2c5241110134c8c" kindref="member">BT_MESH_FRIEND_DISABLED</ref>, <ref refid="group__bt__mesh__cfg_1gaa23bba212dc1b322651723ca20f497a3" kindref="member">BT_MESH_FRIEND_ENABLED</ref> or <ref refid="group__bt__mesh__cfg_1ga35f85e6a9c085cdad4f70b8e60d0b027" kindref="member">BT_MESH_FRIEND_NOT_SUPPORTED</ref> on success.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="188" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="188" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga51212966eae4d271db5b5cadfc2ab174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_friend_set</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint8_t val, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_friend_set</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Set the target node&apos;s Friend feature state. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>New Friend feature state. Should be one of <ref refid="group__bt__mesh__cfg_1ga29fe48989e760438f2c5241110134c8c" kindref="member">BT_MESH_FRIEND_DISABLED</ref> or <ref refid="group__bt__mesh__cfg_1gaa23bba212dc1b322651723ca20f497a3" kindref="member">BT_MESH_FRIEND_ENABLED</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter. Returns one of <ref refid="group__bt__mesh__cfg_1ga29fe48989e760438f2c5241110134c8c" kindref="member">BT_MESH_FRIEND_DISABLED</ref>, <ref refid="group__bt__mesh__cfg_1gaa23bba212dc1b322651723ca20f497a3" kindref="member">BT_MESH_FRIEND_ENABLED</ref> or <ref refid="group__bt__mesh__cfg_1ga35f85e6a9c085cdad4f70b8e60d0b027" kindref="member">BT_MESH_FRIEND_NOT_SUPPORTED</ref> on success.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="207" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="207" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga6962727fe176fe4fb127ca0128322115" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_gatt_proxy_get</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_gatt_proxy_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Get the target node&apos;s Proxy feature state. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter. Returns one of <ref refid="group__bt__mesh__cfg_1ga3fe3e68efd25a3a03a041b978435fd7b" kindref="member">BT_MESH_GATT_PROXY_DISABLED</ref>, <ref refid="group__bt__mesh__cfg_1ga77f4438624aae49ea2bb66437c9623f7" kindref="member">BT_MESH_GATT_PROXY_ENABLED</ref> or <ref refid="group__bt__mesh__cfg_1gaecec3747198a29dd10185e3755e660f8" kindref="member">BT_MESH_GATT_PROXY_NOT_SUPPORTED</ref> on success.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="224" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="224" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga71e6a923a843bdbeb20f3f09f1c18a5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_gatt_proxy_set</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint8_t val, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_gatt_proxy_set</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Set the target node&apos;s Proxy feature state. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>New Proxy feature state. Must be one of <ref refid="group__bt__mesh__cfg_1ga3fe3e68efd25a3a03a041b978435fd7b" kindref="member">BT_MESH_GATT_PROXY_DISABLED</ref> or <ref refid="group__bt__mesh__cfg_1ga77f4438624aae49ea2bb66437c9623f7" kindref="member">BT_MESH_GATT_PROXY_ENABLED</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter. Returns one of <ref refid="group__bt__mesh__cfg_1ga3fe3e68efd25a3a03a041b978435fd7b" kindref="member">BT_MESH_GATT_PROXY_DISABLED</ref>, <ref refid="group__bt__mesh__cfg_1ga77f4438624aae49ea2bb66437c9623f7" kindref="member">BT_MESH_GATT_PROXY_ENABLED</ref> or <ref refid="group__bt__mesh__cfg_1gaecec3747198a29dd10185e3755e660f8" kindref="member">BT_MESH_GATT_PROXY_NOT_SUPPORTED</ref> on success.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="244" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="244" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga56c70c08f58624467806d2ea376b63c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_net_transmit_get</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint8_t *transmit)</argsstring>
        <name>bt_mesh_cfg_net_transmit_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>transmit</declname>
        </param>
        <briefdescription>
<para>Get the target node&apos;s network_transmit state. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>transmit</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmit</parametername>
</parameternamelist>
<parameterdescription>
<para>Network transmit response parameter. Returns the encoded network transmission parameters on success. Decoded with <ref refid="group__bt__mesh__access_1ga62fda0d731241efbaa4827e4eb9d1795" kindref="member">BT_MESH_TRANSMIT_COUNT</ref> and <ref refid="group__bt__mesh__access_1ga2aa21171c5677d23ad0c472291639417" kindref="member">BT_MESH_TRANSMIT_INT</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="261" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="261" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga2c6d304d19d637df0a5cdf02f557f704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_net_transmit_set</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint8_t val, uint8_t *transmit)</argsstring>
        <name>bt_mesh_cfg_net_transmit_set</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>transmit</declname>
        </param>
        <briefdescription>
<para>Set the target node&apos;s network transmit parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>transmit</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>New encoded network transmit parameters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__bt__mesh__access_1gaff82bf652232fbce71c31f38a10577a9" kindref="member">BT_MESH_TRANSMIT</ref>. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transmit</parametername>
</parameternamelist>
<parameterdescription>
<para>Network transmit response parameter. Returns the encoded network transmission parameters on success. Decoded with <ref refid="group__bt__mesh__access_1ga62fda0d731241efbaa4827e4eb9d1795" kindref="member">BT_MESH_TRANSMIT_COUNT</ref> and <ref refid="group__bt__mesh__access_1ga2aa21171c5677d23ad0c472291639417" kindref="member">BT_MESH_TRANSMIT_INT</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="279" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="279" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga2b1ecbbdd66ed5327b30afc192066517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_relay_get</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint8_t *status, uint8_t *transmit)</argsstring>
        <name>bt_mesh_cfg_relay_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>transmit</declname>
        </param>
        <briefdescription>
<para>Get the target node&apos;s Relay feature state. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> and <computeroutput>transmit</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter. Returns one of <ref refid="group__bt__mesh__cfg_1gaafd10319da7d2f938207b8fd6de02dbc" kindref="member">BT_MESH_RELAY_DISABLED</ref>, <ref refid="group__bt__mesh__cfg_1gae5d235a7c182a8add961d7ce344f87aa" kindref="member">BT_MESH_RELAY_ENABLED</ref> or <ref refid="group__bt__mesh__cfg_1gabbbbddd31c2a92256fe2f7a7520e76f7" kindref="member">BT_MESH_RELAY_NOT_SUPPORTED</ref> on success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmit</parametername>
</parameternamelist>
<parameterdescription>
<para>Transmit response parameter. Returns the encoded relay transmission parameters on success. Decoded with <ref refid="group__bt__mesh__access_1ga62fda0d731241efbaa4827e4eb9d1795" kindref="member">BT_MESH_TRANSMIT_COUNT</ref> and <ref refid="group__bt__mesh__access_1ga2aa21171c5677d23ad0c472291639417" kindref="member">BT_MESH_TRANSMIT_INT</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="299" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="299" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga3d4cf899d0609d3119a188a55654f884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_relay_set</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint8_t new_relay, uint8_t new_transmit, uint8_t *status, uint8_t *transmit)</argsstring>
        <name>bt_mesh_cfg_relay_set</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>new_relay</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>new_transmit</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>transmit</declname>
        </param>
        <briefdescription>
<para>Set the target node&apos;s Relay parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> and <computeroutput>transmit</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_relay</parametername>
</parameternamelist>
<parameterdescription>
<para>New relay state. Must be one of <ref refid="group__bt__mesh__cfg_1gaafd10319da7d2f938207b8fd6de02dbc" kindref="member">BT_MESH_RELAY_DISABLED</ref> or <ref refid="group__bt__mesh__cfg_1gae5d235a7c182a8add961d7ce344f87aa" kindref="member">BT_MESH_RELAY_ENABLED</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_transmit</parametername>
</parameternamelist>
<parameterdescription>
<para>New encoded relay transmit parameters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__bt__mesh__access_1gaff82bf652232fbce71c31f38a10577a9" kindref="member">BT_MESH_TRANSMIT</ref>. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter. Returns one of <ref refid="group__bt__mesh__cfg_1gaafd10319da7d2f938207b8fd6de02dbc" kindref="member">BT_MESH_RELAY_DISABLED</ref>, <ref refid="group__bt__mesh__cfg_1gae5d235a7c182a8add961d7ce344f87aa" kindref="member">BT_MESH_RELAY_ENABLED</ref> or <ref refid="group__bt__mesh__cfg_1gabbbbddd31c2a92256fe2f7a7520e76f7" kindref="member">BT_MESH_RELAY_NOT_SUPPORTED</ref> on success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmit</parametername>
</parameternamelist>
<parameterdescription>
<para>Transmit response parameter. Returns the encoded relay transmission parameters on success. Decoded with <ref refid="group__bt__mesh__access_1ga62fda0d731241efbaa4827e4eb9d1795" kindref="member">BT_MESH_TRANSMIT_COUNT</ref> and <ref refid="group__bt__mesh__access_1ga2aa21171c5677d23ad0c472291639417" kindref="member">BT_MESH_TRANSMIT_INT</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="325" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="325" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga3eb07ca26f54861026b8e87db68431ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_net_key_add</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t key_net_idx, const uint8_t net_key[16], uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_net_key_add</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>key_net_idx</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>net_key</declname>
          <array>[16]</array>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Add a network key to the target node. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network key index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>net_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Network key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="342" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="342" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga4784590d75503c3f656c775b084572cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_net_key_get</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t *keys, size_t *key_cnt)</argsstring>
        <name>bt_mesh_cfg_net_key_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>keys</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>key_cnt</declname>
        </param>
        <briefdescription>
<para>Get a list of the target node&apos;s network key indexes. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>keys</computeroutput> or <computeroutput>key_cnt</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keys</parametername>
</parameternamelist>
<parameterdescription>
<para>Net key index list response parameter. Will be filled with all the returned network key indexes it can fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Net key index list length. Should be set to the capacity of the <computeroutput>keys</computeroutput> list when calling. Will return the number of returned network key indexes upon success.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="361" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="361" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga057d04155a35bf9a018f3f39fe92288d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_net_key_del</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t key_net_idx, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_net_key_del</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>key_net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Delete a network key from the target node. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network key index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="377" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="377" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga861c1312a3b18531febe36c84a155217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_app_key_add</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t key_net_idx, uint16_t key_app_idx, const uint8_t app_key[16], uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_app_key_add</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>key_net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>key_app_idx</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>app_key</declname>
          <array>[16]</array>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Add an application key to the target node. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network key index the application key belongs to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Application key index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>app_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Application key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="395" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="395" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga20dcb5c838ebe3019a6510eb4beeff6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_app_key_get</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t key_net_idx, uint8_t *status, uint16_t *keys, size_t *key_cnt)</argsstring>
        <name>bt_mesh_cfg_app_key_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>key_net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>keys</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>key_cnt</declname>
        </param>
        <briefdescription>
<para>Get a list of the target node&apos;s application key indexes for a specific network key. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> and ( <computeroutput>keys</computeroutput> or <computeroutput>key_cnt</computeroutput> ) as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network key index to request the app key indexes of. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keys</parametername>
</parameternamelist>
<parameterdescription>
<para>App key index list response parameter. Will be filled with all the returned application key indexes it can fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>App key index list length. Should be set to the capacity of the <computeroutput>keys</computeroutput> list when calling. Will return the number of returned application key indexes upon success.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="420" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="420" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gae1aad359be3bc02760cd569ea85230b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_app_key_del</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t key_net_idx, uint16_t key_app_idx, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_app_key_del</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>key_net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>key_app_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Delete an application key from the target node. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network key index the application key belongs to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Application key index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="438" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="438" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga3e055bbc4b0fc381661c3586936ef14a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_app_bind</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t mod_app_idx, uint16_t mod_id, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_mod_app_bind</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_app_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Bind an application to a SIG model on the target node. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Application index to bind. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="456" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="456" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga1850a22c0484d3d52ab3762ae84db930" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_app_unbind</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t mod_app_idx, uint16_t mod_id, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_mod_app_unbind</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_app_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Unbind an application from a SIG model on the target node. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Application index to unbind. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="474" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="474" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga1db86d89ade1dbbe1ce862d8fee137ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_app_bind_vnd</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t mod_app_idx, uint16_t mod_id, uint16_t cid, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_mod_app_bind_vnd</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_app_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>cid</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Bind an application to a vendor model on the target node. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Application index to bind. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Company ID of the model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="494" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="494" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga1fb5f6e9524838f438de3257fa0c1de5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_app_unbind_vnd</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t mod_app_idx, uint16_t mod_id, uint16_t cid, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_mod_app_unbind_vnd</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_app_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>cid</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Unbind an application from a vendor model on the target node. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Application index to unbind. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Company ID of the model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="514" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="514" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gaf5069234abfe4ebe46759246e483e1c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_app_get</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t mod_id, uint8_t *status, uint16_t *apps, size_t *app_cnt)</argsstring>
        <name>bt_mesh_cfg_mod_app_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>apps</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>app_cnt</declname>
        </param>
        <briefdescription>
<para>Get a list of all applications bound to a SIG model on the target node. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> and ( <computeroutput>apps</computeroutput> or <computeroutput>app_cnt</computeroutput> ) as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>apps</parametername>
</parameternamelist>
<parameterdescription>
<para>App index list response parameter. Will be filled with all the returned application key indexes it can fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>app_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>App index list length. Should be set to the capacity of the <computeroutput>apps</computeroutput> list when calling. Will return the number of returned application key indexes upon success.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="538" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="538" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gadd270cf6cdfe0ffe6463b72ebd66477d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_app_get_vnd</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t mod_id, uint16_t cid, uint8_t *status, uint16_t *apps, size_t *app_cnt)</argsstring>
        <name>bt_mesh_cfg_mod_app_get_vnd</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>cid</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>apps</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>app_cnt</declname>
        </param>
        <briefdescription>
<para>Get a list of all applications bound to a vendor model on the target node. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> and ( <computeroutput>apps</computeroutput> or <computeroutput>app_cnt</computeroutput> ) as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Company ID of the model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>apps</parametername>
</parameternamelist>
<parameterdescription>
<para>App index list response parameter. Will be filled with all the returned application key indexes it can fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>app_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>App index list length. Should be set to the capacity of the <computeroutput>apps</computeroutput> list when calling. Will return the number of returned application key indexes upon success.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="564" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="564" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga393056867fc21107d284891c118f74d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_pub_get</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t mod_id, struct bt_mesh_cfg_mod_pub *pub, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_mod_pub_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__mesh__cfg__mod__pub" kindref="compound">bt_mesh_cfg_mod_pub</ref> *</type>
          <declname>pub</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Get publish parameters for a SIG model on the target node. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> and <computeroutput>pub</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>Publication parameter return buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="651" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="651" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga8ebb10b3b5f3ab2a8b41198c25af9cf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_pub_get_vnd</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t mod_id, uint16_t cid, struct bt_mesh_cfg_mod_pub *pub, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_mod_pub_get_vnd</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>cid</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__mesh__cfg__mod__pub" kindref="compound">bt_mesh_cfg_mod_pub</ref> *</type>
          <declname>pub</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Get publish parameters for a vendor model on the target node. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> and <computeroutput>pub</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Company ID of the model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>Publication parameter return buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="671" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="671" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gae03062b64de9e8d70e3e75d6b783de4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_pub_set</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t mod_id, struct bt_mesh_cfg_mod_pub *pub, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_mod_pub_set</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__mesh__cfg__mod__pub" kindref="compound">bt_mesh_cfg_mod_pub</ref> *</type>
          <declname>pub</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Set publish parameters for a SIG model on the target node. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><computeroutput>pub</computeroutput> shall not be NULL.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>Publication parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="692" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="692" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gaaaa4b04afe619ec24d8fa3c57dce5752" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_pub_set_vnd</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t mod_id, uint16_t cid, struct bt_mesh_cfg_mod_pub *pub, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_mod_pub_set_vnd</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>cid</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__mesh__cfg__mod__pub" kindref="compound">bt_mesh_cfg_mod_pub</ref> *</type>
          <declname>pub</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Set publish parameters for a vendor model on the target node. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><computeroutput>pub</computeroutput> shall not be NULL.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Company ID of the model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>Publication parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="714" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="714" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga16d54c1d72ddeb4d964f2c8fe33c43d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_sub_add</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t sub_addr, uint16_t mod_id, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_mod_sub_add</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>sub_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Add a group address to a SIG model&apos;s subscription list. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sub_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Group address to add to the subscription list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="733" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="733" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga6fb131d6ab2006db01c09ceaa19cf1f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_sub_add_vnd</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t sub_addr, uint16_t mod_id, uint16_t cid, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_mod_sub_add_vnd</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>sub_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>cid</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Add a group address to a vendor model&apos;s subscription list. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sub_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Group address to add to the subscription list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Company ID of the model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="752" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="752" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gac301f567c276fb53fd1cb1cd1f26a00d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_sub_del</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t sub_addr, uint16_t mod_id, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_mod_sub_del</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>sub_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Delete a group address in a SIG model&apos;s subscription list. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sub_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Group address to add to the subscription list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="771" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="771" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gac6b736c0fdc7e4f618894da04d506993" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_sub_del_vnd</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t sub_addr, uint16_t mod_id, uint16_t cid, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_mod_sub_del_vnd</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>sub_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>cid</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Delete a group address in a vendor model&apos;s subscription list. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sub_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Group address to add to the subscription list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Company ID of the model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="790" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="790" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga9f0321d7e6d3987e65c8cc57951702ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_sub_overwrite</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t sub_addr, uint16_t mod_id, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_mod_sub_overwrite</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>sub_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Overwrite all addresses in a SIG model&apos;s subscription list with a group address. </para>
        </briefdescription>
        <detaileddescription>
<para>Deletes all subscriptions in the model&apos;s subscription list, and adds a single group address instead.</para>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sub_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Group address to add to the subscription list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="813" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="813" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga3a87293278a8d30a38ef32755d7323c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_sub_overwrite_vnd</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t sub_addr, uint16_t mod_id, uint16_t cid, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_mod_sub_overwrite_vnd</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>sub_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>cid</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Overwrite all addresses in a vendor model&apos;s subscription list with a group address. </para>
        </briefdescription>
        <detaileddescription>
<para>Deletes all subscriptions in the model&apos;s subscription list, and adds a single group address instead.</para>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sub_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Group address to add to the subscription list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Company ID of the model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="836" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="836" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga96ff87fe836363985cbdf4f041a28873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_sub_va_add</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, const uint8_t label[16], uint16_t mod_id, uint16_t *virt_addr, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_mod_sub_va_add</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>label</declname>
          <array>[16]</array>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>virt_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Add a virtual address to a SIG model&apos;s subscription list. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> and <computeroutput>virt_addr</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual address label to add to the subscription list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>virt_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual address response parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="856" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="856" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga763755dc0f8b38b4fa8984bebcd68581" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_sub_va_add_vnd</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, const uint8_t label[16], uint16_t mod_id, uint16_t cid, uint16_t *virt_addr, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_mod_sub_va_add_vnd</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>label</declname>
          <array>[16]</array>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>cid</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>virt_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Add a virtual address to a vendor model&apos;s subscription list. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> and <computeroutput>virt_addr</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual address label to add to the subscription list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Company ID of the model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>virt_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual address response parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="877" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="877" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gae08ca30bac6b3889795f8de774291df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_sub_va_del</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, const uint8_t label[16], uint16_t mod_id, uint16_t *virt_addr, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_mod_sub_va_del</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>label</declname>
          <array>[16]</array>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>virt_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Delete a virtual address in a SIG model&apos;s subscription list. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> and <computeroutput>virt_addr</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual address parameter to add to the subscription list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>virt_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual address response parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="897" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="897" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gaa603705a39c2aac560b0f376ec71d805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_sub_va_del_vnd</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, const uint8_t label[16], uint16_t mod_id, uint16_t cid, uint16_t *virt_addr, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_mod_sub_va_del_vnd</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>label</declname>
          <array>[16]</array>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>cid</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>virt_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Delete a virtual address in a vendor model&apos;s subscription list. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> and <computeroutput>virt_addr</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual address label to add to the subscription list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Company ID of the model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>virt_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual address response parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="918" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="918" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gaac3b81ba3313f5f9d4f9cfa2613084ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_sub_va_overwrite</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, const uint8_t label[16], uint16_t mod_id, uint16_t *virt_addr, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_mod_sub_va_overwrite</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>label</declname>
          <array>[16]</array>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>virt_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Overwrite all addresses in a SIG model&apos;s subscription list with a virtual address. </para>
        </briefdescription>
        <detaileddescription>
<para>Deletes all subscriptions in the model&apos;s subscription list, and adds a single group address instead.</para>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> and <computeroutput>virt_addr</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual address label to add to the subscription list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>virt_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual address response parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="942" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="942" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gaf75100e9e1907fc9681f3c6fbc66db14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_sub_va_overwrite_vnd</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, const uint8_t label[16], uint16_t mod_id, uint16_t cid, uint16_t *virt_addr, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_mod_sub_va_overwrite_vnd</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>label</declname>
          <array>[16]</array>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>cid</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>virt_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Overwrite all addresses in a vendor model&apos;s subscription list with a virtual address. </para>
        </briefdescription>
        <detaileddescription>
<para>Deletes all subscriptions in the model&apos;s subscription list, and adds a single group address instead.</para>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> and <computeroutput>virt_addr</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual address label to add to the subscription list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Company ID of the model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>virt_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual address response parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="968" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="968" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gaf44b944bd6d3fc38e4fb2ff2fa00d4a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_sub_get</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t mod_id, uint8_t *status, uint16_t *subs, size_t *sub_cnt)</argsstring>
        <name>bt_mesh_cfg_mod_sub_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>subs</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>sub_cnt</declname>
        </param>
        <briefdescription>
<para>Get the subscription list of a SIG model on the target node. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> and ( <computeroutput>subs</computeroutput> or <computeroutput>sub_cnt</computeroutput> ) as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subs</parametername>
</parameternamelist>
<parameterdescription>
<para>Subscription list response parameter. Will be filled with all the returned subscriptions it can fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sub_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Subscription list element count. Should be set to the capacity of the <computeroutput>subs</computeroutput> list when calling. Will return the number of returned subscriptions upon success.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="992" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="992" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga3a480c2d15282970fa98f3cdfc8cdbee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_sub_get_vnd</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t mod_id, uint16_t cid, uint8_t *status, uint16_t *subs, size_t *sub_cnt)</argsstring>
        <name>bt_mesh_cfg_mod_sub_get_vnd</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>cid</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>subs</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>sub_cnt</declname>
        </param>
        <briefdescription>
<para>Get the subscription list of a vendor model on the target node. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> and ( <computeroutput>subs</computeroutput> or <computeroutput>sub_cnt</computeroutput> ) as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Company ID of the model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subs</parametername>
</parameternamelist>
<parameterdescription>
<para>Subscription list response parameter. Will be filled with all the returned subscriptions it can fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sub_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Subscription list element count. Should be set to the capacity of the <computeroutput>subs</computeroutput> list when calling. Will return the number of returned subscriptions upon success.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="1016" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="1016" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga721707c829de55faad62b9bc89f9e10c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_hb_sub_set</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, struct bt_mesh_cfg_hb_sub *sub, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_hb_sub_set</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__mesh__cfg__hb__sub" kindref="compound">bt_mesh_cfg_hb_sub</ref> *</type>
          <declname>sub</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Set the target node&apos;s Heartbeat subscription parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><computeroutput>sub</computeroutput> shall not be null.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sub</parametername>
</parameternamelist>
<parameterdescription>
<para>New Heartbeat subscription parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="1073" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="1073" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gacd84c9ce276b2fab44f0d9680d53eacb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_hb_sub_get</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, struct bt_mesh_cfg_hb_sub *sub, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_hb_sub_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__mesh__cfg__hb__sub" kindref="compound">bt_mesh_cfg_hb_sub</ref> *</type>
          <declname>sub</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Get the target node&apos;s Heartbeta subscription parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> and <computeroutput>sub</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sub</parametername>
</parameternamelist>
<parameterdescription>
<para>Heartbeat subscription parameter return buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="1089" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="1089" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gaea4ae4bb3e316747ddcee19b6fac618b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_hb_pub_set</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, const struct bt_mesh_cfg_hb_pub *pub, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_hb_pub_set</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__mesh__cfg__hb__pub" kindref="compound">bt_mesh_cfg_hb_pub</ref> *</type>
          <declname>pub</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Set the target node&apos;s Heartbeat publication parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The target node must already have received the specified network key.</para>
</simplesect>
This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><computeroutput>pub</computeroutput> shall not be NULL;</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>New Heartbeat publication parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="1144" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="1144" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga369ae2f3f2fc1ee1d23aae1cf50f1b48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_hb_pub_get</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, struct bt_mesh_cfg_hb_pub *pub, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_hb_pub_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__mesh__cfg__hb__pub" kindref="compound">bt_mesh_cfg_hb_pub</ref> *</type>
          <declname>pub</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Get the target node&apos;s Heartbeat publication parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> and <computeroutput>pub</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>Heartbeat publication parameter return buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="1160" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="1160" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gad6a967a655398814337e71ed06d14601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_sub_del_all</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t mod_id, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_mod_sub_del_all</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Delete all group addresses in a SIG model&apos;s subscription list. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="1177" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="1177" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga0d0f0bf1b4a84324654cd48d99a8c482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_mod_sub_del_all_vnd</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t mod_id, uint16_t cid, uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_mod_sub_del_all_vnd</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>elem_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mod_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>cid</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Delete all group addresses in a vendor model&apos;s subscription list. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Element address the model is in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mod_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Model ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Company ID of the model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="1196" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="1196" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gad4695e8a3ded22d7db1403b7f5668ebc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_net_key_update</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t key_net_idx, const uint8_t net_key[16], uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_net_key_update</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>key_net_idx</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>net_key</declname>
          <array>[16]</array>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Update a network key to the target node. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network key index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>net_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Network key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="1214" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="1214" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gaf18421cbe730e8f546dcafd875646c57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_app_key_update</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t key_net_idx, uint16_t key_app_idx, const uint8_t app_key[16], uint8_t *status)</argsstring>
        <name>bt_mesh_cfg_app_key_update</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>key_net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>key_app_idx</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>app_key</declname>
          <array>[16]</array>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Update an application key to the target node. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network key index the application key belongs to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Application key index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>app_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Application key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="1233" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="1233" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gae05b3ff71d69b68e162219df71f837d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_node_identity_set</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t key_net_idx, uint8_t new_identity, uint8_t *status, uint8_t *identity)</argsstring>
        <name>bt_mesh_cfg_node_identity_set</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>key_net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>new_identity</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>identity</declname>
        </param>
        <briefdescription>
<para>Set the Node Identity parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> and <computeroutput>identity</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_identity</parametername>
</parameternamelist>
<parameterdescription>
<para>New identity state. Must be one of <ref refid="group__bt__mesh__cfg_1ga9a83214cdbd34ac1d4bc644136523bd9" kindref="member">BT_MESH_NODE_IDENTITY_STOPPED</ref> or <ref refid="group__bt__mesh__cfg_1ga86e88acc6fdcc26a9cea4415daad016c" kindref="member">BT_MESH_NODE_IDENTITY_RUNNING</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network key index the application key belongs to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>identity</parametername>
</parameternamelist>
<parameterdescription>
<para>Identity response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="1254" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="1254" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga71a1abf2161676acbea45a45d1fc5f52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_node_identity_get</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t key_net_idx, uint8_t *status, uint8_t *identity)</argsstring>
        <name>bt_mesh_cfg_node_identity_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>key_net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>status</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>identity</declname>
        </param>
        <briefdescription>
<para>Get the Node Identity parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>status</computeroutput> and <computeroutput>identity</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network key index the application key belongs to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status response parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>identity</parametername>
</parameternamelist>
<parameterdescription>
<para>Identity response parameter. Must be one of <ref refid="group__bt__mesh__cfg_1ga9a83214cdbd34ac1d4bc644136523bd9" kindref="member">BT_MESH_NODE_IDENTITY_STOPPED</ref> or <ref refid="group__bt__mesh__cfg_1ga86e88acc6fdcc26a9cea4415daad016c" kindref="member">BT_MESH_NODE_IDENTITY_RUNNING</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="1274" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="1274" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga3d74d2c956893cfd248bf44591910762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cfg_lpn_timeout_get</definition>
        <argsstring>(uint16_t net_idx, uint16_t addr, uint16_t unicast_addr, int32_t *polltimeout)</argsstring>
        <name>bt_mesh_cfg_lpn_timeout_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>unicast_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref> *</type>
          <declname>polltimeout</declname>
        </param>
        <briefdescription>
<para>Get the Low Power Node Polltimeout parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>polltimeout</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unicast_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>LPN unicast address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polltimeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Poltimeout response parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="1291" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="1291" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gaf5262c0a27e4b9249ecf908c259cc7d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
        <definition>int32_t bt_mesh_cfg_cli_timeout_get</definition>
        <argsstring>(void)</argsstring>
        <name>bt_mesh_cfg_cli_timeout_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current transmission timeout value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The configured transmission timeout in milliseconds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="1298" column="9" declfile="include/bluetooth/mesh/cfg_cli.h" declline="1298" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga7e3521ae973dc825422c6dd5f07ef547" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_mesh_cfg_cli_timeout_set</definition>
        <argsstring>(int32_t timeout)</argsstring>
        <name>bt_mesh_cfg_cli_timeout_set</name>
        <param>
          <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Set the transmission timeout value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The new transmission timeout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="1304" column="6" declfile="include/bluetooth/mesh/cfg_cli.h" declline="1304" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga1f79d98273a984f1c49b4d5dd5bf8d30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_comp_p0_get</definition>
        <argsstring>(struct bt_mesh_comp_p0 *comp, struct net_buf_simple *buf)</argsstring>
        <name>bt_mesh_comp_p0_get</name>
        <param>
          <type>struct <ref refid="structbt__mesh__comp__p0" kindref="compound">bt_mesh_comp_p0</ref> *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Create a composition data page 0 representation from a buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>The composition data page object will take ownership over the buffer, which should not be manipulated directly after this call.</para>
<para>This function can be used in combination with <ref refid="group__bt__mesh__cfg__cli_1gae5f940f5a65ab127c32a228d7d2e4168" kindref="member">bt_mesh_cfg_comp_data_get</ref> to read out composition data page 0 from other devices:</para>
<para><programlisting><codeline><highlight class="normal">NET_BUF_SIMPLE_DEFINE(buf,<sp/>BT_MESH_RX_SDU_MAX);</highlight></codeline>
<codeline><highlight class="normal">struct<sp/>bt_mesh_comp_p0<sp/>comp;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">err<sp/>=<sp/>bt_mesh_cfg_comp_data_get(net_idx,<sp/>addr,<sp/>0,<sp/>&amp;page,<sp/>&amp;buf);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(!err)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bt_mesh_comp_p0_get(&amp;comp,<sp/>&amp;buf);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Network buffer containing composition data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>Composition data structure to fill.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="1362" column="5" declfile="include/bluetooth/mesh/cfg_cli.h" declline="1362" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gaa6d60ebad6dc4a4f5b022937dbae3120" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structbt__mesh__comp__p0__elem" kindref="compound">bt_mesh_comp_p0_elem</ref> *</type>
        <definition>struct bt_mesh_comp_p0_elem * bt_mesh_comp_p0_elem_pull</definition>
        <argsstring>(const struct bt_mesh_comp_p0 *comp, struct bt_mesh_comp_p0_elem *elem)</argsstring>
        <name>bt_mesh_comp_p0_elem_pull</name>
        <param>
          <type>const struct <ref refid="structbt__mesh__comp__p0" kindref="compound">bt_mesh_comp_p0</ref> *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__mesh__comp__p0__elem" kindref="compound">bt_mesh_comp_p0_elem</ref> *</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Pull a composition data page 0 element from a composition data page 0 instance. </para>
        </briefdescription>
        <detaileddescription>
<para>Each call to this function will pull out a new element from the composition data page, until all elements have been pulled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>Composition data page </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>Element to fill.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to <computeroutput>elem</computeroutput> on success, or NULL if no more elements could be pulled. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="1377" column="27" declfile="include/bluetooth/mesh/cfg_cli.h" declline="1377" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1gac005f52e191c3e5628f063dbc1a19645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t bt_mesh_comp_p0_elem_mod</definition>
        <argsstring>(struct bt_mesh_comp_p0_elem *elem, int idx)</argsstring>
        <name>bt_mesh_comp_p0_elem_mod</name>
        <param>
          <type>struct <ref refid="structbt__mesh__comp__p0__elem" kindref="compound">bt_mesh_comp_p0_elem</ref> *</type>
          <declname>elem</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get a SIG model from the given composition data page 0 element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>Element to read the model from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the SIG model to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Model ID of the SIG model at the given index, or 0xffff if the index is out of bounds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="1388" column="10" declfile="include/bluetooth/mesh/cfg_cli.h" declline="1388" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__cli_1ga4f656102982961b7bf2e3d3896a2240e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structbt__mesh__mod__id__vnd" kindref="compound">bt_mesh_mod_id_vnd</ref></type>
        <definition>struct bt_mesh_mod_id_vnd bt_mesh_comp_p0_elem_mod_vnd</definition>
        <argsstring>(struct bt_mesh_comp_p0_elem *elem, int idx)</argsstring>
        <name>bt_mesh_comp_p0_elem_mod_vnd</name>
        <param>
          <type>struct <ref refid="structbt__mesh__comp__p0__elem" kindref="compound">bt_mesh_comp_p0_elem</ref> *</type>
          <declname>elem</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get a vendor model from the given composition data page 0 element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>Element to read the model from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the vendor model to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The model ID of the vendor model at the given index, or {0xffff, 0xffff} if the index is out of bounds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg_cli.h" line="1398" column="25" declfile="include/bluetooth/mesh/cfg_cli.h" declline="1398" declcolumn="25"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Configuration Client Model APIs. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_BLUETOOTH_MESH_CFG_CLI_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_BLUETOOTH_MESH_CFG_CLI_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="structbt__mesh__cfg__cli" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__cfg__cli" kindref="compound">bt_mesh_cfg_cli</ref><sp/>{</highlight></codeline>
<codeline lineno="27" refid="structbt__mesh__cfg__cli_1a66ccda8751310b7d5c6886c4dc6ab04f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__model" kindref="compound">bt_mesh_model</ref><sp/>*<ref refid="structbt__mesh__cfg__cli_1a66ccda8751310b7d5c6886c4dc6ab04f" kindref="member">model</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Internal<sp/>parameters<sp/>for<sp/>tracking<sp/>message<sp/>responses.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="structbt__mesh__cfg__cli_1a472bf5015857ab97e1a40ab6cfa70bb1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__msg__ack__ctx" kindref="compound">bt_mesh_msg_ack_ctx</ref><sp/><ref refid="structbt__mesh__cfg__cli_1a472bf5015857ab97e1a40ab6cfa70bb1" kindref="member">ack_ctx</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="group__bt__mesh__cfg__cli_1ga2f0df6906a27ebbd86dcd11951114001" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_MESH_MODEL_CFG_CLI(cli_data)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BT_MESH_MODEL_CB(BT_MESH_MODEL_ID_CFG_CLI,<sp/>bt_mesh_cfg_cli_op,<sp/>NULL,<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cli_data,<sp/>&amp;bt_mesh_cfg_cli_cb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="group__bt__mesh__cfg__cli_1ga9be7cf6d3141b41393cbe89a44d70992" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga9be7cf6d3141b41393cbe89a44d70992" kindref="member">bt_mesh_cfg_node_reset</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*status);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="group__bt__mesh__cfg__cli_1gae5f940f5a65ab127c32a228d7d2e4168" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1gae5f940f5a65ab127c32a228d7d2e4168" kindref="member">bt_mesh_cfg_comp_data_get</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>page,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*rsp,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*comp);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="group__bt__mesh__cfg__cli_1ga527455050c908d4f1c8fe198e2fb0fad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga527455050c908d4f1c8fe198e2fb0fad" kindref="member">bt_mesh_cfg_beacon_get</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="group__bt__mesh__cfg__cli_1gab266bd45313198641c75fd503b944f8b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1gab266bd45313198641c75fd503b944f8b" kindref="member">bt_mesh_cfg_krp_get</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>key_net_idx,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*phase);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="group__bt__mesh__cfg__cli_1ga7db6912578e6b1f175fa2ebfa2ca45b3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga7db6912578e6b1f175fa2ebfa2ca45b3" kindref="member">bt_mesh_cfg_krp_set</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>key_net_idx,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>transition,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*phase);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="group__bt__mesh__cfg__cli_1ga39fef9d9f11b00ef518850f3ac27c115" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga39fef9d9f11b00ef518850f3ac27c115" kindref="member">bt_mesh_cfg_beacon_set</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>val,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="group__bt__mesh__cfg__cli_1ga7da9f87b6274f53ef98f2a01c547171e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga7da9f87b6274f53ef98f2a01c547171e" kindref="member">bt_mesh_cfg_ttl_get</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*ttl);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="group__bt__mesh__cfg__cli_1ga43883e10e0950ed72b56ba4714418e29" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga43883e10e0950ed72b56ba4714418e29" kindref="member">bt_mesh_cfg_ttl_set</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>val,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*ttl);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="group__bt__mesh__cfg__cli_1ga7b1069259e9e7d00e116098d20a30d84" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga7b1069259e9e7d00e116098d20a30d84" kindref="member">bt_mesh_cfg_friend_get</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="group__bt__mesh__cfg__cli_1ga51212966eae4d271db5b5cadfc2ab174" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga51212966eae4d271db5b5cadfc2ab174" kindref="member">bt_mesh_cfg_friend_set</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>val,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="group__bt__mesh__cfg__cli_1ga6962727fe176fe4fb127ca0128322115" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga6962727fe176fe4fb127ca0128322115" kindref="member">bt_mesh_cfg_gatt_proxy_get</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="group__bt__mesh__cfg__cli_1ga71e6a923a843bdbeb20f3f09f1c18a5d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga71e6a923a843bdbeb20f3f09f1c18a5d" kindref="member">bt_mesh_cfg_gatt_proxy_set</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>val,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="261" refid="group__bt__mesh__cfg__cli_1ga56c70c08f58624467806d2ea376b63c2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga56c70c08f58624467806d2ea376b63c2" kindref="member">bt_mesh_cfg_net_transmit_get</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*transmit);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="group__bt__mesh__cfg__cli_1ga2c6d304d19d637df0a5cdf02f557f704" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga2c6d304d19d637df0a5cdf02f557f704" kindref="member">bt_mesh_cfg_net_transmit_set</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>val,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*transmit);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="group__bt__mesh__cfg__cli_1ga2b1ecbbdd66ed5327b30afc192066517" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga2b1ecbbdd66ed5327b30afc192066517" kindref="member">bt_mesh_cfg_relay_get</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*transmit);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="325" refid="group__bt__mesh__cfg__cli_1ga3d4cf899d0609d3119a188a55654f884" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga3d4cf899d0609d3119a188a55654f884" kindref="member">bt_mesh_cfg_relay_set</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>new_relay,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>new_transmit,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*transmit);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="group__bt__mesh__cfg__cli_1ga3eb07ca26f54861026b8e87db68431ad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga3eb07ca26f54861026b8e87db68431ad" kindref="member">bt_mesh_cfg_net_key_add</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>key_net_idx,</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>net_key[16],<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="361" refid="group__bt__mesh__cfg__cli_1ga4784590d75503c3f656c775b084572cb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga4784590d75503c3f656c775b084572cb" kindref="member">bt_mesh_cfg_net_key_get</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*keys,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*key_cnt);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="377" refid="group__bt__mesh__cfg__cli_1ga057d04155a35bf9a018f3f39fe92288d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga057d04155a35bf9a018f3f39fe92288d" kindref="member">bt_mesh_cfg_net_key_del</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>key_net_idx,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="395" refid="group__bt__mesh__cfg__cli_1ga861c1312a3b18531febe36c84a155217" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga861c1312a3b18531febe36c84a155217" kindref="member">bt_mesh_cfg_app_key_add</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>key_net_idx,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>key_app_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>app_key[16],</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="group__bt__mesh__cfg__cli_1ga20dcb5c838ebe3019a6510eb4beeff6c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga20dcb5c838ebe3019a6510eb4beeff6c" kindref="member">bt_mesh_cfg_app_key_get</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>key_net_idx,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*keys,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*key_cnt);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="438" refid="group__bt__mesh__cfg__cli_1gae1aad359be3bc02760cd569ea85230b0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1gae1aad359be3bc02760cd569ea85230b0" kindref="member">bt_mesh_cfg_app_key_del</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>key_net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>key_app_idx,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="456" refid="group__bt__mesh__cfg__cli_1ga3e055bbc4b0fc381661c3586936ef14a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga3e055bbc4b0fc381661c3586936ef14a" kindref="member">bt_mesh_cfg_mod_app_bind</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_app_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="474" refid="group__bt__mesh__cfg__cli_1ga1850a22c0484d3d52ab3762ae84db930" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga1850a22c0484d3d52ab3762ae84db930" kindref="member">bt_mesh_cfg_mod_app_unbind</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_app_idx,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="494" refid="group__bt__mesh__cfg__cli_1ga1db86d89ade1dbbe1ce862d8fee137ab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga1db86d89ade1dbbe1ce862d8fee137ab" kindref="member">bt_mesh_cfg_mod_app_bind_vnd</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_app_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>cid,</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="514" refid="group__bt__mesh__cfg__cli_1ga1fb5f6e9524838f438de3257fa0c1de5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga1fb5f6e9524838f438de3257fa0c1de5" kindref="member">bt_mesh_cfg_mod_app_unbind_vnd</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_app_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>cid,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="538" refid="group__bt__mesh__cfg__cli_1gaf5069234abfe4ebe46759246e483e1c3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1gaf5069234abfe4ebe46759246e483e1c3" kindref="member">bt_mesh_cfg_mod_app_get</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*apps,</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*app_cnt);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="564" refid="group__bt__mesh__cfg__cli_1gadd270cf6cdfe0ffe6463b72ebd66477d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1gadd270cf6cdfe0ffe6463b72ebd66477d" kindref="member">bt_mesh_cfg_mod_app_get_vnd</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>cid,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status,</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*apps,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*app_cnt);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="576" refid="group__bt__mesh__cfg__cli_1gab542c707fb5bad0a15088fefda775a42" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_MESH_PUB_PERIOD_100MS(steps)<sp/><sp/>((steps)<sp/>&amp;<sp/>BIT_MASK(6))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="586" refid="group__bt__mesh__cfg__cli_1ga29435e527a73ff6e19339b773c8eb79e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_MESH_PUB_PERIOD_SEC(steps)<sp/><sp/><sp/>(((steps)<sp/>&amp;<sp/>BIT_MASK(6))<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>6))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="597" refid="group__bt__mesh__cfg__cli_1ga654204077adaa08259d1afbfe92e070e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_MESH_PUB_PERIOD_10SEC(steps)<sp/>(((steps)<sp/>&amp;<sp/>BIT_MASK(6))<sp/>|<sp/>(2<sp/>&lt;&lt;<sp/>6))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="608" refid="group__bt__mesh__cfg__cli_1ga36c37f644ee39ad91b6167f68c806b7e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_MESH_PUB_PERIOD_10MIN(steps)<sp/>(((steps)<sp/>&amp;<sp/>BIT_MASK(6))<sp/>|<sp/>(3<sp/>&lt;&lt;<sp/>6))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="611" refid="structbt__mesh__cfg__mod__pub" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__cfg__mod__pub" kindref="compound">bt_mesh_cfg_mod_pub</ref><sp/>{</highlight></codeline>
<codeline lineno="613" refid="structbt__mesh__cfg__mod__pub_1a1e7ed94c1a1aa2a7f73087b0734184ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__cfg__mod__pub_1a1e7ed94c1a1aa2a7f73087b0734184ed" kindref="member">addr</ref>;</highlight></codeline>
<codeline lineno="615" refid="structbt__mesh__cfg__mod__pub_1af292eb132061d989770a52b87dcc57e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="structbt__mesh__cfg__mod__pub_1af292eb132061d989770a52b87dcc57e7" kindref="member">uuid</ref>;</highlight></codeline>
<codeline lineno="617" refid="structbt__mesh__cfg__mod__pub_1a0d49a6d590ab8300a15d109e2b216623" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><sp/><ref refid="structbt__mesh__cfg__mod__pub_1a0d49a6d590ab8300a15d109e2b216623" kindref="member">app_idx</ref>;</highlight></codeline>
<codeline lineno="619" refid="structbt__mesh__cfg__mod__pub_1a32ad3d41df6d73ad2dd92731996d79b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="structbt__mesh__cfg__mod__pub_1a32ad3d41df6d73ad2dd92731996d79b6" kindref="member">cred_flag</ref>;</highlight></codeline>
<codeline lineno="621" refid="structbt__mesh__cfg__mod__pub_1a02908b691744526df8ea4aff85c230a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><sp/><ref refid="structbt__mesh__cfg__mod__pub_1a02908b691744526df8ea4aff85c230a1" kindref="member">ttl</ref>;</highlight></codeline>
<codeline lineno="628" refid="structbt__mesh__cfg__mod__pub_1a4ec60d2b7334af2be461da7b73083a08" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><sp/><ref refid="structbt__mesh__cfg__mod__pub_1a4ec60d2b7334af2be461da7b73083a08" kindref="member">period</ref>;</highlight></codeline>
<codeline lineno="633" refid="structbt__mesh__cfg__mod__pub_1aaa0ba8467dcf1d9cc8f24da45df17205" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><sp/><ref refid="structbt__mesh__cfg__mod__pub_1aaa0ba8467dcf1d9cc8f24da45df17205" kindref="member">transmit</ref>;</highlight></codeline>
<codeline lineno="634"><highlight class="normal">};</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="651" refid="group__bt__mesh__cfg__cli_1ga393056867fc21107d284891c118f74d3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga393056867fc21107d284891c118f74d3" kindref="member">bt_mesh_cfg_mod_pub_get</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__cfg__mod__pub" kindref="compound">bt_mesh_cfg_mod_pub</ref><sp/>*pub,</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="671" refid="group__bt__mesh__cfg__cli_1ga8ebb10b3b5f3ab2a8b41198c25af9cf7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga8ebb10b3b5f3ab2a8b41198c25af9cf7" kindref="member">bt_mesh_cfg_mod_pub_get_vnd</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>cid,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__cfg__mod__pub" kindref="compound">bt_mesh_cfg_mod_pub</ref><sp/>*pub,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="692" refid="group__bt__mesh__cfg__cli_1gae03062b64de9e8d70e3e75d6b783de4e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1gae03062b64de9e8d70e3e75d6b783de4e" kindref="member">bt_mesh_cfg_mod_pub_set</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__cfg__mod__pub" kindref="compound">bt_mesh_cfg_mod_pub</ref><sp/>*pub,</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="714" refid="group__bt__mesh__cfg__cli_1gaaaa4b04afe619ec24d8fa3c57dce5752" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1gaaaa4b04afe619ec24d8fa3c57dce5752" kindref="member">bt_mesh_cfg_mod_pub_set_vnd</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>cid,</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__cfg__mod__pub" kindref="compound">bt_mesh_cfg_mod_pub</ref><sp/>*pub,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="733" refid="group__bt__mesh__cfg__cli_1ga16d54c1d72ddeb4d964f2c8fe33c43d5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga16d54c1d72ddeb4d964f2c8fe33c43d5" kindref="member">bt_mesh_cfg_mod_sub_add</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>sub_addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="752" refid="group__bt__mesh__cfg__cli_1ga6fb131d6ab2006db01c09ceaa19cf1f1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga6fb131d6ab2006db01c09ceaa19cf1f1" kindref="member">bt_mesh_cfg_mod_sub_add_vnd</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>sub_addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>cid,</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="771" refid="group__bt__mesh__cfg__cli_1gac301f567c276fb53fd1cb1cd1f26a00d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1gac301f567c276fb53fd1cb1cd1f26a00d" kindref="member">bt_mesh_cfg_mod_sub_del</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>sub_addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="790" refid="group__bt__mesh__cfg__cli_1gac6b736c0fdc7e4f618894da04d506993" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1gac6b736c0fdc7e4f618894da04d506993" kindref="member">bt_mesh_cfg_mod_sub_del_vnd</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>sub_addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>cid,</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="813" refid="group__bt__mesh__cfg__cli_1ga9f0321d7e6d3987e65c8cc57951702ba" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga9f0321d7e6d3987e65c8cc57951702ba" kindref="member">bt_mesh_cfg_mod_sub_overwrite</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>sub_addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="836" refid="group__bt__mesh__cfg__cli_1ga3a87293278a8d30a38ef32755d7323c0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga3a87293278a8d30a38ef32755d7323c0" kindref="member">bt_mesh_cfg_mod_sub_overwrite_vnd</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>sub_addr,</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>cid,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="856" refid="group__bt__mesh__cfg__cli_1ga96ff87fe836363985cbdf4f041a28873" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga96ff87fe836363985cbdf4f041a28873" kindref="member">bt_mesh_cfg_mod_sub_va_add</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>label[16],<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*virt_addr,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="877" refid="group__bt__mesh__cfg__cli_1ga763755dc0f8b38b4fa8984bebcd68581" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga763755dc0f8b38b4fa8984bebcd68581" kindref="member">bt_mesh_cfg_mod_sub_va_add_vnd</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>label[16],<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>cid,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*virt_addr,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="897" refid="group__bt__mesh__cfg__cli_1gae08ca30bac6b3889795f8de774291df5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1gae08ca30bac6b3889795f8de774291df5" kindref="member">bt_mesh_cfg_mod_sub_va_del</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>label[16],<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*virt_addr,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="918" refid="group__bt__mesh__cfg__cli_1gaa603705a39c2aac560b0f376ec71d805" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1gaa603705a39c2aac560b0f376ec71d805" kindref="member">bt_mesh_cfg_mod_sub_va_del_vnd</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>label[16],<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>cid,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*virt_addr,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="942" refid="group__bt__mesh__cfg__cli_1gaac3b81ba3313f5f9d4f9cfa2613084ef" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1gaac3b81ba3313f5f9d4f9cfa2613084ef" kindref="member">bt_mesh_cfg_mod_sub_va_overwrite</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>label[16],</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*virt_addr,</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="968" refid="group__bt__mesh__cfg__cli_1gaf75100e9e1907fc9681f3c6fbc66db14" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1gaf75100e9e1907fc9681f3c6fbc66db14" kindref="member">bt_mesh_cfg_mod_sub_va_overwrite_vnd</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>label[16],</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>cid,</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*virt_addr,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="992" refid="group__bt__mesh__cfg__cli_1gaf44b944bd6d3fc38e4fb2ff2fa00d4a7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1gaf44b944bd6d3fc38e4fb2ff2fa00d4a7" kindref="member">bt_mesh_cfg_mod_sub_get</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*subs,</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*sub_cnt);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016" refid="group__bt__mesh__cfg__cli_1ga3a480c2d15282970fa98f3cdfc8cdbee" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga3a480c2d15282970fa98f3cdfc8cdbee" kindref="member">bt_mesh_cfg_mod_sub_get_vnd</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>cid,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status,</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*subs,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*sub_cnt);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021" refid="structbt__mesh__cfg__hb__sub" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__cfg__hb__sub" kindref="compound">bt_mesh_cfg_hb_sub</ref><sp/>{</highlight></codeline>
<codeline lineno="1023" refid="structbt__mesh__cfg__hb__sub_1ab18a1da8dc3000446e74f1bdf94e2199" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__cfg__hb__sub_1ab18a1da8dc3000446e74f1bdf94e2199" kindref="member">src</ref>;</highlight></codeline>
<codeline lineno="1025" refid="structbt__mesh__cfg__hb__sub_1aeb21b4293b5faaa54a75c37723267693" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__cfg__hb__sub_1aeb21b4293b5faaa54a75c37723267693" kindref="member">dst</ref>;</highlight></codeline>
<codeline lineno="1031" refid="structbt__mesh__cfg__hb__sub_1ae18701551df5c6cdcca3edb3de6a4ced" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><ref refid="structbt__mesh__cfg__hb__sub_1ae18701551df5c6cdcca3edb3de6a4ced" kindref="member">period</ref>;</highlight></codeline>
<codeline lineno="1039" refid="structbt__mesh__cfg__hb__sub_1a6e3b80564756c713e16ae1a8f400f836" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><ref refid="structbt__mesh__cfg__hb__sub_1a6e3b80564756c713e16ae1a8f400f836" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="1047" refid="structbt__mesh__cfg__hb__sub_1a63408b5e9ce1a52ed8511dd3c1b21645" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><ref refid="structbt__mesh__cfg__hb__sub_1a63408b5e9ce1a52ed8511dd3c1b21645" kindref="member">min</ref>;</highlight></codeline>
<codeline lineno="1055" refid="structbt__mesh__cfg__hb__sub_1abf4aeebc93a9929cbc9bf647400cdaf8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><ref refid="structbt__mesh__cfg__hb__sub_1abf4aeebc93a9929cbc9bf647400cdaf8" kindref="member">max</ref>;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073" refid="group__bt__mesh__cfg__cli_1ga721707c829de55faad62b9bc89f9e10c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga721707c829de55faad62b9bc89f9e10c" kindref="member">bt_mesh_cfg_hb_sub_set</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__cfg__hb__sub" kindref="compound">bt_mesh_cfg_hb_sub</ref><sp/>*sub,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089" refid="group__bt__mesh__cfg__cli_1gacd84c9ce276b2fab44f0d9680d53eacb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1gacd84c9ce276b2fab44f0d9680d53eacb" kindref="member">bt_mesh_cfg_hb_sub_get</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__cfg__hb__sub" kindref="compound">bt_mesh_cfg_hb_sub</ref><sp/>*sub,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093" refid="structbt__mesh__cfg__hb__pub" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__cfg__hb__pub" kindref="compound">bt_mesh_cfg_hb_pub</ref><sp/>{</highlight></codeline>
<codeline lineno="1095" refid="structbt__mesh__cfg__hb__pub_1a4e4a59320a39188613072abe08943770" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__cfg__hb__pub_1a4e4a59320a39188613072abe08943770" kindref="member">dst</ref>;</highlight></codeline>
<codeline lineno="1107" refid="structbt__mesh__cfg__hb__pub_1a4cd44003f90980e7cd4918650677078a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><ref refid="structbt__mesh__cfg__hb__pub_1a4cd44003f90980e7cd4918650677078a" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="1113" refid="structbt__mesh__cfg__hb__pub_1ac63cd4c5d8fab83e5886386eb9aa6748" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><ref refid="structbt__mesh__cfg__hb__pub_1ac63cd4c5d8fab83e5886386eb9aa6748" kindref="member">period</ref>;</highlight></codeline>
<codeline lineno="1115" refid="structbt__mesh__cfg__hb__pub_1a6fd4977833238d372f0d74fdfaa852b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><ref refid="structbt__mesh__cfg__hb__pub_1a6fd4977833238d372f0d74fdfaa852b6" kindref="member">ttl</ref>;</highlight></codeline>
<codeline lineno="1122" refid="structbt__mesh__cfg__hb__pub_1adf4ad52ab3a3559202073471d906466b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__cfg__hb__pub_1adf4ad52ab3a3559202073471d906466b" kindref="member">feat</ref>;</highlight></codeline>
<codeline lineno="1124" refid="structbt__mesh__cfg__hb__pub_1aba3db52b27defe18d91fae44fc79bfea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__cfg__hb__pub_1aba3db52b27defe18d91fae44fc79bfea" kindref="member">net_idx</ref>;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144" refid="group__bt__mesh__cfg__cli_1gaea4ae4bb3e316747ddcee19b6fac618b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1gaea4ae4bb3e316747ddcee19b6fac618b" kindref="member">bt_mesh_cfg_hb_pub_set</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__cfg__hb__pub" kindref="compound">bt_mesh_cfg_hb_pub</ref><sp/>*pub,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160" refid="group__bt__mesh__cfg__cli_1ga369ae2f3f2fc1ee1d23aae1cf50f1b48" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga369ae2f3f2fc1ee1d23aae1cf50f1b48" kindref="member">bt_mesh_cfg_hb_pub_get</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__cfg__hb__pub" kindref="compound">bt_mesh_cfg_hb_pub</ref><sp/>*pub,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177" refid="group__bt__mesh__cfg__cli_1gad6a967a655398814337e71ed06d14601" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1gad6a967a655398814337e71ed06d14601" kindref="member">bt_mesh_cfg_mod_sub_del_all</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196" refid="group__bt__mesh__cfg__cli_1ga0d0f0bf1b4a84324654cd48d99a8c482" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga0d0f0bf1b4a84324654cd48d99a8c482" kindref="member">bt_mesh_cfg_mod_sub_del_all_vnd</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>elem_addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>mod_id,</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>cid,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214" refid="group__bt__mesh__cfg__cli_1gad4695e8a3ded22d7db1403b7f5668ebc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1gad4695e8a3ded22d7db1403b7f5668ebc" kindref="member">bt_mesh_cfg_net_key_update</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>key_net_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>net_key[16],</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233" refid="group__bt__mesh__cfg__cli_1gaf18421cbe730e8f546dcafd875646c57" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1gaf18421cbe730e8f546dcafd875646c57" kindref="member">bt_mesh_cfg_app_key_update</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>key_net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>key_app_idx,</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>app_key[16],<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254" refid="group__bt__mesh__cfg__cli_1gae05b3ff71d69b68e162219df71f837d7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1gae05b3ff71d69b68e162219df71f837d7" kindref="member">bt_mesh_cfg_node_identity_set</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>key_net_idx,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>new_identity,</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*identity);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274" refid="group__bt__mesh__cfg__cli_1ga71a1abf2161676acbea45a45d1fc5f52" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga71a1abf2161676acbea45a45d1fc5f52" kindref="member">bt_mesh_cfg_node_identity_get</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>key_net_idx,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*status,</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*identity);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291" refid="group__bt__mesh__cfg__cli_1ga3d74d2c956893cfd248bf44591910762" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga3d74d2c956893cfd248bf44591910762" kindref="member">bt_mesh_cfg_lpn_timeout_get</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>net_idx,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>unicast_addr,<sp/><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/>*polltimeout);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298" refid="group__bt__mesh__cfg__cli_1gaf5262c0a27e4b9249ecf908c259cc7d7" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/><ref refid="group__bt__mesh__cfg__cli_1gaf5262c0a27e4b9249ecf908c259cc7d7" kindref="member">bt_mesh_cfg_cli_timeout_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304" refid="group__bt__mesh__cfg__cli_1ga7e3521ae973dc825422c6dd5f07ef547" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga7e3521ae973dc825422c6dd5f07ef547" kindref="member">bt_mesh_cfg_cli_timeout_set</ref>(<ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312" refid="structbt__mesh__comp__p0" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__comp__p0" kindref="compound">bt_mesh_comp_p0</ref><sp/>{</highlight></codeline>
<codeline lineno="1314" refid="structbt__mesh__comp__p0_1a3ed8f5ac643443bbcca308baff1c539c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__comp__p0_1a3ed8f5ac643443bbcca308baff1c539c" kindref="member">cid</ref>;</highlight></codeline>
<codeline lineno="1316" refid="structbt__mesh__comp__p0_1a009806e046583c99f56d271ecebbb8a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__comp__p0_1a009806e046583c99f56d271ecebbb8a3" kindref="member">pid</ref>;</highlight></codeline>
<codeline lineno="1318" refid="structbt__mesh__comp__p0_1a27d910cdeb7b6b9d038898e3824dfb57" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__comp__p0_1a27d910cdeb7b6b9d038898e3824dfb57" kindref="member">vid</ref>;</highlight></codeline>
<codeline lineno="1320" refid="structbt__mesh__comp__p0_1a32bfead26f338aba892a5459615a65a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__comp__p0_1a32bfead26f338aba892a5459615a65a2" kindref="member">crpl</ref>;</highlight></codeline>
<codeline lineno="1322" refid="structbt__mesh__comp__p0_1a0a44e3778f9d134a5c056ca184c3b527" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__comp__p0_1a0a44e3778f9d134a5c056ca184c3b527" kindref="member">feat</ref>;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*_buf;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328" refid="structbt__mesh__comp__p0__elem" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__comp__p0__elem" kindref="compound">bt_mesh_comp_p0_elem</ref><sp/>{</highlight></codeline>
<codeline lineno="1330" refid="structbt__mesh__comp__p0__elem_1a832cdb0a10d364a048971f59f51e841d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__comp__p0__elem_1a832cdb0a10d364a048971f59f51e841d" kindref="member">loc</ref>;</highlight></codeline>
<codeline lineno="1332" refid="structbt__mesh__comp__p0__elem_1a17f61eab2df28f2031f2fbab28254484" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__comp__p0__elem_1a17f61eab2df28f2031f2fbab28254484" kindref="member">nsig</ref>;</highlight></codeline>
<codeline lineno="1334" refid="structbt__mesh__comp__p0__elem_1a2e1bd3146ebc934e9fab0242a06d5b99" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__comp__p0__elem_1a2e1bd3146ebc934e9fab0242a06d5b99" kindref="member">nvnd</ref>;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*_buf;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362" refid="group__bt__mesh__cfg__cli_1ga1f79d98273a984f1c49b4d5dd5bf8d30" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__cfg__cli_1ga1f79d98273a984f1c49b4d5dd5bf8d30" kindref="member">bt_mesh_comp_p0_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__comp__p0" kindref="compound">bt_mesh_comp_p0</ref><sp/>*comp,</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377" refid="group__bt__mesh__cfg__cli_1gaa6d60ebad6dc4a4f5b022937dbae3120" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__comp__p0__elem" kindref="compound">bt_mesh_comp_p0_elem</ref><sp/>*<ref refid="group__bt__mesh__cfg__cli_1gaa6d60ebad6dc4a4f5b022937dbae3120" kindref="member">bt_mesh_comp_p0_elem_pull</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__comp__p0" kindref="compound">bt_mesh_comp_p0</ref><sp/>*comp,</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__comp__p0__elem" kindref="compound">bt_mesh_comp_p0_elem</ref><sp/>*elem);</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388" refid="group__bt__mesh__cfg__cli_1gac005f52e191c3e5628f063dbc1a19645" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="group__bt__mesh__cfg__cli_1gac005f52e191c3e5628f063dbc1a19645" kindref="member">bt_mesh_comp_p0_elem_mod</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__comp__p0__elem" kindref="compound">bt_mesh_comp_p0_elem</ref><sp/>*elem,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398" refid="group__bt__mesh__cfg__cli_1ga4f656102982961b7bf2e3d3896a2240e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__mod__id__vnd" kindref="compound">bt_mesh_mod_id_vnd</ref><sp/><ref refid="group__bt__mesh__cfg__cli_1ga4f656102982961b7bf2e3d3896a2240e" kindref="member">bt_mesh_comp_p0_elem_mod_vnd</ref>(struct<sp/><ref refid="structbt__mesh__comp__p0__elem" kindref="compound">bt_mesh_comp_p0_elem</ref><sp/>*elem,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__model__op" kindref="compound">bt_mesh_model_op</ref><sp/>bt_mesh_cfg_cli_op[];</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__model__cb" kindref="compound">bt_mesh_model_cb</ref><sp/>bt_mesh_cfg_cli_cb;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_BLUETOOTH_MESH_CFG_CLI_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/bluetooth/mesh/cfg_cli.h"/>
  </compounddef>
</doxygen>
