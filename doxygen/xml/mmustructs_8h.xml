<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="mmustructs_8h" kind="file" language="C++">
    <compoundname>mmustructs.h</compoundname>
    <includes refid="util_8h" local="no">sys/util.h</includes>
    <includes refid="slist_8h" local="no">sys/slist.h</includes>
    <includedby refid="x86_2arch_8h" local="no">include/arch/x86/arch.h</includedby>
    <includedby refid="arch_2x86_2ia32_2thread_8h" local="no">include/arch/x86/ia32/thread.h</includedby>
    <includedby refid="arch_2x86_2intel64_2thread_8h" local="no">include/arch/x86/intel64/thread.h</includedby>
    <includedby refid="arch_2x86_2thread__stack_8h" local="no">include/arch/x86/thread_stack.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/arch/x86/mmustructs.h</label>
        <link refid="mmustructs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="3">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="9">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="8">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/arch/x86/arch.h</label>
        <link refid="x86_2arch_8h"/>
      </node>
      <node id="4">
        <label>include/arch/x86/ia32/arch.h</label>
        <link refid="x86_2ia32_2arch_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/arch/x86/ia32/thread.h</label>
        <link refid="arch_2x86_2ia32_2thread_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>include/arch/x86/intel64/arch.h</label>
        <link refid="x86_2intel64_2arch_8h"/>
      </node>
      <node id="5">
        <label>include/arch/x86/intel64/thread.h</label>
        <link refid="arch_2x86_2intel64_2thread_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/arch/x86/mmustructs.h</label>
        <link refid="mmustructs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>include/arch/x86/thread_stack.h</label>
        <link refid="arch_2x86_2thread__stack_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structarch__mem__domain" prot="public">arch_mem_domain</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__arch-mmu_1ga4a60b63f47f88db455d67c33ef7bb85d" prot="public" static="no">
        <name>ARCH_DATA_PAGE_DIRTY</name>
        <initializer>((<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>)<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(6))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bit indicating the data page, if evicted, will need to be paged out.</para>
<para>Set if the data page was modified since it was last paged out, or if it has never been paged out before. Safe to set this if uncertain.</para>
<para>This bit is undefined if ARCH_DATA_PAGE_LOADED is not set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/mmustructs.h" line="28" column="9"/>
      </memberdef>
      <memberdef kind="define" id="group__arch-mmu_1gae76ce742aca8b4ac12907a2bfce98b0e" prot="public" static="no">
        <name>ARCH_DATA_PAGE_LOADED</name>
        <initializer>((<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>)<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(0))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bit indicating that the data page is loaded into a physical page frame.</para>
<para>If un-set, the data page is paged out or not mapped. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/mmustructs.h" line="29" column="9"/>
      </memberdef>
      <memberdef kind="define" id="group__arch-mmu_1ga38cfc7602d259972cdd0b557ab26c2b4" prot="public" static="no">
        <name>ARCH_DATA_PAGE_ACCESSED</name>
        <initializer>((<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>)<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(5))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bit indicating the data page was accessed since the value was last cleared.</para>
<para>Used by marking eviction algorithms. Safe to set this if uncertain.</para>
<para>This bit is undefined if ARCH_DATA_PAGE_LOADED is not set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/mmustructs.h" line="30" column="9"/>
      </memberdef>
      <memberdef kind="define" id="group__arch-mmu_1ga843c53394b00d80b1649a6224557a56a" prot="public" static="no">
        <name>ARCH_DATA_PAGE_NOT_MAPPED</name>
        <initializer>((<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>)<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(7))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If ARCH_DATA_PAGE_LOADED is un-set, this will indicate that the page is not mapped at all. This bit is undefined if ARCH_DATA_PAGE_LOADED is set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/mmustructs.h" line="33" column="9"/>
      </memberdef>
      <memberdef kind="define" id="mmustructs_8h_1ab6fb9b9c6c1c968a11ae80bfd70fec26" prot="public" static="no">
        <name>K_MEM_PARTITION_IS_EXECUTABLE</name>
        <param><defname>attr</defname></param>
        <initializer>(((attr) &amp; Z_X86_MMU_XD) == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/mmustructs.h" line="38" column="9" bodyfile="include/arch/x86/mmustructs.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mmustructs_8h_1a7879968909ce2f0e33763ae1e2fc9d84" prot="public" static="no">
        <name>K_MEM_PARTITION_IS_WRITABLE</name>
        <param><defname>attr</defname></param>
        <initializer>(((attr) &amp; Z_X86_MMU_RW) != 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/mmustructs.h" line="39" column="9" bodyfile="include/arch/x86/mmustructs.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mmustructs_8h_1a9b7cc3c51f518517031d76807470aa10" prot="public" static="no">
        <name>K_MEM_PARTITION_P_RW_U_RW</name>
        <initializer>					 (Z_X86_MMU_RW | Z_X86_MMU_US | \
					 Z_X86_MMU_XD)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/mmustructs.h" line="42" column="9" bodyfile="include/arch/x86/mmustructs.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mmustructs_8h_1a3c52d13e42a66beb72d088ac56388951" prot="public" static="no">
        <name>K_MEM_PARTITION_P_RW_U_NA</name>
        <initializer>(Z_X86_MMU_RW | Z_X86_MMU_XD)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/mmustructs.h" line="44" column="9" bodyfile="include/arch/x86/mmustructs.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mmustructs_8h_1a708338371e91b5a3f2d44f9ae48849db" prot="public" static="no">
        <name>K_MEM_PARTITION_P_RO_U_RO</name>
        <initializer>(Z_X86_MMU_US | Z_X86_MMU_XD)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/mmustructs.h" line="45" column="9" bodyfile="include/arch/x86/mmustructs.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mmustructs_8h_1a706eaa9c515f1cc859d97ef8455b2f2f" prot="public" static="no">
        <name>K_MEM_PARTITION_P_RO_U_NA</name>
        <initializer>Z_X86_MMU_XD</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/mmustructs.h" line="46" column="9" bodyfile="include/arch/x86/mmustructs.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mmustructs_8h_1a29db5fb48087c0cae596ff212989ed24" prot="public" static="no">
        <name>K_MEM_PARTITION_P_RWX_U_RWX</name>
        <initializer>(Z_X86_MMU_RW | Z_X86_MMU_US)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/mmustructs.h" line="48" column="9" bodyfile="include/arch/x86/mmustructs.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mmustructs_8h_1aa0ab658a70fe849f2460638602614b3a" prot="public" static="no">
        <name>K_MEM_PARTITION_P_RWX_U_NA</name>
        <initializer>Z_X86_MMU_RW</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/mmustructs.h" line="49" column="9" bodyfile="include/arch/x86/mmustructs.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mmustructs_8h_1a78f9b21aa8b5c894db28328f5a1e2641" prot="public" static="no">
        <name>K_MEM_PARTITION_P_RX_U_RX</name>
        <initializer>Z_X86_MMU_US</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/mmustructs.h" line="50" column="9" bodyfile="include/arch/x86/mmustructs.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mmustructs_8h_1abaedfd0ca98ddfcb6bd84cba94f9cd71" prot="public" static="no">
        <name>K_MEM_PARTITION_P_RX_U_NA</name>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/mmustructs.h" line="51" column="9" bodyfile="include/arch/x86/mmustructs.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mmustructs_8h_1afc94aaf30fa1dd56ba58d67c07cd2b71" prot="public" static="no">
        <name>K_MEM_PARTITION_PERM_MASK</name>
        <initializer>					 (Z_X86_MMU_RW | Z_X86_MMU_US | \
					 Z_X86_MMU_XD)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/mmustructs.h" line="53" column="9" bodyfile="include/arch/x86/mmustructs.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="mmustructs_8h_1af1ea6e187a2f90056a06f7536a9dc3ae" prot="public" static="no">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>typedef uint32_t pentry_t</definition>
        <argsstring></argsstring>
        <name>pentry_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/mmustructs.h" line="65" column="18" bodyfile="include/arch/x86/mmustructs.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mmustructs_8h_1a2c21ed95c62d70b5abc48fa6d6acb849" prot="public" static="no">
        <type><ref refid="mmustructs_8h_1af1ea6e187a2f90056a06f7536a9dc3ae" kindref="member">pentry_t</ref></type>
        <definition>typedef pentry_t k_mem_partition_attr_t</definition>
        <argsstring></argsstring>
        <name>k_mem_partition_attr_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/mmustructs.h" line="67" column="18" bodyfile="include/arch/x86/mmustructs.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2011-2014<sp/>Wind<sp/>River<sp/>Systems,<sp/>Inc.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2020<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_ARCH_X86_MMU_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_ARCH_X86_MMU_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="util_8h" kindref="compound">sys/util.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>K_MEM_PARTITION_*<sp/>defines</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>Slated<sp/>for<sp/>removal<sp/>when<sp/>virtual<sp/>memory<sp/>is<sp/>implemented,<sp/>memory</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>mapping<sp/>APIs<sp/>will<sp/>replace<sp/>memory<sp/>domains.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_X86_MMU_RW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT64(1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_X86_MMU_US<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT64(2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_X86_PAE)<sp/>||<sp/>defined(CONFIG_X86_64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_X86_MMU_XD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT64(63)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_X86_MMU_XD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>these<sp/>we&apos;ll<sp/>just<sp/>use<sp/>the<sp/>same<sp/>bits<sp/>in<sp/>the<sp/>PTE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARCH_DATA_PAGE_DIRTY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uintptr_t)BIT(6))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARCH_DATA_PAGE_LOADED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uintptr_t)BIT(0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARCH_DATA_PAGE_ACCESSED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uintptr_t)BIT(5))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Use<sp/>an<sp/>PAT<sp/>bit<sp/>for<sp/>this<sp/>one<sp/>since<sp/>it&apos;s<sp/>never<sp/>set<sp/>in<sp/>a<sp/>mapped<sp/>PTE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARCH_DATA_PAGE_NOT_MAPPED<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uintptr_t)BIT(7))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Always<sp/>true<sp/>with<sp/>32-bit<sp/>page<sp/>tables,<sp/>don&apos;t<sp/>enable</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>CONFIG_EXECUTE_XOR_WRITE<sp/>and<sp/>expect<sp/>it<sp/>to<sp/>work<sp/>for<sp/>you</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="mmustructs_8h_1ab6fb9b9c6c1c968a11ae80bfd70fec26" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_MEM_PARTITION_IS_EXECUTABLE(attr)<sp/><sp/><sp/><sp/><sp/>(((attr)<sp/>&amp;<sp/>Z_X86_MMU_XD)<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="mmustructs_8h_1a7879968909ce2f0e33763ae1e2fc9d84" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_MEM_PARTITION_IS_WRITABLE(attr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((attr)<sp/>&amp;<sp/>Z_X86_MMU_RW)<sp/>!=<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>memory<sp/>partition<sp/>arch/soc<sp/>independent<sp/>attribute<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="mmustructs_8h_1a9b7cc3c51f518517031d76807470aa10" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_MEM_PARTITION_P_RW_U_RW<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Z_X86_MMU_RW<sp/>|<sp/>Z_X86_MMU_US<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_X86_MMU_XD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="mmustructs_8h_1a3c52d13e42a66beb72d088ac56388951" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_MEM_PARTITION_P_RW_U_NA<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Z_X86_MMU_RW<sp/>|<sp/>Z_X86_MMU_XD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="mmustructs_8h_1a708338371e91b5a3f2d44f9ae48849db" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_MEM_PARTITION_P_RO_U_RO<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Z_X86_MMU_US<sp/>|<sp/>Z_X86_MMU_XD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="mmustructs_8h_1a706eaa9c515f1cc859d97ef8455b2f2f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_MEM_PARTITION_P_RO_U_NA<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_X86_MMU_XD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Execution-allowed<sp/>attributes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="mmustructs_8h_1a29db5fb48087c0cae596ff212989ed24" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_MEM_PARTITION_P_RWX_U_RWX<sp/><sp/><sp/><sp/><sp/>(Z_X86_MMU_RW<sp/>|<sp/>Z_X86_MMU_US)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="mmustructs_8h_1aa0ab658a70fe849f2460638602614b3a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_MEM_PARTITION_P_RWX_U_NA<sp/><sp/><sp/><sp/><sp/><sp/>Z_X86_MMU_RW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="mmustructs_8h_1a78f9b21aa8b5c894db28328f5a1e2641" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_MEM_PARTITION_P_RX_U_RX<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_X86_MMU_US</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="mmustructs_8h_1abaedfd0ca98ddfcb6bd84cba94f9cd71" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_MEM_PARTITION_P_RX_U_NA<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>memory<sp/>partition<sp/>access<sp/>permission<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="mmustructs_8h_1afc94aaf30fa1dd56ba58d67c07cd2b71" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_MEM_PARTITION_PERM_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Z_X86_MMU_RW<sp/>|<sp/>Z_X86_MMU_US<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_X86_MMU_XD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_ASMLANGUAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="slist_8h" kindref="compound">sys/slist.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Page<sp/>table<sp/>entry<sp/>data<sp/>type<sp/>at<sp/>all<sp/>levels.<sp/>Defined<sp/>here<sp/>due<sp/>to</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>k_mem_partition_attr_t,<sp/>eventually<sp/>move<sp/>to<sp/>private<sp/>x86_mmu.h</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_X86_64)<sp/>||<sp/>defined(CONFIG_X86_PAE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="mmustructs_8h_1af1ea6e187a2f90056a06f7536a9dc3ae" kindref="member">pentry_t</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="mmustructs_8h_1af1ea6e187a2f90056a06f7536a9dc3ae" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="mmustructs_8h_1af1ea6e187a2f90056a06f7536a9dc3ae" kindref="member">pentry_t</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="mmustructs_8h_1a2c21ed95c62d70b5abc48fa6d6acb849" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="mmustructs_8h_1af1ea6e187a2f90056a06f7536a9dc3ae" kindref="member">pentry_t</ref><sp/><ref refid="mmustructs_8h_1a2c21ed95c62d70b5abc48fa6d6acb849" kindref="member">k_mem_partition_attr_t</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarch__mem__domain" kindref="compound">arch_mem_domain</ref><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_X86_PAE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>4-entry,<sp/>32-byte<sp/>top-level<sp/>PDPT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mmustructs_8h_1af1ea6e187a2f90056a06f7536a9dc3ae" kindref="member">pentry_t</ref><sp/>pdpt[4];</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pointer<sp/>to<sp/>top-level<sp/>structure,<sp/>either<sp/>a<sp/>PML4,<sp/>PDPT,<sp/>PD<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="structarch__mem__domain_1a6807078806451f4512078917e76c52b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mmustructs_8h_1af1ea6e187a2f90056a06f7536a9dc3ae" kindref="member">pentry_t</ref><sp/>*<ref refid="structarch__mem__domain_1a6807078806451f4512078917e76c52b6" kindref="member">ptables</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Linked<sp/>list<sp/>of<sp/>all<sp/>active<sp/>memory<sp/>domains<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref><sp/><ref refid="structarch__mem__domain_1a0929bee2d20221e55c0fa05ca321c9d5" kindref="member">node</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_X86_PAE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">}<sp/>__aligned(32);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_X86_PAE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_ASMLANGUAGE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_ARCH_X86_MMU_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/arch/x86/mmustructs.h"/>
  </compounddef>
</doxygen>
