<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__ethernet" kind="group">
    <compoundname>ethernet</compoundname>
    <title>Ethernet Support Functions</title>
    <innerclass refid="structethernet__qav__param" prot="public">ethernet_qav_param</innerclass>
    <innerclass refid="structethernet__qbv__param" prot="public">ethernet_qbv_param</innerclass>
    <innerclass refid="structethernet__qbu__param" prot="public">ethernet_qbu_param</innerclass>
    <innerclass refid="structethernet__filter" prot="public">ethernet_filter</innerclass>
    <innerclass refid="structethernet__txtime__param" prot="public">ethernet_txtime_param</innerclass>
    <innerclass refid="structethernet__api" prot="public">ethernet_api</innerclass>
    <innerclass refid="structethernet__context" prot="public">ethernet_context</innerclass>
    <innergroup refid="group__ethernet__mii">Ethernet MII Support Functions</innergroup>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__ethernet_1ga9162ff11d626813fc840df0b67820ac5" prot="public" static="no" strong="no">
        <type></type>
        <name>ethernet_hw_caps</name>
        <enumvalue id="group__ethernet_1gga9162ff11d626813fc840df0b67820ac5aefaa7e72a676d6b1ad570a96be1a3861" prot="public">
          <name>ETHERNET_HW_TX_CHKSUM_OFFLOAD</name>
          <initializer>= BIT(0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>TX Checksum offloading supported for all of IPv4, UDP, TCP </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ethernet_1gga9162ff11d626813fc840df0b67820ac5a8341893ee775dca3609ce1316d948e33" prot="public">
          <name>ETHERNET_HW_RX_CHKSUM_OFFLOAD</name>
          <initializer>= BIT(1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RX Checksum offloading supported for all of IPv4, UDP, TCP </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ethernet_1gga9162ff11d626813fc840df0b67820ac5a0bdf56b7f06fa68125bce800f9adfb95" prot="public">
          <name>ETHERNET_HW_VLAN</name>
          <initializer>= BIT(2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>VLAN supported </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ethernet_1gga9162ff11d626813fc840df0b67820ac5a93c074b73420abed7d1f59f231da990a" prot="public">
          <name>ETHERNET_AUTO_NEGOTIATION_SET</name>
          <initializer>= BIT(3)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enabling/disabling auto negotiation supported </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ethernet_1gga9162ff11d626813fc840df0b67820ac5a26084acbb9f8c65fdb427c7d8b9b4fb6" prot="public">
          <name>ETHERNET_LINK_10BASE_T</name>
          <initializer>= BIT(4)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>10 Mbits link supported </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ethernet_1gga9162ff11d626813fc840df0b67820ac5a6fc62894c7ebe8697f1c45f4fc54ed3e" prot="public">
          <name>ETHERNET_LINK_100BASE_T</name>
          <initializer>= BIT(5)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>100 Mbits link supported </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ethernet_1gga9162ff11d626813fc840df0b67820ac5a885ef0a35e462efa43e59c2f625964b8" prot="public">
          <name>ETHERNET_LINK_1000BASE_T</name>
          <initializer>= BIT(6)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1 Gbits link supported </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ethernet_1gga9162ff11d626813fc840df0b67820ac5a1e37eeba16e05b12580e5eacd36a25cc" prot="public">
          <name>ETHERNET_DUPLEX_SET</name>
          <initializer>= BIT(7)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Changing duplex (half/full) supported </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ethernet_1gga9162ff11d626813fc840df0b67820ac5a604198d571bf2c4e7227bdeaefc2868a" prot="public">
          <name>ETHERNET_PTP</name>
          <initializer>= BIT(8)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IEEE 802.1AS (gPTP) clock supported </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ethernet_1gga9162ff11d626813fc840df0b67820ac5a7ec920ceb8cfba6424040079d6eeef42" prot="public">
          <name>ETHERNET_QAV</name>
          <initializer>= BIT(9)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IEEE 802.1Qav (credit-based shaping) supported </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ethernet_1gga9162ff11d626813fc840df0b67820ac5ad040f4a5749f66a377b840a4da8fb64d" prot="public">
          <name>ETHERNET_PROMISC_MODE</name>
          <initializer>= BIT(10)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Promiscuous mode supported </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ethernet_1gga9162ff11d626813fc840df0b67820ac5a1e32518640964a73d4154ed8bc527475" prot="public">
          <name>ETHERNET_PRIORITY_QUEUES</name>
          <initializer>= BIT(11)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Priority queues available </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ethernet_1gga9162ff11d626813fc840df0b67820ac5a50d1e4418926b586f6b50acd828f57fe" prot="public">
          <name>ETHERNET_HW_FILTERING</name>
          <initializer>= BIT(12)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>MAC address filtering supported </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ethernet_1gga9162ff11d626813fc840df0b67820ac5a8da4ebc3e888ac358f88aa9671e732c2" prot="public">
          <name>ETHERNET_LLDP</name>
          <initializer>= BIT(13)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Link Layer Discovery Protocol supported </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ethernet_1gga9162ff11d626813fc840df0b67820ac5a1f33c56862228a647b583ae7e0605ac5" prot="public">
          <name>ETHERNET_HW_VLAN_TAG_STRIP</name>
          <initializer>= BIT(14)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>VLAN Tag stripping </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ethernet_1gga9162ff11d626813fc840df0b67820ac5a77fe3d1049f9295102f3f2863df84dd7" prot="public">
          <name>ETHERNET_DSA_SLAVE_PORT</name>
          <initializer>= BIT(15)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DSA switch </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ethernet_1gga9162ff11d626813fc840df0b67820ac5a762faf9045477a959e9ec11ce099a883" prot="public">
          <name>ETHERNET_DSA_MASTER_PORT</name>
          <initializer>= BIT(16)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ethernet_1gga9162ff11d626813fc840df0b67820ac5acf17cbf803c3a0fe858ef939ccfe3b85" prot="public">
          <name>ETHERNET_QBV</name>
          <initializer>= BIT(17)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IEEE 802.1Qbv (scheduled traffic) supported </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ethernet_1gga9162ff11d626813fc840df0b67820ac5a68e30ff24a3eb75def8e154ac00dea08" prot="public">
          <name>ETHERNET_QBU</name>
          <initializer>= BIT(18)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IEEE 802.1Qbu (frame preemption) supported </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ethernet_1gga9162ff11d626813fc840df0b67820ac5ac72ff66c3172da29ec9fefad7593ffd2" prot="public">
          <name>ETHERNET_TXTIME</name>
          <initializer>= BIT(19)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>TXTIME supported </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ethernet hardware capabilities </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="113" column="1" bodyfile="include/net/ethernet.h" bodystart="113" bodyend="171"/>
      </memberdef>
      <memberdef kind="enum" id="group__ethernet_1ga97d926fe9e96a1205b00b808120dda88" prot="public" static="no" strong="no">
        <type></type>
        <name>ethernet_flags</name>
        <enumvalue id="group__ethernet_1gga97d926fe9e96a1205b00b808120dda88ae630377e05a087a99649647593c38135" prot="public">
          <name>ETH_CARRIER_UP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="510" column="1" bodyfile="include/net/ethernet.h" bodystart="510" bodyend="512"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__ethernet_1gacd67360df806183cbc15159b0480bfa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ethernet_init</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>ethernet_init</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Initialize Ethernet L2 stack for a given interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to a network interface </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="600" column="6" declfile="include/net/ethernet.h" declline="600" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ethernet_1gae3ce2bd669391071635f5709d1c3cd8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_eth_ipv4_mcast_to_mac_addr</definition>
        <argsstring>(const struct in_addr *ipv4_addr, struct net_eth_addr *mac_addr)</argsstring>
        <name>net_eth_ipv4_mcast_to_mac_addr</name>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>ipv4_addr</declname>
        </param>
        <param>
          <type>struct net_eth_addr *</type>
          <declname>mac_addr</declname>
        </param>
        <briefdescription>
<para>Convert IPv4 multicast address to Ethernet address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ipv4_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 multicast address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mac_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Output buffer for Ethernet address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="694" column="6" declfile="include/net/ethernet.h" declline="694" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ethernet_1gaa08d5237c26e8c05748d58eb65b15c2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_eth_ipv6_mcast_to_mac_addr</definition>
        <argsstring>(const struct in6_addr *ipv6_addr, struct net_eth_addr *mac_addr)</argsstring>
        <name>net_eth_ipv6_mcast_to_mac_addr</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>ipv6_addr</declname>
        </param>
        <param>
          <type>struct net_eth_addr *</type>
          <declname>mac_addr</declname>
        </param>
        <briefdescription>
<para>Convert IPv6 multicast address to Ethernet address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ipv6_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 multicast address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mac_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Output buffer for Ethernet address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="703" column="6" declfile="include/net/ethernet.h" declline="703" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ethernet_1gab0a3b4584bb6ce1d27b98b063fd3fcbd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>enum <ref refid="group__ethernet_1ga9162ff11d626813fc840df0b67820ac5" kindref="member">ethernet_hw_caps</ref></type>
        <definition>static enum ethernet_hw_caps net_eth_get_hw_capabilities</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_eth_get_hw_capabilities</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Return ethernet device hardware capability information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Hardware capabilities </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="714" column="22" bodyfile="include/net/ethernet.h" bodystart="714" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="group__ethernet_1ga16cbc14e3a0a470bbbd5aeb5e73dc1de" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int net_eth_vlan_enable</definition>
        <argsstring>(struct net_if *iface, uint16_t tag)</argsstring>
        <name>net_eth_vlan_enable</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Add VLAN tag to the interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>VLAN tag to add</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="737" column="19" bodyfile="include/net/ethernet.h" bodystart="737" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="group__ethernet_1gab71a741cea5f645f4354a1abc9c95a50" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int net_eth_vlan_disable</definition>
        <argsstring>(struct net_if *iface, uint16_t tag)</argsstring>
        <name>net_eth_vlan_disable</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Remove VLAN tag from the interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>VLAN tag to remove</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="754" column="19" bodyfile="include/net/ethernet.h" bodystart="754" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="group__ethernet_1ga6184c43a62e4af9958412f99991358c9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>static uint16_t net_eth_get_vlan_tag</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_eth_get_vlan_tag</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Return VLAN tag specified to network interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>VLAN tag for this interface or NET_VLAN_TAG_UNSPEC if VLAN is not configured for that interface. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="771" column="24" bodyfile="include/net/ethernet.h" bodystart="771" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="group__ethernet_1gad9d890dcf7f5ee3659bf3bd5949faa4e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
        <definition>static struct net_if * net_eth_get_vlan_iface</definition>
        <argsstring>(struct net_if *iface, uint16_t tag)</argsstring>
        <name>net_eth_get_vlan_iface</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Return network interface related to this VLAN tag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Master network interface. This is used to get the pointer to ethernet L2 context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>VLAN tag</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Network interface related to this tag or NULL if no such interface exists. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="791" column="13" bodyfile="include/net/ethernet.h" bodystart="791" bodyend="794"/>
      </memberdef>
      <memberdef kind="function" id="group__ethernet_1gac536aa7154c4a8d194ec67efb68e275c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_eth_is_vlan_enabled</definition>
        <argsstring>(struct ethernet_context *ctx, struct net_if *iface)</argsstring>
        <name>net_eth_is_vlan_enabled</name>
        <param>
          <type>struct <ref refid="structethernet__context" kindref="compound">ethernet_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Check if VLAN is enabled for a specific network interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Ethernet context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if VLAN is enabled for this network interface, false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="809" column="20" bodyfile="include/net/ethernet.h" bodystart="809" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="group__ethernet_1ga78aad58ec66710034cab8891ad638a2c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_eth_get_vlan_status</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_eth_get_vlan_status</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Get VLAN status for a given network interface (enabled or not). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if VLAN is enabled for this network interface, false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="826" column="20" bodyfile="include/net/ethernet.h" bodystart="826" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="group__ethernet_1gabeb21cb06b18674b73fbd0f42ee726f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_eth_carrier_on</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_eth_carrier_on</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Inform ethernet L2 driver that ethernet carrier is detected. This happens when cable is connected. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="922" column="6" declfile="include/net/ethernet.h" declline="922" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ethernet_1ga4dcf5047108b509e349b02fe35c10d75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_eth_carrier_off</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_eth_carrier_off</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Inform ethernet L2 driver that ethernet carrier was lost. This happens when cable is disconnected. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="930" column="6" declfile="include/net/ethernet.h" declline="930" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ethernet_1ga42a3c6b04ef8827e3443c5aebe5541b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_eth_promisc_mode</definition>
        <argsstring>(struct net_if *iface, bool enable)</argsstring>
        <name>net_eth_promisc_mode</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Set promiscuous mode either ON or OFF. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>on (true) or off (false)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if mode set or unset was successful, &lt;0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="941" column="5" declfile="include/net/ethernet.h" declline="941" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__ethernet_1ga37ff48434c56bbb24422dd805449b6f3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
        <definition>static const struct device * net_eth_get_ptp_clock</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_eth_get_ptp_clock</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Return PTP clock that is tied to this ethernet network interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to PTP clock if found, NULL if not found or if this ethernet interface does not support PTP. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="954" column="33" bodyfile="include/net/ethernet.h" bodystart="954" bodyend="959"/>
      </memberdef>
      <memberdef kind="function" id="group__ethernet_1ga84c37db5687c5264bec99976a1108ab6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
        <definition>const struct device * net_eth_get_ptp_clock_by_index</definition>
        <argsstring>(int index)</argsstring>
        <name>net_eth_get_ptp_clock_by_index</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return PTP clock that is tied to this ethernet network interface index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to PTP clock if found, NULL if not found or if this ethernet interface index does not support PTP. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="971" column="20" declfile="include/net/ethernet.h" declline="971" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__ethernet_1ga37c5d1d5d534c6d024b060ae54bbd82a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int net_eth_get_ptp_port</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_eth_get_ptp_port</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Return PTP port number attached to this interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Port number, no such port if &lt; 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="983" column="19" bodyfile="include/net/ethernet.h" bodystart="983" bodyend="988"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__ethernet_1ga43ad751181ec053771801fd444d25526" prot="public" static="no">
        <name>ETH_NET_DEVICE_INIT</name>
        <param><defname>dev_name</defname></param>
        <param><defname>drv_name</defname></param>
        <param><defname>init_fn</defname></param>
        <param><defname>pm_action_cb</defname></param>
        <param><defname>data</defname></param>
        <param><defname>cfg</defname></param>
        <param><defname>prio</defname></param>
        <param><defname>api</defname></param>
        <param><defname>mtu</defname></param>
        <initializer>	Z_ETH_NET_DEVICE_INIT(<ref refid="group__devicetree-generic-id_1ga710cc4455dd7e738f43f750153163855" kindref="member">DT_INVALID_NODE</ref>, dev_name, drv_name,	\
			      init_fn, pm_action_cb, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>, cfg, prio,	\
			      api, mtu)</initializer>
        <briefdescription>
<para>Create an Ethernet network interface and bind it to network device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Network device name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>drv_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name this instance of the driver exposes to the system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to the init function of the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm_action_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to PM action callback. Can be NULL if not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s private data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>The address to the structure containing the configuration information for this instance of the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization level at which configuration occurs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>api</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides an initial pointer to the API function struct used by the driver. Can be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mtu</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum transfer unit in bytes for this network interface. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="872" column="9" bodyfile="include/net/ethernet.h" bodystart="871" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ethernet_1ga2967f868abe1216096ff260cb6b3b8b4" prot="public" static="no">
        <name>ETH_NET_DEVICE_DT_DEFINE</name>
        <param><defname>node_id</defname></param>
        <param><defname>init_fn</defname></param>
        <param><defname>pm_action_cb</defname></param>
        <param><defname>data</defname></param>
        <param><defname>cfg</defname></param>
        <param><defname>prio</defname></param>
        <param><defname>api</defname></param>
        <param><defname>mtu</defname></param>
        <initializer>	Z_ETH_NET_DEVICE_INIT(node_id, Z_DEVICE_DT_DEV_NAME(node_id),	\
			      <ref refid="group__devicetree-generic-prop_1ga5e5bfc9b1a6627b3f73014329e96340f" kindref="member">DT_PROP_OR</ref>(node_id, label, &quot;&quot;),		\
			      init_fn, pm_action_cb, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>, cfg, prio,	\
			      api, mtu)</initializer>
        <briefdescription>
<para>Like ETH_NET_DEVICE_INIT but taking metadata from a devicetree. Create an Ethernet network interface and bind it to network device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The devicetree node identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to the init function of the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm_action_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to PM action callback. Can be NULL if not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s private data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>The address to the structure containing the configuration information for this instance of the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization level at which configuration occurs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>api</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides an initial pointer to the API function struct used by the driver. Can be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mtu</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum transfer unit in bytes for this network interface. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="896" column="9" bodyfile="include/net/ethernet.h" bodystart="895" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ethernet_1gaecf9f102108836ed9cf7e2cdb3c90579" prot="public" static="no">
        <name>ETH_NET_DEVICE_DT_INST_DEFINE</name>
        <param><defname>inst</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="group__ethernet_1ga2967f868abe1216096ff260cb6b3b8b4" kindref="member">ETH_NET_DEVICE_DT_DEFINE</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), __VA_ARGS__)</initializer>
        <briefdescription>
<para>Like ETH_NET_DEVICE_DT_DEFINE for an instance of a DT_DRV_COMPAT compatible. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number. This is replaced by <computeroutput><ref refid="mmio_8c_1a5d94980d4c538356e9abcf30eb73d1d4" kindref="member">DT_DRV_COMPAT(inst)</ref></computeroutput> in the call to ETH_NET_DEVICE_DT_DEFINE.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>other parameters as expected by ETH_NET_DEVICE_DT_DEFINE. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="913" column="9" bodyfile="include/net/ethernet.h" bodystart="913" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Ethernet support functions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
