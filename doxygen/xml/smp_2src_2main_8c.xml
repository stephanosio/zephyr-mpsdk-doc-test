<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="smp_2src_2main_8c" kind="file" language="C++">
    <compoundname>main.c</compoundname>
    <includes local="no">zephyr.h</includes>
    <includes local="no">tc_util.h</includes>
    <includes refid="ztest_8h" local="no">ztest.h</includes>
    <includes local="no">kernel.h</includes>
    <includes local="no">ksched.h</includes>
    <includes refid="kernel__structs_8h" local="no">kernel_structs.h</includes>
    <incdepgraph>
      <node id="18">
        <label>app_memory/app_memdomain.h</label>
        <link refid="app__memdomain_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>app_memory/mem_domain.h</label>
        <link refid="mem__domain_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>arch/arch_inlines.h</label>
        <link refid="arch__inlines_8h"/>
      </node>
      <node id="67">
        <label>arch/cpu.h</label>
        <link refid="include_2arch_2cpu_8h"/>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>arch/structs.h</label>
        <link refid="structs_8h"/>
      </node>
      <node id="66">
        <label>arch/syscall.h</label>
        <link refid="arch_2syscall_8h"/>
      </node>
      <node id="30">
        <label>devicetree.h</label>
        <link refid="devicetree_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>devicetree/clocks.h</label>
        <link refid="clocks_8h"/>
      </node>
      <node id="37">
        <label>devicetree/dma.h</label>
        <link refid="devicetree_2dma_8h"/>
      </node>
      <node id="39">
        <label>devicetree/fixed-partitions.h</label>
        <link refid="fixed-partitions_8h"/>
      </node>
      <node id="35">
        <label>devicetree/gpio.h</label>
        <link refid="devicetree_2gpio_8h"/>
      </node>
      <node id="33">
        <label>devicetree/io-channels.h</label>
        <link refid="io-channels_8h"/>
      </node>
      <node id="41">
        <label>devicetree/ordinals.h</label>
        <link refid="ordinals_8h"/>
      </node>
      <node id="42">
        <label>devicetree/pinctrl.h</label>
        <link refid="devicetree_2pinctrl_8h"/>
      </node>
      <node id="38">
        <label>devicetree/pwms.h</label>
        <link refid="pwms_8h"/>
      </node>
      <node id="36">
        <label>devicetree/spi.h</label>
        <link refid="devicetree_2spi_8h"/>
      </node>
      <node id="40">
        <label>devicetree/zephyr.h</label>
        <link refid="devicetree_2zephyr_8h"/>
      </node>
      <node id="76">
        <label>fatal.h</label>
        <link refid="fatal_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>init.h</label>
        <link refid="init_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>irq_offload.h</label>
        <link refid="irq__offload_8h"/>
      </node>
      <node id="46">
        <label>kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>kernel/mempool_heap.h</label>
        <link refid="mempool__heap_8h"/>
      </node>
      <node id="52">
        <label>kernel/sched_priq.h</label>
        <link refid="sched__priq_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>kernel/stats.h</label>
        <link refid="kernel_2stats_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>kernel/thread.h</label>
        <link refid="kernel_2thread_8h"/>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>kernel/thread_stack.h</label>
        <link refid="kernel_2thread__stack_8h"/>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>kernel_includes.h</label>
        <link refid="kernel__includes_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>kernel_structs.h</label>
        <link refid="kernel__structs_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>kernel_version.h</label>
        <link refid="kernel__version_8h"/>
      </node>
      <node id="29">
        <label>linker/devicetree_reserved.h</label>
        <link refid="devicetree__reserved_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>linker/linker-defs.h</label>
        <link refid="linker-defs_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>linker/section_tags.h</label>
        <link refid="section__tags_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>linker/sections.h</label>
        <link refid="sections_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>sys/arch_interface.h</label>
        <link refid="arch__interface_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="43">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>sys/kobject.h</label>
        <link refid="include_2sys_2kobject_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>sys/rb.h</label>
        <link refid="rb_8h"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>sys/sflist.h</label>
        <link refid="sflist_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>sys/sys_heap.h</label>
        <link refid="sys__heap_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>sys/time_units.h</label>
        <link refid="time__units_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="24">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>sys_clock.h</label>
        <link refid="include_2sys__clock_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>timing/types.h</label>
        <link refid="include_2timing_2types_8h"/>
      </node>
      <node id="6">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="20">
        <label>toolchain/common.h</label>
        <link refid="common_8h"/>
      </node>
      <node id="87">
        <label>tracing/tracing.h</label>
        <link refid="tracing_2tracing_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>tracing/tracing_macros.h</label>
        <link refid="tracing__macros_8h"/>
      </node>
      <node id="88">
        <label>tracking.h</label>
        <link refid="tracking_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="14">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="10">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="12">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>offsets.h</label>
        <link refid="offsets_8h"/>
      </node>
      <node id="65">
        <label>syscall_list.h</label>
        <link refid="syscall__list_8h"/>
      </node>
      <node id="89">
        <label>syscalls/kernel.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kernel_8h"/>
      </node>
      <node id="82">
        <label>syscalls/kobject.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kobject_8h"/>
      </node>
      <node id="4">
        <label>ztest.h</label>
        <link refid="ztest_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>ztest_assert.h</label>
        <link refid="ztest__assert_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>ztest_mock.h</label>
        <link refid="ztest__mock_8h"/>
      </node>
      <node id="16">
        <label>ztest_test.h</label>
        <link refid="ztest__test_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ztest_test_deprecated.h</label>
        <link refid="ztest__test__deprecated_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/kernel/smp/src/main.c</label>
        <link refid="smp_2src_2main_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>alloca.h</label>
      </node>
      <node id="69">
        <label>arch/cpu.h</label>
      </node>
      <node id="32">
        <label>devicetree_fixups.h</label>
      </node>
      <node id="31">
        <label>devicetree_unfixed.h</label>
      </node>
      <node id="44">
        <label>kernel.h</label>
      </node>
      <node id="91">
        <label>ksched.h</label>
      </node>
      <node id="8">
        <label>stdarg.h</label>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
      <node id="85">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="90">
        <label>syscalls/ztest_test.h</label>
      </node>
      <node id="3">
        <label>tc_util.h</label>
      </node>
      <node id="2">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structthread__info" prot="public">thread_info</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="smp_2src_2main_8c_1ab5dfd814ed332800adaf63eaf3714f85" prot="public" static="no">
        <name>T2_STACK_SIZE</name>
        <initializer>(2048 + CONFIG_TEST_EXTRA_STACKSIZE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="18" column="9" bodyfile="tests/kernel/smp/src/main.c" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="smp_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" prot="public" static="no">
        <name>STACK_SIZE</name>
        <initializer>(384 + CONFIG_TEST_EXTRA_STACKSIZE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="19" column="9" bodyfile="tests/kernel/smp/src/main.c" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="smp_2src_2main_8c_1a1a522aa19bcb695a9df30032a893bee3" prot="public" static="no">
        <name>DELAY_US</name>
        <initializer>50000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="20" column="9" bodyfile="tests/kernel/smp/src/main.c" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="smp_2src_2main_8c_1a45ba202b05caf39795aeca91b0ae547e" prot="public" static="no">
        <name>TIMEOUT</name>
        <initializer>1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="21" column="9" bodyfile="tests/kernel/smp/src/main.c" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="smp_2src_2main_8c_1a5d334d83634ea28cf50efd843d38a654" prot="public" static="no">
        <name>EQUAL_PRIORITY</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="22" column="9" bodyfile="tests/kernel/smp/src/main.c" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="smp_2src_2main_8c_1a59ba49b2027830119db2900f521945b2" prot="public" static="no">
        <name>TIME_SLICE_MS</name>
        <initializer>500</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="23" column="9" bodyfile="tests/kernel/smp/src/main.c" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="smp_2src_2main_8c_1a0757d7e446273d7c89da517339ca8ad5" prot="public" static="no">
        <name>THREAD_DELAY</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="24" column="9" bodyfile="tests/kernel/smp/src/main.c" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="smp_2src_2main_8c_1ae0777ae4bbbd765657bf190bf02f8618" prot="public" static="no">
        <name>SLEEP_MS_LONG</name>
        <initializer>15000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="25" column="9" bodyfile="tests/kernel/smp/src/main.c" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" prot="public" static="no">
        <name>THREADS_NUM</name>
        <initializer><ref refid="ztest_8h_1a3377b833b4a581e2ccf3a48ac31d18fe" kindref="member">CONFIG_MP_NUM_CPUS</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="42" column="9" bodyfile="tests/kernel/smp/src/main.c" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="smp_2src_2main_8c_1a09002b61ad87b03f8a39b3c7f9a7296b" prot="public" static="no">
        <name>LOOP_COUNT</name>
        <initializer>20000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="794" column="9" bodyfile="tests/kernel/smp/src/main.c" bodystart="794" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="smp_2src_2main_8c_1aa2dbbcba64b87654ad46b6ceb1187c9d" prot="public" static="no" strong="no">
        <type></type>
        <name>sync_t</name>
        <enumvalue id="smp_2src_2main_8c_1aa2dbbcba64b87654ad46b6ceb1187c9dab65c216aafb3dddd64c01523bc2fdbc6" prot="public">
          <name>LOCK_IRQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="smp_2src_2main_8c_1aa2dbbcba64b87654ad46b6ceb1187c9daf7b8d42f5d5f260f07575c89459ceb0d" prot="public">
          <name>LOCK_SEM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="smp_2src_2main_8c_1aa2dbbcba64b87654ad46b6ceb1187c9dae9c43485610e3b1202c04f36655c52b8" prot="public">
          <name>LOCK_MUTEX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="796" column="1" bodyfile="tests/kernel/smp/src/main.c" bodystart="796" bodyend="800"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="smp_2src_2main_8c_1a8cc42352e1fcd18fbeca6388426f572b" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref></type>
        <definition>struct k_thread t2</definition>
        <argsstring></argsstring>
        <name>t2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="27" column="15" bodyfile="tests/kernel/smp/src/main.c" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="smp_2src_2main_8c_1abd861c0f9b0793cee4492b2a9b319188" prot="public" static="no" mutable="no">
        <type>volatile int</type>
        <definition>volatile int t2_count</definition>
        <argsstring></argsstring>
        <name>t2_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="30" column="14" bodyfile="tests/kernel/smp/src/main.c" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="smp_2src_2main_8c_1a75d1dc538e2efcf1c5b5e1e9941f030a" prot="public" static="no" mutable="no">
        <type>volatile int</type>
        <definition>volatile int sync_count</definition>
        <argsstring></argsstring>
        <name>sync_count</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="31" column="14" bodyfile="tests/kernel/smp/src/main.c" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="smp_2src_2main_8c_1ab941de57ea71b190a87f50db871f1c24" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int main_thread_id</definition>
        <argsstring></argsstring>
        <name>main_thread_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="33" column="12" bodyfile="tests/kernel/smp/src/main.c" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="smp_2src_2main_8c_1a027617fea1d108d8354253dd0ae22ef1" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int child_thread_id</definition>
        <argsstring></argsstring>
        <name>child_thread_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="34" column="12" bodyfile="tests/kernel/smp/src/main.c" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="smp_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" prot="public" static="no" mutable="no">
        <type>volatile int</type>
        <definition>volatile int rv</definition>
        <argsstring></argsstring>
        <name>rv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="35" column="14" bodyfile="tests/kernel/smp/src/main.c" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="smp_2src_2main_8c_1a00eb7ab9e9284bfb293b87117d39e681" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structk__mutex" kindref="compound">k_mutex</ref></type>
        <definition>struct k_mutex smutex</definition>
        <argsstring></argsstring>
        <name>smutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="39" column="21" bodyfile="tests/kernel/smp/src/main.c" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="smp_2src_2main_8c_1afd605ccd7d478241905968d3b43c25fc" prot="public" static="yes" mutable="no">
        <type>struct k_sem</type>
        <definition>struct k_sem smp_sem</definition>
        <argsstring></argsstring>
        <name>smp_sem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="40" column="19" bodyfile="tests/kernel/smp/src/main.c" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" prot="public" static="yes" mutable="no">
        <type><ref refid="group__ztest__test_1gac3de5965061b1164a8033712c9094e23" kindref="member">ZTEST_BMEM</ref> volatile struct <ref refid="structthread__info" kindref="compound">thread_info</ref></type>
        <definition>ZTEST_BMEM volatile struct thread_info tinfo[CONFIG_MP_NUM_CPUS]</definition>
        <argsstring>[CONFIG_MP_NUM_CPUS]</argsstring>
        <name>tinfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="50" column="45" bodyfile="tests/kernel/smp/src/main.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="smp_2src_2main_8c_1afc639d50e7a38ffe2314fc59b56cca11" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref></type>
        <definition>struct k_thread tthread[CONFIG_MP_NUM_CPUS]</definition>
        <argsstring>[CONFIG_MP_NUM_CPUS]</argsstring>
        <name>tthread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="51" column="22" bodyfile="tests/kernel/smp/src/main.c" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="smp_2src_2main_8c_1a663612301d9ca0abb5d929164f2629e8" prot="public" static="yes" mutable="no">
        <type>volatile int</type>
        <definition>volatile int thread_started[CONFIG_MP_NUM_CPUS - 1]</definition>
        <argsstring>[CONFIG_MP_NUM_CPUS - 1]</argsstring>
        <name>thread_started</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="54" column="21" bodyfile="tests/kernel/smp/src/main.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="smp_2src_2main_8c_1ae5df64a797b6ebeafae3f60070d3cb75" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref></type>
        <definition>struct k_poll_signal tsignal[CONFIG_MP_NUM_CPUS]</definition>
        <argsstring>[CONFIG_MP_NUM_CPUS]</argsstring>
        <name>tsignal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="56" column="27" bodyfile="tests/kernel/smp/src/main.c" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="smp_2src_2main_8c_1a6341759f7642f5ec47b96f08d1dfafde" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structk__poll__event" kindref="compound">k_poll_event</ref></type>
        <definition>struct k_poll_event tevent[CONFIG_MP_NUM_CPUS]</definition>
        <argsstring>[CONFIG_MP_NUM_CPUS]</argsstring>
        <name>tevent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="57" column="26" bodyfile="tests/kernel/smp/src/main.c" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="smp_2src_2main_8c_1a779ec439665c5ae28d06a507a57357b7" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int global_cnt</definition>
        <argsstring></argsstring>
        <name>global_cnt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="802" column="12" bodyfile="tests/kernel/smp/src/main.c" bodystart="802" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="smp_2src_2main_8c_1a2e9a15210a9df1fc14206446fad17a11" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structk__mutex" kindref="compound">k_mutex</ref></type>
        <definition>struct k_mutex smp_mutex</definition>
        <argsstring></argsstring>
        <name>smp_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="803" column="21" bodyfile="tests/kernel/smp/src/main.c" bodystart="803" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="smp_2src_2main_8c_1acedd98706d2259f8022f892fe2418a02" prot="public" static="yes" mutable="no">
        <type>void(*</type>
        <definition>void(* sync_lock) (void *)</definition>
        <argsstring>)(void *)</argsstring>
        <name>sync_lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="805" column="8" bodyfile="tests/kernel/smp/src/main.c" bodystart="805" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="smp_2src_2main_8c_1a4982e1e38081f13c667f246e1324a955" prot="public" static="yes" mutable="no">
        <type>void(*</type>
        <definition>void(* sync_unlock) (void *)</definition>
        <argsstring>)(void *)</argsstring>
        <name>sync_unlock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="806" column="8" bodyfile="tests/kernel/smp/src/main.c" bodystart="806" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="smp_2src_2main_8c_1a706694fc2805aa6380b89344aecd8324" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_THREAD_STACK_DEFINE</definition>
        <argsstring>(t2_stack,(2048+CONFIG_TEST_EXTRA_STACKSIZE))</argsstring>
        <name>K_THREAD_STACK_DEFINE</name>
        <param>
          <type>t2_stack</type>
        </param>
        <param>
          <type>(2048+CONFIG_TEST_EXTRA_STACKSIZE)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="28" column="1" declfile="tests/kernel/smp/src/main.c" declline="28" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a451d70e6322d8bc5b46a3d03e1d5c52a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_SEM_DEFINE</definition>
        <argsstring>(cpuid_sema, 0, 1)</argsstring>
        <name>K_SEM_DEFINE</name>
        <param>
          <type>cpuid_sema</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="37" column="1" declfile="tests/kernel/smp/src/main.c" declline="37" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a2d594cabb0a0d83d1337fe6075ebbb9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_SEM_DEFINE</definition>
        <argsstring>(sema, 0, 1)</argsstring>
        <name>K_SEM_DEFINE</name>
        <param>
          <type>sema</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="38" column="1" declfile="tests/kernel/smp/src/main.c" declline="38" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a897974f7b30be316e1e19125fe86ac76" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static K_THREAD_STACK_ARRAY_DEFINE</definition>
        <argsstring>(tstack, CONFIG_MP_NUM_CPUS,(384+CONFIG_TEST_EXTRA_STACKSIZE))</argsstring>
        <name>K_THREAD_STACK_ARRAY_DEFINE</name>
        <param>
          <type><ref refid="pipe_2pipe__api_2src_2main_8c_1a8b6a52348bfbfba409bf38688d31b8a8" kindref="member">tstack</ref></type>
        </param>
        <param>
          <type><ref refid="ztest_8h_1a3377b833b4a581e2ccf3a48ac31d18fe" kindref="member">CONFIG_MP_NUM_CPUS</ref></type>
        </param>
        <param>
          <type>(384+CONFIG_TEST_EXTRA_STACKSIZE)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="52" column="8" declfile="tests/kernel/smp/src/main.c" declline="52" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a02567cf1f180beec8c2bca7eea7c5a81" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int curr_cpu</definition>
        <argsstring>(void)</argsstring>
        <name>curr_cpu</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="59" column="12" bodyfile="tests/kernel/smp/src/main.c" bodystart="59" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a280b3aeaef7e759e079f17e4fea73281" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void t2_fn</definition>
        <argsstring>(void *a, void *b, void *c)</argsstring>
        <name>t2_fn</name>
        <param>
          <type>void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="90" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="90" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__smp__tests_1gaf8cf612155ec7e770ff78b2b2382f1b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_smp_coop_threads</definition>
        <argsstring>(void)</argsstring>
        <name>test_smp_coop_threads</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify SMP with 2 cooperative threads. </para>
        </briefdescription>
        <detaileddescription>
<para>Multi processing is verified by checking whether 2 cooperative threads run simultaneously at different cores </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="119" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="119" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a3a60aa228c0dddadf4975627cac28d28" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void child_fn</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>child_fn</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="151" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="151" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__smp__tests_1ga1cda346f65b3b6c992bafc671d76d176" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_cpu_id_threads</definition>
        <argsstring>(void)</argsstring>
        <name>test_cpu_id_threads</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify CPU IDs of threads in SMP. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify whether thread running on other core is parent thread from child thread </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="172" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="172" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1ac8d72017cdde7fad33f88bae68426254" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void thread_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>thread_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="190" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="190" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1aad52161c476e2af52324a3079bfb5805" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void spin_for_threads_exit</definition>
        <argsstring>(void)</argsstring>
        <name>spin_for_threads_exit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="205" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="205" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1adac1f3a7c1b5f4c72109e1a53e256808" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void spawn_threads</definition>
        <argsstring>(int prio, int thread_num, int equal_prio, k_thread_entry_t thread_entry, int delay)</argsstring>
        <name>spawn_threads</name>
        <param>
          <type>int</type>
          <declname>prio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thread_num</declname>
        </param>
        <param>
          <type>int</type>
          <declname>equal_prio</declname>
        </param>
        <param>
          <type><ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref></type>
          <declname>thread_entry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delay</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="216" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="216" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1aba3c606fb097652894c3708f1c9fe1c1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void abort_threads</definition>
        <argsstring>(int num)</argsstring>
        <name>abort_threads</name>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="244" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="244" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1acd0d6a0ac788a7d9853713ea8f93993d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void cleanup_resources</definition>
        <argsstring>(void)</argsstring>
        <name>cleanup_resources</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="251" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="251" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__smp__tests_1gac4422c09831ed94cf646359a171f6c37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_coop_resched_threads</definition>
        <argsstring>(void)</argsstring>
        <name>test_coop_resched_threads</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test cooperative threads non-preemption. </para>
        </briefdescription>
        <detaileddescription>
<para>Spawn cooperative threads equal to number of cores supported. Main thread will already be running on 1 core. Check if the last thread created preempts any threads already running. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="270" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="270" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__smp__tests_1ga5c924585e8f9e2c70ff679d9f98c7531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_preempt_resched_threads</definition>
        <argsstring>(void)</argsstring>
        <name>test_preempt_resched_threads</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test preemptness of preemptive thread. </para>
        </briefdescription>
        <detaileddescription>
<para>Create preemptive thread and let it run on another core and verify if it gets preempted if another thread of higher priority is spawned </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="309" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="309" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__smp__tests_1gaa932b5f20a1a0eef142d78a41321e7ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_yield_threads</definition>
        <argsstring>(void)</argsstring>
        <name>test_yield_threads</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate behavior of thread when it yields. </para>
        </briefdescription>
        <detaileddescription>
<para>Spawn cooperative threads equal to number of cores, so last thread would be pending, call yield() from main thread. Now, all threads must be executed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="340" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="340" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__smp__tests_1ga30622d86cf0516a56650d4352fa1abb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sleep_threads</definition>
        <argsstring>(void)</argsstring>
        <name>test_sleep_threads</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test behavior of thread when it sleeps. </para>
        </briefdescription>
        <detaileddescription>
<para>Spawn cooperative thread and call <ref refid="unistd_8h_1aaa1de6debea33c41fbfaa909e813c2f4" kindref="member">sleep()</ref> from main thread. After timeout, all threads has to be scheduled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="371" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="371" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a1e98a19459b0d70038309ac7553a499f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void thread_wakeup_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>thread_wakeup_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="387" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="387" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a3e07b566bdb6d407bb36c28096af45df" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wakeup_on_start_thread</definition>
        <argsstring>(int tnum)</argsstring>
        <name>wakeup_on_start_thread</name>
        <param>
          <type>int</type>
          <declname>tnum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="400" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="400" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a475c7eb972bc6c976c54d1d2e192a0f8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void check_wokeup_threads</definition>
        <argsstring>(int tnum)</argsstring>
        <name>check_wokeup_threads</name>
        <param>
          <type>int</type>
          <declname>tnum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="424" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="424" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__smp__tests_1ga378e5d369380f633a0f3c599d107d265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_wakeup_threads</definition>
        <argsstring>(void)</argsstring>
        <name>test_wakeup_threads</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test behavior of wakeup() in SMP case. </para>
        </briefdescription>
        <detaileddescription>
<para>Spawn number of threads equal to number of remaining cores and let them sleep for a while. Call wakeup() of those threads from parent thread and check if they are all running </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="451" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="451" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a1ad6f06abb8fe3426c707b4d9b2ed2b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void thread_get_cpu_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>thread_get_cpu_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: call <ref refid="arc_2arch__inlines_8h_1a3e8a7515c0c3b8de5a037ce5997c73b0" kindref="member">arch_curr_cpu()</ref> to get cpu struct</para>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="469" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="469" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__smp__module__tests_1ga4635d2400f9d3d19a1d5121dccf2a012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_get_cpu</definition>
        <argsstring>(void)</argsstring>
        <name>test_get_cpu</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test get a pointer of CPU. </para>
        </briefdescription>
        <detaileddescription>
<para>Test Objective:<itemizedlist>
<listitem><para>To verify architecture layer provides a mechanism to return a pointer to the current kernel CPU record of the running CPU. We call <ref refid="arc_2arch__inlines_8h_1a3e8a7515c0c3b8de5a037ce5997c73b0" kindref="member">arch_curr_cpu()</ref> and get it&apos;s member, both in main and spwaned thread speratively, and compare them. They shall be different in SMP enviornment.</para>
</listitem></itemizedlist>
</para>
<para>Testing techniques:<itemizedlist>
<listitem><para>Interface testing, function and block box testing, dynamic analysis and testing,</para>
</listitem></itemizedlist>
</para>
<para>Prerequisite Conditions:<itemizedlist>
<listitem><para>CONFIG_SMP=y, and the HW platform must support SMP.</para>
</listitem></itemizedlist>
</para>
<para>Input Specifications:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para>Test Procedure:<orderedlist>
<listitem><para>In main thread, call <ref refid="arc_2arch__inlines_8h_1a3e8a7515c0c3b8de5a037ce5997c73b0" kindref="member">arch_curr_cpu()</ref> to get it&apos;s member &quot;id&quot;,then store it into a variable thread_id.</para>
</listitem><listitem><para>Spawn a thread t2, and pass the stored thread_id to it, then call <ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait()</ref> 50us to wait for thread run and won&apos;t be swapped out.</para>
</listitem><listitem><para>In thread t2, call <ref refid="arc_2arch__inlines_8h_1a3e8a7515c0c3b8de5a037ce5997c73b0" kindref="member">arch_curr_cpu()</ref> to get pointer of current cpu data. Then check if it not NULL.</para>
</listitem><listitem><para>Store the member id via accessing pointer of current cpu data to var cpu_id.</para>
</listitem><listitem><para>Check if cpu_id is not equaled to bsp_id that we pass into thread.</para>
</listitem><listitem><para>Call <ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait()</ref> and loop forever.</para>
</listitem><listitem><para>In main thread, terminate the thread t2 before exit.</para>
</listitem></orderedlist>
</para>
<para>Expected Test Result:<itemizedlist>
<listitem><para>The pointer of current cpu data that we got from function call is correct.</para>
</listitem></itemizedlist>
</para>
<para>Pass/Fail Criteria:<itemizedlist>
<listitem><para>Successful if the check of step 3,5 are all passed.</para>
</listitem><listitem><para>Failure if one of the check of step 3,5 is failed.</para>
</listitem></itemizedlist>
</para>
<para>Assumptions and Constraints:<itemizedlist>
<listitem><para>This test using for the platform that support SMP, in our current scenario , only x86_64, arc and xtensa supported.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="arc_2arch__inlines_8h_1a3e8a7515c0c3b8de5a037ce5997c73b0" kindref="member">arch_curr_cpu()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="539" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="539" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__smp__integration__tests_1ga985f61374b573f460882c305eacf86af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_smp_ipi</definition>
        <argsstring>(void)</argsstring>
        <name>test_smp_ipi</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test interprocessor interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para>Test Objective:<itemizedlist>
<listitem><para>To verify architecture layer provides a mechanism to issue an interprocessor interrupt to all other CPUs in the system that calls the scheduler IPI. We simply add a hook in z_sched_ipi(), in order to check if it has been called once in another CPU except the caller, when <ref refid="group__arch-smp_1gadd3d6c84e3c57babc859314718e0f231" kindref="member">arch_sched_ipi()</ref> is called.</para>
</listitem></itemizedlist>
</para>
<para>Testing techniques:<itemizedlist>
<listitem><para>Interface testing, function and block box testing, dynamic analysis and testing</para>
</listitem></itemizedlist>
</para>
<para>Prerequisite Conditions:<itemizedlist>
<listitem><para>CONFIG_SMP=y, and the HW platform must support SMP.</para>
</listitem><listitem><para>CONFIG_TRACE_SCHED_IPI=y was set.</para>
</listitem></itemizedlist>
</para>
<para>Input Specifications:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para>Test Procedure:<orderedlist>
<listitem><para>In main thread, given a global variable sched_ipi_has_called equaled zero.</para>
</listitem><listitem><para>Call <ref refid="group__arch-smp_1gadd3d6c84e3c57babc859314718e0f231" kindref="member">arch_sched_ipi()</ref> then sleep for 100ms.</para>
</listitem><listitem><para>In z_sched_ipi() handler, increment the sched_ipi_has_called.</para>
</listitem><listitem><para>In main thread, check the sched_ipi_has_called is not equaled to zero.</para>
</listitem><listitem><para>Repeat step 1 to 4 for 3 times.</para>
</listitem></orderedlist>
</para>
<para>Expected Test Result:<itemizedlist>
<listitem><para>The pointer of current cpu data that we got from function call is correct.</para>
</listitem></itemizedlist>
</para>
<para>Pass/Fail Criteria:<itemizedlist>
<listitem><para>Successful if the check of step 4 are all passed.</para>
</listitem><listitem><para>Failure if one of the check of step 4 is failed.</para>
</listitem></itemizedlist>
</para>
<para>Assumptions and Constraints:<itemizedlist>
<listitem><para>This test using for the platform that support SMP, in our current scenario , only x86_64 and arc supported.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__arch-smp_1gadd3d6c84e3c57babc859314718e0f231" kindref="member">arch_sched_ipi()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: check if enter our IPI interrupt handler</para>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="611" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="611" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="group__fatal__apis_1gab6dfd75572a84729df534fde49ef7d85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_sys_fatal_error_handler</definition>
        <argsstring>(unsigned int reason, const z_arch_esf_t *pEsf)</argsstring>
        <name>k_sys_fatal_error_handler</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>reason</declname>
        </param>
        <param>
          <type>const z_arch_esf_t *</type>
          <declname>esf</declname>
          <defname>pEsf</defname>
        </param>
        <briefdescription>
<para>Fatal error policy handler. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is not invoked by application code, but is declared as a weak symbol so that applications may introduce their own policy.</para>
<para>The default implementation of this function halts the system unconditionally. Depending on architecture support, this may be a simple infinite loop, power off the hardware, or exit an emulator.</para>
<para>If this function returns, then the currently executing thread will be aborted.</para>
<para>A few notes for custom implementations:</para>
<para><itemizedlist>
<listitem><para>If the error is determined to be unrecoverable, <ref refid="group__log__ctrl_1ga9ee5a99e0487e3f1e6d289b12c19ad5a" kindref="member">LOG_PANIC()</ref> should be invoked to flush any pending logging buffers.</para>
</listitem><listitem><para>K_ERR_KERNEL_PANIC indicates a severe unrecoverable error in the kernel itself, and should not be considered recoverable. There is an assertion in z_fatal_error() to enforce this.</para>
</listitem><listitem><para>Even outside of a kernel panic, unless the fault occurred in user mode, the kernel itself may be in an inconsistent state, with API calls to kernel objects possibly exhibiting undefined behavior or triggering another exception.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>The reason for the fatal error </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>esf</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception context, with details and partial or full register state when the error occurred. May in some cases be NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="637" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="637" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a610b0682228ccd092be25d3d6b324b37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void entry_oops</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>entry_oops</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="658" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="658" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gadad0d584b7bbfdf20f0958df4c26f2da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_fatal_on_smp</definition>
        <argsstring>(void)</argsstring>
        <name>test_fatal_on_smp</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test fatal error can be triggered on different core. </para>
        </briefdescription>
        <detaileddescription>
<para>When CONFIG_SMP is enabled, on some multiprocessor platforms, exception can be triggered on different core at the same time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="673" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="673" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1ab5d4795ab3c80df495243bbefab95c2c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void workq_handler</definition>
        <argsstring>(struct k_work *work)</argsstring>
        <name>workq_handler</name>
        <param>
          <type>struct <ref refid="structk__work" kindref="compound">k_work</ref> *</type>
          <declname>work</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="690" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="690" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga432420409c3573d174774a7a5ad29a47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_workq_on_smp</definition>
        <argsstring>(void)</argsstring>
        <name>test_workq_on_smp</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test system workq run on different core. </para>
        </briefdescription>
        <detaileddescription>
<para>When macro CONFIG_SMP is enabled, workq can be run on different core. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="703" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="703" bodyend="723"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a3b1df546e8154dff4f5dbb45769ac9bb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void t1_mutex_lock</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>t1_mutex_lock</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="725" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="725" bodyend="733"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a79cdb0e2391f518db5e2b308258f55a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void t2_mutex_lock</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>t2_mutex_lock</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: z_smp_release_global_lock() has been call during context switch but global_lock_cnt has not been decrease because no <ref refid="group__isr__apis_1ga19fdde73c3b02fcca6cf1d1e67631228" kindref="member">irq_lock()</ref> was called.</para>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="735" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="735" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__smp__tests_1ga8719df83a2203b64766f7dd612dfc09f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_smp_release_global_lock</definition>
        <argsstring>(void)</argsstring>
        <name>test_smp_release_global_lock</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test scenairo that a thread release the global lock. </para>
        </briefdescription>
        <detaileddescription>
<para>Validate the scenario that make the internal APIs of SMP z_smp_release_global_lock() to be called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="766" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="766" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a2270072cab23b6b6e34120e94fcac7a7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sync_lock_dummy</definition>
        <argsstring>(void *k)</argsstring>
        <name>sync_lock_dummy</name>
        <param>
          <type>void *</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="808" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="808" bodyend="811"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a6f2d8ded8faf28e296b8449b629167e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sync_lock_irq</definition>
        <argsstring>(void *k)</argsstring>
        <name>sync_lock_irq</name>
        <param>
          <type>void *</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="813" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="813" bodyend="816"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a918a10db1ef09eb1454dc9f0a9dda677" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sync_unlock_irq</definition>
        <argsstring>(void *k)</argsstring>
        <name>sync_unlock_irq</name>
        <param>
          <type>void *</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="818" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="818" bodyend="821"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a10704f7f351d7f431d023aef9602f31c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sync_lock_sem</definition>
        <argsstring>(void *k)</argsstring>
        <name>sync_lock_sem</name>
        <param>
          <type>void *</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="823" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="823" bodyend="826"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a604dbdc3b0843d718badc4d49cc5ecc9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sync_unlock_sem</definition>
        <argsstring>(void *k)</argsstring>
        <name>sync_unlock_sem</name>
        <param>
          <type>void *</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="828" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="828" bodyend="831"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a6d7a31bb92d8be6d93a5d086f63b846d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sync_lock_mutex</definition>
        <argsstring>(void *k)</argsstring>
        <name>sync_lock_mutex</name>
        <param>
          <type>void *</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="833" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="833" bodyend="836"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a292c1f2222ac47bdb537402a7a305a5a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sync_unlock_mutex</definition>
        <argsstring>(void *k)</argsstring>
        <name>sync_unlock_mutex</name>
        <param>
          <type>void *</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="838" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="838" bodyend="841"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a288305af08e88c5e59fbe15dbbcf9f98" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sync_init</definition>
        <argsstring>(int lock_type)</argsstring>
        <name>sync_init</name>
        <param>
          <type>int</type>
          <declname>lock_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="843" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="843" bodyend="864"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a16cd18d3f9458db7e97853b2c70fd552" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void inc_global_cnt</definition>
        <argsstring>(void *a, void *b, void *c)</argsstring>
        <name>inc_global_cnt</name>
        <param>
          <type>void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="866" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="866" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a71f12c24f047ec28751ac184736cdde8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int run_concurrency</definition>
        <argsstring>(int type, void *func)</argsstring>
        <name>run_concurrency</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="882" column="12" bodyfile="tests/kernel/smp/src/main.c" bodystart="882" bodyend="922"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__smp__tests_1ga73abecc7cec1174adc97734c85086c50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_inc_concurrency</definition>
        <argsstring>(void)</argsstring>
        <name>test_inc_concurrency</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test if the concurrency of SMP works or not. </para>
        </briefdescription>
        <detaileddescription>
<para>Validate the global lock and unlock API of SMP are thread-safe. We make 3 thread to increase the global count in differenet cpu and they both do locking then unlocking for LOOP_COUNT times. It shall be no deadlock happened and total global count shall be 3 * LOOP COUNT.</para>
<para>We show the 4 kinds of scenairo:<itemizedlist>
<listitem><para>No any lock used</para>
</listitem><listitem><para>Use global irq lock</para>
</listitem><listitem><para>Use semaphore</para>
</listitem><listitem><para>Use mutex </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="940" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="940" bodyend="953"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__smp__tests_1ga814d53aaddece1a47f29b91b49073ceb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void process_events</definition>
        <argsstring>(void *arg0, void *arg1, void *arg2)</argsstring>
        <name>process_events</name>
        <param>
          <type>void *</type>
          <declname>arg0</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg2</declname>
        </param>
        <briefdescription>
<para>Torture test for context switching code. </para>
        </briefdescription>
        <detaileddescription>
<para>Leverage the polling API to stress test the context switching code. This test will hammer all the CPUs with thread swapping requests. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="963" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="963" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1aecac3a9664bb261abc7fca142ecabaae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void signal_raise</definition>
        <argsstring>(void *arg0, void *arg1, void *arg2)</argsstring>
        <name>signal_raise</name>
        <param>
          <type>void *</type>
          <declname>arg0</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="981" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="981" bodyend="988"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a536319a22ba2682ec46aeb4fa02e1165" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_smp_switch_torture</definition>
        <argsstring>(void)</argsstring>
        <name>test_smp_switch_torture</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="990" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="990" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="smp_2src_2main_8c_1a8a4533f287d99bb2d7c24c0e29c9a449" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_main</definition>
        <argsstring>(void)</argsstring>
        <name>test_main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>test case main entry </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="1014" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="1014" bodyend="1039"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018<sp/>Intel<sp/>Corporation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zephyr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tc_util.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ztest_8h" kindref="compound">ztest.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ksched.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="kernel__structs_8h" kindref="compound">kernel_structs.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CONFIG_MP_NUM_CPUS<sp/>&lt;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>SMP<sp/>test<sp/>requires<sp/>at<sp/>least<sp/>two<sp/>CPUs!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>T2_STACK_SIZE<sp/>(2048<sp/>+<sp/>CONFIG_TEST_EXTRA_STACKSIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STACK_SIZE<sp/>(384<sp/>+<sp/>CONFIG_TEST_EXTRA_STACKSIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DELAY_US<sp/>50000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TIMEOUT<sp/>1000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EQUAL_PRIORITY<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TIME_SLICE_MS<sp/>500</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>THREAD_DELAY<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SLEEP_MS_LONG<sp/>15000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/><ref refid="smp_2src_2main_8c_1a8cc42352e1fcd18fbeca6388426f572b" kindref="member">t2</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><ref refid="condvar_2condvar__api_2src_2main_8c_1a9bda3e00bf96550334eadf74c9af316b" kindref="member">K_THREAD_STACK_DEFINE</ref>(t2_stack,<sp/><ref refid="smp_2src_2main_8c_1ab5dfd814ed332800adaf63eaf3714f85" kindref="member">T2_STACK_SIZE</ref>);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1abd861c0f9b0793cee4492b2a9b319188" kindref="member">t2_count</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a75d1dc538e2efcf1c5b5e1e9941f030a" kindref="member">sync_count</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1ab941de57ea71b190a87f50db871f1c24" kindref="member">main_thread_id</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a027617fea1d108d8354253dd0ae22ef1" kindref="member">child_thread_id</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="mem__protect_2obj__validation_2src_2main_8c_1acccdee2c9edbab556b941bd865918c2a" kindref="member">K_SEM_DEFINE</ref>(cpuid_sema,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="mem__protect_2obj__validation_2src_2main_8c_1acccdee2c9edbab556b941bd865918c2a" kindref="member">K_SEM_DEFINE</ref>(sema,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mutex" kindref="compound">k_mutex</ref><sp/><ref refid="smp_2src_2main_8c_1a00eb7ab9e9284bfb293b87117d39e681" kindref="member">smutex</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_sem<sp/><ref refid="smp_2src_2main_8c_1afd605ccd7d478241905968d3b43c25fc" kindref="member">smp_sem</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>THREADS_NUM<sp/>CONFIG_MP_NUM_CPUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="structthread__info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structthread__info" kindref="compound">thread_info</ref><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="structthread__info_1ae36f177bc0c6ae5c2817cedf42bdcd12" kindref="member">tid</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structthread__info_1af97c6af74445ab5986c4c65b70c8046c" kindref="member">executed</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structthread__info_1adf9940853d044b7c86a13ee7a118c991" kindref="member">priority</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structthread__info_1a429f967e45d8e01208726b128693fc93" kindref="member">cpu_id</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__ztest__test__deprecated_1gac3de5965061b1164a8033712c9094e23" kindref="member">ZTEST_BMEM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structthread__info" kindref="compound">thread_info</ref><sp/><ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[<ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>];</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/><ref refid="smp_2src_2main_8c_1afc639d50e7a38ffe2314fc59b56cca11" kindref="member">tthread</ref>[<ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>];</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1aab1dff2223c027ea2507228e7e040641" kindref="member">K_THREAD_STACK_ARRAY_DEFINE</ref>(<ref refid="pipe_2pipe__api_2src_2main_8c_1a8b6a52348bfbfba409bf38688d31b8a8" kindref="member">tstack</ref>,<sp/><ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>,<sp/><ref refid="smp_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a663612301d9ca0abb5d929164f2629e8" kindref="member">thread_started</ref>[<ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref><sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref><sp/><ref refid="smp_2src_2main_8c_1ae5df64a797b6ebeafae3f60070d3cb75" kindref="member">tsignal</ref>[<ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>];</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__poll__event" kindref="compound">k_poll_event</ref><sp/><ref refid="smp_2src_2main_8c_1a6341759f7642f5ec47b96f08d1dfafde" kindref="member">tevent</ref>[<ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>];</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a02567cf1f180beec8c2bca7eea7c5a81" kindref="member">curr_cpu</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/><ref refid="arch_2arc_2v2_2irq_8h_1a1496f4f860a99f42e1aee15ce5c9b3e2" kindref="member">arch_irq_lock</ref>();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="arc_2arch__inlines_8h_1a3e8a7515c0c3b8de5a037ce5997c73b0" kindref="member">arch_curr_cpu</ref>()-&gt;id;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arch_2arc_2v2_2irq_8h_1a203e02b994beba0d006dad9f6d797c27" kindref="member">arch_irq_unlock</ref>(k);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a280b3aeaef7e759e079f17e4fea73281" kindref="member">t2_fn</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="printk_8c_1adc08ed1554f35803d229aeaf11216b3f" kindref="member">c</ref>)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(a);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(b);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(<ref refid="printk_8c_1adc08ed1554f35803d229aeaf11216b3f" kindref="member">c</ref>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1abd861c0f9b0793cee4492b2a9b319188" kindref="member">t2_count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>thread<sp/>simply<sp/>increments<sp/>a<sp/>counter<sp/>while<sp/>spinning<sp/>on</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>CPU.<sp/><sp/>The<sp/>idea<sp/>is<sp/>that<sp/>it<sp/>will<sp/>always<sp/>be<sp/>iterating</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>faster<sp/>than<sp/>the<sp/>other<sp/>thread<sp/>so<sp/>long<sp/>as<sp/>it<sp/>is<sp/>fairly</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>scheduled<sp/>(and<sp/>it&apos;s<sp/>designed<sp/>to<sp/>NOT<sp/>be<sp/>fairly<sp/>schedulable</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>without<sp/>a<sp/>separate<sp/>CPU!),<sp/>so<sp/>the<sp/>main<sp/>thread<sp/>can<sp/>always</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>check<sp/>its<sp/>progress.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait</ref>(<ref refid="smp_2src_2main_8c_1a1a522aa19bcb695a9df30032a893bee3" kindref="member">DELAY_US</ref>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1abd861c0f9b0793cee4492b2a9b319188" kindref="member">t2_count</ref>++;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__smp__tests_1gaf8cf612155ec7e770ff78b2b2382f1b5" kindref="member">test_smp_coop_threads</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>ok<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref><sp/>=<sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="smp_2src_2main_8c_1a8cc42352e1fcd18fbeca6388426f572b" kindref="member">t2</ref>,<sp/>t2_stack,<sp/><ref refid="smp_2src_2main_8c_1ab5dfd814ed332800adaf63eaf3714f85" kindref="member">T2_STACK_SIZE</ref>,<sp/><ref refid="smp_2src_2main_8c_1a280b3aeaef7e759e079f17e4fea73281" kindref="member">t2_fn</ref>,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1ac145d4747518572acfc8ee1579007d54" kindref="member">K_PRIO_COOP</ref>(2),<sp/>0,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>for<sp/>the<sp/>other<sp/>thread<sp/>(on<sp/>a<sp/>separate<sp/>CPU)<sp/>to<sp/>actually</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>start<sp/>running.<sp/><sp/>We<sp/>want<sp/>synchrony<sp/>to<sp/>be<sp/>as<sp/>perfect<sp/>as</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>possible.</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1abd861c0f9b0793cee4492b2a9b319188" kindref="member">t2_count</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="smp_2src_2main_8c_1abd861c0f9b0793cee4492b2a9b319188" kindref="member">t2_count</ref><sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>slightly<sp/>longer<sp/>than<sp/>the<sp/>other<sp/>thread<sp/>so<sp/>our</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>count<sp/>will<sp/>always<sp/>be<sp/>lower</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait</ref>(<ref refid="smp_2src_2main_8c_1a1a522aa19bcb695a9df30032a893bee3" kindref="member">DELAY_US</ref><sp/>+<sp/>(<ref refid="smp_2src_2main_8c_1a1a522aa19bcb695a9df30032a893bee3" kindref="member">DELAY_US</ref><sp/>/<sp/>8));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="smp_2src_2main_8c_1abd861c0f9b0793cee4492b2a9b319188" kindref="member">t2_count</ref><sp/>&lt;=<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(ok,<sp/></highlight><highlight class="stringliteral">&quot;SMP<sp/>test<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a3a60aa228c0dddadf4975627cac28d28" kindref="member">child_fn</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(p2);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(p3);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parent_cpu_id<sp/>=<sp/><ref refid="group__sys-util_1ga6e5ec9c46d0140315a7c1d80d1cc3c38" kindref="member">POINTER_TO_INT</ref>(p1);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(parent_cpu_id<sp/>!=<sp/><ref refid="smp_2src_2main_8c_1a02567cf1f180beec8c2bca7eea7c5a81" kindref="member">curr_cpu</ref>(),</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Parent<sp/>isn&apos;t<sp/>on<sp/>other<sp/>core&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a75d1dc538e2efcf1c5b5e1e9941f030a" kindref="member">sync_count</ref>++;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gab9be3cf1988af2cd6afdace52d497c84" kindref="member">k_sem_give</ref>(&amp;cpuid_sema);</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__smp__tests_1ga1cda346f65b3b6c992bafc671d76d176" kindref="member">test_cpu_id_threads</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>idle<sp/>thread<sp/>runs<sp/>on<sp/>each<sp/>core<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga48d4b041790454da4d68ac8711f29657" kindref="member">k_sleep</ref>(<ref refid="group__clock__apis_1ga302af954e87b10a9b731f1ad07775e9f" kindref="member">K_MSEC</ref>(1000));</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parent_cpu_id<sp/>=<sp/><ref refid="smp_2src_2main_8c_1a02567cf1f180beec8c2bca7eea7c5a81" kindref="member">curr_cpu</ref>();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref><sp/>=<sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="smp_2src_2main_8c_1a8cc42352e1fcd18fbeca6388426f572b" kindref="member">t2</ref>,<sp/>t2_stack,<sp/><ref refid="smp_2src_2main_8c_1ab5dfd814ed332800adaf63eaf3714f85" kindref="member">T2_STACK_SIZE</ref>,<sp/><ref refid="smp_2src_2main_8c_1a3a60aa228c0dddadf4975627cac28d28" kindref="member">child_fn</ref>,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sys-util_1gae236ed18fe2ff18ab47c15d2e7eeb417" kindref="member">INT_TO_POINTER</ref>(parent_cpu_id),<sp/>NULL,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(2),<sp/>0,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="smp_2src_2main_8c_1a75d1dc538e2efcf1c5b5e1e9941f030a" kindref="member">sync_count</ref><sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gac71e2383c1920dddc45a561cacfef090" kindref="member">k_sem_take</ref>(&amp;cpuid_sema,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1ac8d72017cdde7fad33f88bae68426254" kindref="member">thread_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(p2);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(p3);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thread_num<sp/>=<sp/><ref refid="group__sys-util_1ga6e5ec9c46d0140315a7c1d80d1cc3c38" kindref="member">POINTER_TO_INT</ref>(p1);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a612635fe60af527de1e4d54f66e27b94" kindref="member">count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[thread_num].<ref refid="structthread__info_1af97c6af74445ab5986c4c65b70c8046c" kindref="member">executed</ref><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[thread_num].<ref refid="structthread__info_1a429f967e45d8e01208726b128693fc93" kindref="member">cpu_id</ref><sp/>=<sp/><ref refid="smp_2src_2main_8c_1a02567cf1f180beec8c2bca7eea7c5a81" kindref="member">curr_cpu</ref>();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="condvar_2condvar__api_2src_2main_8c_1a612635fe60af527de1e4d54f66e27b94" kindref="member">count</ref>++<sp/>&lt;<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait</ref>(<ref refid="smp_2src_2main_8c_1a1a522aa19bcb695a9df30032a893bee3" kindref="member">DELAY_US</ref>);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1aad52161c476e2af52324a3079bfb5805" kindref="member">spin_for_threads_exit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="kobject_8c_1a5bf2789125fcfa98cff775cb82fbd3c9" kindref="member">p</ref><sp/>=<sp/>&amp;<ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[i].<ref refid="structthread__info_1ae36f177bc0c6ae5c2817cedf42bdcd12" kindref="member">tid</ref>-&gt;<ref refid="structk__thread_1a09a988f143ab5c4df887894920ff9df8" kindref="member">base</ref>.thread_state;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(*<ref refid="kobject_8c_1a5bf2789125fcfa98cff775cb82fbd3c9" kindref="member">p</ref><sp/>&amp;<sp/>_THREAD_DEAD))<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait</ref>(<ref refid="smp_2src_2main_8c_1a1a522aa19bcb695a9df30032a893bee3" kindref="member">DELAY_US</ref>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1adac1f3a7c1b5f4c72109e1a53e256808" kindref="member">spawn_threads</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prio,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thread_num,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>equal_prio,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref><sp/><ref refid="smp_2src_2main_8c_1ac8d72017cdde7fad33f88bae68426254" kindref="member">thread_entry</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delay)</highlight></codeline>
<codeline lineno="218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Spawn<sp/>threads<sp/>of<sp/>priority<sp/>higher<sp/>than</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>previously<sp/>created<sp/>thread</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>thread_num;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(equal_prio)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[i].<ref refid="structthread__info_1adf9940853d044b7c86a13ee7a118c991" kindref="member">priority</ref><sp/>=<sp/>prio;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Increase<sp/>priority<sp/>for<sp/>each<sp/>thread<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[i].<ref refid="structthread__info_1adf9940853d044b7c86a13ee7a118c991" kindref="member">priority</ref><sp/>=<sp/>prio<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prio<sp/>=<sp/><ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[i].<ref refid="structthread__info_1adf9940853d044b7c86a13ee7a118c991" kindref="member">priority</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[i].<ref refid="structthread__info_1ae36f177bc0c6ae5c2817cedf42bdcd12" kindref="member">tid</ref><sp/>=<sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="smp_2src_2main_8c_1afc639d50e7a38ffe2314fc59b56cca11" kindref="member">tthread</ref>[i],<sp/><ref refid="pipe_2pipe__api_2src_2main_8c_1a8b6a52348bfbfba409bf38688d31b8a8" kindref="member">tstack</ref>[i],</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,<sp/><ref refid="smp_2src_2main_8c_1ac8d72017cdde7fad33f88bae68426254" kindref="member">thread_entry</ref>,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sys-util_1gae236ed18fe2ff18ab47c15d2e7eeb417" kindref="member">INT_TO_POINTER</ref>(i),<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[i].priority,<sp/>0,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__apis_1ga302af954e87b10a9b731f1ad07775e9f" kindref="member">K_MSEC</ref>(delay));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delay)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Increase<sp/>delay<sp/>for<sp/>each<sp/>thread<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/>delay<sp/>+<sp/>10;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1aba3c606fb097652894c3708f1c9fe1c1" kindref="member">abort_threads</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num)</highlight></codeline>
<codeline lineno="245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(<ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[i].<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1acd0d6a0ac788a7d9853713ea8f93993d" kindref="member">cleanup_resources</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[i].<ref refid="structthread__info_1ae36f177bc0c6ae5c2817cedf42bdcd12" kindref="member">tid</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[i].<ref refid="structthread__info_1af97c6af74445ab5986c4c65b70c8046c" kindref="member">executed</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[i].<ref refid="structthread__info_1adf9940853d044b7c86a13ee7a118c991" kindref="member">priority</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__smp__tests_1gac4422c09831ed94cf646359a171f6c37" kindref="member">test_coop_resched_threads</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Spawn<sp/>threads<sp/>equal<sp/>to<sp/>number<sp/>of<sp/>cores,</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>since<sp/>we<sp/>don&apos;t<sp/>give<sp/>up<sp/>current<sp/>CPU,<sp/>last<sp/>thread</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>will<sp/>not<sp/>get<sp/>scheduled</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1adac1f3a7c1b5f4c72109e1a53e256808" kindref="member">spawn_threads</ref>(<ref refid="include_2kernel_8h_1ac145d4747518572acfc8ee1579007d54" kindref="member">K_PRIO_COOP</ref>(10),<sp/><ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>,<sp/>!<ref refid="smp_2src_2main_8c_1a5d334d83634ea28cf50efd843d38a654" kindref="member">EQUAL_PRIORITY</ref>,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="smp_2src_2main_8c_1ac8d72017cdde7fad33f88bae68426254" kindref="member">thread_entry</ref>,<sp/><ref refid="smp_2src_2main_8c_1a0757d7e446273d7c89da517339ca8ad5" kindref="member">THREAD_DELAY</ref>);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>for<sp/>some<sp/>time<sp/>to<sp/>let<sp/>other<sp/>core&apos;s<sp/>thread<sp/>run<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait</ref>(<ref refid="smp_2src_2main_8c_1a1a522aa19bcb695a9df30032a893bee3" kindref="member">DELAY_US</ref>);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reassure<sp/>that<sp/>cooperative<sp/>thread&apos;s<sp/>are<sp/>not<sp/>preempted</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>by<sp/>checking<sp/>last<sp/>thread&apos;s<sp/>execution</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>status.<sp/>We<sp/>know<sp/>that<sp/>all<sp/>threads<sp/>got<sp/>rescheduled<sp/>on</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>other<sp/>cores<sp/>except<sp/>the<sp/>last<sp/>one</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[i].<ref refid="test__sched__timeslice__and__lock_8c_1a90990e07651e2d7a868bcbb786b7986a" kindref="member">executed</ref><sp/>==<sp/>1,</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;cooperative<sp/>thread<sp/>%d<sp/>didn&apos;t<sp/>run&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[<ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref><sp/>-<sp/>1].<ref refid="test__sched__timeslice__and__lock_8c_1a90990e07651e2d7a868bcbb786b7986a" kindref="member">executed</ref><sp/>==<sp/>0,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;cooperative<sp/>thread<sp/>is<sp/>preempted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Abort<sp/>threads<sp/>created<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1aba3c606fb097652894c3708f1c9fe1c1" kindref="member">abort_threads</ref>(<ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1acd0d6a0ac788a7d9853713ea8f93993d" kindref="member">cleanup_resources</ref>();</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__smp__tests_1ga5c924585e8f9e2c70ff679d9f98c7531" kindref="member">test_preempt_resched_threads</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Spawn<sp/>threads<sp/><sp/>equal<sp/>to<sp/>number<sp/>of<sp/>cores,</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>lower<sp/>priority<sp/>thread<sp/>should</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>be<sp/>preempted<sp/>by<sp/>higher<sp/>ones</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1adac1f3a7c1b5f4c72109e1a53e256808" kindref="member">spawn_threads</ref>(<ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(10),<sp/><ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>,<sp/>!<ref refid="smp_2src_2main_8c_1a5d334d83634ea28cf50efd843d38a654" kindref="member">EQUAL_PRIORITY</ref>,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="smp_2src_2main_8c_1ac8d72017cdde7fad33f88bae68426254" kindref="member">thread_entry</ref>,<sp/><ref refid="smp_2src_2main_8c_1a0757d7e446273d7c89da517339ca8ad5" kindref="member">THREAD_DELAY</ref>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1aad52161c476e2af52324a3079bfb5805" kindref="member">spin_for_threads_exit</ref>();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[i].<ref refid="test__sched__timeslice__and__lock_8c_1a90990e07651e2d7a868bcbb786b7986a" kindref="member">executed</ref><sp/>==<sp/>1,</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;preemptive<sp/>thread<sp/>%d<sp/>didn&apos;t<sp/>run&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Abort<sp/>threads<sp/>created<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1aba3c606fb097652894c3708f1c9fe1c1" kindref="member">abort_threads</ref>(<ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1acd0d6a0ac788a7d9853713ea8f93993d" kindref="member">cleanup_resources</ref>();</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__smp__tests_1gaa932b5f20a1a0eef142d78a41321e7ae" kindref="member">test_yield_threads</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="341"><highlight class="normal">{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Spawn<sp/>threads<sp/>equal<sp/>to<sp/>the<sp/>number</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>cores,<sp/>so<sp/>the<sp/>last<sp/>thread<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>pending.</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1adac1f3a7c1b5f4c72109e1a53e256808" kindref="member">spawn_threads</ref>(<ref refid="include_2kernel_8h_1ac145d4747518572acfc8ee1579007d54" kindref="member">K_PRIO_COOP</ref>(10),<sp/><ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>,<sp/>!<ref refid="smp_2src_2main_8c_1a5d334d83634ea28cf50efd843d38a654" kindref="member">EQUAL_PRIORITY</ref>,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="smp_2src_2main_8c_1ac8d72017cdde7fad33f88bae68426254" kindref="member">thread_entry</ref>,<sp/>!<ref refid="smp_2src_2main_8c_1a0757d7e446273d7c89da517339ca8ad5" kindref="member">THREAD_DELAY</ref>);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga08a3484c33444ecedc2d71d78495a295" kindref="member">k_yield</ref>();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait</ref>(<ref refid="smp_2src_2main_8c_1a1a522aa19bcb695a9df30032a893bee3" kindref="member">DELAY_US</ref>);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[i].<ref refid="test__sched__timeslice__and__lock_8c_1a90990e07651e2d7a868bcbb786b7986a" kindref="member">executed</ref><sp/>==<sp/>1,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;thread<sp/>%d<sp/>did<sp/>not<sp/>execute&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1aba3c606fb097652894c3708f1c9fe1c1" kindref="member">abort_threads</ref>(<ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1acd0d6a0ac788a7d9853713ea8f93993d" kindref="member">cleanup_resources</ref>();</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__smp__tests_1ga30622d86cf0516a56650d4352fa1abb6" kindref="member">test_sleep_threads</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="372"><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1adac1f3a7c1b5f4c72109e1a53e256808" kindref="member">spawn_threads</ref>(<ref refid="include_2kernel_8h_1ac145d4747518572acfc8ee1579007d54" kindref="member">K_PRIO_COOP</ref>(10),<sp/><ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>,<sp/>!<ref refid="smp_2src_2main_8c_1a5d334d83634ea28cf50efd843d38a654" kindref="member">EQUAL_PRIORITY</ref>,</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="smp_2src_2main_8c_1ac8d72017cdde7fad33f88bae68426254" kindref="member">thread_entry</ref>,<sp/>!<ref refid="smp_2src_2main_8c_1a0757d7e446273d7c89da517339ca8ad5" kindref="member">THREAD_DELAY</ref>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga51307cdfe153ab3e918b18755d97c5d9" kindref="member">k_msleep</ref>(<ref refid="smp_2src_2main_8c_1a45ba202b05caf39795aeca91b0ae547e" kindref="member">TIMEOUT</ref>);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[i].<ref refid="test__sched__timeslice__and__lock_8c_1a90990e07651e2d7a868bcbb786b7986a" kindref="member">executed</ref><sp/>==<sp/>1,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;thread<sp/>%d<sp/>did<sp/>not<sp/>execute&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1aba3c606fb097652894c3708f1c9fe1c1" kindref="member">abort_threads</ref>(<ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1acd0d6a0ac788a7d9853713ea8f93993d" kindref="member">cleanup_resources</ref>();</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a1e98a19459b0d70038309ac7553a499f" kindref="member">thread_wakeup_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="388"><highlight class="normal">{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(p2);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(p3);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thread_num<sp/>=<sp/><ref refid="group__sys-util_1ga6e5ec9c46d0140315a7c1d80d1cc3c38" kindref="member">POINTER_TO_INT</ref>(p1);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a663612301d9ca0abb5d929164f2629e8" kindref="member">thread_started</ref>[thread_num]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga51307cdfe153ab3e918b18755d97c5d9" kindref="member">k_msleep</ref>(<ref refid="smp_2src_2main_8c_1a1a522aa19bcb695a9df30032a893bee3" kindref="member">DELAY_US</ref><sp/>*<sp/>1000);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[thread_num].<ref refid="structthread__info_1af97c6af74445ab5986c4c65b70c8046c" kindref="member">executed</ref><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a3e07b566bdb6d407bb36c28096af45df" kindref="member">wakeup_on_start_thread</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tnum)</highlight></codeline>
<codeline lineno="401"><highlight class="normal">{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threads_started<sp/>=<sp/>0,<sp/>i;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>each<sp/>thread,<sp/>spin<sp/>waiting<sp/>for<sp/>it<sp/>to<sp/>first<sp/>flag<sp/>that</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>it&apos;s<sp/>going<sp/>to<sp/>sleep,<sp/>and<sp/>then<sp/>that<sp/>it&apos;s<sp/>actually<sp/>blocked</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tnum;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="smp_2src_2main_8c_1a663612301d9ca0abb5d929164f2629e8" kindref="member">thread_started</ref>[i]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!z_is_thread_prevented_from_running(<ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[i].<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>))<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tnum;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="smp_2src_2main_8c_1a663612301d9ca0abb5d929164f2629e8" kindref="member">thread_started</ref>[i]<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>threads_started<sp/>&lt;=<sp/>tnum)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threads_started++;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup</ref>(<ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[i].<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(threads_started,<sp/>tnum,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;All<sp/>threads<sp/>haven&apos;t<sp/>started&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a475c7eb972bc6c976c54d1d2e192a0f8" kindref="member">check_wokeup_threads</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tnum)</highlight></codeline>
<codeline lineno="425"><highlight class="normal">{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threads_woke_up<sp/>=<sp/>0,<sp/>i;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>k_wakeup()<sp/>isn&apos;t<sp/>synchronous,<sp/>give<sp/>the<sp/>other<sp/>CPU<sp/>time<sp/>to</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>schedule<sp/>them</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait</ref>(200000);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tnum;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[i].<ref refid="test__sched__timeslice__and__lock_8c_1a90990e07651e2d7a868bcbb786b7986a" kindref="member">executed</ref><sp/>==<sp/>1<sp/>&amp;&amp;<sp/>threads_woke_up<sp/>&lt;=<sp/>tnum)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threads_woke_up++;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(threads_woke_up,<sp/>tnum,<sp/></highlight><highlight class="stringliteral">&quot;Threads<sp/>did<sp/>not<sp/>wakeup&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__smp__tests_1ga378e5d369380f633a0f3c599d107d265" kindref="member">test_wakeup_threads</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Spawn<sp/>threads<sp/>to<sp/>run<sp/>on<sp/>all<sp/>remaining<sp/>cores<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1adac1f3a7c1b5f4c72109e1a53e256808" kindref="member">spawn_threads</ref>(<ref refid="include_2kernel_8h_1ac145d4747518572acfc8ee1579007d54" kindref="member">K_PRIO_COOP</ref>(10),<sp/><ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref><sp/>-<sp/>1,<sp/>!<ref refid="smp_2src_2main_8c_1a5d334d83634ea28cf50efd843d38a654" kindref="member">EQUAL_PRIORITY</ref>,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="smp_2src_2main_8c_1a1e98a19459b0d70038309ac7553a499f" kindref="member">thread_wakeup_entry</ref>,<sp/>!<ref refid="smp_2src_2main_8c_1a0757d7e446273d7c89da517339ca8ad5" kindref="member">THREAD_DELAY</ref>);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>all<sp/>the<sp/>threads<sp/>have<sp/>started,<sp/>then<sp/>call<sp/>wakeup<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a3e07b566bdb6d407bb36c28096af45df" kindref="member">wakeup_on_start_thread</ref>(<ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref><sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Count<sp/>threads<sp/>which<sp/>are<sp/>woken<sp/>up<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a475c7eb972bc6c976c54d1d2e192a0f8" kindref="member">check_wokeup_threads</ref>(<ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref><sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Abort<sp/>all<sp/>threads<sp/>and<sp/>cleanup<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1aba3c606fb097652894c3708f1c9fe1c1" kindref="member">abort_threads</ref>(<ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref><sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1acd0d6a0ac788a7d9853713ea8f93993d" kindref="member">cleanup_resources</ref>();</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>a<sp/>thread<sp/>for<sp/>testing<sp/>get<sp/>current<sp/>cpu<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a1ad6f06abb8fe3426c707b4d9b2ed2b6" kindref="member">thread_get_cpu_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="470"><highlight class="normal">{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bsp_id<sp/>=<sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)p1;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu_id<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>current<sp/>cpu<sp/>number<sp/>for<sp/>running<sp/>thread<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_cpu_t<sp/>*<ref refid="smp_2src_2main_8c_1a02567cf1f180beec8c2bca7eea7c5a81" kindref="member">curr_cpu</ref><sp/>=<sp/><ref refid="arc_2arch__inlines_8h_1a3e8a7515c0c3b8de5a037ce5997c73b0" kindref="member">arch_curr_cpu</ref>();</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="smp_2src_2main_8c_1a02567cf1f180beec8c2bca7eea7c5a81" kindref="member">curr_cpu</ref><sp/>!=<sp/>NULL,</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;test<sp/>failed<sp/>to<sp/>get<sp/>current<sp/>cpu.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpu_id<sp/>=<sp/><ref refid="smp_2src_2main_8c_1a02567cf1f180beec8c2bca7eea7c5a81" kindref="member">curr_cpu</ref>-&gt;id;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(bsp_id<sp/>!=<sp/>cpu_id,</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;should<sp/>not<sp/>be<sp/>the<sp/>same<sp/>with<sp/>our<sp/>BSP&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>loop<sp/>forever<sp/>to<sp/>ensure<sp/>running<sp/>on<sp/>this<sp/>CPU<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait</ref>(<ref refid="smp_2src_2main_8c_1a1a522aa19bcb695a9df30032a893bee3" kindref="member">DELAY_US</ref>);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__smp__module__tests_1ga4635d2400f9d3d19a1d5121dccf2a012" kindref="member">test_get_cpu</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="540"><highlight class="normal">{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/>thread_id;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>current<sp/>cpu<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu_id<sp/>=<sp/><ref refid="arc_2arch__inlines_8h_1a3e8a7515c0c3b8de5a037ce5997c73b0" kindref="member">arch_curr_cpu</ref>()-&gt;id;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_id<sp/>=<sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="smp_2src_2main_8c_1a8cc42352e1fcd18fbeca6388426f572b" kindref="member">t2</ref>,<sp/>t2_stack,<sp/><ref refid="smp_2src_2main_8c_1ab5dfd814ed332800adaf63eaf3714f85" kindref="member">T2_STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref>)<ref refid="smp_2src_2main_8c_1a1ad6f06abb8fe3426c707b4d9b2ed2b6" kindref="member">thread_get_cpu_entry</ref>,</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;cpu_id,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1ac145d4747518572acfc8ee1579007d54" kindref="member">K_PRIO_COOP</ref>(2),</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" kindref="member">K_INHERIT_PERMS</ref>,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait</ref>(<ref refid="smp_2src_2main_8c_1a1a522aa19bcb695a9df30032a893bee3" kindref="member">DELAY_US</ref>);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(thread_id);</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_TRACE_SCHED_IPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>global<sp/>variable<sp/>for<sp/>testing<sp/>send<sp/>IPI<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sched_ipi_has_called;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>z_trace_sched_ipi(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="562"><highlight class="normal">{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sched_ipi_has_called++;</highlight></codeline>
<codeline lineno="564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__smp__integration__tests_1ga985f61374b573f460882c305eacf86af" kindref="member">test_smp_ipi</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="612"><highlight class="normal">{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CONFIG_TRACE_SCHED_IPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gada3b1fcfa71db1bf7787c03ff45256d5" kindref="member">ztest_test_skip</ref>();</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TC_PRINT(</highlight><highlight class="stringliteral">&quot;cpu<sp/>num=%d&quot;</highlight><highlight class="normal">,<sp/><ref refid="ztest_8h_1a3377b833b4a581e2ccf3a48ac31d18fe" kindref="member">CONFIG_MP_NUM_CPUS</ref>);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3<sp/>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>issue<sp/>a<sp/>sched<sp/>ipi<sp/>to<sp/>tell<sp/>other<sp/>CPU<sp/>to<sp/>run<sp/>thread<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sched_ipi_has_called<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__arch-smp_1gadd3d6c84e3c57babc859314718e0f231" kindref="member">arch_sched_ipi</ref>();</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Need<sp/>to<sp/>wait<sp/>longer<sp/>than<sp/>we<sp/>think,<sp/>loaded<sp/>CI</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>systems<sp/>need<sp/>to<sp/>wait<sp/>for<sp/>host<sp/>scheduling<sp/>to<sp/>run<sp/>the</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>other<sp/>CPU&apos;s<sp/>thread.</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga51307cdfe153ab3e918b18755d97c5d9" kindref="member">k_msleep</ref>(100);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(sched_ipi_has_called<sp/>!=<sp/>0,</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;did<sp/>not<sp/>receive<sp/>IPI.(%d)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sched_ipi_has_called);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__fatal__apis_1gab6dfd75572a84729df534fde49ef7d85" kindref="member">k_sys_fatal_error_handler</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reason,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>z_arch_esf_t<sp/>*pEsf)</highlight></codeline>
<codeline lineno="638"><highlight class="normal">{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>trigger;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reason<sp/>!=<sp/><ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52ad6bc280fafebf22e2c97481cc4a5b7c3" kindref="member">K_ERR_KERNEL_OOPS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;wrong<sp/>error<sp/>reason\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__fatal__apis_1gaa8c0b43a2360e5319d7910e8e0ceb951" kindref="member">k_fatal_halt</ref>(reason);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trigger<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a027617fea1d108d8354253dd0ae22ef1" kindref="member">child_thread_id</ref><sp/>=<sp/><ref refid="smp_2src_2main_8c_1a02567cf1f180beec8c2bca7eea7c5a81" kindref="member">curr_cpu</ref>();</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trigger++;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1ab941de57ea71b190a87f50db871f1c24" kindref="member">main_thread_id</ref><sp/>=<sp/><ref refid="smp_2src_2main_8c_1a02567cf1f180beec8c2bca7eea7c5a81" kindref="member">curr_cpu</ref>();</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Verify<sp/>the<sp/>fatal<sp/>was<sp/>happened<sp/>on<sp/>different<sp/>core<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="smp_2src_2main_8c_1ab941de57ea71b190a87f50db871f1c24" kindref="member">main_thread_id</ref><sp/>!=<sp/><ref refid="smp_2src_2main_8c_1a027617fea1d108d8354253dd0ae22ef1" kindref="member">child_thread_id</ref>,</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fatal<sp/>on<sp/>the<sp/>same<sp/>core&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fatal_2exception_2src_2main_8c_1a610b0682228ccd092be25d3d6b324b37" kindref="member">entry_oops</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="659"><highlight class="normal">{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1abde5aa8ca5e64a045b25b88f91370dcd" kindref="member">k_oops</ref>();</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TC_ERROR(</highlight><highlight class="stringliteral">&quot;SHOULD<sp/>NEVER<sp/>SEE<sp/>THIS\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__common__tests_1gadad0d584b7bbfdf20f0958df4c26f2da" kindref="member">test_fatal_on_smp</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="674"><highlight class="normal">{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Creat<sp/>a<sp/>child<sp/>thread<sp/>and<sp/>trigger<sp/>a<sp/>crash<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="smp_2src_2main_8c_1a8cc42352e1fcd18fbeca6388426f572b" kindref="member">t2</ref>,<sp/>t2_stack,<sp/><ref refid="smp_2src_2main_8c_1ab5dfd814ed332800adaf63eaf3714f85" kindref="member">T2_STACK_SIZE</ref>,<sp/><ref refid="fatal_2exception_2src_2main_8c_1a610b0682228ccd092be25d3d6b324b37" kindref="member">entry_oops</ref>,</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(2),<sp/>0,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>hold<sp/>cpu<sp/>and<sp/>wait<sp/>for<sp/>thread<sp/>trigger<sp/>exception<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait</ref>(2000);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Manually<sp/>trigger<sp/>the<sp/>crash<sp/>in<sp/>mainthread<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fatal_2exception_2src_2main_8c_1a610b0682228ccd092be25d3d6b324b37" kindref="member">entry_oops</ref>(NULL,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>should<sp/>not<sp/>be<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ztest__assert_8h_1acd6eb423f54dce8544f7c3b1618c0374" kindref="member">ztest_test_fail</ref>();</highlight></codeline>
<codeline lineno="688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1ab5d4795ab3c80df495243bbefab95c2c" kindref="member">workq_handler</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work" kindref="compound">k_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>)</highlight></codeline>
<codeline lineno="691"><highlight class="normal">{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a027617fea1d108d8354253dd0ae22ef1" kindref="member">child_thread_id</ref><sp/>=<sp/><ref refid="smp_2src_2main_8c_1a02567cf1f180beec8c2bca7eea7c5a81" kindref="member">curr_cpu</ref>();</highlight></codeline>
<codeline lineno="693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__common__tests_1ga432420409c3573d174774a7a5ad29a47" kindref="member">test_workq_on_smp</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="704"><highlight class="normal">{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work" kindref="compound">k_work</ref><sp/><ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__workqueue__apis_1gaf20080884a2893d39cd8e862b34a2a30" kindref="member">k_work_init</ref>(&amp;<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>,<sp/><ref refid="smp_2src_2main_8c_1ab5d4795ab3c80df495243bbefab95c2c" kindref="member">workq_handler</ref>);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>submit<sp/>work<sp/>item<sp/>on<sp/>system<sp/>workq<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__workqueue__apis_1gace61b59575093d7442f39ccb7be686d7" kindref="member">k_work_submit</ref>(&amp;<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>for<sp/>some<sp/>time<sp/>to<sp/>let<sp/>other<sp/>core&apos;s<sp/>thread<sp/>run<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait</ref>(<ref refid="smp_2src_2main_8c_1a1a522aa19bcb695a9df30032a893bee3" kindref="member">DELAY_US</ref>);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>work<sp/>have<sp/>finished<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="group__workqueue__apis_1gaba8a8734768d768b433f9d8490e7df7b" kindref="member">k_work_busy_get</ref>(&amp;<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>),<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1ab941de57ea71b190a87f50db871f1c24" kindref="member">main_thread_id</ref><sp/>=<sp/><ref refid="smp_2src_2main_8c_1a02567cf1f180beec8c2bca7eea7c5a81" kindref="member">curr_cpu</ref>();</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Verify<sp/>the<sp/>ztest<sp/>thread<sp/>and<sp/>system<sp/>workq<sp/>run<sp/>on<sp/>different<sp/>core<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="smp_2src_2main_8c_1ab941de57ea71b190a87f50db871f1c24" kindref="member">main_thread_id</ref><sp/>!=<sp/><ref refid="smp_2src_2main_8c_1a027617fea1d108d8354253dd0ae22ef1" kindref="member">child_thread_id</ref>,</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;system<sp/>workq<sp/>run<sp/>on<sp/>the<sp/>same<sp/>core&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a3b1df546e8154dff4f5dbb45769ac9bb" kindref="member">t1_mutex_lock</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="726"><highlight class="normal">{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>t1<sp/>will<sp/>get<sp/>mutex<sp/>first<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mutex__apis_1ga850549358645249c285669baa49c33b0" kindref="member">k_mutex_lock</ref>((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__mutex" kindref="compound">k_mutex</ref><sp/>*)p1,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga51307cdfe153ab3e918b18755d97c5d9" kindref="member">k_msleep</ref>(2);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mutex__apis_1ga360f4c0e7258b0d7030cdb1f452b2c31" kindref="member">k_mutex_unlock</ref>((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__mutex" kindref="compound">k_mutex</ref><sp/>*)p1);</highlight></codeline>
<codeline lineno="733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a79cdb0e2391f518db5e2b308258f55a1" kindref="member">t2_mutex_lock</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="736"><highlight class="normal">{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(_current-&gt;base.global_lock_count,<sp/>0,</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;thread<sp/>global<sp/>lock<sp/>cnt<sp/>%d<sp/>is<sp/>incorrect&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_current-&gt;base.global_lock_count);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mutex__apis_1ga850549358645249c285669baa49c33b0" kindref="member">k_mutex_lock</ref>((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__mutex" kindref="compound">k_mutex</ref><sp/>*)p1,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(_current-&gt;base.global_lock_count,<sp/>0,</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;thread<sp/>global<sp/>lock<sp/>cnt<sp/>%d<sp/>is<sp/>incorrect&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_current-&gt;base.global_lock_count);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mutex__apis_1ga360f4c0e7258b0d7030cdb1f452b2c31" kindref="member">k_mutex_unlock</ref>((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__mutex" kindref="compound">k_mutex</ref><sp/>*)p1);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(_current-&gt;base.global_lock_count,<sp/>0,</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;thread<sp/>global<sp/>lock<sp/>cnt<sp/>%d<sp/>is<sp/>incorrect&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_current-&gt;base.global_lock_count);</highlight></codeline>
<codeline lineno="756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__smp__tests_1ga8719df83a2203b64766f7dd612dfc09f" kindref="member">test_smp_release_global_lock</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="767"><highlight class="normal">{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mutex__apis_1ga56b64952fb8b78b00268a21c28b41480" kindref="member">k_mutex_init</ref>(&amp;<ref refid="smp_2src_2main_8c_1a00eb7ab9e9284bfb293b87117d39e681" kindref="member">smutex</ref>);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[0].<ref refid="structthread__info_1ae36f177bc0c6ae5c2817cedf42bdcd12" kindref="member">tid</ref><sp/>=</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="smp_2src_2main_8c_1afc639d50e7a38ffe2314fc59b56cca11" kindref="member">tthread</ref>[0],<sp/><ref refid="pipe_2pipe__api_2src_2main_8c_1a8b6a52348bfbfba409bf38688d31b8a8" kindref="member">tstack</ref>[0],<sp/><ref refid="smp_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref>)<ref refid="smp_2src_2main_8c_1a3b1df546e8154dff4f5dbb45769ac9bb" kindref="member">t1_mutex_lock</ref>,</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="smp_2src_2main_8c_1a00eb7ab9e9284bfb293b87117d39e681" kindref="member">smutex</ref>,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(5),</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" kindref="member">K_INHERIT_PERMS</ref>,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[1].<ref refid="structthread__info_1ae36f177bc0c6ae5c2817cedf42bdcd12" kindref="member">tid</ref><sp/>=</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="smp_2src_2main_8c_1afc639d50e7a38ffe2314fc59b56cca11" kindref="member">tthread</ref>[1],<sp/><ref refid="pipe_2pipe__api_2src_2main_8c_1a8b6a52348bfbfba409bf38688d31b8a8" kindref="member">tstack</ref>[1],<sp/><ref refid="smp_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref>)<ref refid="smp_2src_2main_8c_1a79cdb0e2391f518db5e2b308258f55a1" kindref="member">t2_mutex_lock</ref>,</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="smp_2src_2main_8c_1a00eb7ab9e9284bfb293b87117d39e681" kindref="member">smutex</ref>,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(3),</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" kindref="member">K_INHERIT_PERMS</ref>,<sp/><ref refid="group__clock__apis_1ga302af954e87b10a9b731f1ad07775e9f" kindref="member">K_MSEC</ref>(1));</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Hold<sp/>one<sp/>of<sp/>the<sp/>cpu<sp/>to<sp/>ensure<sp/>context<sp/>switch<sp/>as<sp/>we<sp/>wanted</highlight></codeline>
<codeline lineno="785"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>can<sp/>happen<sp/>in<sp/>another<sp/>cpu.</highlight></codeline>
<codeline lineno="786"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait</ref>(20000);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(<ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[1].<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(<ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[0].<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1acd0d6a0ac788a7d9853713ea8f93993d" kindref="member">cleanup_resources</ref>();</highlight></codeline>
<codeline lineno="792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOOP_COUNT<sp/>20000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1aa2dbbcba64b87654ad46b6ceb1187c9d" kindref="member">sync_t</ref><sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1aa2dbbcba64b87654ad46b6ceb1187c9dab65c216aafb3dddd64c01523bc2fdbc6" kindref="member">LOCK_IRQ</ref>,</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1aa2dbbcba64b87654ad46b6ceb1187c9daf7b8d42f5d5f260f07575c89459ceb0d" kindref="member">LOCK_SEM</ref>,</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1aa2dbbcba64b87654ad46b6ceb1187c9dae9c43485610e3b1202c04f36655c52b8" kindref="member">LOCK_MUTEX</ref></highlight></codeline>
<codeline lineno="800"><highlight class="normal">};</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a779ec439665c5ae28d06a507a57357b7" kindref="member">global_cnt</ref>;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mutex" kindref="compound">k_mutex</ref><sp/><ref refid="smp_2src_2main_8c_1a2e9a15210a9df1fc14206446fad17a11" kindref="member">smp_mutex</ref>;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="smp_2src_2main_8c_1acedd98706d2259f8022f892fe2418a02" kindref="member">sync_lock</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="smp_2src_2main_8c_1a4982e1e38081f13c667f246e1324a955" kindref="member">sync_unlock</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a2270072cab23b6b6e34120e94fcac7a7" kindref="member">sync_lock_dummy</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*k)</highlight></codeline>
<codeline lineno="809"><highlight class="normal">{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>sync<sp/>lock<sp/>used<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal">}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a6f2d8ded8faf28e296b8449b629167e3" kindref="member">sync_lock_irq</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*k)</highlight></codeline>
<codeline lineno="814"><highlight class="normal">{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)k)<sp/>=<sp/><ref refid="group__isr__apis_1ga19fdde73c3b02fcca6cf1d1e67631228" kindref="member">irq_lock</ref>();</highlight></codeline>
<codeline lineno="816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a918a10db1ef09eb1454dc9f0a9dda677" kindref="member">sync_unlock_irq</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*k)</highlight></codeline>
<codeline lineno="819"><highlight class="normal">{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__isr__apis_1ga646045943b3b2a130738bcc48867bf57" kindref="member">irq_unlock</ref>(*(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)k);</highlight></codeline>
<codeline lineno="821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a10704f7f351d7f431d023aef9602f31c" kindref="member">sync_lock_sem</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*k)</highlight></codeline>
<codeline lineno="824"><highlight class="normal">{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gac71e2383c1920dddc45a561cacfef090" kindref="member">k_sem_take</ref>(&amp;<ref refid="smp_2src_2main_8c_1afd605ccd7d478241905968d3b43c25fc" kindref="member">smp_sem</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="826"><highlight class="normal">}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a604dbdc3b0843d718badc4d49cc5ecc9" kindref="member">sync_unlock_sem</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*k)</highlight></codeline>
<codeline lineno="829"><highlight class="normal">{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gab9be3cf1988af2cd6afdace52d497c84" kindref="member">k_sem_give</ref>(&amp;<ref refid="smp_2src_2main_8c_1afd605ccd7d478241905968d3b43c25fc" kindref="member">smp_sem</ref>);</highlight></codeline>
<codeline lineno="831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a6d7a31bb92d8be6d93a5d086f63b846d" kindref="member">sync_lock_mutex</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*k)</highlight></codeline>
<codeline lineno="834"><highlight class="normal">{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mutex__apis_1ga850549358645249c285669baa49c33b0" kindref="member">k_mutex_lock</ref>(&amp;<ref refid="smp_2src_2main_8c_1a2e9a15210a9df1fc14206446fad17a11" kindref="member">smp_mutex</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="836"><highlight class="normal">}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a292c1f2222ac47bdb537402a7a305a5a" kindref="member">sync_unlock_mutex</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*k)</highlight></codeline>
<codeline lineno="839"><highlight class="normal">{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mutex__apis_1ga360f4c0e7258b0d7030cdb1f452b2c31" kindref="member">k_mutex_unlock</ref>(&amp;<ref refid="smp_2src_2main_8c_1a2e9a15210a9df1fc14206446fad17a11" kindref="member">smp_mutex</ref>);</highlight></codeline>
<codeline lineno="841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a288305af08e88c5e59fbe15dbbcf9f98" kindref="member">sync_init</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lock_type)</highlight></codeline>
<codeline lineno="844"><highlight class="normal">{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(lock_type)<sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1aa2dbbcba64b87654ad46b6ceb1187c9dab65c216aafb3dddd64c01523bc2fdbc6" kindref="member">LOCK_IRQ</ref>:</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1acedd98706d2259f8022f892fe2418a02" kindref="member">sync_lock</ref><sp/>=<sp/><ref refid="smp_2src_2main_8c_1a6f2d8ded8faf28e296b8449b629167e3" kindref="member">sync_lock_irq</ref>;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a4982e1e38081f13c667f246e1324a955" kindref="member">sync_unlock</ref><sp/>=<sp/><ref refid="smp_2src_2main_8c_1a918a10db1ef09eb1454dc9f0a9dda677" kindref="member">sync_unlock_irq</ref>;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1aa2dbbcba64b87654ad46b6ceb1187c9daf7b8d42f5d5f260f07575c89459ceb0d" kindref="member">LOCK_SEM</ref>:</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1acedd98706d2259f8022f892fe2418a02" kindref="member">sync_lock</ref><sp/>=<sp/><ref refid="smp_2src_2main_8c_1a10704f7f351d7f431d023aef9602f31c" kindref="member">sync_lock_sem</ref>;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a4982e1e38081f13c667f246e1324a955" kindref="member">sync_unlock</ref><sp/>=<sp/><ref refid="smp_2src_2main_8c_1a604dbdc3b0843d718badc4d49cc5ecc9" kindref="member">sync_unlock_sem</ref>;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gadcd0e6cfba3392fb887222eafe4c1845" kindref="member">k_sem_init</ref>(&amp;<ref refid="smp_2src_2main_8c_1afd605ccd7d478241905968d3b43c25fc" kindref="member">smp_sem</ref>,<sp/>1,<sp/>3);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1aa2dbbcba64b87654ad46b6ceb1187c9dae9c43485610e3b1202c04f36655c52b8" kindref="member">LOCK_MUTEX</ref>:</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1acedd98706d2259f8022f892fe2418a02" kindref="member">sync_lock</ref><sp/>=<sp/><ref refid="smp_2src_2main_8c_1a6d7a31bb92d8be6d93a5d086f63b846d" kindref="member">sync_lock_mutex</ref>;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a4982e1e38081f13c667f246e1324a955" kindref="member">sync_unlock</ref><sp/>=<sp/><ref refid="smp_2src_2main_8c_1a292c1f2222ac47bdb537402a7a305a5a" kindref="member">sync_unlock_mutex</ref>;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mutex__apis_1ga56b64952fb8b78b00268a21c28b41480" kindref="member">k_mutex_init</ref>(&amp;<ref refid="smp_2src_2main_8c_1a2e9a15210a9df1fc14206446fad17a11" kindref="member">smp_mutex</ref>);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1acedd98706d2259f8022f892fe2418a02" kindref="member">sync_lock</ref><sp/>=<sp/><ref refid="smp_2src_2main_8c_1a4982e1e38081f13c667f246e1324a955" kindref="member">sync_unlock</ref><sp/>=<sp/><ref refid="smp_2src_2main_8c_1a2270072cab23b6b6e34120e94fcac7a7" kindref="member">sync_lock_dummy</ref>;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal">}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a16cd18d3f9458db7e97853b2c70fd552" kindref="member">inc_global_cnt</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="printk_8c_1adc08ed1554f35803d229aeaf11216b3f" kindref="member">c</ref>)</highlight></codeline>
<codeline lineno="867"><highlight class="normal">{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="smp_2src_2main_8c_1a09002b61ad87b03f8a39b3c7f9a7296b" kindref="member">LOOP_COUNT</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1acedd98706d2259f8022f892fe2418a02" kindref="member">sync_lock</ref>(&amp;<ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a779ec439665c5ae28d06a507a57357b7" kindref="member">global_cnt</ref>++;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a779ec439665c5ae28d06a507a57357b7" kindref="member">global_cnt</ref>--;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a779ec439665c5ae28d06a507a57357b7" kindref="member">global_cnt</ref>++;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a4982e1e38081f13c667f246e1324a955" kindref="member">sync_unlock</ref>(&amp;<ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a71f12c24f047ec28751ac184736cdde8" kindref="member">run_concurrency</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*func)</highlight></codeline>
<codeline lineno="883"><highlight class="normal">{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>start_t,<sp/>end_t;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a288305af08e88c5e59fbe15dbbcf9f98" kindref="member">sync_init</ref>(type);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a779ec439665c5ae28d06a507a57357b7" kindref="member">global_cnt</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_t<sp/>=<sp/><ref refid="group__clock__apis_1ga208687de625e0036558343b4e66143d3" kindref="member">k_cycle_get_32</ref>();</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[0].<ref refid="structthread__info_1ae36f177bc0c6ae5c2817cedf42bdcd12" kindref="member">tid</ref><sp/>=</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="smp_2src_2main_8c_1afc639d50e7a38ffe2314fc59b56cca11" kindref="member">tthread</ref>[0],<sp/><ref refid="pipe_2pipe__api_2src_2main_8c_1a8b6a52348bfbfba409bf38688d31b8a8" kindref="member">tstack</ref>[0],<sp/><ref refid="smp_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref>)func,</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(1),</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" kindref="member">K_INHERIT_PERMS</ref>,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[1].<ref refid="structthread__info_1ae36f177bc0c6ae5c2817cedf42bdcd12" kindref="member">tid</ref><sp/>=</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="smp_2src_2main_8c_1afc639d50e7a38ffe2314fc59b56cca11" kindref="member">tthread</ref>[1],<sp/><ref refid="pipe_2pipe__api_2src_2main_8c_1a8b6a52348bfbfba409bf38688d31b8a8" kindref="member">tstack</ref>[1],<sp/><ref refid="smp_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref>)func,</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(1),</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" kindref="member">K_INHERIT_PERMS</ref>,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref><sp/>=</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="smp_2src_2main_8c_1a8cc42352e1fcd18fbeca6388426f572b" kindref="member">t2</ref>,<sp/>t2_stack,<sp/><ref refid="smp_2src_2main_8c_1ab5dfd814ed332800adaf63eaf3714f85" kindref="member">T2_STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref>)func,</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(1),</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" kindref="member">K_INHERIT_PERMS</ref>,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(<ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[0].<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(<ref refid="smp_2src_2main_8c_1a27c38a55d575e62bfb0f9ac96a8cec33" kindref="member">tinfo</ref>[1].<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1acd0d6a0ac788a7d9853713ea8f93993d" kindref="member">cleanup_resources</ref>();</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_t<sp/>=<sp/><sp/><ref refid="group__clock__apis_1ga208687de625e0036558343b4e66143d3" kindref="member">k_cycle_get_32</ref>();</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;type<sp/>%d:<sp/>cnt<sp/>%d,<sp/>spend<sp/>%u<sp/>ms\n&quot;</highlight><highlight class="normal">,<sp/>type,<sp/><ref refid="smp_2src_2main_8c_1a779ec439665c5ae28d06a507a57357b7" kindref="member">global_cnt</ref>,</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="time__units_8h_1a89435f72ec1a99f9b2559df0eee48897" kindref="member">k_cyc_to_ms_ceil32</ref>(end_t<sp/>-<sp/>start_t));</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a779ec439665c5ae28d06a507a57357b7" kindref="member">global_cnt</ref><sp/>==<sp/>(<ref refid="smp_2src_2main_8c_1a09002b61ad87b03f8a39b3c7f9a7296b" kindref="member">LOOP_COUNT</ref><sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__smp__tests_1ga73abecc7cec1174adc97734c85086c50" kindref="member">test_inc_concurrency</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="941"><highlight class="normal">{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>increasing<sp/>global<sp/>var<sp/>with<sp/>irq<sp/>lock<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="smp_2src_2main_8c_1a71f12c24f047ec28751ac184736cdde8" kindref="member">run_concurrency</ref>(<ref refid="smp_2src_2main_8c_1aa2dbbcba64b87654ad46b6ceb1187c9dab65c216aafb3dddd64c01523bc2fdbc6" kindref="member">LOCK_IRQ</ref>,<sp/><ref refid="smp_2src_2main_8c_1a16cd18d3f9458db7e97853b2c70fd552" kindref="member">inc_global_cnt</ref>),</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;total<sp/>count<sp/>%d<sp/>is<sp/>wrong(i)&quot;</highlight><highlight class="normal">,<sp/><ref refid="smp_2src_2main_8c_1a779ec439665c5ae28d06a507a57357b7" kindref="member">global_cnt</ref>);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>increasing<sp/>global<sp/>var<sp/>with<sp/>irq<sp/>lock<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="smp_2src_2main_8c_1a71f12c24f047ec28751ac184736cdde8" kindref="member">run_concurrency</ref>(<ref refid="smp_2src_2main_8c_1aa2dbbcba64b87654ad46b6ceb1187c9daf7b8d42f5d5f260f07575c89459ceb0d" kindref="member">LOCK_SEM</ref>,<sp/><ref refid="smp_2src_2main_8c_1a16cd18d3f9458db7e97853b2c70fd552" kindref="member">inc_global_cnt</ref>),</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;total<sp/>count<sp/>%d<sp/>is<sp/>wrong(s)&quot;</highlight><highlight class="normal">,<sp/><ref refid="smp_2src_2main_8c_1a779ec439665c5ae28d06a507a57357b7" kindref="member">global_cnt</ref>);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>increasing<sp/>global<sp/>var<sp/>with<sp/>irq<sp/>lock<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="smp_2src_2main_8c_1a71f12c24f047ec28751ac184736cdde8" kindref="member">run_concurrency</ref>(<ref refid="smp_2src_2main_8c_1aa2dbbcba64b87654ad46b6ceb1187c9dae9c43485610e3b1202c04f36655c52b8" kindref="member">LOCK_MUTEX</ref>,<sp/><ref refid="smp_2src_2main_8c_1a16cd18d3f9458db7e97853b2c70fd552" kindref="member">inc_global_cnt</ref>),</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;total<sp/>count<sp/>%d<sp/>is<sp/>wrong(M)&quot;</highlight><highlight class="normal">,<sp/><ref refid="smp_2src_2main_8c_1a779ec439665c5ae28d06a507a57357b7" kindref="member">global_cnt</ref>);</highlight></codeline>
<codeline lineno="953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__smp__tests_1ga814d53aaddece1a47f29b91b49073ceb" kindref="member">process_events</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg0,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg2)</highlight></codeline>
<codeline lineno="964"><highlight class="normal">{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>)<sp/>arg0;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll</ref>(&amp;<ref refid="smp_2src_2main_8c_1a6341759f7642f5ec47b96f08d1dfafde" kindref="member">tevent</ref>[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">],<sp/>1,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="smp_2src_2main_8c_1a6341759f7642f5ec47b96f08d1dfafde" kindref="member">tevent</ref>[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">].<ref refid="test__poll_8c_1a88e5e0522432c8373efb54e842b92a69" kindref="member">signal</ref>-&gt;<ref refid="structk__poll__signal_1ab438c1e36cecda66fe2c4642518a1db1" kindref="member">result</ref><sp/>!=<sp/>0x55)<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ztest__assert_8h_1acd6eb423f54dce8544f7c3b1618c0374" kindref="member">ztest_test_fail</ref>();</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a6341759f7642f5ec47b96f08d1dfafde" kindref="member">tevent</ref>[id].<ref refid="structk__poll__event_1a130aaff7a8908993ed6be737a94a52ab" kindref="member">signal</ref>-&gt;<ref refid="structk__poll__signal_1ae9fe6751d75f7d2b2800cb723603c0fe" kindref="member">signaled</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smp_2src_2main_8c_1a6341759f7642f5ec47b96f08d1dfafde" kindref="member">tevent</ref>[id].<ref refid="structk__poll__event_1aaf4f32852d799a406bfeea4e57891129" kindref="member">state</ref><sp/>=<sp/><ref refid="group__poll__apis_1ga522822c5e06a89b22ce4dcefd10c66aa" kindref="member">K_POLL_STATE_NOT_READY</ref>;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__poll__apis_1ga02d899d1455ae1f3f55ffe8f1ebd6994" kindref="member">k_poll_signal_reset</ref>(&amp;<ref refid="smp_2src_2main_8c_1ae5df64a797b6ebeafae3f60070d3cb75" kindref="member">tsignal</ref>[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal">}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1aecac3a9664bb261abc7fca142ecabaae" kindref="member">signal_raise</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg0,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg2)</highlight></codeline>
<codeline lineno="982"><highlight class="normal">{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__poll__apis_1gad0bf3825f828ec3ca37481bf3cbd6723" kindref="member">k_poll_signal_raise</ref>(&amp;<ref refid="smp_2src_2main_8c_1ae5df64a797b6ebeafae3f60070d3cb75" kindref="member">tsignal</ref>[i],<sp/>0x55);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal">}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smp_2src_2main_8c_1a536319a22ba2682ec46aeb4fa02e1165" kindref="member">test_smp_switch_torture</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="991"><highlight class="normal">{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__poll__apis_1gaee3090c2a912b93b6a5855e3018c3551" kindref="member">k_poll_signal_init</ref>(&amp;<ref refid="smp_2src_2main_8c_1ae5df64a797b6ebeafae3f60070d3cb75" kindref="member">tsignal</ref>[i]);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__poll__apis_1gaa06bddd93a024fc5326d93187d80eb03" kindref="member">k_poll_event_init</ref>(&amp;<ref refid="smp_2src_2main_8c_1a6341759f7642f5ec47b96f08d1dfafde" kindref="member">tevent</ref>[i],<sp/><ref refid="group__poll__apis_1ga144d8eb34d85f6053e454410a10bf56a" kindref="member">K_POLL_TYPE_SIGNAL</ref>,</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__poll__apis_1gga36d7978872a83191dd3cc16d62165adda22874743e2f6b0f1fd55c5375732b681" kindref="member">K_POLL_MODE_NOTIFY_ONLY</ref>,<sp/>&amp;<ref refid="smp_2src_2main_8c_1ae5df64a797b6ebeafae3f60070d3cb75" kindref="member">tsignal</ref>[i]);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="smp_2src_2main_8c_1afc639d50e7a38ffe2314fc59b56cca11" kindref="member">tthread</ref>[i],<sp/><ref refid="pipe_2pipe__api_2src_2main_8c_1a8b6a52348bfbfba409bf38688d31b8a8" kindref="member">tstack</ref>[i],<sp/><ref refid="smp_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref>)<sp/><ref refid="group__kernel__smp__tests_1ga814d53aaddece1a47f29b91b49073ceb" kindref="member">process_events</ref>,</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>i,<sp/>NULL,<sp/>NULL,<sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(i<sp/>+<sp/>1),</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" kindref="member">K_INHERIT_PERMS</ref>,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="smp_2src_2main_8c_1a8cc42352e1fcd18fbeca6388426f572b" kindref="member">t2</ref>,<sp/>t2_stack,<sp/><ref refid="smp_2src_2main_8c_1ab5dfd814ed332800adaf63eaf3714f85" kindref="member">T2_STACK_SIZE</ref>,<sp/><ref refid="smp_2src_2main_8c_1aecac3a9664bb261abc7fca142ecabaae" kindref="member">signal_raise</ref>,</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>NULL,<sp/><ref refid="include_2kernel_8h_1ac145d4747518572acfc8ee1579007d54" kindref="member">K_PRIO_COOP</ref>(2),<sp/>0,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga48d4b041790454da4d68ac8711f29657" kindref="member">k_sleep</ref>(<ref refid="group__clock__apis_1ga302af954e87b10a9b731f1ad07775e9f" kindref="member">K_MSEC</ref>(<ref refid="smp_2src_2main_8c_1ae0777ae4bbbd765657bf190bf02f8618" kindref="member">SLEEP_MS_LONG</ref>));</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(&amp;<ref refid="smp_2src_2main_8c_1a8cc42352e1fcd18fbeca6388426f572b" kindref="member">t2</ref>);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="smp_2src_2main_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(&amp;<ref refid="smp_2src_2main_8c_1afc639d50e7a38ffe2314fc59b56cca11" kindref="member">tthread</ref>[i]);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="common_2src_2main_8c_1a8a4533f287d99bb2d7c24c0e29c9a449" kindref="member">test_main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1015"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sleep<sp/>a<sp/>bit<sp/>to<sp/>guarantee<sp/>that<sp/>both<sp/>CPUs<sp/>enter<sp/>an<sp/>idle</highlight></codeline>
<codeline lineno="1017"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>thread<sp/>from<sp/>which<sp/>they<sp/>can<sp/>exit<sp/>correctly<sp/>to<sp/>run<sp/>the<sp/>main</highlight></codeline>
<codeline lineno="1018"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>test.</highlight></codeline>
<codeline lineno="1019"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga48d4b041790454da4d68ac8711f29657" kindref="member">k_sleep</ref>(<ref refid="group__clock__apis_1ga302af954e87b10a9b731f1ad07775e9f" kindref="member">K_MSEC</ref>(10));</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga2ad3ecbbedb04310c6a4ac997a8d3550" kindref="member">ztest_test_suite</ref>(smp,</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__smp__tests_1gaf8cf612155ec7e770ff78b2b2382f1b5" kindref="member">test_smp_coop_threads</ref>),</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__smp__tests_1ga1cda346f65b3b6c992bafc671d76d176" kindref="member">test_cpu_id_threads</ref>),</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__smp__tests_1gac4422c09831ed94cf646359a171f6c37" kindref="member">test_coop_resched_threads</ref>),</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__smp__tests_1ga5c924585e8f9e2c70ff679d9f98c7531" kindref="member">test_preempt_resched_threads</ref>),</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__smp__tests_1gaa932b5f20a1a0eef142d78a41321e7ae" kindref="member">test_yield_threads</ref>),</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__smp__tests_1ga30622d86cf0516a56650d4352fa1abb6" kindref="member">test_sleep_threads</ref>),</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__smp__tests_1ga378e5d369380f633a0f3c599d107d265" kindref="member">test_wakeup_threads</ref>),</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__smp__integration__tests_1ga985f61374b573f460882c305eacf86af" kindref="member">test_smp_ipi</ref>),</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__smp__module__tests_1ga4635d2400f9d3d19a1d5121dccf2a012" kindref="member">test_get_cpu</ref>),</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__common__tests_1gadad0d584b7bbfdf20f0958df4c26f2da" kindref="member">test_fatal_on_smp</ref>),</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__common__tests_1ga432420409c3573d174774a7a5ad29a47" kindref="member">test_workq_on_smp</ref>),</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__smp__tests_1ga8719df83a2203b64766f7dd612dfc09f" kindref="member">test_smp_release_global_lock</ref>),</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__smp__tests_1ga73abecc7cec1174adc97734c85086c50" kindref="member">test_inc_concurrency</ref>),</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="smp_2src_2main_8c_1a536319a22ba2682ec46aeb4fa02e1165" kindref="member">test_smp_switch_torture</ref>)</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga7f76df4df4bf68a605b923fed8e5465c" kindref="member">ztest_run_test_suite</ref>(smp);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/kernel/smp/src/main.c"/>
  </compounddef>
</doxygen>
