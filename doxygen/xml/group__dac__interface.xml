<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__dac__interface" kind="group">
    <compoundname>dac_interface</compoundname>
    <title>DAC driver APIs</title>
    <innerclass refid="structdac__channel__cfg" prot="public">dac_channel_cfg</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__dac__interface_1gab8be77003ba8fd7225c0808f95602a56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dac_channel_setup</definition>
        <argsstring>(const struct device *dev, const struct dac_channel_cfg *channel_cfg)</argsstring>
        <name>dac_channel_setup</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdac__channel__cfg" kindref="compound">dac_channel_cfg</ref> *</type>
          <declname>channel_cfg</declname>
        </param>
        <briefdescription>
<para>Configure a DAC channel. </para>
        </briefdescription>
        <detaileddescription>
<para>It is required to call this function and configure each channel before it is selected for a write request.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel configuration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>On success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If a parameter with an invalid value has been provided. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If the requested resolution is not supported. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/dac.h" line="88" column="6" declfile="include/drivers/dac.h" declline="88" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__dac__interface_1ga437a6f6b2402cf2e2a2a689429663b4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dac_write_value</definition>
        <argsstring>(const struct device *dev, uint8_t channel, uint32_t value)</argsstring>
        <name>dac_write_value</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write a single value to a DAC channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the channel to be used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be written to DAC output registers.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>On success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If a parameter with an invalid value has been provided. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/dac.h" line="110" column="6" declfile="include/drivers/dac.h" declline="110" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>DAC driver APIs. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
