<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__net__pkt__filter" kind="group">
    <compoundname>net_pkt_filter</compoundname>
    <title>Network Packet Filter API</title>
    <innerclass refid="structnpf__test" prot="public">npf_test</innerclass>
    <innerclass refid="structnpf__rule" prot="public">npf_rule</innerclass>
    <innerclass refid="structnpf__rule__list" prot="public">npf_rule_list</innerclass>
    <innergroup refid="group__npf__basic__cond">Basic Filter Conditions</innergroup>
    <innergroup refid="group__npf__eth__cond">Ethernet Filter Conditions</innergroup>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__net__pkt__filter_1gaac489d75c023952243589cba7ff7367a" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structnpf__rule" kindref="compound">npf_rule</ref></type>
        <definition>struct npf_rule npf_default_ok</definition>
        <argsstring></argsstring>
        <name>npf_default_ok</name>
        <briefdescription>
<para>Default rule list termination for accepting a packet. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="56" column="22" declfile="include/net/net_pkt_filter.h" declline="56" declcolumn="22"/>
      </memberdef>
      <memberdef kind="variable" id="group__net__pkt__filter_1ga8fc592feedeceb5172f8747a29697dd7" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structnpf__rule" kindref="compound">npf_rule</ref></type>
        <definition>struct npf_rule npf_default_drop</definition>
        <argsstring></argsstring>
        <name>npf_default_drop</name>
        <briefdescription>
<para>Default rule list termination for rejecting a packet. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="58" column="22" declfile="include/net/net_pkt_filter.h" declline="58" declcolumn="22"/>
      </memberdef>
      <memberdef kind="variable" id="group__net__pkt__filter_1ga8017a041d3168c76e39bdfac011b9315" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structnpf__rule__list" kindref="compound">npf_rule_list</ref></type>
        <definition>struct npf_rule_list npf_send_rules</definition>
        <argsstring></argsstring>
        <name>npf_send_rules</name>
        <briefdescription>
<para>rule list applied to outgoing packets </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="67" column="27" declfile="include/net/net_pkt_filter.h" declline="67" declcolumn="27"/>
      </memberdef>
      <memberdef kind="variable" id="group__net__pkt__filter_1ga9714529658625e906264a46ad1a9be6f" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structnpf__rule__list" kindref="compound">npf_rule_list</ref></type>
        <definition>struct npf_rule_list npf_recv_rules</definition>
        <argsstring></argsstring>
        <name>npf_recv_rules</name>
        <briefdescription>
<para>rule list applied to incoming packets </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="69" column="27" declfile="include/net/net_pkt_filter.h" declline="69" declcolumn="27"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__net__pkt__filter_1ga3b2a85558b6756e76760d9a40c780e28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void npf_insert_rule</definition>
        <argsstring>(struct npf_rule_list *rules, struct npf_rule *rule)</argsstring>
        <name>npf_insert_rule</name>
        <param>
          <type>struct <ref refid="structnpf__rule__list" kindref="compound">npf_rule_list</ref> *</type>
          <declname>rules</declname>
        </param>
        <param>
          <type>struct <ref refid="structnpf__rule" kindref="compound">npf_rule</ref> *</type>
          <declname>rule</declname>
        </param>
        <briefdescription>
<para>Insert a rule at the front of given rule list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rules</parametername>
</parameternamelist>
<parameterdescription>
<para>the affected rule list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rule</parametername>
</parameternamelist>
<parameterdescription>
<para>the rule to be inserted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="77" column="6" declfile="include/net/net_pkt_filter.h" declline="77" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt__filter_1gadfa956e4af3c45460846fc22f863e697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void npf_append_rule</definition>
        <argsstring>(struct npf_rule_list *rules, struct npf_rule *rule)</argsstring>
        <name>npf_append_rule</name>
        <param>
          <type>struct <ref refid="structnpf__rule__list" kindref="compound">npf_rule_list</ref> *</type>
          <declname>rules</declname>
        </param>
        <param>
          <type>struct <ref refid="structnpf__rule" kindref="compound">npf_rule</ref> *</type>
          <declname>rule</declname>
        </param>
        <briefdescription>
<para>Append a rule at the end of given rule list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rules</parametername>
</parameternamelist>
<parameterdescription>
<para>the affected rule list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rule</parametername>
</parameternamelist>
<parameterdescription>
<para>the rule to be appended </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="85" column="6" declfile="include/net/net_pkt_filter.h" declline="85" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt__filter_1ga4d7426db901debff35e1de5805e06c71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool npf_remove_rule</definition>
        <argsstring>(struct npf_rule_list *rules, struct npf_rule *rule)</argsstring>
        <name>npf_remove_rule</name>
        <param>
          <type>struct <ref refid="structnpf__rule__list" kindref="compound">npf_rule_list</ref> *</type>
          <declname>rules</declname>
        </param>
        <param>
          <type>struct <ref refid="structnpf__rule" kindref="compound">npf_rule</ref> *</type>
          <declname>rule</declname>
        </param>
        <briefdescription>
<para>Remove a rule from the given rule list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rules</parametername>
</parameternamelist>
<parameterdescription>
<para>the affected rule list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rule</parametername>
</parameternamelist>
<parameterdescription>
<para>the rule to be removed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>if given rule was found in the rule list and removed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="94" column="6" declfile="include/net/net_pkt_filter.h" declline="94" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt__filter_1ga54916eb4943e4b47cd31eb23827d0dd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool npf_remove_all_rules</definition>
        <argsstring>(struct npf_rule_list *rules)</argsstring>
        <name>npf_remove_all_rules</name>
        <param>
          <type>struct <ref refid="structnpf__rule__list" kindref="compound">npf_rule_list</ref> *</type>
          <declname>rules</declname>
        </param>
        <briefdescription>
<para>Remove all rules from the given rule list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rules</parametername>
</parameternamelist>
<parameterdescription>
<para>the affected rule list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>if at least one rule was removed from the rule list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="102" column="6" declfile="include/net/net_pkt_filter.h" declline="102" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__net__pkt__filter_1ga4d3592647f81cd44a84ded4fff8edcf5" prot="public" static="no">
        <name>npf_insert_send_rule</name>
        <param><defname>rule</defname></param>
        <initializer><ref refid="group__net__pkt__filter_1ga3b2a85558b6756e76760d9a40c780e28" kindref="member">npf_insert_rule</ref>(&amp;<ref refid="group__net__pkt__filter_1ga8017a041d3168c76e39bdfac011b9315" kindref="member">npf_send_rules</ref>, rule)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="105" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__pkt__filter_1ga3f6ecadc4842b61731984968ab4c6b89" prot="public" static="no">
        <name>npf_insert_recv_rule</name>
        <param><defname>rule</defname></param>
        <initializer><ref refid="group__net__pkt__filter_1ga3b2a85558b6756e76760d9a40c780e28" kindref="member">npf_insert_rule</ref>(&amp;<ref refid="group__net__pkt__filter_1ga9714529658625e906264a46ad1a9be6f" kindref="member">npf_recv_rules</ref>, rule)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="106" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__pkt__filter_1ga8cd06cba4360c1b56709e59ff06dbeb3" prot="public" static="no">
        <name>npf_append_send_rule</name>
        <param><defname>rule</defname></param>
        <initializer><ref refid="group__net__pkt__filter_1gadfa956e4af3c45460846fc22f863e697" kindref="member">npf_append_rule</ref>(&amp;<ref refid="group__net__pkt__filter_1ga8017a041d3168c76e39bdfac011b9315" kindref="member">npf_send_rules</ref>, rule)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="107" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__pkt__filter_1ga263c7ee6e3c860353b5720c613690b0a" prot="public" static="no">
        <name>npf_append_recv_rule</name>
        <param><defname>rule</defname></param>
        <initializer><ref refid="group__net__pkt__filter_1gadfa956e4af3c45460846fc22f863e697" kindref="member">npf_append_rule</ref>(&amp;<ref refid="group__net__pkt__filter_1ga9714529658625e906264a46ad1a9be6f" kindref="member">npf_recv_rules</ref>, rule)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="108" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__pkt__filter_1ga43f03a0ce73d6dee52f43fd3577aa240" prot="public" static="no">
        <name>npf_remove_send_rule</name>
        <param><defname>rule</defname></param>
        <initializer><ref refid="group__net__pkt__filter_1ga4d7426db901debff35e1de5805e06c71" kindref="member">npf_remove_rule</ref>(&amp;<ref refid="group__net__pkt__filter_1ga8017a041d3168c76e39bdfac011b9315" kindref="member">npf_send_rules</ref>, rule)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="109" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__pkt__filter_1gae78cb092522564303a665d1a5d3596b9" prot="public" static="no">
        <name>npf_remove_recv_rule</name>
        <param><defname>rule</defname></param>
        <initializer><ref refid="group__net__pkt__filter_1ga4d7426db901debff35e1de5805e06c71" kindref="member">npf_remove_rule</ref>(&amp;<ref refid="group__net__pkt__filter_1ga9714529658625e906264a46ad1a9be6f" kindref="member">npf_recv_rules</ref>, rule)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="110" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__pkt__filter_1gaea48284508ee244bce6d78b29bc2f471" prot="public" static="no">
        <name>npf_remove_all_send_rules</name>
        <param></param>
        <initializer><ref refid="group__net__pkt__filter_1ga54916eb4943e4b47cd31eb23827d0dd5" kindref="member">npf_remove_all_rules</ref>(&amp;<ref refid="group__net__pkt__filter_1ga8017a041d3168c76e39bdfac011b9315" kindref="member">npf_send_rules</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="111" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__pkt__filter_1gac08801a6e8bd14bfd6eeaf2f28a1ed1a" prot="public" static="no">
        <name>npf_remove_all_recv_rules</name>
        <param></param>
        <initializer><ref refid="group__net__pkt__filter_1ga54916eb4943e4b47cd31eb23827d0dd5" kindref="member">npf_remove_all_rules</ref>(&amp;<ref refid="group__net__pkt__filter_1ga9714529658625e906264a46ad1a9be6f" kindref="member">npf_recv_rules</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="112" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__pkt__filter_1ga2f45093d5ad164d5c51a8996f7f04d32" prot="public" static="no">
        <name>NPF_RULE</name>
        <param><defname>_name</defname></param>
        <param><defname>_result</defname></param>
        <param><defname>...</defname></param>
        <initializer>	struct <ref refid="structnpf__rule" kindref="compound">npf_rule</ref> _name = { \
		.<ref refid="structresult" kindref="compound">result</ref> = (_result), \
		.nb_tests = <ref refid="group__sys-util_1ga8a0e9835e0a8f864ffc2359b9c419cc2" kindref="member">NUM_VA_ARGS_LESS_1</ref>(__VA_ARGS__) + 1, \
		.<ref refid="timer__convert_8c_1a035367bcde305038de5052ea816afe0d" kindref="member">tests</ref> = { <ref refid="threads_2no-multithreading_2src_2main_8c_1af2de6cd2b60b623046744e6314a5efb6" kindref="member">FOR_EACH</ref>(Z_NPF_TEST_ADDR, (,), __VA_ARGS__) }, \
	}</initializer>
        <briefdescription>
<para>Statically define one packet filter rule. </para>
        </briefdescription>
        <detaileddescription>
<para>This creates a rule from a variable amount of filter conditions. This rule can then be inserted or appended to the rule list for a given network packet path.</para>
<para>Example:</para>
<para><programlisting filename=".c"><codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__npf__basic__cond_1gacd56b9bcf2b2ba4759402650a9bff67a" kindref="member">NPF_SIZE_MAX</ref>(maxsize_200,<sp/>200);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__npf__eth__cond_1gace7de72d4c64e128a825f28f94d8b1b2" kindref="member">NPF_ETH_TYPE_MATCH</ref>(ip_packet,<sp/>NET_ETH_PTYPE_IP);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__net__pkt__filter_1ga2f45093d5ad164d5c51a8996f7f04d32" kindref="member">NPF_RULE</ref>(small_ip_pkt,<sp/><ref refid="group__net__core_1gga8e5393f3bdd85491f221324e637c3896a2a49d766ffb9422176da8e4712fdb047" kindref="member">NET_OK</ref>,<sp/>ip_packet,<sp/>maxsize_200);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>install_my_filter(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__net__pkt__filter_1ga3f6ecadc4842b61731984968ab4c6b89" kindref="member">npf_insert_recv_rule</ref>(&amp;<ref refid="group__net__pkt__filter_1ga8fc592feedeceb5172f8747a29697dd7" kindref="member">npf_default_drop</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__net__pkt__filter_1ga3f6ecadc4842b61731984968ab4c6b89" kindref="member">npf_insert_recv_rule</ref>(&amp;small_ip_pkt);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>The above would accept IP packets that are 200 bytes or smaller, and drop all other packets.</para>
<para>Another (less efficient) way to create the same result could be:</para>
<para><programlisting filename=".c"><codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__npf__basic__cond_1gaf142455f9bea3dea8faa0a913072b63e" kindref="member">NPF_SIZE_MIN</ref>(minsize_201,<sp/>201);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__npf__eth__cond_1gab9bf6d58433e273220c5fab76f608545" kindref="member">NPF_ETH_TYPE_UNMATCH</ref>(not_ip_packet,<sp/>NET_ETH_PTYPE_IP);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__net__pkt__filter_1ga2f45093d5ad164d5c51a8996f7f04d32" kindref="member">NPF_RULE</ref>(reject_big_pkts,<sp/><ref refid="group__net__core_1gga8e5393f3bdd85491f221324e637c3896a464f79c041fb589d518eeef445c477c3" kindref="member">NET_DROP</ref>,<sp/>minsize_201);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__net__pkt__filter_1ga2f45093d5ad164d5c51a8996f7f04d32" kindref="member">NPF_RULE</ref>(reject_non_ip,<sp/><ref refid="group__net__core_1gga8e5393f3bdd85491f221324e637c3896a464f79c041fb589d518eeef445c477c3" kindref="member">NET_DROP</ref>,<sp/>not_ip_packet);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>install_my_filter(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__net__pkt__filter_1ga263c7ee6e3c860353b5720c613690b0a" kindref="member">npf_append_recv_rule</ref>(&amp;reject_big_pkts);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__net__pkt__filter_1ga263c7ee6e3c860353b5720c613690b0a" kindref="member">npf_append_recv_rule</ref>(&amp;reject_non_ip);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__net__pkt__filter_1ga263c7ee6e3c860353b5720c613690b0a" kindref="member">npf_append_recv_rule</ref>(&amp;<ref refid="group__net__pkt__filter_1gaac489d75c023952243589cba7ff7367a" kindref="member">npf_default_ok</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>The first rule in the list for which all conditions are true determines the fate of the packet. If one condition is false then the next rule in the list is evaluated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name for this rule. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_result</parametername>
</parameternamelist>
<parameterdescription>
<para>Fate of the packet if all conditions are true, either <computeroutput>NET_OK</computeroutput> or <computeroutput>NET_DROP</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>List of conditions for this rule. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="168" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Network Packet Filter API. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
