<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group____usb__device__controller__api" kind="group">
    <compoundname>_usb_device_controller_api</compoundname>
    <title>USB Device Controller API</title>
    <innerclass refid="structusb__dc__ep__cfg__data" prot="public">usb_dc_ep_cfg_data</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group____usb__device__controller__api_1gac09e3e0af1a2b41a5bfbad91f900baf7" prot="public" static="no" strong="no">
        <type></type>
        <name>usb_dc_status_code</name>
        <enumvalue id="group____usb__device__controller__api_1ggac09e3e0af1a2b41a5bfbad91f900baf7a8c34e2279a64268809170d6b7f08ed14" prot="public">
          <name>USB_DC_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB error reported by the controller </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group____usb__device__controller__api_1ggac09e3e0af1a2b41a5bfbad91f900baf7a6486b0e1a9f4c68fd3bc3b6b3354daa6" prot="public">
          <name>USB_DC_RESET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB reset </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group____usb__device__controller__api_1ggac09e3e0af1a2b41a5bfbad91f900baf7a643918c145a481a36bda37ae5b36599f" prot="public">
          <name>USB_DC_CONNECTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB connection established, hardware enumeration is completed </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group____usb__device__controller__api_1ggac09e3e0af1a2b41a5bfbad91f900baf7a63372b97af29a434d58a970439afc23f" prot="public">
          <name>USB_DC_CONFIGURED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB configuration done </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group____usb__device__controller__api_1ggac09e3e0af1a2b41a5bfbad91f900baf7a3584740de2622bf915e67fee6104da4c" prot="public">
          <name>USB_DC_DISCONNECTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB connection lost </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group____usb__device__controller__api_1ggac09e3e0af1a2b41a5bfbad91f900baf7afb40fc53f01c4e947a7d4c85a1a21c87" prot="public">
          <name>USB_DC_SUSPEND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB connection suspended by the HOST </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group____usb__device__controller__api_1ggac09e3e0af1a2b41a5bfbad91f900baf7a306cbcf313be2111434f3e29b787de1d" prot="public">
          <name>USB_DC_RESUME</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB connection resumed by the HOST </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group____usb__device__controller__api_1ggac09e3e0af1a2b41a5bfbad91f900baf7a65828d350f0cd42be7f8406624eb3828" prot="public">
          <name>USB_DC_INTERFACE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB interface selected </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group____usb__device__controller__api_1ggac09e3e0af1a2b41a5bfbad91f900baf7a426477e3ab4378cb0783523346e5ff23" prot="public">
          <name>USB_DC_SET_HALT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Set Feature ENDPOINT_HALT received </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group____usb__device__controller__api_1ggac09e3e0af1a2b41a5bfbad91f900baf7a25d070f91c1e3ff0382b360f5ac2d501" prot="public">
          <name>USB_DC_CLEAR_HALT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clear Feature ENDPOINT_HALT received </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group____usb__device__controller__api_1ggac09e3e0af1a2b41a5bfbad91f900baf7abe89e0ffc160ffd1d8ae88d3771fcbc0" prot="public">
          <name>USB_DC_SOF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start of Frame received </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group____usb__device__controller__api_1ggac09e3e0af1a2b41a5bfbad91f900baf7a8a0f6af1f3625530c9ecdfb2409205d9" prot="public">
          <name>USB_DC_UNKNOWN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Initial USB connection status </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>USB Driver Status Codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Status codes reported by the registered device status callback. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="63" column="1" bodyfile="include/drivers/usb/usb_dc.h" bodystart="63" bodyend="88"/>
      </memberdef>
      <memberdef kind="enum" id="group____usb__device__controller__api_1gaf7f083f61e1406e7d41513113dccd3bd" prot="public" static="no" strong="no">
        <type></type>
        <name>usb_dc_ep_cb_status_code</name>
        <enumvalue id="group____usb__device__controller__api_1ggaf7f083f61e1406e7d41513113dccd3bdabeb0ca69354218c5efc14c4ddbdf1c27" prot="public">
          <name>USB_DC_EP_SETUP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SETUP received </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group____usb__device__controller__api_1ggaf7f083f61e1406e7d41513113dccd3bda1801d1ba252ed6a0e573c46e76ae1f78" prot="public">
          <name>USB_DC_EP_DATA_OUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Out transaction on this EP, data is available for read </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group____usb__device__controller__api_1ggaf7f083f61e1406e7d41513113dccd3bdae2f497d34e18d6431ab886d120bd124c" prot="public">
          <name>USB_DC_EP_DATA_IN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>In transaction done on this EP </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>USB Endpoint Callback Status Codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Status Codes reported by the registered endpoint callback. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="95" column="1" bodyfile="include/drivers/usb/usb_dc.h" bodystart="95" bodyend="102"/>
      </memberdef>
      <memberdef kind="enum" id="group____usb__device__controller__api_1gaca68e4a7c3c0a984d1df23794cfa7d87" prot="public" static="no" strong="no">
        <type></type>
        <name>usb_dc_ep_transfer_type</name>
        <enumvalue id="group____usb__device__controller__api_1ggaca68e4a7c3c0a984d1df23794cfa7d87a10c7e329a8eceb8cc693b77743f43681" prot="public">
          <name>USB_DC_EP_CONTROL</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Control type endpoint </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group____usb__device__controller__api_1ggaca68e4a7c3c0a984d1df23794cfa7d87a75c49ff44a9729723af190640a710ab6" prot="public">
          <name>USB_DC_EP_ISOCHRONOUS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Isochronous type endpoint </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group____usb__device__controller__api_1ggaca68e4a7c3c0a984d1df23794cfa7d87aa0ecbc47a337243efd86155cb4ca54fe" prot="public">
          <name>USB_DC_EP_BULK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bulk type endpoint </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group____usb__device__controller__api_1ggaca68e4a7c3c0a984d1df23794cfa7d87aa70b161209601f1d7a43c5ebcc197b73" prot="public">
          <name>USB_DC_EP_INTERRUPT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt type endpoint <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>USB Endpoint Transfer Type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="107" column="1" bodyfile="include/drivers/usb/usb_dc.h" bodystart="107" bodyend="116"/>
      </memberdef>
      <memberdef kind="enum" id="group____usb__device__controller__api_1gae247c1ce7213e35d7ce74598225fa428" prot="public" static="no" strong="no">
        <type></type>
        <name>usb_dc_ep_synchronozation_type</name>
        <enumvalue id="group____usb__device__controller__api_1ggae247c1ce7213e35d7ce74598225fa428a98061a0e90201b01c7b9b04b51eb0da8" prot="public">
          <name>USB_DC_EP_NO_SYNCHRONIZATION</name>
          <initializer>= (0U &lt;&lt; 2U)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No Synchronization </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group____usb__device__controller__api_1ggae247c1ce7213e35d7ce74598225fa428a8cb40e0f2b85da1adfc005fbd5f9f45d" prot="public">
          <name>USB_DC_EP_ASYNCHRONOUS</name>
          <initializer>= (1U &lt;&lt; 2U)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Asynchronous </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group____usb__device__controller__api_1ggae247c1ce7213e35d7ce74598225fa428a13e7d8970d0723b36a17ae8a29dc9151" prot="public">
          <name>USB_DC_EP_ADAPTIVE</name>
          <initializer>= (2U &lt;&lt; 2U)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Adaptive </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group____usb__device__controller__api_1ggae247c1ce7213e35d7ce74598225fa428a70976afffbf9a9ef89eb51453c4307c5" prot="public">
          <name>USB_DC_EP_SYNCHRONOUS</name>
          <initializer>= (3U &lt;&lt; 2U)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Synchronous </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>USB Endpoint Synchronization Type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Valid only for Isochronous Endpoints </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="123" column="1" bodyfile="include/drivers/usb/usb_dc.h" bodystart="123" bodyend="132"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group____usb__device__controller__api_1gad75ee35cdfb5dc4f1fad0e615067cb70" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* usb_dc_ep_callback) (uint8_t ep, enum usb_dc_ep_cb_status_code cb_status)</definition>
        <argsstring>)(uint8_t ep, enum usb_dc_ep_cb_status_code cb_status)</argsstring>
        <name>usb_dc_ep_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback function signature for the USB Endpoint status </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="157" column="9" bodyfile="include/drivers/usb/usb_dc.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group____usb__device__controller__api_1ga2ddb0b059b4e1e76473ed7f56d0cf2ee" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* usb_dc_status_callback) (enum usb_dc_status_code cb_status, const uint8_t *param)</definition>
        <argsstring>)(enum usb_dc_status_code cb_status, const uint8_t *param)</argsstring>
        <name>usb_dc_status_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback function signature for the device </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="163" column="9" bodyfile="include/drivers/usb/usb_dc.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group____usb__device__controller__api_1gaf78984e6103185c6ebadee2fcbdf62f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_dc_attach</definition>
        <argsstring>(void)</argsstring>
        <name>usb_dc_attach</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Attach USB for device connection. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to attach USB for device connection. Upon success, the USB PLL is enabled, and the USB device is now capable of transmitting and receiving on the USB bus and of generating interrupts.</para>
<para><simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="175" column="5" declfile="include/drivers/usb/usb_dc.h" declline="175" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__controller__api_1ga062b4c8b618f2e964984786baf635a93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_dc_detach</definition>
        <argsstring>(void)</argsstring>
        <name>usb_dc_detach</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Detach the USB device. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to detach the USB device. Upon success, the USB hardware PLL is powered down and USB communication is disabled.</para>
<para><simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="185" column="5" declfile="include/drivers/usb/usb_dc.h" declline="185" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__controller__api_1ga8a72b00cfa90dcde41daa228791b61da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_dc_reset</definition>
        <argsstring>(void)</argsstring>
        <name>usb_dc_reset</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Reset the USB device. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the USB device and firmware back to it&apos;s initial state. N.B. the USB PLL is handled by the usb_detach function</para>
<para><simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="195" column="5" declfile="include/drivers/usb/usb_dc.h" declline="195" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__controller__api_1ga54a8280e4b011eff3640f6d21af1c292" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_dc_set_address</definition>
        <argsstring>(const uint8_t addr)</argsstring>
        <name>usb_dc_set_address</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Set USB device address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Device address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="204" column="5" declfile="include/drivers/usb/usb_dc.h" declline="204" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__controller__api_1ga478eb2e57635ea816fd6acc8cb9a9424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void usb_dc_set_status_callback</definition>
        <argsstring>(const usb_dc_status_callback cb)</argsstring>
        <name>usb_dc_set_status_callback</name>
        <param>
          <type>const <ref refid="group____usb__device__controller__api_1ga2ddb0b059b4e1e76473ed7f56d0cf2ee" kindref="member">usb_dc_status_callback</ref></type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Set USB device controller status callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to set USB device controller status callback. The registered callback is used to report changes in the status of the device controller. The status code are described by the usb_dc_status_code enumeration.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="215" column="6" declfile="include/drivers/usb/usb_dc.h" declline="215" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__controller__api_1gab6b9ca74059ff2285bd301e9264df45b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_dc_ep_check_cap</definition>
        <argsstring>(const struct usb_dc_ep_cfg_data *const cfg)</argsstring>
        <name>usb_dc_ep_check_cap</name>
        <param>
          <type>const struct <ref refid="structusb__dc__ep__cfg__data" kindref="compound">usb_dc_ep_cfg_data</ref> *const</type>
          <declname>cfg</declname>
        </param>
        <briefdescription>
<para>check endpoint capabilities </para>
        </briefdescription>
        <detaileddescription>
<para>Function to check capabilities of an endpoint. <ref refid="structusb__dc__ep__cfg__data" kindref="compound">usb_dc_ep_cfg_data</ref> structure provides the endpoint configuration parameters: endpoint address, endpoint maximum packet size and endpoint type. The driver should check endpoint capabilities and return 0 if the endpoint configuration is possible.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint config</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="230" column="5" declfile="include/drivers/usb/usb_dc.h" declline="230" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__controller__api_1ga858a4e1bf2c35f5a0ec333801e75b718" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_dc_ep_configure</definition>
        <argsstring>(const struct usb_dc_ep_cfg_data *const cfg)</argsstring>
        <name>usb_dc_ep_configure</name>
        <param>
          <type>const struct <ref refid="structusb__dc__ep__cfg__data" kindref="compound">usb_dc_ep_cfg_data</ref> *const</type>
          <declname>cfg</declname>
        </param>
        <briefdescription>
<para>Configure endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to configure an endpoint. <ref refid="structusb__dc__ep__cfg__data" kindref="compound">usb_dc_ep_cfg_data</ref> structure provides the endpoint configuration parameters: endpoint address, endpoint maximum packet size and endpoint type.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint config</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="243" column="5" declfile="include/drivers/usb/usb_dc.h" declline="243" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__controller__api_1ga68fcfcfe36a36cef202586686c5d30e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_dc_ep_set_stall</definition>
        <argsstring>(const uint8_t ep)</argsstring>
        <name>usb_dc_ep_set_stall</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Set stall condition for the selected endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="253" column="5" declfile="include/drivers/usb/usb_dc.h" declline="253" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__controller__api_1gab89ebb3049f7fd7a1e764ffef16b1b64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_dc_ep_clear_stall</definition>
        <argsstring>(const uint8_t ep)</argsstring>
        <name>usb_dc_ep_clear_stall</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Clear stall condition for the selected endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="263" column="5" declfile="include/drivers/usb/usb_dc.h" declline="263" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__controller__api_1gaff2d98b0b6d4ae409b9961a7a123b326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_dc_ep_is_stalled</definition>
        <argsstring>(const uint8_t ep, uint8_t *const stalled)</argsstring>
        <name>usb_dc_ep_is_stalled</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *const</type>
          <declname>stalled</declname>
        </param>
        <briefdescription>
<para>Check if the selected endpoint is stalled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">stalled</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint stall status</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="274" column="5" declfile="include/drivers/usb/usb_dc.h" declline="274" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__controller__api_1ga821d65d9872ebb62bfaee79afbb80004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_dc_ep_halt</definition>
        <argsstring>(const uint8_t ep)</argsstring>
        <name>usb_dc_ep_halt</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Halt the selected endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="284" column="5" declfile="include/drivers/usb/usb_dc.h" declline="284" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__controller__api_1ga199aaf51e878cadc0e4ad65007a5a622" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_dc_ep_enable</definition>
        <argsstring>(const uint8_t ep)</argsstring>
        <name>usb_dc_ep_enable</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Enable the selected endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to enable the selected endpoint. Upon success interrupts are enabled for the corresponding endpoint and the endpoint is ready for transmitting/receiving data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="298" column="5" declfile="include/drivers/usb/usb_dc.h" declline="298" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__controller__api_1ga0154d6b5d462fa2a9db174a985259429" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_dc_ep_disable</definition>
        <argsstring>(const uint8_t ep)</argsstring>
        <name>usb_dc_ep_disable</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Disable the selected endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to disable the selected endpoint. Upon success interrupts are disabled for the corresponding endpoint and the endpoint is no longer able for transmitting/receiving data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="312" column="5" declfile="include/drivers/usb/usb_dc.h" declline="312" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__controller__api_1ga8f702709dd2ed8257d61a8593c4c3b0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_dc_ep_flush</definition>
        <argsstring>(const uint8_t ep)</argsstring>
        <name>usb_dc_ep_flush</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Flush the selected endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>This function flushes the FIFOs for the selected endpoint.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="324" column="5" declfile="include/drivers/usb/usb_dc.h" declline="324" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__controller__api_1gad0b822f08c4a29a46aaa8fa8b30d58ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_dc_ep_write</definition>
        <argsstring>(const uint8_t ep, const uint8_t *const data, const uint32_t data_len, uint32_t *const ret_bytes)</argsstring>
        <name>usb_dc_ep_write</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *const</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>data_len</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *const</type>
          <declname>ret_bytes</declname>
        </param>
        <briefdescription>
<para>Write data to the specified endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called to write data to the specified endpoint. The supplied usb_ep_callback function will be called when data is transmitted out.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the data requested to write. This may be zero for a zero length status packet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ret_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Bytes scheduled for transmission. This value may be NULL if the application expects all bytes to be written</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="344" column="5" declfile="include/drivers/usb/usb_dc.h" declline="344" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__controller__api_1ga8b51a93295c7f9d3b15f4bfe8a09bb11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_dc_ep_read</definition>
        <argsstring>(const uint8_t ep, uint8_t *const data, const uint32_t max_data_len, uint32_t *const read_bytes)</argsstring>
        <name>usb_dc_ep_read</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *const</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>max_data_len</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *const</type>
          <declname>read_bytes</declname>
        </param>
        <briefdescription>
<para>Read data from the specified endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called by the endpoint handler function, after an OUT interrupt has been received for that EP. The application must only call this function through the supplied usb_ep_callback function. This function clears the ENDPOINT NAK, if all data in the endpoint FIFO has been read, so as to accept more data from host.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data buffer to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Max length of data to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">read_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes read. If data is NULL and max_data_len is 0 the number of bytes available for read should be returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="366" column="5" declfile="include/drivers/usb/usb_dc.h" declline="366" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__controller__api_1gaba2134e2a7b8d870860903aead03b418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_dc_ep_set_callback</definition>
        <argsstring>(const uint8_t ep, const usb_dc_ep_callback cb)</argsstring>
        <name>usb_dc_ep_set_callback</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <param>
          <type>const <ref refid="group____usb__device__controller__api_1gad75ee35cdfb5dc4f1fad0e615067cb70" kindref="member">usb_dc_ep_callback</ref></type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Set callback function for the specified endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to set callback function for notification of data received and available to application or transmit done on the selected endpoint, NULL if callback not required by application code. The callback status code is described by usb_dc_ep_cb_status_code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="383" column="5" declfile="include/drivers/usb/usb_dc.h" declline="383" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__controller__api_1ga012fb4d99870e1e30e0ecd4ac2b22312" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_dc_ep_read_wait</definition>
        <argsstring>(uint8_t ep, uint8_t *data, uint32_t max_data_len, uint32_t *read_bytes)</argsstring>
        <name>usb_dc_ep_read_wait</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>max_data_len</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>read_bytes</declname>
        </param>
        <briefdescription>
<para>Read data from the specified endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>This is similar to usb_dc_ep_read, the difference being that, it doesn&apos;t clear the endpoint NAKs so that the consumer is not bogged down by further upcalls till he is done with the processing of the data. The caller should reactivate ep by invoking <ref refid="group____usb__device__controller__api_1ga9694ad0cc1ee84a4ed9de4f2860d4ae6" kindref="member">usb_dc_ep_read_continue()</ref> do so.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data buffer to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Max length of data to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">read_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes read. If data is NULL and max_data_len is 0 the number of bytes available for read should be returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="403" column="5" declfile="include/drivers/usb/usb_dc.h" declline="403" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__controller__api_1ga9694ad0cc1ee84a4ed9de4f2860d4ae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_dc_ep_read_continue</definition>
        <argsstring>(uint8_t ep)</argsstring>
        <name>usb_dc_ep_read_continue</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Continue reading data from the endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>Clear the endpoint NAK and enable the endpoint to accept more data from the host. Usually called after <ref refid="group____usb__device__controller__api_1ga012fb4d99870e1e30e0ecd4ac2b22312" kindref="member">usb_dc_ep_read_wait()</ref> when the consumer is fine to accept more data. Thus these calls together act as a flow control mechanism.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="419" column="5" declfile="include/drivers/usb/usb_dc.h" declline="419" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__controller__api_1ga6e97104269bfe6dd08f5d0bbb791390e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_dc_ep_mps</definition>
        <argsstring>(uint8_t ep)</argsstring>
        <name>usb_dc_ep_mps</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Get endpoint max packet size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Enpoint max packet size (mps) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="429" column="5" declfile="include/drivers/usb/usb_dc.h" declline="429" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__controller__api_1ga459110125c2a52da95b5b2c3c6fff096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_dc_wakeup_request</definition>
        <argsstring>(void)</argsstring>
        <name>usb_dc_wakeup_request</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Start the host wake up procedure. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to wake up the host if it&apos;s currently in sleep mode.</para>
<para><simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/usb/usb_dc.h" line="438" column="5" declfile="include/drivers/usb/usb_dc.h" declline="438" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>USB Device Controller API. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
