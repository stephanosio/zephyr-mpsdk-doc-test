<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="drivers_2gpio_8h" kind="file" language="C++">
    <compoundname>gpio.h</compoundname>
    <includes refid="____assert_8h" local="no">sys/__assert.h</includes>
    <includes refid="slist_8h" local="no">sys/slist.h</includes>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">device.h</includes>
    <includes refid="dt-bindings_2gpio_2gpio_8h" local="no">dt-bindings/gpio/gpio.h</includes>
    <includes local="no">syscalls/gpio.h</includes>
    <includedby refid="lmp90xxx_8h" local="no">include/drivers/adc/lmp90xxx.h</includedby>
    <includedby refid="gpio__emul_8h" local="no">include/drivers/gpio/gpio_emul.h</includedby>
    <includedby refid="gpio__mmio32_8h" local="no">include/drivers/gpio/gpio_mmio32.h</includedby>
    <includedby refid="gpio__sx1509b_8h" local="no">include/drivers/gpio/gpio_sx1509b.h</includedby>
    <includedby refid="regulator_8h" local="no">include/drivers/regulator.h</includedby>
    <includedby refid="drivers_2spi_8h" local="no">include/drivers/spi.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/drivers/gpio.h</label>
        <link refid="drivers_2gpio_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>dt-bindings/gpio/gpio.h</label>
        <link refid="dt-bindings_2gpio_2gpio_8h"/>
      </node>
      <node id="2">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="13">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="16">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="9">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="17">
        <label>device.h</label>
      </node>
      <node id="7">
        <label>stdarg.h</label>
      </node>
      <node id="6">
        <label>stddef.h</label>
      </node>
      <node id="19">
        <label>syscalls/gpio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/drivers/adc/lmp90xxx.h</label>
        <link refid="lmp90xxx_8h"/>
      </node>
      <node id="1">
        <label>include/drivers/gpio.h</label>
        <link refid="drivers_2gpio_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/drivers/gpio/gpio_emul.h</label>
        <link refid="gpio__emul_8h"/>
      </node>
      <node id="4">
        <label>include/drivers/gpio/gpio_mmio32.h</label>
        <link refid="gpio__mmio32_8h"/>
      </node>
      <node id="5">
        <label>include/drivers/gpio/gpio_sx1509b.h</label>
        <link refid="gpio__sx1509b_8h"/>
      </node>
      <node id="6">
        <label>include/drivers/regulator.h</label>
        <link refid="regulator_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>include/drivers/regulator/consumer.h</label>
        <link refid="consumer_8h"/>
      </node>
      <node id="8">
        <label>include/drivers/spi.h</label>
        <link refid="drivers_2spi_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structgpio__dt__spec" prot="public">gpio_dt_spec</innerclass>
    <innerclass refid="structgpio__driver__config" prot="public">gpio_driver_config</innerclass>
    <innerclass refid="structgpio__driver__data" prot="public">gpio_driver_data</innerclass>
    <innerclass refid="structgpio__callback" prot="public">gpio_callback</innerclass>
      <sectiondef kind="user-defined">
      <header>GPIO input/output configuration flags</header>
      <memberdef kind="define" id="group__gpio__interface_1ga7be6a0cc9aa65da1d4ee5751b4085853" prot="public" static="no">
        <name>GPIO_INPUT</name>
        <initializer>(1U &lt;&lt; 8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables pin as input. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="43" column="9" bodyfile="include/drivers/gpio.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1ga0db9fe8a278e6ab7c5c6f14fe58e5eb1" prot="public" static="no">
        <name>GPIO_OUTPUT</name>
        <initializer>(1U &lt;&lt; 9)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables pin as output, no change to the output state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="46" column="9" bodyfile="include/drivers/gpio.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1gaf82306c09450f6933366c4b821db21ed" prot="public" static="no">
        <name>GPIO_DISCONNECTED</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disables pin for both input and output. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="49" column="9" bodyfile="include/drivers/gpio.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1gaf85baf9f9c1ba554324b4cd7064487b0" prot="public" static="no">
        <name>GPIO_OUTPUT_LOW</name>
        <initializer>(<ref refid="group__gpio__interface_1ga0db9fe8a278e6ab7c5c6f14fe58e5eb1" kindref="member">GPIO_OUTPUT</ref> | GPIO_OUTPUT_INIT_LOW)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Configures GPIO pin as output and initializes it to a low state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="65" column="9" bodyfile="include/drivers/gpio.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1ga10d31f204c0e927017d571352422fb09" prot="public" static="no">
        <name>GPIO_OUTPUT_HIGH</name>
        <initializer>(<ref refid="group__gpio__interface_1ga0db9fe8a278e6ab7c5c6f14fe58e5eb1" kindref="member">GPIO_OUTPUT</ref> | GPIO_OUTPUT_INIT_HIGH)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Configures GPIO pin as output and initializes it to a high state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="67" column="9" bodyfile="include/drivers/gpio.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1ga1e1d6be5f2f788f89468a0ce8b854634" prot="public" static="no">
        <name>GPIO_OUTPUT_INACTIVE</name>
        <initializer>				 (<ref refid="group__gpio__interface_1ga0db9fe8a278e6ab7c5c6f14fe58e5eb1" kindref="member">GPIO_OUTPUT</ref> |			\
				 GPIO_OUTPUT_INIT_LOW |		\
				 GPIO_OUTPUT_INIT_LOGICAL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Configures GPIO pin as output and initializes it to a logic 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="69" column="9" bodyfile="include/drivers/gpio.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1ga0f5cc126d6a690eb3e303eb29aa718ce" prot="public" static="no">
        <name>GPIO_OUTPUT_ACTIVE</name>
        <initializer>				 (<ref refid="group__gpio__interface_1ga0db9fe8a278e6ab7c5c6f14fe58e5eb1" kindref="member">GPIO_OUTPUT</ref> |			\
				 GPIO_OUTPUT_INIT_HIGH |	\
				 GPIO_OUTPUT_INIT_LOGICAL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Configures GPIO pin as output and initializes it to a logic 1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="73" column="9" bodyfile="include/drivers/gpio.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>GPIO interrupt configuration flags</header>
      <description><para>The <computeroutput>GPIO_INT_*</computeroutput> flags are used to specify how input GPIO pins will trigger interrupts. The interrupts can be sensitive to pin physical or logical level. Interrupts sensitive to pin logical level take into account GPIO_ACTIVE_LOW flag. If a pin was configured as Active Low, physical level low will be considered as logical level 1 (an active state), physical level high will be considered as logical level 0 (an inactive state). </para>
</description>
      <memberdef kind="define" id="group__gpio__interface_1ga91657faac28f9b213105dd61a419dd5a" prot="public" static="no">
        <name>GPIO_INT_DISABLE</name>
        <initializer>(1U &lt;&lt; 13)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disables GPIO pin interrupt. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="91" column="9" bodyfile="include/drivers/gpio.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1gaed642a4e482f73aa917477370d0e241b" prot="public" static="no">
        <name>GPIO_INT_EDGE_RISING</name>
        <initializer>					(GPIO_INT_ENABLE | \
					GPIO_INT_EDGE | \
					GPIO_INT_HIGH_1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Configures GPIO interrupt to be triggered on pin rising edge and enables it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="141" column="9" bodyfile="include/drivers/gpio.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1ga73bed10383a27d4a03feb300e64af8e8" prot="public" static="no">
        <name>GPIO_INT_EDGE_FALLING</name>
        <initializer>					(GPIO_INT_ENABLE | \
					GPIO_INT_EDGE | \
					GPIO_INT_LOW_0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Configures GPIO interrupt to be triggered on pin falling edge and enables it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="148" column="9" bodyfile="include/drivers/gpio.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1ga10fa307ab17d02819108165a09f8e08b" prot="public" static="no">
        <name>GPIO_INT_EDGE_BOTH</name>
        <initializer>					(GPIO_INT_ENABLE | \
					GPIO_INT_EDGE | \
					GPIO_INT_LOW_0 | \
					GPIO_INT_HIGH_1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Configures GPIO interrupt to be triggered on pin rising or falling edge and enables it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="155" column="9" bodyfile="include/drivers/gpio.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1gaddbb5ad576875af9c2d73b73df55c893" prot="public" static="no">
        <name>GPIO_INT_LEVEL_LOW</name>
        <initializer>					(GPIO_INT_ENABLE | \
					GPIO_INT_LOW_0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Configures GPIO interrupt to be triggered on pin physical level low and enables it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="163" column="9" bodyfile="include/drivers/gpio.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1ga233690d9a6a64bc9f804e3caa6d4a88f" prot="public" static="no">
        <name>GPIO_INT_LEVEL_HIGH</name>
        <initializer>					(GPIO_INT_ENABLE | \
					GPIO_INT_HIGH_1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Configures GPIO interrupt to be triggered on pin physical level high and enables it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="169" column="9" bodyfile="include/drivers/gpio.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1ga7b922529a3cb9396b0d82ca823e9d010" prot="public" static="no">
        <name>GPIO_INT_EDGE_TO_INACTIVE</name>
        <initializer>					(GPIO_INT_ENABLE | \
					GPIO_INT_LEVELS_LOGICAL | \
					GPIO_INT_EDGE | \
					GPIO_INT_LOW_0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Configures GPIO interrupt to be triggered on pin state change to logical level 0 and enables it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="175" column="9" bodyfile="include/drivers/gpio.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1ga35d2ff0e041236d82004a4bb2b5bf634" prot="public" static="no">
        <name>GPIO_INT_EDGE_TO_ACTIVE</name>
        <initializer>					(GPIO_INT_ENABLE | \
					GPIO_INT_LEVELS_LOGICAL | \
					GPIO_INT_EDGE | \
					GPIO_INT_HIGH_1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Configures GPIO interrupt to be triggered on pin state change to logical level 1 and enables it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="183" column="9" bodyfile="include/drivers/gpio.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1gacb9bb1b63f172af2da7eb193e234c4f2" prot="public" static="no">
        <name>GPIO_INT_LEVEL_INACTIVE</name>
        <initializer>					(GPIO_INT_ENABLE | \
					GPIO_INT_LEVELS_LOGICAL | \
					GPIO_INT_LOW_0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Configures GPIO interrupt to be triggered on pin logical level 0 and enables it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="191" column="9" bodyfile="include/drivers/gpio.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1gae51c68ff83959994bb942bb253505ca1" prot="public" static="no">
        <name>GPIO_INT_LEVEL_ACTIVE</name>
        <initializer>					(GPIO_INT_ENABLE | \
					GPIO_INT_LEVELS_LOGICAL | \
					GPIO_INT_HIGH_1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Configures GPIO interrupt to be triggered on pin logical level 1 and enables it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="198" column="9" bodyfile="include/drivers/gpio.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>GPIO drive strength flags</header>
      <description><para>The <computeroutput>GPIO_DS_*</computeroutput> flags are used with <computeroutput>gpio_pin_configure</computeroutput> to specify the drive strength configuration of a GPIO pin.</para>
<para>The drive strength of individual pins can be configured independently for when the pin output is low and high.</para>
<para>The <computeroutput>GPIO_DS_*_LOW</computeroutput> enumerations define the drive strength of a pin when output is low.</para>
<para>The <computeroutput>GPIO_DS_*_HIGH</computeroutput> enumerations define the drive strength of a pin when output is high.</para>
<para>The interface supports two different drive strengths: <computeroutput>DFLT</computeroutput> - The lowest drive strength supported by the HW <computeroutput>ALT</computeroutput> - The highest drive strength supported by the HW</para>
<para>On hardware that supports only one standard drive strength, both <computeroutput>DFLT</computeroutput> and <computeroutput>ALT</computeroutput> have the same behavior. </para>
</description>
      <memberdef kind="define" id="group__gpio__interface_1gad7fcda3168d06a040d3cda8450149feb" prot="public" static="no">
        <name>GPIO_DS_DFLT_LOW</name>
        <initializer>(0x0U &lt;&lt; GPIO_DS_LOW_POS)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default drive strength standard when GPIO pin output is low. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="240" column="9" bodyfile="include/drivers/gpio.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1ga2830a8b723d7db8335258eee0c5754b1" prot="public" static="no">
        <name>GPIO_DS_ALT_LOW</name>
        <initializer>(0x1U &lt;&lt; GPIO_DS_LOW_POS)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alternative drive strength when GPIO pin output is low. For hardware that does not support configurable drive strength use the default drive strength. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="246" column="9" bodyfile="include/drivers/gpio.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1ga58888cdec555b2e093be55347a9ae9a5" prot="public" static="no">
        <name>GPIO_DS_DFLT_HIGH</name>
        <initializer>(0x0U &lt;&lt; GPIO_DS_HIGH_POS)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default drive strength when GPIO pin output is high. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="255" column="9" bodyfile="include/drivers/gpio.h" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1ga119a2b2eee17fec97b5441ebff0b43b5" prot="public" static="no">
        <name>GPIO_DS_ALT_HIGH</name>
        <initializer>(0x1U &lt;&lt; GPIO_DS_HIGH_POS)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alternative drive strength when GPIO pin output is high. For hardware that does not support configurable drive strengths use the default drive strength. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="261" column="9" bodyfile="include/drivers/gpio.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1ga8f78a2ca1e4931def231283c1282e045" prot="public" static="no">
        <name>GPIO_DS_DFLT</name>
        <initializer>(<ref refid="group__gpio__interface_1gad7fcda3168d06a040d3cda8450149feb" kindref="member">GPIO_DS_DFLT_LOW</ref> | <ref refid="group__gpio__interface_1ga58888cdec555b2e093be55347a9ae9a5" kindref="member">GPIO_DS_DFLT_HIGH</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Combined default drive strength. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="265" column="9" bodyfile="include/drivers/gpio.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1gade83d759a4fddceb27cf6e6c8ebe25c6" prot="public" static="no">
        <name>GPIO_DS_ALT</name>
        <initializer>(<ref refid="group__gpio__interface_1ga2830a8b723d7db8335258eee0c5754b1" kindref="member">GPIO_DS_ALT_LOW</ref> | <ref refid="group__gpio__interface_1ga119a2b2eee17fec97b5441ebff0b43b5" kindref="member">GPIO_DS_ALT_HIGH</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Combined alternative drive strength. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="269" column="9" bodyfile="include/drivers/gpio.h" bodystart="269" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__gpio__interface_1ga2ca79acf34a8eb18f89f02f1edf8e8a6" prot="public" static="no">
        <name>GPIO_INT_DEBOUNCE</name>
        <initializer>(1U &lt;&lt; 19)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable GPIO pin debounce.</para>
<para><simplesect kind="note"><para>Drivers that do not support a debounce feature should ignore this flag rather than rejecting the configuration with -ENOTSUP. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="209" column="9" bodyfile="include/drivers/gpio.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1gacb1077b77aecf8f1a9c7636ea583c4cf" prot="public" static="no">
        <name>GPIO_DT_SPEC_GET_BY_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	{								       \
		.port = <ref refid="group__device__model_1ga9a65996ce21f43acb7db061e23b48ec7" kindref="member">DEVICE_DT_GET</ref>(<ref refid="group__devicetree-gpio_1ga97bd46d2ab88d392a3f336f4d23184eb" kindref="member">DT_GPIO_CTLR_BY_IDX</ref>(node_id, prop, idx)),\
		.pin = <ref refid="group__devicetree-gpio_1ga8f7d82567056266bab1603865f8b27af" kindref="member">DT_GPIO_PIN_BY_IDX</ref>(node_id, prop, idx),		       \
		.dt_flags = <ref refid="group__devicetree-gpio_1ga672b2597b99194b8cbd42b3f3401d2b5" kindref="member">DT_GPIO_FLAGS_BY_IDX</ref>(node_id, prop, idx),	       \
	}</initializer>
        <briefdescription>
<para>Static initializer for a <computeroutput><ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns a static initializer for a <computeroutput><ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref></computeroutput> structure given a devicetree node identifier, a property specifying a GPIO and an index.</para>
<para>Example devicetree fragment: <verbatim> n: node {
    foo-gpios = &lt;&amp;gpio0 1 GPIO_ACTIVE_LOW&gt;,
                &lt;&amp;gpio1 2 GPIO_ACTIVE_LOW&gt;;
 }
</verbatim> Example usage: <verbatim> const struct gpio_dt_spec spec = GPIO_DT_SPEC_GET_BY_IDX(DT_NODELABEL(n),
                                                     foo_gpios, 1);
 // Initializes &apos;spec&apos; to:
 // {
 //         .port = DEVICE_DT_GET(DT_NODELABEL(gpio1)),
 //         .pin = 2,
 //         .dt_flags = GPIO_ACTIVE_LOW
 // }
</verbatim> The &apos;gpio&apos; field must still be checked for readiness, e.g. using <ref refid="group__device__model_1gaa4944bd850e90cbd52b0489f9b12edfb" kindref="member">device_is_ready()</ref>. It is an error to use this macro unless the node exists, has the given property, and that property specifies a GPIO controller, pin number, and flags as shown above.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>devicetree node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into &quot;prop&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>static initializer for a struct <ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref> for the property </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="382" column="9" bodyfile="include/drivers/gpio.h" bodystart="382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1ga3db4fa464e191016287f4c4d7eb9a983" prot="public" static="no">
        <name>GPIO_DT_SPEC_GET_BY_IDX_OR</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>idx</defname></param>
        <param><defname>default_value</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(<ref refid="group__devicetree-generic-exist_1gacce67bf20541cd2d07d8540058964692" kindref="member">DT_NODE_HAS_PROP</ref>(node_id, prop),			\
		    (<ref refid="group__gpio__interface_1gacb1077b77aecf8f1a9c7636ea583c4cf" kindref="member">GPIO_DT_SPEC_GET_BY_IDX</ref>(node_id, prop, idx)),	\
		    (default_value))</initializer>
        <briefdescription>
<para>Like <ref refid="group__gpio__interface_1gacb1077b77aecf8f1a9c7636ea583c4cf" kindref="member">GPIO_DT_SPEC_GET_BY_IDX()</ref>, with a fallback to a default value. </para>
        </briefdescription>
        <detaileddescription>
<para>If the devicetree node identifier &apos;node_id&apos; refers to a node with a property &apos;prop&apos;, this expands to <computeroutput><ref refid="group__gpio__interface_1gacb1077b77aecf8f1a9c7636ea583c4cf" kindref="member">GPIO_DT_SPEC_GET_BY_IDX(node_id, prop, idx)</ref></computeroutput>. The <computeroutput>default_value</computeroutput> parameter is not expanded in this case.</para>
<para>Otherwise, this expands to <computeroutput>default_value</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>devicetree node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into &quot;prop&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>fallback value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>static initializer for a struct <ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref> for the property, or default_value if the node or property do not exist </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="406" column="9" bodyfile="include/drivers/gpio.h" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1ga2fa6bb5880f46984f9fc29c70f7d503e" prot="public" static="no">
        <name>GPIO_DT_SPEC_GET</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <initializer>	<ref refid="group__gpio__interface_1gacb1077b77aecf8f1a9c7636ea583c4cf" kindref="member">GPIO_DT_SPEC_GET_BY_IDX</ref>(node_id, prop, 0)</initializer>
        <briefdescription>
<para>Equivalent to <ref refid="group__gpio__interface_1gacb1077b77aecf8f1a9c7636ea583c4cf" kindref="member">GPIO_DT_SPEC_GET_BY_IDX(node_id, prop, 0)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>devicetree node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>static initializer for a struct <ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref> for the property </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__gpio__interface_1gacb1077b77aecf8f1a9c7636ea583c4cf" kindref="member">GPIO_DT_SPEC_GET_BY_IDX()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="419" column="9" bodyfile="include/drivers/gpio.h" bodystart="419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1ga26b2205aa82819df1d80a22761352e71" prot="public" static="no">
        <name>GPIO_DT_SPEC_GET_OR</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>default_value</defname></param>
        <initializer>	<ref refid="group__gpio__interface_1ga3db4fa464e191016287f4c4d7eb9a983" kindref="member">GPIO_DT_SPEC_GET_BY_IDX_OR</ref>(node_id, prop, 0, default_value)</initializer>
        <briefdescription>
<para>Equivalent to <ref refid="group__gpio__interface_1ga3db4fa464e191016287f4c4d7eb9a983" kindref="member">GPIO_DT_SPEC_GET_BY_IDX_OR(node_id, prop, 0, default_value)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>devicetree node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>fallback value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>static initializer for a struct <ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref> for the property </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__gpio__interface_1ga3db4fa464e191016287f4c4d7eb9a983" kindref="member">GPIO_DT_SPEC_GET_BY_IDX_OR()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="432" column="9" bodyfile="include/drivers/gpio.h" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1gabbdbef450f14fd0af73667e2728ad084" prot="public" static="no">
        <name>GPIO_DT_SPEC_INST_GET_BY_IDX</name>
        <param><defname>inst</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="group__gpio__interface_1gacb1077b77aecf8f1a9c7636ea583c4cf" kindref="member">GPIO_DT_SPEC_GET_BY_IDX</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), prop, idx)</initializer>
        <briefdescription>
<para>Static initializer for a <computeroutput><ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref></computeroutput> from a DT_DRV_COMPAT instance&apos;s GPIO property at an index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>DT_DRV_COMPAT instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into &quot;prop&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>static initializer for a struct <ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref> for the property </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__gpio__interface_1gacb1077b77aecf8f1a9c7636ea583c4cf" kindref="member">GPIO_DT_SPEC_GET_BY_IDX()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="445" column="9" bodyfile="include/drivers/gpio.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1gaf07edf6bc88af18e9976c76f6c3c3bf1" prot="public" static="no">
        <name>GPIO_DT_SPEC_INST_GET_BY_IDX_OR</name>
        <param><defname>inst</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>idx</defname></param>
        <param><defname>default_value</defname></param>
        <initializer>	<ref refid="group__gpio__interface_1ga3db4fa464e191016287f4c4d7eb9a983" kindref="member">GPIO_DT_SPEC_GET_BY_IDX_OR</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), prop, idx, default_value)</initializer>
        <briefdescription>
<para>Static initializer for a <computeroutput><ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref></computeroutput> from a DT_DRV_COMPAT instance&apos;s GPIO property at an index, with fallback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>DT_DRV_COMPAT instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into &quot;prop&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>fallback value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>static initializer for a struct <ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref> for the property </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__gpio__interface_1gacb1077b77aecf8f1a9c7636ea583c4cf" kindref="member">GPIO_DT_SPEC_GET_BY_IDX()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="459" column="9" bodyfile="include/drivers/gpio.h" bodystart="459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1ga168f5c6e39a0111191f606a9a0826e89" prot="public" static="no">
        <name>GPIO_DT_SPEC_INST_GET</name>
        <param><defname>inst</defname></param>
        <param><defname>prop</defname></param>
        <initializer>	<ref refid="group__gpio__interface_1gabbdbef450f14fd0af73667e2728ad084" kindref="member">GPIO_DT_SPEC_INST_GET_BY_IDX</ref>(inst, prop, 0)</initializer>
        <briefdescription>
<para>Equivalent to <ref refid="group__gpio__interface_1gabbdbef450f14fd0af73667e2728ad084" kindref="member">GPIO_DT_SPEC_INST_GET_BY_IDX(inst, prop, 0)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>DT_DRV_COMPAT instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>static initializer for a struct <ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref> for the property </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__gpio__interface_1gabbdbef450f14fd0af73667e2728ad084" kindref="member">GPIO_DT_SPEC_INST_GET_BY_IDX()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="470" column="9" bodyfile="include/drivers/gpio.h" bodystart="470" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1gae6b4a354c3cf0e042a390aac4bc37c69" prot="public" static="no">
        <name>GPIO_DT_SPEC_INST_GET_OR</name>
        <param><defname>inst</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>default_value</defname></param>
        <initializer>	<ref refid="group__gpio__interface_1gaf07edf6bc88af18e9976c76f6c3c3bf1" kindref="member">GPIO_DT_SPEC_INST_GET_BY_IDX_OR</ref>(inst, prop, 0, default_value)</initializer>
        <briefdescription>
<para>Equivalent to <ref refid="group__gpio__interface_1gaf07edf6bc88af18e9976c76f6c3c3bf1" kindref="member">GPIO_DT_SPEC_INST_GET_BY_IDX_OR(inst, prop, 0, default_value)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>DT_DRV_COMPAT instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>fallback value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>static initializer for a struct <ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref> for the property </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__gpio__interface_1gabbdbef450f14fd0af73667e2728ad084" kindref="member">GPIO_DT_SPEC_INST_GET_BY_IDX()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="483" column="9" bodyfile="include/drivers/gpio.h" bodystart="483" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__gpio__interface_1ga1449ba90eaec5e6144fe4faae21f2e3f" prot="public" static="no">
        <name>GPIO_MAX_PINS_PER_PORT</name>
        <initializer>(sizeof(<ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref>) * __CHAR_BIT__)</initializer>
        <briefdescription>
<para>Maximum number of pins that are supported by <computeroutput>gpio_port_pins_t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="489" column="9" bodyfile="include/drivers/gpio.h" bodystart="489" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" prot="public" static="no">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>typedef uint32_t gpio_port_pins_t</definition>
        <argsstring></argsstring>
        <name>gpio_port_pins_t</name>
        <briefdescription>
<para>Identifies a set of pins associated with a port. </para>
        </briefdescription>
        <detaileddescription>
<para>The pin with index n is present in the set if and only if the bit identified by (1U &lt;&lt; n) is set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="287" column="18" bodyfile="include/drivers/gpio.h" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" prot="public" static="no">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>typedef uint32_t gpio_port_value_t</definition>
        <argsstring></argsstring>
        <name>gpio_port_value_t</name>
        <briefdescription>
<para>Provides values for a set of pins associated with a port. </para>
        </briefdescription>
        <detaileddescription>
<para>The value for a pin with index n is high (physical mode) or active (logical mode) if and only if the bit identified by (1U &lt;&lt; n) is set. Otherwise the value for the pin is low (physical mode) or inactive (logical mode).</para>
<para>Values of this type are often paired with a <computeroutput>gpio_port_pins_t</computeroutput> value that specifies which encoded pin values are valid for the operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="300" column="18" bodyfile="include/drivers/gpio.h" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" prot="public" static="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>typedef uint8_t gpio_pin_t</definition>
        <argsstring></argsstring>
        <name>gpio_pin_t</name>
        <briefdescription>
<para>Provides a type to hold a GPIO pin index. </para>
        </briefdescription>
        <detaileddescription>
<para>This reduced-size type is sufficient to record a pin number, e.g. from a devicetree GPIOS property. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="308" column="17" bodyfile="include/drivers/gpio.h" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__gpio__interface_1ga2681aecd8e20fba20900774ddaa9c843" prot="public" static="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>typedef uint8_t gpio_dt_flags_t</definition>
        <argsstring></argsstring>
        <name>gpio_dt_flags_t</name>
        <briefdescription>
<para>Provides a type to hold GPIO devicetree flags. </para>
        </briefdescription>
        <detaileddescription>
<para>All GPIO flags that can be expressed in devicetree fit in the low 8 bits of the full flags field, so use a reduced-size type to record that part of a GPIOS property. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="317" column="17" bodyfile="include/drivers/gpio.h" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__gpio__interface_1ga5f5cb5e7dae6d58e072bb450af029d2e" prot="public" static="no">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>typedef uint32_t gpio_flags_t</definition>
        <argsstring></argsstring>
        <name>gpio_flags_t</name>
        <briefdescription>
<para>Provides a type to hold GPIO configuration flags. </para>
        </briefdescription>
        <detaileddescription>
<para>This type is sufficient to hold all flags used to control GPIO configuration, whether pin or interrupt. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="325" column="18" bodyfile="include/drivers/gpio.h" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__gpio__interface_1ga2b400e2193e3899c63253d2f48ed90db" prot="public" static="no">
        <type>void(*</type>
        <definition>gpio_callback_handler_t</definition>
        <argsstring>)(const struct device *port, struct gpio_callback *cb, gpio_port_pins_t pins)</argsstring>
        <name>gpio_callback_handler_t</name>
        <briefdescription>
<para>Define the application callback handler function signature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Device struct for the GPIO device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Original struct <ref refid="structgpio__callback" kindref="compound">gpio_callback</ref> owning this handler </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pins</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of pins that triggers the callback handler</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Note: cb pointer can be used to retrieve private data through <ref refid="group__sys-util_1gac5bc561d1bfd1bf68877fe577779bd2f" kindref="member">CONTAINER_OF()</ref> if original struct <ref refid="structgpio__callback" kindref="compound">gpio_callback</ref> is stored in another private structure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="532" column="9" bodyfile="include/drivers/gpio.h" bodystart="532" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__gpio__interface_1ga9618f254365381063439a0e9c5e787cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpio_pin_interrupt_configure</definition>
        <argsstring>(const struct device *port, gpio_pin_t pin, gpio_flags_t flags)</argsstring>
        <name>gpio_pin_interrupt_configure</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref></type>
          <declname>pin</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga5f5cb5e7dae6d58e072bb450af029d2e" kindref="member">gpio_flags_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Configure pin interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function can also be used to configure interrupts on pins not controlled directly by the GPIO module. That is, pins which are routed to other modules such as I2C, SPI, UART.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt configuration flags as defined by GPIO_INT_*.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If any of the configuration options is not supported (unless otherwise directed by flag documentation). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt line required to configure pin interrupt is already in use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>I/O error when accessing an external GPIO chip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EWOULDBLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>if operation would block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="638" column="6" declfile="include/drivers/gpio.h" declline="638" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1ga24f0b4ad30e6a8c81f51a2813478c793" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpio_pin_interrupt_configure_dt</definition>
        <argsstring>(const struct gpio_dt_spec *spec, gpio_flags_t flags)</argsstring>
        <name>gpio_pin_interrupt_configure_dt</name>
        <param>
          <type>const struct <ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga5f5cb5e7dae6d58e072bb450af029d2e" kindref="member">gpio_flags_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Configure pin interrupts from a <computeroutput><ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>gpio_pin_interrupt_configure(spec-&gt;port, spec-&gt;pin, flags);
</verbatim> The <computeroutput>spec-&gt;dt_flags</computeroutput> value is not used.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO specification from devicetree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>interrupt configuration flags </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__gpio__interface_1ga9618f254365381063439a0e9c5e787cb" kindref="member">gpio_pin_interrupt_configure()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="705" column="19" bodyfile="include/drivers/gpio.h" bodystart="705" bodyend="709"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1gaed4a2051d76db7eead8ed1719ce2ba33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpio_pin_configure</definition>
        <argsstring>(const struct device *port, gpio_pin_t pin, gpio_flags_t flags)</argsstring>
        <name>gpio_pin_configure</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref></type>
          <declname>pin</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga5f5cb5e7dae6d58e072bb450af029d2e" kindref="member">gpio_flags_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Configure a single pin. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin number to configure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags for pin configuration: &apos;GPIO input/output configuration flags&apos;, &apos;GPIO drive strength flags&apos;, &apos;GPIO pin drive flags&apos;, &apos;GPIO pin bias flags&apos;, GPIO_INT_DEBOUNCE.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>if any of the configuration options is not supported (unless otherwise directed by flag documentation). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>I/O error when accessing an external GPIO chip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EWOULDBLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>if operation would block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="727" column="6" declfile="include/drivers/gpio.h" declline="727" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1ga423db4f985098ddcaa504ec430e91913" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpio_pin_configure_dt</definition>
        <argsstring>(const struct gpio_dt_spec *spec, gpio_flags_t extra_flags)</argsstring>
        <name>gpio_pin_configure_dt</name>
        <param>
          <type>const struct <ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga5f5cb5e7dae6d58e072bb450af029d2e" kindref="member">gpio_flags_t</ref></type>
          <declname>extra_flags</declname>
        </param>
        <briefdescription>
<para>Configure a single pin from a <computeroutput><ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref></computeroutput> and some extra flags. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>gpio_pin_configure(spec-&gt;port, spec-&gt;pin, spec-&gt;dt_flags | extra_flags);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO specification from devicetree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extra_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>additional flags </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__gpio__interface_1gaed4a2051d76db7eead8ed1719ce2ba33" kindref="member">gpio_pin_configure()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="796" column="19" bodyfile="include/drivers/gpio.h" bodystart="796" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1gae2a49b36cae2e17fc665a3bd844f50b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpio_port_get_raw</definition>
        <argsstring>(const struct device *port, gpio_port_value_t *value)</argsstring>
        <name>gpio_port_get_raw</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" kindref="member">gpio_port_value_t</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Get physical level of all input pins in a port. </para>
        </briefdescription>
        <detaileddescription>
<para>A low physical level on the pin will be interpreted as value 0. A high physical level will be interpreted as value 1. This function ignores GPIO_ACTIVE_LOW flag.</para>
<para>Value of a pin with index n will be represented by bit n in the returned port value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a variable where pin values will be stored.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>I/O error when accessing an external GPIO chip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EWOULDBLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>if operation would block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="821" column="6" declfile="include/drivers/gpio.h" declline="821" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1gae578c8163fb8fe5600d1ca9e5d7526b1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpio_port_get</definition>
        <argsstring>(const struct device *port, gpio_port_value_t *value)</argsstring>
        <name>gpio_port_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" kindref="member">gpio_port_value_t</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Get logical level of all input pins in a port. </para>
        </briefdescription>
        <detaileddescription>
<para>Get logical level of an input pin taking into account GPIO_ACTIVE_LOW flag. If pin is configured as Active High, a low physical level will be interpreted as logical value 0. If pin is configured as Active Low, a low physical level will be interpreted as logical value 1.</para>
<para>Value of a pin with index n will be represented by bit n in the returned port value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a variable where pin values will be stored.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>I/O error when accessing an external GPIO chip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EWOULDBLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>if operation would block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="851" column="19" bodyfile="include/drivers/gpio.h" bodystart="851" bodyend="864"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1ga9e7b50d720fda362941acc1e3b3b2922" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpio_port_set_masked_raw</definition>
        <argsstring>(const struct device *port, gpio_port_pins_t mask, gpio_port_value_t value)</argsstring>
        <name>gpio_port_set_masked_raw</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref></type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" kindref="member">gpio_port_value_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set physical level of output pins in a port. </para>
        </briefdescription>
        <detaileddescription>
<para>Writing value 0 to the pin will set it to a low physical level. Writing value 1 will set it to a high physical level. This function ignores GPIO_ACTIVE_LOW flag.</para>
<para>Pin with index n is represented by bit n in mask and value parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask indicating which pins will be modified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value assigned to the output pins.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>I/O error when accessing an external GPIO chip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EWOULDBLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>if operation would block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="883" column="6" declfile="include/drivers/gpio.h" declline="883" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1gac653e70270019d599732ab78693dd1fd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpio_port_set_masked</definition>
        <argsstring>(const struct device *port, gpio_port_pins_t mask, gpio_port_value_t value)</argsstring>
        <name>gpio_port_set_masked</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref></type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" kindref="member">gpio_port_value_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set logical level of output pins in a port. </para>
        </briefdescription>
        <detaileddescription>
<para>Set logical level of an output pin taking into account GPIO_ACTIVE_LOW flag. Value 0 sets the pin in logical 0 / inactive state. Value 1 sets the pin in logical 1 / active state. If pin is configured as Active High, the default, setting it in inactive state will force the pin to a low physical level. If pin is configured as Active Low, setting it in inactive state will force the pin to a high physical level.</para>
<para>Pin with index n is represented by bit n in mask and value parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask indicating which pins will be modified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value assigned to the output pins.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>I/O error when accessing an external GPIO chip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EWOULDBLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>if operation would block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="917" column="19" bodyfile="include/drivers/gpio.h" bodystart="917" bodyend="927"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1ga18e6ca0df95566fecc0633efb04a075a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpio_port_set_bits_raw</definition>
        <argsstring>(const struct device *port, gpio_port_pins_t pins)</argsstring>
        <name>gpio_port_set_bits_raw</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref></type>
          <declname>pins</declname>
        </param>
        <briefdescription>
<para>Set physical level of selected output pins to high. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pins</parametername>
</parameternamelist>
<parameterdescription>
<para>Value indicating which pins will be modified.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>I/O error when accessing an external GPIO chip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EWOULDBLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>if operation would block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="939" column="6" declfile="include/drivers/gpio.h" declline="939" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1ga570b669af237df991c4a55cff6ec3253" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpio_port_set_bits</definition>
        <argsstring>(const struct device *port, gpio_port_pins_t pins)</argsstring>
        <name>gpio_port_set_bits</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref></type>
          <declname>pins</declname>
        </param>
        <briefdescription>
<para>Set logical level of selected output pins to active. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pins</parametername>
</parameternamelist>
<parameterdescription>
<para>Value indicating which pins will be modified.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>I/O error when accessing an external GPIO chip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EWOULDBLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>if operation would block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="961" column="19" bodyfile="include/drivers/gpio.h" bodystart="961" bodyend="965"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1ga9d2c9daeec7ce127fc786ead566ad27f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpio_port_clear_bits_raw</definition>
        <argsstring>(const struct device *port, gpio_port_pins_t pins)</argsstring>
        <name>gpio_port_clear_bits_raw</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref></type>
          <declname>pins</declname>
        </param>
        <briefdescription>
<para>Set physical level of selected output pins to low. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pins</parametername>
</parameternamelist>
<parameterdescription>
<para>Value indicating which pins will be modified.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>I/O error when accessing an external GPIO chip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EWOULDBLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>if operation would block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="977" column="6" declfile="include/drivers/gpio.h" declline="977" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1gac1660707a44cc8a3aa08b25685b4b20b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpio_port_clear_bits</definition>
        <argsstring>(const struct device *port, gpio_port_pins_t pins)</argsstring>
        <name>gpio_port_clear_bits</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref></type>
          <declname>pins</declname>
        </param>
        <briefdescription>
<para>Set logical level of selected output pins to inactive. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pins</parametername>
</parameternamelist>
<parameterdescription>
<para>Value indicating which pins will be modified.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>I/O error when accessing an external GPIO chip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EWOULDBLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>if operation would block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="999" column="19" bodyfile="include/drivers/gpio.h" bodystart="999" bodyend="1003"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1ga82977d8706fb9f464db455bd0e9ac2e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpio_port_toggle_bits</definition>
        <argsstring>(const struct device *port, gpio_port_pins_t pins)</argsstring>
        <name>gpio_port_toggle_bits</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref></type>
          <declname>pins</declname>
        </param>
        <briefdescription>
<para>Toggle level of selected output pins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pins</parametername>
</parameternamelist>
<parameterdescription>
<para>Value indicating which pins will be modified.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>I/O error when accessing an external GPIO chip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EWOULDBLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>if operation would block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="1015" column="6" declfile="include/drivers/gpio.h" declline="1015" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1ga6e7ca22e83a70d3ddcf0de068b377c2d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpio_port_set_clr_bits_raw</definition>
        <argsstring>(const struct device *port, gpio_port_pins_t set_pins, gpio_port_pins_t clear_pins)</argsstring>
        <name>gpio_port_set_clr_bits_raw</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref></type>
          <declname>set_pins</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref></type>
          <declname>clear_pins</declname>
        </param>
        <briefdescription>
<para>Set physical level of selected output pins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set_pins</parametername>
</parameternamelist>
<parameterdescription>
<para>Value indicating which pins will be set to high. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clear_pins</parametername>
</parameternamelist>
<parameterdescription>
<para>Value indicating which pins will be set to low.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>I/O error when accessing an external GPIO chip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EWOULDBLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>if operation would block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="1038" column="19" bodyfile="include/drivers/gpio.h" bodystart="1038" bodyend="1045"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1ga77880d217f5dd1fc1c72ce791254449b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpio_port_set_clr_bits</definition>
        <argsstring>(const struct device *port, gpio_port_pins_t set_pins, gpio_port_pins_t clear_pins)</argsstring>
        <name>gpio_port_set_clr_bits</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref></type>
          <declname>set_pins</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref></type>
          <declname>clear_pins</declname>
        </param>
        <briefdescription>
<para>Set logical level of selected output pins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set_pins</parametername>
</parameternamelist>
<parameterdescription>
<para>Value indicating which pins will be set to active. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clear_pins</parametername>
</parameternamelist>
<parameterdescription>
<para>Value indicating which pins will be set to inactive.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>I/O error when accessing an external GPIO chip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EWOULDBLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>if operation would block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="1058" column="19" bodyfile="include/drivers/gpio.h" bodystart="1058" bodyend="1065"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1ga0fc52723b78019258bb306c771c430a1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpio_pin_get_raw</definition>
        <argsstring>(const struct device *port, gpio_pin_t pin)</argsstring>
        <name>gpio_pin_get_raw</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref></type>
          <declname>pin</declname>
        </param>
        <briefdescription>
<para>Get physical level of an input pin. </para>
        </briefdescription>
        <detaileddescription>
<para>A low physical level on the pin will be interpreted as value 0. A high physical level will be interpreted as value 1. This function ignores GPIO_ACTIVE_LOW flag.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>If pin physical level is high. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If pin physical level is low. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>I/O error when accessing an external GPIO chip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EWOULDBLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>if operation would block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="1082" column="19" bodyfile="include/drivers/gpio.h" bodystart="1082" bodyend="1099"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1ga154a4ea3d3084910f02df31dc0779be6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpio_pin_get</definition>
        <argsstring>(const struct device *port, gpio_pin_t pin)</argsstring>
        <name>gpio_pin_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref></type>
          <declname>pin</declname>
        </param>
        <briefdescription>
<para>Get logical level of an input pin. </para>
        </briefdescription>
        <detaileddescription>
<para>Get logical level of an input pin taking into account GPIO_ACTIVE_LOW flag. If pin is configured as Active High, a low physical level will be interpreted as logical value 0. If pin is configured as Active Low, a low physical level will be interpreted as logical value 1.</para>
<para>Note: If pin is configured as Active High, the default, <ref refid="group__gpio__interface_1ga154a4ea3d3084910f02df31dc0779be6" kindref="member">gpio_pin_get()</ref> function is equivalent to <ref refid="group__gpio__interface_1ga0fc52723b78019258bb306c771c430a1" kindref="member">gpio_pin_get_raw()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>If pin logical value is 1 / active. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If pin logical value is 0 / inactive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>I/O error when accessing an external GPIO chip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EWOULDBLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>if operation would block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="1120" column="19" bodyfile="include/drivers/gpio.h" bodystart="1120" bodyend="1137"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1gaabeb2d0d98856c7ff78be36651d6bbc1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpio_pin_get_dt</definition>
        <argsstring>(const struct gpio_dt_spec *spec)</argsstring>
        <name>gpio_pin_get_dt</name>
        <param>
          <type>const struct <ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <briefdescription>
<para>Get logical level of an input pin from a <computeroutput><ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>gpio_pin_get(spec-&gt;port, spec-&gt;pin);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO specification from devicetree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__gpio__interface_1ga154a4ea3d3084910f02df31dc0779be6" kindref="member">gpio_pin_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="1149" column="19" bodyfile="include/drivers/gpio.h" bodystart="1149" bodyend="1152"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1gae28f0fa2576530083aa86d819d0d5cca" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpio_pin_set_raw</definition>
        <argsstring>(const struct device *port, gpio_pin_t pin, int value)</argsstring>
        <name>gpio_pin_set_raw</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref></type>
          <declname>pin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set physical level of an output pin. </para>
        </briefdescription>
        <detaileddescription>
<para>Writing value 0 to the pin will set it to a low physical level. Writing any value other than 0 will set it to a high physical level. This function ignores GPIO_ACTIVE_LOW flag.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value assigned to the pin.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>I/O error when accessing an external GPIO chip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EWOULDBLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>if operation would block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="1169" column="19" bodyfile="include/drivers/gpio.h" bodystart="1169" bodyend="1187"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1gabfab69282fb99be119760436f2d18a9b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpio_pin_set</definition>
        <argsstring>(const struct device *port, gpio_pin_t pin, int value)</argsstring>
        <name>gpio_pin_set</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref></type>
          <declname>pin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set logical level of an output pin. </para>
        </briefdescription>
        <detaileddescription>
<para>Set logical level of an output pin taking into account GPIO_ACTIVE_LOW flag. Value 0 sets the pin in logical 0 / inactive state. Any value other than 0 sets the pin in logical 1 / active state. If pin is configured as Active High, the default, setting it in inactive state will force the pin to a low physical level. If pin is configured as Active Low, setting it in inactive state will force the pin to a high physical level.</para>
<para>Note: If pin is configured as Active High, <ref refid="group__gpio__interface_1gabfab69282fb99be119760436f2d18a9b" kindref="member">gpio_pin_set()</ref> function is equivalent to <ref refid="group__gpio__interface_1gae28f0fa2576530083aa86d819d0d5cca" kindref="member">gpio_pin_set_raw()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value assigned to the pin.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>I/O error when accessing an external GPIO chip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EWOULDBLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>if operation would block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="1210" column="19" bodyfile="include/drivers/gpio.h" bodystart="1210" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1ga541064fb9e575c0c559c101754466fa8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpio_pin_set_dt</definition>
        <argsstring>(const struct gpio_dt_spec *spec, int value)</argsstring>
        <name>gpio_pin_set_dt</name>
        <param>
          <type>const struct <ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set logical level of a output pin from a <computeroutput><ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>gpio_pin_set(spec-&gt;port, spec-&gt;pin, value);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO specification from devicetree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value assigned to the pin. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__gpio__interface_1gabfab69282fb99be119760436f2d18a9b" kindref="member">gpio_pin_set()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="1240" column="19" bodyfile="include/drivers/gpio.h" bodystart="1240" bodyend="1243"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1gaabf948471d313ff19410f1741dd16957" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpio_pin_toggle</definition>
        <argsstring>(const struct device *port, gpio_pin_t pin)</argsstring>
        <name>gpio_pin_toggle</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref></type>
          <declname>pin</declname>
        </param>
        <briefdescription>
<para>Toggle pin level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>I/O error when accessing an external GPIO chip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EWOULDBLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>if operation would block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="1255" column="19" bodyfile="include/drivers/gpio.h" bodystart="1255" bodyend="1265"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1ga3272e866489da6c2e12c48f803c59e81" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpio_pin_toggle_dt</definition>
        <argsstring>(const struct gpio_dt_spec *spec)</argsstring>
        <name>gpio_pin_toggle_dt</name>
        <param>
          <type>const struct <ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <briefdescription>
<para>Toggle pin level from a <computeroutput><ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>gpio_pin_toggle(spec-&gt;port, spec-&gt;pin);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO specification from devicetree </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__gpio__interface_1gaabf948471d313ff19410f1741dd16957" kindref="member">gpio_pin_toggle()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="1277" column="19" bodyfile="include/drivers/gpio.h" bodystart="1277" bodyend="1280"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1ga7a7dd7c1f3a2135a9f378e1c34b6232c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void gpio_init_callback</definition>
        <argsstring>(struct gpio_callback *callback, gpio_callback_handler_t handler, gpio_port_pins_t pin_mask)</argsstring>
        <name>gpio_init_callback</name>
        <param>
          <type>struct <ref refid="structgpio__callback" kindref="compound">gpio_callback</ref> *</type>
          <declname>callback</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga2b400e2193e3899c63253d2f48ed90db" kindref="member">gpio_callback_handler_t</ref></type>
          <declname>handler</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref></type>
          <declname>pin_mask</declname>
        </param>
        <briefdescription>
<para>Helper to initialize a struct <ref refid="structgpio__callback" kindref="compound">gpio_callback</ref> properly. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid Application&apos;s callback structure pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handler function pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>A bit mask of relevant pins for the handler </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="1288" column="20" bodyfile="include/drivers/gpio.h" bodystart="1288" bodyend="1297"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1ga05fd15af20386d69f9332354285b0cca" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpio_add_callback</definition>
        <argsstring>(const struct device *port, struct gpio_callback *callback)</argsstring>
        <name>gpio_add_callback</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type>struct <ref refid="structgpio__callback" kindref="compound">gpio_callback</ref> *</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Add an application callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid Application&apos;s callback structure pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, negative errno code on failure.</para>
</simplesect>
<simplesect kind="note"><para>Callbacks may be added to the device from within a callback handler invocation, but whether they are invoked for the current GPIO event is not specified.</para>
</simplesect>
Note: enables to add as many callback as needed on the same port. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="1311" column="19" bodyfile="include/drivers/gpio.h" bodystart="1311" bodyend="1322"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1gac1e94ba8faac79f469447e9b5d2f8c06" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpio_remove_callback</definition>
        <argsstring>(const struct device *port, struct gpio_callback *callback)</argsstring>
        <name>gpio_remove_callback</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type>struct <ref refid="structgpio__callback" kindref="compound">gpio_callback</ref> *</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Remove an application callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid application&apos;s callback structure pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, negative errno code on failure.</para>
</simplesect>
<simplesect kind="warning"><para>It is explicitly permitted, within a callback handler, to remove the registration for the callback that is running, i.e. <computeroutput>callback</computeroutput>. Attempts to remove other registrations on the same device may result in undefined behavior, including failure to invoke callbacks that remain registered and unintended invocation of removed callbacks.</para>
</simplesect>
Note: enables to remove as many callbacks as added through <ref refid="group__gpio__interface_1ga05fd15af20386d69f9332354285b0cca" kindref="member">gpio_add_callback()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="1340" column="19" bodyfile="include/drivers/gpio.h" bodystart="1340" bodyend="1351"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__interface_1ga3f9e45de172a27f49c31a072c0c241e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpio_get_pending_int</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>gpio_get_pending_int</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Function to get pending interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para>The purpose of this function is to return the interrupt status register for the device. This is especially useful when waking up from low power states to check the wake up source.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>!= 0 if at least one gpio interrupt is pending. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if no gpio interrupt is pending. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio.h" line="1366" column="6" declfile="include/drivers/gpio.h" declline="1366" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Public APIs for GPIO drivers. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019-2020<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>Piotr<sp/>Mienkowski</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017<sp/>ARM<sp/>Ltd</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2016<sp/>Intel<sp/>Corporation.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_DRIVERS_GPIO_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_DRIVERS_GPIO_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="____assert_8h" kindref="compound">sys/__assert.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="slist_8h" kindref="compound">sys/slist.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;device.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="dt-bindings_2gpio_2gpio_8h" kindref="compound">dt-bindings/gpio/gpio.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="group__gpio__interface_1ga7be6a0cc9aa65da1d4ee5751b4085853" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_INPUT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U<sp/>&lt;&lt;<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="group__gpio__interface_1ga0db9fe8a278e6ab7c5c6f14fe58e5eb1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_OUTPUT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U<sp/>&lt;&lt;<sp/>9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="group__gpio__interface_1gaf82306c09450f6933366c4b821db21ed" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_DISCONNECTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Initializes<sp/>output<sp/>to<sp/>a<sp/>low<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_OUTPUT_INIT_LOW<sp/><sp/><sp/><sp/>(1U<sp/>&lt;&lt;<sp/>10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Initializes<sp/>output<sp/>to<sp/>a<sp/>high<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_OUTPUT_INIT_HIGH<sp/><sp/><sp/>(1U<sp/>&lt;&lt;<sp/>11)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Initializes<sp/>output<sp/>based<sp/>on<sp/>logic<sp/>level<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_OUTPUT_INIT_LOGICAL<sp/>(1U<sp/>&lt;&lt;<sp/>12)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="group__gpio__interface_1gaf85baf9f9c1ba554324b4cd7064487b0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_OUTPUT_LOW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GPIO_OUTPUT<sp/>|<sp/>GPIO_OUTPUT_INIT_LOW)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="group__gpio__interface_1ga10d31f204c0e927017d571352422fb09" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_OUTPUT_HIGH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GPIO_OUTPUT<sp/>|<sp/>GPIO_OUTPUT_INIT_HIGH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="group__gpio__interface_1ga1e1d6be5f2f788f89468a0ce8b854634" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_OUTPUT_INACTIVE<sp/><sp/><sp/><sp/>(GPIO_OUTPUT<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_OUTPUT_INIT_LOW<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_OUTPUT_INIT_LOGICAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="group__gpio__interface_1ga0f5cc126d6a690eb3e303eb29aa718ce" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_OUTPUT_ACTIVE<sp/><sp/><sp/><sp/><sp/><sp/>(GPIO_OUTPUT<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_OUTPUT_INIT_HIGH<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_OUTPUT_INIT_LOGICAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="group__gpio__interface_1ga91657faac28f9b213105dd61a419dd5a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_INT_DISABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U<sp/>&lt;&lt;<sp/>13)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Enables<sp/>GPIO<sp/>pin<sp/>interrupt.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_INT_ENABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U<sp/>&lt;&lt;<sp/>14)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>GPIO<sp/>interrupt<sp/>is<sp/>sensitive<sp/>to<sp/>logical<sp/>levels.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>a<sp/>component<sp/>flag<sp/>that<sp/>should<sp/>be<sp/>combined<sp/>with<sp/>other</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>`GPIO_INT_*`<sp/>flags<sp/>to<sp/>produce<sp/>a<sp/>meaningful<sp/>configuration.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_INT_LEVELS_LOGICAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U<sp/>&lt;&lt;<sp/>15)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>GPIO<sp/>interrupt<sp/>is<sp/>edge<sp/>sensitive.</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>Note:<sp/>by<sp/>default<sp/>interrupts<sp/>are<sp/>level<sp/>sensitive.</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>a<sp/>component<sp/>flag<sp/>that<sp/>should<sp/>be<sp/>combined<sp/>with<sp/>other</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>`GPIO_INT_*`<sp/>flags<sp/>to<sp/>produce<sp/>a<sp/>meaningful<sp/>configuration.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_INT_EDGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U<sp/>&lt;&lt;<sp/>16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Trigger<sp/>detection<sp/>when<sp/>input<sp/>state<sp/>is<sp/>(or<sp/>transitions<sp/>to)<sp/>physical<sp/>low<sp/>or</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>logical<sp/>0<sp/>level.</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>a<sp/>component<sp/>flag<sp/>that<sp/>should<sp/>be<sp/>combined<sp/>with<sp/>other</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>`GPIO_INT_*`<sp/>flags<sp/>to<sp/>produce<sp/>a<sp/>meaningful<sp/>configuration.</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_INT_LOW_0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U<sp/>&lt;&lt;<sp/>17)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Trigger<sp/>detection<sp/>on<sp/>input<sp/>state<sp/>is<sp/>(or<sp/>transitions<sp/>to)<sp/>physical<sp/>high<sp/>or</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/>logical<sp/>1<sp/>level.</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>a<sp/>component<sp/>flag<sp/>that<sp/>should<sp/>be<sp/>combined<sp/>with<sp/>other</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>`GPIO_INT_*`<sp/>flags<sp/>to<sp/>produce<sp/>a<sp/>meaningful<sp/>configuration.</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_INT_HIGH_1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U<sp/>&lt;&lt;<sp/>18)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_INT_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GPIO_INT_DISABLE<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_ENABLE<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_LEVELS_LOGICAL<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_EDGE<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_LOW_0<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_HIGH_1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="group__gpio__interface_1gaed642a4e482f73aa917477370d0e241b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_INT_EDGE_RISING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GPIO_INT_ENABLE<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_EDGE<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_HIGH_1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="group__gpio__interface_1ga73bed10383a27d4a03feb300e64af8e8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_INT_EDGE_FALLING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GPIO_INT_ENABLE<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_EDGE<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_LOW_0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="group__gpio__interface_1ga10fa307ab17d02819108165a09f8e08b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_INT_EDGE_BOTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GPIO_INT_ENABLE<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_EDGE<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_LOW_0<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_HIGH_1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="group__gpio__interface_1gaddbb5ad576875af9c2d73b73df55c893" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_INT_LEVEL_LOW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GPIO_INT_ENABLE<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_LOW_0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="group__gpio__interface_1ga233690d9a6a64bc9f804e3caa6d4a88f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_INT_LEVEL_HIGH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GPIO_INT_ENABLE<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_HIGH_1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="group__gpio__interface_1ga7b922529a3cb9396b0d82ca823e9d010" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_INT_EDGE_TO_INACTIVE<sp/><sp/><sp/><sp/><sp/><sp/>(GPIO_INT_ENABLE<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_LEVELS_LOGICAL<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_EDGE<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_LOW_0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="group__gpio__interface_1ga35d2ff0e041236d82004a4bb2b5bf634" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_INT_EDGE_TO_ACTIVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GPIO_INT_ENABLE<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_LEVELS_LOGICAL<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_EDGE<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_HIGH_1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="group__gpio__interface_1gacb9bb1b63f172af2da7eb193e234c4f2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_INT_LEVEL_INACTIVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GPIO_INT_ENABLE<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_LEVELS_LOGICAL<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_LOW_0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="group__gpio__interface_1gae51c68ff83959994bb942bb253505ca1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_INT_LEVEL_ACTIVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GPIO_INT_ENABLE<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_LEVELS_LOGICAL<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_HIGH_1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="group__gpio__interface_1ga2ca79acf34a8eb18f89f02f1edf8e8a6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_INT_DEBOUNCE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U<sp/>&lt;&lt;<sp/>19)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_DS_LOW_POS<sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_DS_LOW_MASK<sp/>(0x3U<sp/>&lt;&lt;<sp/>GPIO_DS_LOW_POS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="group__gpio__interface_1gad7fcda3168d06a040d3cda8450149feb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_DS_DFLT_LOW<sp/>(0x0U<sp/>&lt;&lt;<sp/>GPIO_DS_LOW_POS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="246" refid="group__gpio__interface_1ga2830a8b723d7db8335258eee0c5754b1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_DS_ALT_LOW<sp/>(0x1U<sp/>&lt;&lt;<sp/>GPIO_DS_LOW_POS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_DS_HIGH_POS<sp/>22</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_DS_HIGH_MASK<sp/>(0x3U<sp/>&lt;&lt;<sp/>GPIO_DS_HIGH_POS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="group__gpio__interface_1ga58888cdec555b2e093be55347a9ae9a5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_DS_DFLT_HIGH<sp/>(0x0U<sp/>&lt;&lt;<sp/>GPIO_DS_HIGH_POS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="261" refid="group__gpio__interface_1ga119a2b2eee17fec97b5441ebff0b43b5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_DS_ALT_HIGH<sp/>(0x1U<sp/>&lt;&lt;<sp/>GPIO_DS_HIGH_POS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="group__gpio__interface_1ga8f78a2ca1e4931def231283c1282e045" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_DS_DFLT<sp/>(GPIO_DS_DFLT_LOW<sp/>|<sp/>GPIO_DS_DFLT_HIGH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="269" refid="group__gpio__interface_1gade83d759a4fddceb27cf6e6c8ebe25c6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_DS_ALT<sp/>(GPIO_DS_ALT_LOW<sp/>|<sp/>GPIO_DS_ALT_HIGH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_DS_MASK<sp/>(GPIO_DS_LOW_MASK<sp/>|<sp/>GPIO_DS_HIGH_MASK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_DIR_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GPIO_INPUT<sp/>|<sp/>GPIO_OUTPUT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287" refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="300" refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" kindref="member">gpio_port_value_t</ref>;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="317" refid="group__gpio__interface_1ga2681aecd8e20fba20900774ddaa9c843" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="group__gpio__interface_1ga2681aecd8e20fba20900774ddaa9c843" kindref="member">gpio_dt_flags_t</ref>;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="325" refid="group__gpio__interface_1ga5f5cb5e7dae6d58e072bb450af029d2e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__gpio__interface_1ga5f5cb5e7dae6d58e072bb450af029d2e" kindref="member">gpio_flags_t</ref>;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="structgpio__dt__spec" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref><sp/>{</highlight></codeline>
<codeline lineno="341" refid="structgpio__dt__spec_1a5d617d47e2f568c7a4402a8f5a40ed4f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*<ref refid="structgpio__dt__spec_1a5d617d47e2f568c7a4402a8f5a40ed4f" kindref="member">port</ref>;</highlight></codeline>
<codeline lineno="343" refid="structgpio__dt__spec_1ad7e6fbb0cba0be94a47d4f2add056c84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref><sp/><ref refid="structgpio__dt__spec_1ad7e6fbb0cba0be94a47d4f2add056c84" kindref="member">pin</ref>;</highlight></codeline>
<codeline lineno="345" refid="structgpio__dt__spec_1ae3b90e7e22708798c67da94f72ad1ab0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga2681aecd8e20fba20900774ddaa9c843" kindref="member">gpio_dt_flags_t</ref><sp/><ref refid="structgpio__dt__spec_1ae3b90e7e22708798c67da94f72ad1ab0" kindref="member">dt_flags</ref>;</highlight></codeline>
<codeline lineno="346"><highlight class="normal">};</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="382" refid="group__gpio__interface_1gacb1077b77aecf8f1a9c7636ea583c4cf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_DT_SPEC_GET_BY_IDX(node_id,<sp/>prop,<sp/>idx)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="383"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="384"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.port<sp/>=<sp/>DEVICE_DT_GET(DT_GPIO_CTLR_BY_IDX(node_id,<sp/>prop,<sp/>idx)),\</highlight></codeline>
<codeline lineno="385"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pin<sp/>=<sp/>DT_GPIO_PIN_BY_IDX(node_id,<sp/>prop,<sp/>idx),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="386"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dt_flags<sp/>=<sp/>DT_GPIO_FLAGS_BY_IDX(node_id,<sp/>prop,<sp/>idx),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="387"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="406" refid="group__gpio__interface_1ga3db4fa464e191016287f4c4d7eb9a983" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_DT_SPEC_GET_BY_IDX_OR(node_id,<sp/>prop,<sp/>idx,<sp/>default_value)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="407"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(DT_NODE_HAS_PROP(node_id,<sp/>prop),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="408"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GPIO_DT_SPEC_GET_BY_IDX(node_id,<sp/>prop,<sp/>idx)),<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="409"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(default_value))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="group__gpio__interface_1ga2fa6bb5880f46984f9fc29c70f7d503e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_DT_SPEC_GET(node_id,<sp/>prop)<sp/>\</highlight></codeline>
<codeline lineno="420"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_DT_SPEC_GET_BY_IDX(node_id,<sp/>prop,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="432" refid="group__gpio__interface_1ga26b2205aa82819df1d80a22761352e71" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_DT_SPEC_GET_OR(node_id,<sp/>prop,<sp/>default_value)<sp/>\</highlight></codeline>
<codeline lineno="433"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_DT_SPEC_GET_BY_IDX_OR(node_id,<sp/>prop,<sp/>0,<sp/>default_value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="445" refid="group__gpio__interface_1gabbdbef450f14fd0af73667e2728ad084" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_DT_SPEC_INST_GET_BY_IDX(inst,<sp/>prop,<sp/>idx)<sp/>\</highlight></codeline>
<codeline lineno="446"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_DT_SPEC_GET_BY_IDX(DT_DRV_INST(inst),<sp/>prop,<sp/>idx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="459" refid="group__gpio__interface_1gaf07edf6bc88af18e9976c76f6c3c3bf1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_DT_SPEC_INST_GET_BY_IDX_OR(inst,<sp/>prop,<sp/>idx,<sp/>default_value)<sp/>\</highlight></codeline>
<codeline lineno="460"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_DT_SPEC_GET_BY_IDX_OR(DT_DRV_INST(inst),<sp/>prop,<sp/>idx,<sp/>default_value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="470" refid="group__gpio__interface_1ga168f5c6e39a0111191f606a9a0826e89" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_DT_SPEC_INST_GET(inst,<sp/>prop)<sp/>\</highlight></codeline>
<codeline lineno="471"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_DT_SPEC_INST_GET_BY_IDX(inst,<sp/>prop,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="483" refid="group__gpio__interface_1gae6b4a354c3cf0e042a390aac4bc37c69" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_DT_SPEC_INST_GET_OR(inst,<sp/>prop,<sp/>default_value)<sp/>\</highlight></codeline>
<codeline lineno="484"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_DT_SPEC_INST_GET_BY_IDX_OR(inst,<sp/>prop,<sp/>0,<sp/>default_value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="489" refid="group__gpio__interface_1ga1449ba90eaec5e6144fe4faae21f2e3f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPIO_MAX_PINS_PER_PORT<sp/>(sizeof(gpio_port_pins_t)<sp/>*<sp/>__CHAR_BIT__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="496" refid="structgpio__driver__config" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__driver__config" kindref="compound">gpio_driver_config</ref><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mask<sp/>identifying<sp/>pins<sp/>supported<sp/>by<sp/>the<sp/>controller.</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Initialization<sp/>of<sp/>this<sp/>mask<sp/>is<sp/>the<sp/>responsibility<sp/>of<sp/>device</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>instance<sp/>generation<sp/>in<sp/>the<sp/>driver.</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502" refid="structgpio__driver__config_1af73c0d9d433b86b9d0e0c6703e737052" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/><ref refid="structgpio__driver__config_1af73c0d9d433b86b9d0e0c6703e737052" kindref="member">port_pin_mask</ref>;</highlight></codeline>
<codeline lineno="503"><highlight class="normal">};</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="509" refid="structgpio__driver__data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__driver__data" kindref="compound">gpio_driver_data</ref><sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mask<sp/>identifying<sp/>pins<sp/>that<sp/>are<sp/>configured<sp/>as<sp/>active<sp/>low.</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Management<sp/>of<sp/>this<sp/>mask<sp/>is<sp/>the<sp/>responsibility<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>wrapper<sp/>functions<sp/>in<sp/>this<sp/>header.</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515" refid="structgpio__driver__data_1ab62038a3c7c341cafda6665dfab3f169" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/><ref refid="structgpio__driver__data_1ab62038a3c7c341cafda6665dfab3f169" kindref="member">invert</ref>;</highlight></codeline>
<codeline lineno="516"><highlight class="normal">};</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__callback" kindref="compound">gpio_callback</ref>;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="532" refid="group__gpio__interface_1ga2b400e2193e3899c63253d2f48ed90db" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__gpio__interface_1ga2b400e2193e3899c63253d2f48ed90db" kindref="member">gpio_callback_handler_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__callback" kindref="compound">gpio_callback</ref><sp/>*cb,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>pins);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="546" refid="structgpio__callback" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__callback" kindref="compound">gpio_callback</ref><sp/>{</highlight></codeline>
<codeline lineno="550" refid="structgpio__callback_1ab60e7093072964bd818d536c746211e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref><sp/><ref refid="structgpio__callback_1ab60e7093072964bd818d536c746211e4" kindref="member">node</ref>;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="553" refid="structgpio__callback_1af89dc41cbd610d81ac03cae7ab764ceb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga2b400e2193e3899c63253d2f48ed90db" kindref="member">gpio_callback_handler_t</ref><sp/><ref refid="structgpio__callback_1af89dc41cbd610d81ac03cae7ab764ceb" kindref="member">handler</ref>;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="561" refid="structgpio__callback_1ace5c2b83f1d51f73877a1f2c54ba8c67" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/><ref refid="structgpio__callback_1ace5c2b83f1d51f73877a1f2c54ba8c67" kindref="member">pin_mask</ref>;</highlight></codeline>
<codeline lineno="562"><highlight class="normal">};</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Used<sp/>by<sp/>driver<sp/>api<sp/>function<sp/>pin_interrupt_configure,<sp/>these<sp/>are<sp/>defined</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/>*<sp/>in<sp/>terms<sp/>of<sp/>the<sp/>public<sp/>flags<sp/>so<sp/>we<sp/>can<sp/>just<sp/>mask<sp/>and<sp/>pass<sp/>them</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/>*<sp/>through<sp/>to<sp/>the<sp/>driver<sp/>api</highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>gpio_int_mode<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_MODE_DISABLED<sp/>=<sp/><ref refid="group__gpio__interface_1ga91657faac28f9b213105dd61a419dd5a" kindref="member">GPIO_INT_DISABLE</ref>,</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_MODE_LEVEL<sp/>=<sp/>GPIO_INT_ENABLE,</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_MODE_EDGE<sp/>=<sp/>GPIO_INT_ENABLE<sp/>|<sp/>GPIO_INT_EDGE,</highlight></codeline>
<codeline lineno="578"><highlight class="normal">};</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>gpio_int_trig<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Trigger<sp/>detection<sp/>when<sp/>input<sp/>state<sp/>is<sp/>(or<sp/>transitions<sp/>to)</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>physical<sp/>low.<sp/>(Edge<sp/>Failing<sp/>or<sp/>Active<sp/>Low)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_TRIG_LOW<sp/>=<sp/>GPIO_INT_LOW_0,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Trigger<sp/>detection<sp/>when<sp/>input<sp/>state<sp/>is<sp/>(or<sp/>transitions<sp/>to)</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>physical<sp/>high.<sp/>(Edge<sp/>Rising<sp/>or<sp/>Active<sp/>High)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_TRIG_HIGH<sp/>=<sp/>GPIO_INT_HIGH_1,</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Trigger<sp/>detection<sp/>on<sp/>pin<sp/>rising<sp/>or<sp/>falling<sp/>edge.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIO_INT_TRIG_BOTH<sp/>=<sp/>GPIO_INT_LOW_0<sp/>|<sp/>GPIO_INT_HIGH_1,</highlight></codeline>
<codeline lineno="589"><highlight class="normal">};</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal">__subsystem<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpio_driver_api<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*pin_configure)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,<sp/><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref><sp/>pin,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga5f5cb5e7dae6d58e072bb450af029d2e" kindref="member">gpio_flags_t</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*port_get_raw)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" kindref="member">gpio_port_value_t</ref><sp/>*value);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*port_set_masked_raw)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>mask,</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" kindref="member">gpio_port_value_t</ref><sp/>value);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*port_set_bits_raw)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>pins);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*port_clear_bits_raw)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>pins);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*port_toggle_bits)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>pins);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*pin_interrupt_configure)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref><sp/>pin,</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>gpio_int_mode,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>gpio_int_trig);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*manage_callback)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__callback" kindref="compound">gpio_callback</ref><sp/>*cb,</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>(*get_pending_int)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="612"><highlight class="normal">};</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="638" refid="group__gpio__interface_1ga9618f254365381063439a0e9c5e787cb" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1ga9618f254365381063439a0e9c5e787cb" kindref="member">gpio_pin_interrupt_configure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref><sp/>pin,</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga5f5cb5e7dae6d58e072bb450af029d2e" kindref="member">gpio_flags_t</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_gpio_pin_interrupt_configure(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref><sp/>pin,</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga5f5cb5e7dae6d58e072bb450af029d2e" kindref="member">gpio_flags_t</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>)</highlight></codeline>
<codeline lineno="645"><highlight class="normal">{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpio_driver_api<sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpio_driver_api<sp/>*)port-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpio__driver__config" kindref="compound">gpio_driver_config</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cfg<sp/>=</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpio__driver__config" kindref="compound">gpio_driver_config</ref><sp/>*)port-&gt;<ref refid="structdevice_1aca2d801eb15996cf1c74dc65cfa651fc" kindref="member">config</ref>;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__driver__data" kindref="compound">gpio_driver_data</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref><sp/>=</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__driver__data" kindref="compound">gpio_driver_data</ref><sp/>*)port-&gt;<ref refid="structdevice_1ac6739bba5a9e7834903ef2748f404d43" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>gpio_int_trig<sp/>trig;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>gpio_int_mode<sp/>mode;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT_NO_MSG((<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/><ref refid="group__gpio__interface_1ga2ca79acf34a8eb18f89f02f1edf8e8a6" kindref="member">GPIO_INT_DEBOUNCE</ref>)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT((<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/>(<ref refid="group__gpio__interface_1ga91657faac28f9b213105dd61a419dd5a" kindref="member">GPIO_INT_DISABLE</ref><sp/>|<sp/>GPIO_INT_ENABLE))</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!=<sp/>(<ref refid="group__gpio__interface_1ga91657faac28f9b213105dd61a419dd5a" kindref="member">GPIO_INT_DISABLE</ref><sp/>|<sp/>GPIO_INT_ENABLE),</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>both<sp/>enable<sp/>and<sp/>disable<sp/>interrupts&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT((<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/>(<ref refid="group__gpio__interface_1ga91657faac28f9b213105dd61a419dd5a" kindref="member">GPIO_INT_DISABLE</ref><sp/>|<sp/>GPIO_INT_ENABLE))<sp/>!=<sp/>0U,</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>either<sp/>enable<sp/>or<sp/>disable<sp/>interrupts&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT(((<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/>GPIO_INT_ENABLE)<sp/>==<sp/>0)<sp/>||</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/>GPIO_INT_EDGE)<sp/>!=<sp/>0)<sp/>||</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/>(GPIO_INT_LOW_0<sp/>|<sp/>GPIO_INT_HIGH_1))<sp/>!=</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GPIO_INT_LOW_0<sp/>|<sp/>GPIO_INT_HIGH_1)),</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>one<sp/>of<sp/>GPIO_INT_LOW_0,<sp/>GPIO_INT_HIGH_1<sp/>can<sp/>be<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;enabled<sp/>for<sp/>a<sp/>level<sp/>interrupt.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT(((<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/>GPIO_INT_ENABLE)<sp/>==<sp/>0)<sp/>||</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/>(GPIO_INT_LOW_0<sp/>|<sp/>GPIO_INT_HIGH_1))<sp/>!=<sp/>0),</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;At<sp/>least<sp/>one<sp/>of<sp/>GPIO_INT_LOW_0,<sp/>GPIO_INT_HIGH_1<sp/>has<sp/>to<sp/>be<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;enabled.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)cfg;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT((cfg-&gt;port_pin_mask<sp/>&amp;<sp/>(<ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref>)<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pin))<sp/>!=<sp/>0U,</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>pin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/>GPIO_INT_LEVELS_LOGICAL)<sp/>!=<sp/>0)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>-&gt;invert<sp/>&amp;<sp/>(<ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref>)<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pin))<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Invert<sp/>signal<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>^=<sp/>(GPIO_INT_LOW_0<sp/>|<sp/>GPIO_INT_HIGH_1);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trig<sp/>=<sp/>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>gpio_int_trig)(<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/>(GPIO_INT_LOW_0<sp/>|<sp/>GPIO_INT_HIGH_1));</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>gpio_int_mode)(<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/>(GPIO_INT_EDGE<sp/>|<sp/><ref refid="group__gpio__interface_1ga91657faac28f9b213105dd61a419dd5a" kindref="member">GPIO_INT_DISABLE</ref><sp/>|<sp/>GPIO_INT_ENABLE));</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;pin_interrupt_configure(port,<sp/>pin,<sp/>mode,<sp/>trig);</highlight></codeline>
<codeline lineno="690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="705" refid="group__gpio__interface_1ga24f0b4ad30e6a8c81f51a2813478c793" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1ga24f0b4ad30e6a8c81f51a2813478c793" kindref="member">gpio_pin_interrupt_configure_dt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref><sp/>*spec,</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga5f5cb5e7dae6d58e072bb450af029d2e" kindref="member">gpio_flags_t</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>)</highlight></codeline>
<codeline lineno="707"><highlight class="normal">{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1ga9618f254365381063439a0e9c5e787cb" kindref="member">gpio_pin_interrupt_configure</ref>(spec-&gt;<ref refid="structgpio__dt__spec_1a5d617d47e2f568c7a4402a8f5a40ed4f" kindref="member">port</ref>,<sp/>spec-&gt;<ref refid="structgpio__dt__spec_1ad7e6fbb0cba0be94a47d4f2add056c84" kindref="member">pin</ref>,<sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="727" refid="group__gpio__interface_1gaed4a2051d76db7eead8ed1719ce2ba33" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1gaed4a2051d76db7eead8ed1719ce2ba33" kindref="member">gpio_pin_configure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref><sp/>pin,</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga5f5cb5e7dae6d58e072bb450af029d2e" kindref="member">gpio_flags_t</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_gpio_pin_configure(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref><sp/>pin,</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga5f5cb5e7dae6d58e072bb450af029d2e" kindref="member">gpio_flags_t</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>)</highlight></codeline>
<codeline lineno="734"><highlight class="normal">{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpio_driver_api<sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpio_driver_api<sp/>*)port-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpio__driver__config" kindref="compound">gpio_driver_config</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cfg<sp/>=</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpio__driver__config" kindref="compound">gpio_driver_config</ref><sp/>*)port-&gt;<ref refid="structdevice_1aca2d801eb15996cf1c74dc65cfa651fc" kindref="member">config</ref>;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__driver__data" kindref="compound">gpio_driver_data</ref><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref><sp/>=</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__driver__data" kindref="compound">gpio_driver_data</ref><sp/>*)port-&gt;<ref refid="structdevice_1ac6739bba5a9e7834903ef2748f404d43" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT((<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/>GPIO_INT_MASK)<sp/>==<sp/>0,</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Interrupt<sp/>flags<sp/>are<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT((<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/>(<ref refid="group__gpio__interface_1gaaa7921da231fd2b96575fa522e2c1970" kindref="member">GPIO_PULL_UP</ref><sp/>|<sp/><ref refid="group__gpio__interface_1gadec1802e074f3021d464da09cd66c7cf" kindref="member">GPIO_PULL_DOWN</ref>))<sp/>!=</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="group__gpio__interface_1gaaa7921da231fd2b96575fa522e2c1970" kindref="member">GPIO_PULL_UP</ref><sp/>|<sp/><ref refid="group__gpio__interface_1gadec1802e074f3021d464da09cd66c7cf" kindref="member">GPIO_PULL_DOWN</ref>),</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Pull<sp/>Up<sp/>and<sp/>Pull<sp/>Down<sp/>should<sp/>not<sp/>be<sp/>enabled<sp/>simultaneously&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT((<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/><ref refid="group__gpio__interface_1ga0db9fe8a278e6ab7c5c6f14fe58e5eb1" kindref="member">GPIO_OUTPUT</ref>)<sp/>!=<sp/>0<sp/>||<sp/>(<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/>GPIO_SINGLE_ENDED)<sp/>==<sp/>0,</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Output<sp/>needs<sp/>to<sp/>be<sp/>enabled<sp/>for<sp/>&apos;Open<sp/>Drain&apos;,<sp/>&apos;Open<sp/>Source&apos;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mode<sp/>to<sp/>be<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT_NO_MSG((<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/>GPIO_SINGLE_ENDED)<sp/>!=<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/>GPIO_LINE_OPEN_DRAIN)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT((<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/>(GPIO_OUTPUT_INIT_LOW<sp/>|<sp/>GPIO_OUTPUT_INIT_HIGH))<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/><ref refid="group__gpio__interface_1ga0db9fe8a278e6ab7c5c6f14fe58e5eb1" kindref="member">GPIO_OUTPUT</ref>)<sp/>!=<sp/>0,</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Output<sp/>needs<sp/>to<sp/>be<sp/>enabled<sp/>to<sp/>be<sp/>initialized<sp/>low<sp/>or<sp/>high&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT((<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/>(GPIO_OUTPUT_INIT_LOW<sp/>|<sp/>GPIO_OUTPUT_INIT_HIGH))</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!=<sp/>(GPIO_OUTPUT_INIT_LOW<sp/>|<sp/>GPIO_OUTPUT_INIT_HIGH),</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Output<sp/>cannot<sp/>be<sp/>initialized<sp/>low<sp/>and<sp/>high&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/>GPIO_OUTPUT_INIT_LOGICAL)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>((<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/>(GPIO_OUTPUT_INIT_LOW<sp/>|<sp/>GPIO_OUTPUT_INIT_HIGH))<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>((<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/><ref refid="group__gpio__interface_1ga62cea8989df2425e5e5e712217d65f46" kindref="member">GPIO_ACTIVE_LOW</ref>)<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>^=<sp/>GPIO_OUTPUT_INIT_LOW<sp/>|<sp/>GPIO_OUTPUT_INIT_HIGH;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;=<sp/>~GPIO_OUTPUT_INIT_LOGICAL;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)cfg;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT((cfg-&gt;port_pin_mask<sp/>&amp;<sp/>(<ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref>)<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pin))<sp/>!=<sp/>0U,</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>pin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/><ref refid="group__gpio__interface_1ga62cea8989df2425e5e5e712217d65f46" kindref="member">GPIO_ACTIVE_LOW</ref>)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>-&gt;invert<sp/>|=<sp/>(<ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref>)<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pin);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>-&gt;invert<sp/>&amp;=<sp/>~(<ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref>)<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pin);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;pin_configure(port,<sp/>pin,<sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="796" refid="group__gpio__interface_1ga423db4f985098ddcaa504ec430e91913" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1ga423db4f985098ddcaa504ec430e91913" kindref="member">gpio_pin_configure_dt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref><sp/>*spec,</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga5f5cb5e7dae6d58e072bb450af029d2e" kindref="member">gpio_flags_t</ref><sp/>extra_flags)</highlight></codeline>
<codeline lineno="798"><highlight class="normal">{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1gaed4a2051d76db7eead8ed1719ce2ba33" kindref="member">gpio_pin_configure</ref>(spec-&gt;<ref refid="structgpio__dt__spec_1a5d617d47e2f568c7a4402a8f5a40ed4f" kindref="member">port</ref>,</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec-&gt;<ref refid="structgpio__dt__spec_1ad7e6fbb0cba0be94a47d4f2add056c84" kindref="member">pin</ref>,</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec-&gt;<ref refid="structgpio__dt__spec_1ae3b90e7e22708798c67da94f72ad1ab0" kindref="member">dt_flags</ref><sp/>|<sp/>extra_flags);</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="821" refid="group__gpio__interface_1gae2a49b36cae2e17fc665a3bd844f50b4" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1gae2a49b36cae2e17fc665a3bd844f50b4" kindref="member">gpio_port_get_raw</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" kindref="member">gpio_port_value_t</ref><sp/>*value);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_gpio_port_get_raw(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" kindref="member">gpio_port_value_t</ref><sp/>*value)</highlight></codeline>
<codeline lineno="826"><highlight class="normal">{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpio_driver_api<sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpio_driver_api<sp/>*)port-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;port_get_raw(port,<sp/>value);</highlight></codeline>
<codeline lineno="831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="851" refid="group__gpio__interface_1gae578c8163fb8fe5600d1ca9e5d7526b1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1gae578c8163fb8fe5600d1ca9e5d7526b1" kindref="member">gpio_port_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" kindref="member">gpio_port_value_t</ref><sp/>*value)</highlight></codeline>
<codeline lineno="853"><highlight class="normal">{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__driver__data" kindref="compound">gpio_driver_data</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref><sp/>=</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__driver__data" kindref="compound">gpio_driver_data</ref><sp/>*)port-&gt;<ref refid="structdevice_1ac6739bba5a9e7834903ef2748f404d43" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__gpio__interface_1gae2a49b36cae2e17fc665a3bd844f50b4" kindref="member">gpio_port_get_raw</ref>(port,<sp/>value);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*value<sp/>^=<sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>-&gt;invert;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="864"><highlight class="normal">}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="883" refid="group__gpio__interface_1ga9e7b50d720fda362941acc1e3b3b2922" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1ga9e7b50d720fda362941acc1e3b3b2922" kindref="member">gpio_port_set_masked_raw</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>mask,</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" kindref="member">gpio_port_value_t</ref><sp/>value);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_gpio_port_set_masked_raw(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>mask,</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" kindref="member">gpio_port_value_t</ref><sp/>value)</highlight></codeline>
<codeline lineno="890"><highlight class="normal">{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpio_driver_api<sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpio_driver_api<sp/>*)port-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;port_set_masked_raw(port,<sp/>mask,<sp/>value);</highlight></codeline>
<codeline lineno="895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="917" refid="group__gpio__interface_1gac653e70270019d599732ab78693dd1fd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1gac653e70270019d599732ab78693dd1fd" kindref="member">gpio_port_set_masked</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>mask,</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" kindref="member">gpio_port_value_t</ref><sp/>value)</highlight></codeline>
<codeline lineno="920"><highlight class="normal">{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__driver__data" kindref="compound">gpio_driver_data</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref><sp/>=</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__driver__data" kindref="compound">gpio_driver_data</ref><sp/>*)port-&gt;<ref refid="structdevice_1ac6739bba5a9e7834903ef2748f404d43" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>^=<sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>-&gt;invert;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1ga9e7b50d720fda362941acc1e3b3b2922" kindref="member">gpio_port_set_masked_raw</ref>(port,<sp/>mask,<sp/>value);</highlight></codeline>
<codeline lineno="927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="939" refid="group__gpio__interface_1ga18e6ca0df95566fecc0633efb04a075a" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1ga18e6ca0df95566fecc0633efb04a075a" kindref="member">gpio_port_set_bits_raw</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>pins);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_gpio_port_set_bits_raw(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>pins)</highlight></codeline>
<codeline lineno="944"><highlight class="normal">{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpio_driver_api<sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpio_driver_api<sp/>*)port-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;port_set_bits_raw(port,<sp/>pins);</highlight></codeline>
<codeline lineno="949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="961" refid="group__gpio__interface_1ga570b669af237df991c4a55cff6ec3253" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1ga570b669af237df991c4a55cff6ec3253" kindref="member">gpio_port_set_bits</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>pins)</highlight></codeline>
<codeline lineno="963"><highlight class="normal">{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1gac653e70270019d599732ab78693dd1fd" kindref="member">gpio_port_set_masked</ref>(port,<sp/>pins,<sp/>pins);</highlight></codeline>
<codeline lineno="965"><highlight class="normal">}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="977" refid="group__gpio__interface_1ga9d2c9daeec7ce127fc786ead566ad27f" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1ga9d2c9daeec7ce127fc786ead566ad27f" kindref="member">gpio_port_clear_bits_raw</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>pins);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_gpio_port_clear_bits_raw(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>pins)</highlight></codeline>
<codeline lineno="982"><highlight class="normal">{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpio_driver_api<sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpio_driver_api<sp/>*)port-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;port_clear_bits_raw(port,<sp/>pins);</highlight></codeline>
<codeline lineno="987"><highlight class="normal">}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="999" refid="group__gpio__interface_1gac1660707a44cc8a3aa08b25685b4b20b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1gac1660707a44cc8a3aa08b25685b4b20b" kindref="member">gpio_port_clear_bits</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>pins)</highlight></codeline>
<codeline lineno="1001"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1gac653e70270019d599732ab78693dd1fd" kindref="member">gpio_port_set_masked</ref>(port,<sp/>pins,<sp/>0);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015" refid="group__gpio__interface_1ga82977d8706fb9f464db455bd0e9ac2e4" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1ga82977d8706fb9f464db455bd0e9ac2e4" kindref="member">gpio_port_toggle_bits</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>pins);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_gpio_port_toggle_bits(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>pins)</highlight></codeline>
<codeline lineno="1020"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpio_driver_api<sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpio_driver_api<sp/>*)port-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;port_toggle_bits(port,<sp/>pins);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038" refid="group__gpio__interface_1ga6e7ca22e83a70d3ddcf0de068b377c2d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1ga6e7ca22e83a70d3ddcf0de068b377c2d" kindref="member">gpio_port_set_clr_bits_raw</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>set_pins,</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>clear_pins)</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT((set_pins<sp/>&amp;<sp/>clear_pins)<sp/>==<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Set<sp/>and<sp/>Clear<sp/>pins<sp/>overlap&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1ga9e7b50d720fda362941acc1e3b3b2922" kindref="member">gpio_port_set_masked_raw</ref>(port,<sp/>set_pins<sp/>|<sp/>clear_pins,<sp/>set_pins);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058" refid="group__gpio__interface_1ga77880d217f5dd1fc1c72ce791254449b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1ga77880d217f5dd1fc1c72ce791254449b" kindref="member">gpio_port_set_clr_bits</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>set_pins,</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>clear_pins)</highlight></codeline>
<codeline lineno="1061"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT((set_pins<sp/>&amp;<sp/>clear_pins)<sp/>==<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Set<sp/>and<sp/>Clear<sp/>pins<sp/>overlap&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1gac653e70270019d599732ab78693dd1fd" kindref="member">gpio_port_set_masked</ref>(port,<sp/>set_pins<sp/>|<sp/>clear_pins,<sp/>set_pins);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082" refid="group__gpio__interface_1ga0fc52723b78019258bb306c771c430a1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1ga0fc52723b78019258bb306c771c430a1" kindref="member">gpio_pin_get_raw</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,<sp/><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref><sp/>pin)</highlight></codeline>
<codeline lineno="1083"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__driver__config" kindref="compound">gpio_driver_config</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cfg<sp/>=</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__driver__config" kindref="compound">gpio_driver_config</ref><sp/>*)port-&gt;<ref refid="structdevice_1aca2d801eb15996cf1c74dc65cfa651fc" kindref="member">config</ref>;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" kindref="member">gpio_port_value_t</ref><sp/>value;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)cfg;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT((cfg-&gt;<ref refid="structgpio__driver__config_1af73c0d9d433b86b9d0e0c6703e737052" kindref="member">port_pin_mask</ref><sp/>&amp;<sp/>(<ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref>)<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pin))<sp/>!=<sp/>0U,</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>pin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__gpio__interface_1gae2a49b36cae2e17fc665a3bd844f50b4" kindref="member">gpio_port_get_raw</ref>(port,<sp/>&amp;value);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/>(value<sp/>&amp;<sp/>(<ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref>)<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pin))<sp/>!=<sp/>0<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120" refid="group__gpio__interface_1ga154a4ea3d3084910f02df31dc0779be6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1ga154a4ea3d3084910f02df31dc0779be6" kindref="member">gpio_pin_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,<sp/><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref><sp/>pin)</highlight></codeline>
<codeline lineno="1121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__driver__config" kindref="compound">gpio_driver_config</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cfg<sp/>=</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__driver__config" kindref="compound">gpio_driver_config</ref><sp/>*)port-&gt;<ref refid="structdevice_1aca2d801eb15996cf1c74dc65cfa651fc" kindref="member">config</ref>;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" kindref="member">gpio_port_value_t</ref><sp/>value;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)cfg;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT((cfg-&gt;<ref refid="structgpio__driver__config_1af73c0d9d433b86b9d0e0c6703e737052" kindref="member">port_pin_mask</ref><sp/>&amp;<sp/>(<ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref>)<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pin))<sp/>!=<sp/>0U,</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>pin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__gpio__interface_1gae578c8163fb8fe5600d1ca9e5d7526b1" kindref="member">gpio_port_get</ref>(port,<sp/>&amp;value);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/>(value<sp/>&amp;<sp/>(<ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref>)<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pin))<sp/>!=<sp/>0<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149" refid="group__gpio__interface_1gaabeb2d0d98856c7ff78be36651d6bbc1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1gaabeb2d0d98856c7ff78be36651d6bbc1" kindref="member">gpio_pin_get_dt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref><sp/>*spec)</highlight></codeline>
<codeline lineno="1150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1ga154a4ea3d3084910f02df31dc0779be6" kindref="member">gpio_pin_get</ref>(spec-&gt;<ref refid="structgpio__dt__spec_1a5d617d47e2f568c7a4402a8f5a40ed4f" kindref="member">port</ref>,<sp/>spec-&gt;<ref refid="structgpio__dt__spec_1ad7e6fbb0cba0be94a47d4f2add056c84" kindref="member">pin</ref>);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169" refid="group__gpio__interface_1gae28f0fa2576530083aa86d819d0d5cca" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1gae28f0fa2576530083aa86d819d0d5cca" kindref="member">gpio_pin_set_raw</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,<sp/><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref><sp/>pin,</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="1171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__driver__config" kindref="compound">gpio_driver_config</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cfg<sp/>=</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__driver__config" kindref="compound">gpio_driver_config</ref><sp/>*)port-&gt;<ref refid="structdevice_1aca2d801eb15996cf1c74dc65cfa651fc" kindref="member">config</ref>;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)cfg;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT((cfg-&gt;<ref refid="structgpio__driver__config_1af73c0d9d433b86b9d0e0c6703e737052" kindref="member">port_pin_mask</ref><sp/>&amp;<sp/>(<ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref>)<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pin))<sp/>!=<sp/>0U,</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>pin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__gpio__interface_1ga18e6ca0df95566fecc0633efb04a075a" kindref="member">gpio_port_set_bits_raw</ref>(port,<sp/>(<ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref>)<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pin));</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__gpio__interface_1ga9d2c9daeec7ce127fc786ead566ad27f" kindref="member">gpio_port_clear_bits_raw</ref>(port,<sp/>(<ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref>)<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pin));</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210" refid="group__gpio__interface_1gabfab69282fb99be119760436f2d18a9b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1gabfab69282fb99be119760436f2d18a9b" kindref="member">gpio_pin_set</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,<sp/><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref><sp/>pin,</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="1212"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__driver__config" kindref="compound">gpio_driver_config</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cfg<sp/>=</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__driver__config" kindref="compound">gpio_driver_config</ref><sp/>*)port-&gt;<ref refid="structdevice_1aca2d801eb15996cf1c74dc65cfa651fc" kindref="member">config</ref>;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpio__driver__data" kindref="compound">gpio_driver_data</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref><sp/>=</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpio__driver__data" kindref="compound">gpio_driver_data</ref><sp/>*)port-&gt;<ref refid="structdevice_1ac6739bba5a9e7834903ef2748f404d43" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)cfg;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT((cfg-&gt;<ref refid="structgpio__driver__config_1af73c0d9d433b86b9d0e0c6703e737052" kindref="member">port_pin_mask</ref><sp/>&amp;<sp/>(<ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref>)<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pin))<sp/>!=<sp/>0U,</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>pin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>-&gt;invert<sp/>&amp;<sp/>(<ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref>)<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pin))<sp/>{</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(value<sp/>!=<sp/>0)<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1gae28f0fa2576530083aa86d819d0d5cca" kindref="member">gpio_pin_set_raw</ref>(port,<sp/>pin,<sp/>value);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240" refid="group__gpio__interface_1ga541064fb9e575c0c559c101754466fa8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1ga541064fb9e575c0c559c101754466fa8" kindref="member">gpio_pin_set_dt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref><sp/>*spec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="1241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1gabfab69282fb99be119760436f2d18a9b" kindref="member">gpio_pin_set</ref>(spec-&gt;<ref refid="structgpio__dt__spec_1a5d617d47e2f568c7a4402a8f5a40ed4f" kindref="member">port</ref>,<sp/>spec-&gt;<ref refid="structgpio__dt__spec_1ad7e6fbb0cba0be94a47d4f2add056c84" kindref="member">pin</ref>,<sp/>value);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255" refid="group__gpio__interface_1gaabf948471d313ff19410f1741dd16957" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1gaabf948471d313ff19410f1741dd16957" kindref="member">gpio_pin_toggle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,<sp/><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref><sp/>pin)</highlight></codeline>
<codeline lineno="1256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__driver__config" kindref="compound">gpio_driver_config</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cfg<sp/>=</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpio__driver__config" kindref="compound">gpio_driver_config</ref><sp/>*)port-&gt;<ref refid="structdevice_1aca2d801eb15996cf1c74dc65cfa651fc" kindref="member">config</ref>;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)cfg;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT((cfg-&gt;<ref refid="structgpio__driver__config_1af73c0d9d433b86b9d0e0c6703e737052" kindref="member">port_pin_mask</ref><sp/>&amp;<sp/>(<ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref>)<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pin))<sp/>!=<sp/>0U,</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>pin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1ga82977d8706fb9f464db455bd0e9ac2e4" kindref="member">gpio_port_toggle_bits</ref>(port,<sp/>(<ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref>)<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pin));</highlight></codeline>
<codeline lineno="1265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277" refid="group__gpio__interface_1ga3272e866489da6c2e12c48f803c59e81" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1ga3272e866489da6c2e12c48f803c59e81" kindref="member">gpio_pin_toggle_dt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpio__dt__spec" kindref="compound">gpio_dt_spec</ref><sp/>*spec)</highlight></codeline>
<codeline lineno="1278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1gaabf948471d313ff19410f1741dd16957" kindref="member">gpio_pin_toggle</ref>(spec-&gt;<ref refid="structgpio__dt__spec_1a5d617d47e2f568c7a4402a8f5a40ed4f" kindref="member">port</ref>,<sp/>spec-&gt;<ref refid="structgpio__dt__spec_1ad7e6fbb0cba0be94a47d4f2add056c84" kindref="member">pin</ref>);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288" refid="group__gpio__interface_1ga7a7dd7c1f3a2135a9f378e1c34b6232c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1ga7a7dd7c1f3a2135a9f378e1c34b6232c" kindref="member">gpio_init_callback</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpio__callback" kindref="compound">gpio_callback</ref><sp/>*callback,</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga2b400e2193e3899c63253d2f48ed90db" kindref="member">gpio_callback_handler_t</ref><sp/><ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>,</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>pin_mask)</highlight></codeline>
<codeline lineno="1291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT(callback,<sp/></highlight><highlight class="stringliteral">&quot;Callback<sp/>pointer<sp/>should<sp/>not<sp/>be<sp/>NULL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT(<ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Callback<sp/>handler<sp/>pointer<sp/>should<sp/>not<sp/>be<sp/>NULL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callback-&gt;<ref refid="structgpio__callback_1af89dc41cbd610d81ac03cae7ab764ceb" kindref="member">handler</ref><sp/>=<sp/><ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callback-&gt;<ref refid="structgpio__callback_1ace5c2b83f1d51f73877a1f2c54ba8c67" kindref="member">pin_mask</ref><sp/>=<sp/>pin_mask;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311" refid="group__gpio__interface_1ga05fd15af20386d69f9332354285b0cca" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1ga05fd15af20386d69f9332354285b0cca" kindref="member">gpio_add_callback</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpio__callback" kindref="compound">gpio_callback</ref><sp/>*callback)</highlight></codeline>
<codeline lineno="1313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpio_driver_api<sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpio_driver_api<sp/>*)port-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(api-&gt;manage_callback<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1ga91457bbf35f0f1085619a99423bb1f33" kindref="member">ENOTSUP</ref>;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;manage_callback(port,<sp/>callback,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340" refid="group__gpio__interface_1gac1e94ba8faac79f469447e9b5d2f8c06" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1gac1e94ba8faac79f469447e9b5d2f8c06" kindref="member">gpio_remove_callback</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpio__callback" kindref="compound">gpio_callback</ref><sp/>*callback)</highlight></codeline>
<codeline lineno="1342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpio_driver_api<sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpio_driver_api<sp/>*)port-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(api-&gt;manage_callback<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1ga91457bbf35f0f1085619a99423bb1f33" kindref="member">ENOTSUP</ref>;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;manage_callback(port,<sp/>callback,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366" refid="group__gpio__interface_1ga3f9e45de172a27f49c31a072c0c241e1" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__interface_1ga3f9e45de172a27f49c31a072c0c241e1" kindref="member">gpio_get_pending_int</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_gpio_get_pending_int(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev)</highlight></codeline>
<codeline lineno="1369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpio_driver_api<sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpio_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(api-&gt;get_pending_int<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1ga91457bbf35f0f1085619a99423bb1f33" kindref="member">ENOTSUP</ref>;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;get_pending_int(dev);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;syscalls/gpio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_DRIVERS_GPIO_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/drivers/gpio.h"/>
  </compounddef>
</doxygen>
