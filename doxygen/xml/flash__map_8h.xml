<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="flash__map_8h" kind="file" language="C++">
    <compoundname>flash_map.h</compoundname>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes local="no">stddef.h</includes>
    <includes refid="lib_2libc_2minimal_2include_2sys_2types_8h" local="no">sys/types.h</includes>
    <includedby refid="fcb_8h" local="no">include/fs/fcb.h</includedby>
    <includedby refid="littlefs_8h" local="no">include/fs/littlefs.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/storage/flash_map.h</label>
        <link refid="flash__map_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="6">
        <label>sys/_types.h</label>
        <link refid="__types_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>sys/types.h</label>
        <link refid="lib_2libc_2minimal_2include_2sys_2types_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/fs/fcb.h</label>
        <link refid="fcb_8h"/>
      </node>
      <node id="3">
        <label>include/fs/littlefs.h</label>
        <link refid="littlefs_8h"/>
      </node>
      <node id="1">
        <label>include/storage/flash_map.h</label>
        <link refid="flash__map_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structflash__area" prot="public">flash_area</innerclass>
    <innerclass refid="structflash__sector" prot="public">flash_sector</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__flash__area__api_1ga3435d1517409d28c06f3bb11be4aea4c" prot="public" static="no">
        <name>SOC_FLASH_0_ID</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provided for compatibility with MCUboot </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/flash_map.h" line="43" column="9" bodyfile="include/storage/flash_map.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flash__area__api_1ga8317a2991704a09e43b17189769ac8da" prot="public" static="no">
        <name>SPI_FLASH_0_ID</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provided for compatibility with MCUboot </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/flash_map.h" line="45" column="9" bodyfile="include/storage/flash_map.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flash__area__api_1ga66482986ac578eee0a4c1bba86699c9a" prot="public" static="no">
        <name>FLASH_AREA_LABEL_EXISTS</name>
        <param><defname>label</defname></param>
        <initializer>	<ref refid="group__devicetree-fixed-partition_1gac402d149d6b527cccf5f955f1ad57fc3" kindref="member">DT_HAS_FIXED_PARTITION_LABEL</ref>(label)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/flash_map.h" line="259" column="9" bodyfile="include/storage/flash_map.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flash__area__api_1ga0940220ea657b3ab4b4eff82a63bd101" prot="public" static="no">
        <name>FLASH_AREA_LABEL_STR</name>
        <param><defname>lbl</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(<ref refid="group__devicetree-fixed-partition_1gafcd93790974c48b10dd1170d14c49bf9" kindref="member">DT_NODE_BY_FIXED_PARTITION_LABEL</ref>(lbl), label)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/flash_map.h" line="262" column="9" bodyfile="include/storage/flash_map.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flash__area__api_1gafb4c2750734ad05a7f96a4a4369d7764" prot="public" static="no">
        <name>FLASH_AREA_ID</name>
        <param><defname>label</defname></param>
        <initializer>	<ref refid="group__devicetree-fixed-partition_1gaf3b448e91dff79ece4d67ef833088ac9" kindref="member">DT_FIXED_PARTITION_ID</ref>(<ref refid="group__devicetree-fixed-partition_1gafcd93790974c48b10dd1170d14c49bf9" kindref="member">DT_NODE_BY_FIXED_PARTITION_LABEL</ref>(label))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/flash_map.h" line="265" column="9" bodyfile="include/storage/flash_map.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flash__area__api_1gae6f3ea1bc68a0c4cd0ec442fccc733b4" prot="public" static="no">
        <name>FLASH_AREA_OFFSET</name>
        <param><defname>label</defname></param>
        <initializer>	<ref refid="group__devicetree-reg-prop_1gac6d8279c32351ced4c0ac7f32270974e" kindref="member">DT_REG_ADDR</ref>(<ref refid="group__devicetree-fixed-partition_1gafcd93790974c48b10dd1170d14c49bf9" kindref="member">DT_NODE_BY_FIXED_PARTITION_LABEL</ref>(label))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/flash_map.h" line="268" column="9" bodyfile="include/storage/flash_map.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flash__area__api_1gaf7eea30a79a73de38e84eb903064c7aa" prot="public" static="no">
        <name>FLASH_AREA_SIZE</name>
        <param><defname>label</defname></param>
        <initializer>	<ref refid="group__devicetree-reg-prop_1gad223efc6c77d008e55c3588953e85bfb" kindref="member">DT_REG_SIZE</ref>(<ref refid="group__devicetree-fixed-partition_1gafcd93790974c48b10dd1170d14c49bf9" kindref="member">DT_NODE_BY_FIXED_PARTITION_LABEL</ref>(label))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/flash_map.h" line="271" column="9" bodyfile="include/storage/flash_map.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flash__area__api_1gacca3f32100a4e46cb7da21ea8bf0782c" prot="public" static="no">
        <name>FLASH_AREA_DEVICE</name>
        <param><defname>label</defname></param>
        <initializer>	<ref refid="group__device__model_1ga9a65996ce21f43acb7db061e23b48ec7" kindref="member">DEVICE_DT_GET</ref>(<ref refid="group__devicetree-fixed-partition_1ga3484bb9a0cd8c2a4d971989dc58c194e" kindref="member">DT_MTD_FROM_FIXED_PARTITION</ref>(<ref refid="group__devicetree-fixed-partition_1gafcd93790974c48b10dd1170d14c49bf9" kindref="member">DT_NODE_BY_FIXED_PARTITION_LABEL</ref>(label)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get device pointer for device the area/partition resides on</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>partition label</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const struct device type pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/flash_map.h" line="281" column="9" bodyfile="include/storage/flash_map.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__flash__area__api_1gab9d0b43faefa1f25805e7def82819f2c" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* flash_area_cb_t) (const struct flash_area *fa, void *user_data)</definition>
        <argsstring>)(const struct flash_area *fa, void *user_data)</argsstring>
        <name>flash_area_cb_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flash map iteration callback</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fa</parametername>
</parameternamelist>
<parameterdescription>
<para>flash area </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User supplied data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/flash_map.h" line="218" column="9" bodyfile="include/storage/flash_map.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__flash__area__api_1ga6fe2593210688eb85e03bea5f96ea2f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int flash_area_open</definition>
        <argsstring>(uint8_t id, const struct flash_area **fa)</argsstring>
        <name>flash_area_open</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const struct <ref refid="structflash__area" kindref="compound">flash_area</ref> **</type>
          <declname>fa</declname>
        </param>
        <briefdescription>
<para>Retrieve partitions flash area from the flash_map. </para>
        </briefdescription>
        <detaileddescription>
<para>Function Retrieves <ref refid="structflash__area" kindref="compound">flash_area</ref> from flash_map for given partition.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the flash partition. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">fa</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer which has to reference <ref refid="structflash__area" kindref="compound">flash_area</ref>. If <computeroutput>ID</computeroutput> is unknown, it will be NULL on output.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -EACCES if the flash_map is not available , -ENOENT if <computeroutput>ID</computeroutput> is unknown. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/flash_map.h" line="123" column="5" declfile="include/storage/flash_map.h" declline="123" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__flash__area__api_1gaff2ae50bb961846f5d5362c90e0c7a39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void flash_area_close</definition>
        <argsstring>(const struct flash_area *fa)</argsstring>
        <name>flash_area_close</name>
        <param>
          <type>const struct <ref refid="structflash__area" kindref="compound">flash_area</ref> *</type>
          <declname>fa</declname>
        </param>
        <briefdescription>
<para>Close <ref refid="structflash__area" kindref="compound">flash_area</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Reserved for future usage and external projects compatibility reason. Currently is NOP.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fa</parametername>
</parameternamelist>
<parameterdescription>
<para>Flash area to be closed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/flash_map.h" line="133" column="6" declfile="include/storage/flash_map.h" declline="133" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__flash__area__api_1ga7c55704b0c0061a4715470676114b127" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int flash_area_read</definition>
        <argsstring>(const struct flash_area *fa, off_t off, void *dst, size_t len)</argsstring>
        <name>flash_area_read</name>
        <param>
          <type>const struct <ref refid="structflash__area" kindref="compound">flash_area</ref> *</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>off</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Read flash area data. </para>
        </briefdescription>
        <detaileddescription>
<para>Read data from flash area. Area readout boundaries are asserted before read request. API has the same limitation regard read-block alignment and size as wrapped flash driver.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fa</parametername>
</parameternamelist>
<parameterdescription>
<para>Flash area </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">off</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset relative from beginning of flash area to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store read data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/flash_map.h" line="149" column="5" declfile="include/storage/flash_map.h" declline="149" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__flash__area__api_1gaa56052f8d6bf4f6966752bc21f5cceb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int flash_area_write</definition>
        <argsstring>(const struct flash_area *fa, off_t off, const void *src, size_t len)</argsstring>
        <name>flash_area_write</name>
        <param>
          <type>const struct <ref refid="structflash__area" kindref="compound">flash_area</ref> *</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>off</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Write data to flash area. </para>
        </briefdescription>
        <detaileddescription>
<para>Write data to flash area. Area write boundaries are asserted before write request. API has the same limitation regard write-block alignment and size as wrapped flash driver.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fa</parametername>
</parameternamelist>
<parameterdescription>
<para>Flash area </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">off</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset relative from beginning of flash area to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer with data to be written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/flash_map.h" line="166" column="5" declfile="include/storage/flash_map.h" declline="166" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__flash__area__api_1gacc5cbff19d23773115f3334f862814d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int flash_area_erase</definition>
        <argsstring>(const struct flash_area *fa, off_t off, size_t len)</argsstring>
        <name>flash_area_erase</name>
        <param>
          <type>const struct <ref refid="structflash__area" kindref="compound">flash_area</ref> *</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>off</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Erase flash area. </para>
        </briefdescription>
        <detaileddescription>
<para>Erase given flash area range. Area boundaries are asserted before erase request. API has the same limitation regard erase-block alignment and size as wrapped flash driver.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fa</parametername>
</parameternamelist>
<parameterdescription>
<para>Flash area </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">off</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset relative from beginning of flash area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be erase</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/flash_map.h" line="182" column="5" declfile="include/storage/flash_map.h" declline="182" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__flash__area__api_1ga13b7294e84544373e97b8c0274859f6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t flash_area_align</definition>
        <argsstring>(const struct flash_area *fa)</argsstring>
        <name>flash_area_align</name>
        <param>
          <type>const struct <ref refid="structflash__area" kindref="compound">flash_area</ref> *</type>
          <declname>fa</declname>
        </param>
        <briefdescription>
<para>Get write block size of the flash area. </para>
        </briefdescription>
        <detaileddescription>
<para>Currently write block size might be treated as read block size, although most of drivers supports unaligned readout.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fa</parametername>
</parameternamelist>
<parameterdescription>
<para>Flash area</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Alignment restriction for flash writes in [B]. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/flash_map.h" line="194" column="10" declfile="include/storage/flash_map.h" declline="194" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__flash__area__api_1ga5c89e0be6c41058beb1c3f87a0c9c94f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int flash_area_get_sectors</definition>
        <argsstring>(int fa_id, uint32_t *count, struct flash_sector *sectors)</argsstring>
        <name>flash_area_get_sectors</name>
        <param>
          <type>int</type>
          <declname>fa_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>count</declname>
        </param>
        <param>
          <type>struct <ref refid="structflash__sector" kindref="compound">flash_sector</ref> *</type>
          <declname>sectors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve info about sectors within the area.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fa_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Given flash area ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">sectors</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for sectors data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">count</parametername>
</parameternamelist>
<parameterdescription>
<para>On input Capacity of <computeroutput>sectors</computeroutput>, on output number of sectors Retrieved.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. Especially returns -ENOMEM if There are too many flash pages on the <ref refid="structflash__area" kindref="compound">flash_area</ref> to fit in the array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/flash_map.h" line="208" column="5" declfile="include/storage/flash_map.h" declline="208" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__flash__area__api_1ga34e74955153f8576acdbff1a524f2d37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void flash_area_foreach</definition>
        <argsstring>(flash_area_cb_t user_cb, void *user_data)</argsstring>
        <name>flash_area_foreach</name>
        <param>
          <type><ref refid="group__flash__area__api_1gab9d0b43faefa1f25805e7def82819f2c" kindref="member">flash_area_cb_t</ref></type>
          <declname>user_cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterate over flash map</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>User callback </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User supplied data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/flash_map.h" line="227" column="6" declfile="include/storage/flash_map.h" declline="227" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__flash__area__api_1ga557d5fd981b0d52d0eb483ab218c497c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int flash_area_has_driver</definition>
        <argsstring>(const struct flash_area *fa)</argsstring>
        <name>flash_area_has_driver</name>
        <param>
          <type>const struct <ref refid="structflash__area" kindref="compound">flash_area</ref> *</type>
          <declname>fa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether given flash area has supporting flash driver in the system.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fa</parametername>
</parameternamelist>
<parameterdescription>
<para>Flash area.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 On success. -ENODEV if no driver match. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/flash_map.h" line="237" column="5" declfile="include/storage/flash_map.h" declline="237" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__flash__area__api_1gaed7d16e272d7644f556d2edaa942b308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
        <definition>const struct device * flash_area_get_device</definition>
        <argsstring>(const struct flash_area *fa)</argsstring>
        <name>flash_area_get_device</name>
        <param>
          <type>const struct <ref refid="structflash__area" kindref="compound">flash_area</ref> *</type>
          <declname>fa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get driver for given flash area.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fa</parametername>
</parameternamelist>
<parameterdescription>
<para>Flash area.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>device driver. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/flash_map.h" line="246" column="19" declfile="include/storage/flash_map.h" declline="246" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__flash__area__api_1ga1f16d59cecb25c5143c6a923b3b2f466" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t flash_area_erased_val</definition>
        <argsstring>(const struct flash_area *fa)</argsstring>
        <name>flash_area_erased_val</name>
        <param>
          <type>const struct <ref refid="structflash__area" kindref="compound">flash_area</ref> *</type>
          <declname>fa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the value expected to be read when accessing any erased flash byte. This API is compatible with the MCUBoot&apos;s porting layer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fa</parametername>
</parameternamelist>
<parameterdescription>
<para>Flash area.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Byte value of erase memory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/flash_map.h" line="257" column="9" declfile="include/storage/flash_map.h" declline="257" declcolumn="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Public API for flash map. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>Runtime<sp/>Inc</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_STORAGE_FLASH_MAP_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_STORAGE_FLASH_MAP_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>This<sp/>API<sp/>makes<sp/>it<sp/>possible<sp/>to<sp/>operate<sp/>on<sp/>flash<sp/>areas<sp/>easily<sp/>and</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>effectively.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>The<sp/>system<sp/>contains<sp/>global<sp/>data<sp/>about<sp/>flash<sp/>areas.<sp/>Every<sp/>area</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>contains<sp/>an<sp/>ID<sp/>number,<sp/>offset,<sp/>and<sp/>length.</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="lib_2libc_2minimal_2include_2sys_2types_8h" kindref="compound">sys/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="group__flash__area__api_1ga3435d1517409d28c06f3bb11be4aea4c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SOC_FLASH_0_ID<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="group__flash__area__api_1ga8317a2991704a09e43b17189769ac8da" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_FLASH_0_ID<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="structflash__area" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__area" kindref="compound">flash_area</ref><sp/>{</highlight></codeline>
<codeline lineno="55" refid="structflash__area_1acfe73a1f4f00fdf58129b21e5b71f5d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structflash__area_1acfe73a1f4f00fdf58129b21e5b71f5d4" kindref="member">fa_id</ref>;</highlight></codeline>
<codeline lineno="57" refid="structflash__area_1a5d78c6ab00bab1bd0e825743925216a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structflash__area_1a5d78c6ab00bab1bd0e825743925216a9" kindref="member">fa_device_id</ref>;</highlight></codeline>
<codeline lineno="58" refid="structflash__area_1af98b8f20c0219bfcdd2fc20037845a99" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structflash__area_1af98b8f20c0219bfcdd2fc20037845a99" kindref="member">pad16</ref>;</highlight></codeline>
<codeline lineno="60" refid="structflash__area_1a3a362ad9aa44725a0b0188042a2ee257" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>off_t<sp/><ref refid="structflash__area_1a3a362ad9aa44725a0b0188042a2ee257" kindref="member">fa_off</ref>;</highlight></codeline>
<codeline lineno="62" refid="structflash__area_1a6c3c23c4c628f48c92505dddf4b24edf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structflash__area_1a6c3c23c4c628f48c92505dddf4b24edf" kindref="member">fa_size</ref>;</highlight></codeline>
<codeline lineno="67" refid="structflash__area_1a6269419ab3a73dd5c97a4d8b1930127d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structflash__area_1a6269419ab3a73dd5c97a4d8b1930127d" kindref="member">fa_dev_name</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="structflash__sector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__sector" kindref="compound">flash_sector</ref><sp/>{</highlight></codeline>
<codeline lineno="78" refid="structflash__sector_1a2e9899681d4ec66fac277a7a52e1830b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>off_t<sp/><ref refid="structflash__sector_1a2e9899681d4ec66fac277a7a52e1830b" kindref="member">fs_off</ref>;</highlight></codeline>
<codeline lineno="80" refid="structflash__sector_1ab1fef4b1b6978d25b5f809d778888f75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structflash__sector_1ab1fef4b1b6978d25b5f809d778888f75" kindref="member">fs_size</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_FLASH_AREA_CHECK_INTEGRITY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">flash_area_check<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*match;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>clen;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="asm-macro-32-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*rbuf;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rblen;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal">};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flash_area_check_int_sha256(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structflash__area" kindref="compound">flash_area</ref><sp/>*fa,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>flash_area_check<sp/>*fac);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="group__flash__area__api_1ga6fe2593210688eb85e03bea5f96ea2f7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__flash__area__api_1ga6fe2593210688eb85e03bea5f96ea2f7" kindref="member">flash_area_open</ref>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structflash__area" kindref="compound">flash_area</ref><sp/>**fa);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="group__flash__area__api_1gaff2ae50bb961846f5d5362c90e0c7a39" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__flash__area__api_1gaff2ae50bb961846f5d5362c90e0c7a39" kindref="member">flash_area_close</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structflash__area" kindref="compound">flash_area</ref><sp/>*fa);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="group__flash__area__api_1ga7c55704b0c0061a4715470676114b127" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__flash__area__api_1ga7c55704b0c0061a4715470676114b127" kindref="member">flash_area_read</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structflash__area" kindref="compound">flash_area</ref><sp/>*fa,<sp/>off_t<sp/><ref refid="asm-macro-32-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="group__flash__area__api_1gaa56052f8d6bf4f6966752bc21f5cceb8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__flash__area__api_1gaa56052f8d6bf4f6966752bc21f5cceb8" kindref="member">flash_area_write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structflash__area" kindref="compound">flash_area</ref><sp/>*fa,<sp/>off_t<sp/><ref refid="asm-macro-32-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="group__flash__area__api_1gacc5cbff19d23773115f3334f862814d2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__flash__area__api_1gacc5cbff19d23773115f3334f862814d2" kindref="member">flash_area_erase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structflash__area" kindref="compound">flash_area</ref><sp/>*fa,<sp/>off_t<sp/><ref refid="asm-macro-32-bit-gnu_8h_1adbc19a384ffe3a93866980a920b08394" kindref="member">off</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="group__flash__area__api_1ga13b7294e84544373e97b8c0274859f6e" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__flash__area__api_1ga13b7294e84544373e97b8c0274859f6e" kindref="member">flash_area_align</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structflash__area" kindref="compound">flash_area</ref><sp/>*fa);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="group__flash__area__api_1ga5c89e0be6c41058beb1c3f87a0c9c94f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__flash__area__api_1ga5c89e0be6c41058beb1c3f87a0c9c94f" kindref="member">flash_area_get_sectors</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fa_id,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*<ref refid="condvar_2condvar__api_2src_2main_8c_1a612635fe60af527de1e4d54f66e27b94" kindref="member">count</ref>,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structflash__sector" kindref="compound">flash_sector</ref><sp/>*sectors);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="group__flash__area__api_1gab9d0b43faefa1f25805e7def82819f2c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__flash__area__api_1gab9d0b43faefa1f25805e7def82819f2c" kindref="member">flash_area_cb_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__area" kindref="compound">flash_area</ref><sp/>*fa,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="group__flash__area__api_1ga34e74955153f8576acdbff1a524f2d37" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__flash__area__api_1ga34e74955153f8576acdbff1a524f2d37" kindref="member">flash_area_foreach</ref>(<ref refid="group__flash__area__api_1gab9d0b43faefa1f25805e7def82819f2c" kindref="member">flash_area_cb_t</ref><sp/>user_cb,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="group__flash__area__api_1ga557d5fd981b0d52d0eb483ab218c497c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__flash__area__api_1ga557d5fd981b0d52d0eb483ab218c497c" kindref="member">flash_area_has_driver</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structflash__area" kindref="compound">flash_area</ref><sp/>*fa);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="246" refid="group__flash__area__api_1gaed7d16e272d7644f556d2edaa942b308" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*<ref refid="group__flash__area__api_1gaed7d16e272d7644f556d2edaa942b308" kindref="member">flash_area_get_device</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structflash__area" kindref="compound">flash_area</ref><sp/>*fa);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="257" refid="group__flash__area__api_1ga1f16d59cecb25c5143c6a923b3b2f466" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="group__flash__area__api_1ga1f16d59cecb25c5143c6a923b3b2f466" kindref="member">flash_area_erased_val</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structflash__area" kindref="compound">flash_area</ref><sp/>*fa);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259" refid="group__flash__area__api_1ga66482986ac578eee0a4c1bba86699c9a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLASH_AREA_LABEL_EXISTS(label)<sp/>\</highlight></codeline>
<codeline lineno="260"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_HAS_FIXED_PARTITION_LABEL(label)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="group__flash__area__api_1ga0940220ea657b3ab4b4eff82a63bd101" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLASH_AREA_LABEL_STR(lbl)<sp/>\</highlight></codeline>
<codeline lineno="263"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PROP(DT_NODE_BY_FIXED_PARTITION_LABEL(lbl),<sp/>label)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="group__flash__area__api_1gafb4c2750734ad05a7f96a4a4369d7764" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLASH_AREA_ID(label)<sp/>\</highlight></codeline>
<codeline lineno="266"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_FIXED_PARTITION_ID(DT_NODE_BY_FIXED_PARTITION_LABEL(label))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="group__flash__area__api_1gae6f3ea1bc68a0c4cd0ec442fccc733b4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLASH_AREA_OFFSET(label)<sp/>\</highlight></codeline>
<codeline lineno="269"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_REG_ADDR(DT_NODE_BY_FIXED_PARTITION_LABEL(label))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="group__flash__area__api_1gaf7eea30a79a73de38e84eb903064c7aa" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLASH_AREA_SIZE(label)<sp/>\</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_REG_SIZE(DT_NODE_BY_FIXED_PARTITION_LABEL(label))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="group__flash__area__api_1gacca3f32100a4e46cb7da21ea8bf0782c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLASH_AREA_DEVICE(label)<sp/>\</highlight></codeline>
<codeline lineno="282"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEVICE_DT_GET(DT_MTD_FROM_FIXED_PARTITION(DT_NODE_BY_FIXED_PARTITION_LABEL(label)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_STORAGE_FLASH_MAP_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/storage/flash_map.h"/>
  </compounddef>
</doxygen>
