<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="stack_2stack_2src_2main_8c" kind="file" language="C++">
    <compoundname>main.c</compoundname>
    <includes refid="ztest_8h" local="no">ztest.h</includes>
    <includes refid="irq__offload_8h" local="no">irq_offload.h</includes>
    <incdepgraph>
      <node id="17">
        <label>app_memory/app_memdomain.h</label>
        <link refid="app__memdomain_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>app_memory/mem_domain.h</label>
        <link refid="mem__domain_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>arch/arch_inlines.h</label>
        <link refid="arch__inlines_8h"/>
      </node>
      <node id="66">
        <label>arch/cpu.h</label>
        <link refid="include_2arch_2cpu_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>arch/structs.h</label>
        <link refid="structs_8h"/>
      </node>
      <node id="65">
        <label>arch/syscall.h</label>
        <link refid="arch_2syscall_8h"/>
      </node>
      <node id="29">
        <label>devicetree.h</label>
        <link refid="devicetree_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>devicetree/clocks.h</label>
        <link refid="clocks_8h"/>
      </node>
      <node id="36">
        <label>devicetree/dma.h</label>
        <link refid="devicetree_2dma_8h"/>
      </node>
      <node id="38">
        <label>devicetree/fixed-partitions.h</label>
        <link refid="fixed-partitions_8h"/>
      </node>
      <node id="34">
        <label>devicetree/gpio.h</label>
        <link refid="devicetree_2gpio_8h"/>
      </node>
      <node id="32">
        <label>devicetree/io-channels.h</label>
        <link refid="io-channels_8h"/>
      </node>
      <node id="40">
        <label>devicetree/ordinals.h</label>
        <link refid="ordinals_8h"/>
      </node>
      <node id="41">
        <label>devicetree/pinctrl.h</label>
        <link refid="devicetree_2pinctrl_8h"/>
      </node>
      <node id="37">
        <label>devicetree/pwms.h</label>
        <link refid="pwms_8h"/>
      </node>
      <node id="35">
        <label>devicetree/spi.h</label>
        <link refid="devicetree_2spi_8h"/>
      </node>
      <node id="39">
        <label>devicetree/zephyr.h</label>
        <link refid="devicetree_2zephyr_8h"/>
      </node>
      <node id="75">
        <label>fatal.h</label>
        <link refid="fatal_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>init.h</label>
        <link refid="init_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>irq_offload.h</label>
        <link refid="irq__offload_8h"/>
      </node>
      <node id="45">
        <label>kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>kernel/mempool_heap.h</label>
        <link refid="mempool__heap_8h"/>
      </node>
      <node id="51">
        <label>kernel/sched_priq.h</label>
        <link refid="sched__priq_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>kernel/stats.h</label>
        <link refid="kernel_2stats_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>kernel/thread.h</label>
        <link refid="kernel_2thread_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>kernel/thread_stack.h</label>
        <link refid="kernel_2thread__stack_8h"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>kernel_includes.h</label>
        <link refid="kernel__includes_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>kernel_structs.h</label>
        <link refid="kernel__structs_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>kernel_version.h</label>
        <link refid="kernel__version_8h"/>
      </node>
      <node id="28">
        <label>linker/devicetree_reserved.h</label>
        <link refid="devicetree__reserved_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>linker/linker-defs.h</label>
        <link refid="linker-defs_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>linker/section_tags.h</label>
        <link refid="section__tags_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>linker/sections.h</label>
        <link refid="sections_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>sys/arch_interface.h</label>
        <link refid="arch__interface_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="42">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>sys/kobject.h</label>
        <link refid="include_2sys_2kobject_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>sys/rb.h</label>
        <link refid="rb_8h"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>sys/sflist.h</label>
        <link refid="sflist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>sys/sys_heap.h</label>
        <link refid="sys__heap_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>sys/time_units.h</label>
        <link refid="time__units_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="23">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>sys_clock.h</label>
        <link refid="include_2sys__clock_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>timing/types.h</label>
        <link refid="include_2timing_2types_8h"/>
      </node>
      <node id="4">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="19">
        <label>toolchain/common.h</label>
        <link refid="common_8h"/>
      </node>
      <node id="86">
        <label>tracing/tracing.h</label>
        <link refid="tracing_2tracing_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>tracing/tracing_macros.h</label>
        <link refid="tracing__macros_8h"/>
      </node>
      <node id="87">
        <label>tracking.h</label>
        <link refid="tracking_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="13">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="8">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="11">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>offsets.h</label>
        <link refid="offsets_8h"/>
      </node>
      <node id="64">
        <label>syscall_list.h</label>
        <link refid="syscall__list_8h"/>
      </node>
      <node id="88">
        <label>syscalls/kernel.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kernel_8h"/>
      </node>
      <node id="81">
        <label>syscalls/kobject.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kobject_8h"/>
      </node>
      <node id="2">
        <label>ztest.h</label>
        <link refid="ztest_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ztest_assert.h</label>
        <link refid="ztest__assert_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ztest_mock.h</label>
        <link refid="ztest__mock_8h"/>
      </node>
      <node id="15">
        <label>ztest_test.h</label>
        <link refid="ztest__test_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>ztest_test_deprecated.h</label>
        <link refid="ztest__test__deprecated_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/kernel/stack/stack/src/main.c</label>
        <link refid="stack_2stack_2src_2main_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>alloca.h</label>
      </node>
      <node id="68">
        <label>arch/cpu.h</label>
      </node>
      <node id="31">
        <label>devicetree_fixups.h</label>
      </node>
      <node id="30">
        <label>devicetree_unfixed.h</label>
      </node>
      <node id="43">
        <label>kernel.h</label>
      </node>
      <node id="6">
        <label>stdarg.h</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="84">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="89">
        <label>syscalls/ztest_test.h</label>
      </node>
      <node id="90">
        <label>tc_util.h</label>
      </node>
      <node id="9">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="stack_2stack_2src_2main_8c_1aa820b6b1cef8d50aa349ffeb5224c550" prot="public" static="no">
        <name>TSTACK_SIZE</name>
        <initializer>(512 + CONFIG_TEST_EXTRA_STACK_SIZE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="47" column="9" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stack_2stack_2src_2main_8c_1a82c9bc91d6207f493c814b2c33dfdba4" prot="public" static="no">
        <name>STACK_LEN</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="48" column="9" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="stack_2stack_2src_2main_8c_1acb2adbdcb0047507c9b711d225a9d5bf" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref></type>
        <definition>struct k_thread thread_data</definition>
        <argsstring></argsstring>
        <name>thread_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="56" column="15" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stack_2stack_2src_2main_8c_1a798208f9521552be6451766094139e7e" prot="public" static="yes" mutable="no">
        <type><ref refid="group__ztest__test_1ga2c7d0aa85e7f320d582395c5ded90133" kindref="member">ZTEST_DMEM</ref> stack_data_t</type>
        <definition>ZTEST_DMEM stack_data_t data1[4]</definition>
        <argsstring>[4]</argsstring>
        <name>data1</name>
        <initializer>= { 0xAAAA, 0xBBBB, 0xCCCC, 0xDDDD }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="59" column="32" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stack_2stack_2src_2main_8c_1a5a55fbc25dcda0bf98e11da0e2a38d99" prot="public" static="yes" mutable="no">
        <type><ref refid="group__ztest__test_1ga2c7d0aa85e7f320d582395c5ded90133" kindref="member">ZTEST_DMEM</ref> stack_data_t</type>
        <definition>ZTEST_DMEM stack_data_t data2[4]</definition>
        <argsstring>[4]</argsstring>
        <name>data2</name>
        <initializer>= { 0x1111, 0x2222, 0x3333, 0x4444 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="60" column="32" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stack_2stack_2src_2main_8c_1a693deeab0d55e365f031e1eb49984b04" prot="public" static="yes" mutable="no">
        <type><ref refid="group__ztest__test_1ga2c7d0aa85e7f320d582395c5ded90133" kindref="member">ZTEST_DMEM</ref> stack_data_t</type>
        <definition>ZTEST_DMEM stack_data_t data_isr[4]</definition>
        <argsstring>[4]</argsstring>
        <name>data_isr</name>
        <initializer>= { 0xABCD, 0xABCD, 0xABCD,
						       0xABCD }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="61" column="32" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stack_2stack_2src_2main_8c_1a37d12066b90b5226eb1895e59f5908e8" prot="public" static="yes" mutable="no">
        <type>struct k_sem</type>
        <definition>struct k_sem end_sema</definition>
        <argsstring></argsstring>
        <name>end_sema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="65" column="19" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="65" bodyend="-1" declfile="tests/kernel/stack/stack/src/main.c" declline="73" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="stack_2stack_2src_2main_8c_1a8032a4f3bd65d0cd0b03b39961bfeb81" prot="public" static="no" mutable="no">
        <type>struct k_stack</type>
        <definition>struct k_stack kstack</definition>
        <argsstring></argsstring>
        <name>kstack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="71" column="21" declfile="tests/kernel/stack/stack/src/main.c" declline="71" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="stack_2stack_2src_2main_8c_1a6856ea318b5a9498715e4444b13a1de1" prot="public" static="no" mutable="no">
        <type>struct k_stack</type>
        <definition>struct k_stack stack</definition>
        <argsstring></argsstring>
        <name>stack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="72" column="21" bodyfile="tests/kernel/smp_boot_delay/src/main.c" bodystart="22" bodyend="-1" declfile="tests/kernel/stack/stack/src/main.c" declline="72" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="stack_2stack_2src_2main_8c_1a3808bea60358be7dddc26ee430bd64cd" prot="public" static="no" mutable="no">
        <type>struct k_stack</type>
        <definition>struct k_stack threadstack1</definition>
        <argsstring></argsstring>
        <name>threadstack1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="341" column="21" declfile="tests/kernel/stack/stack/src/main.c" declline="341" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="stack_2stack_2src_2main_8c_1a142b35a972e1d49b2f774510d10c8a74" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref></type>
        <definition>struct k_thread thread_data1</definition>
        <argsstring></argsstring>
        <name>thread_data1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="342" column="22" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="21" bodyend="-1" declfile="tests/kernel/stack/stack/src/main.c" declline="342" declcolumn="22"/>
      </memberdef>
      <memberdef kind="variable" id="stack_2stack_2src_2main_8c_1ac9d283d96985728282a611f383fd3e74" prot="public" static="no" mutable="no">
        <type>struct k_sem</type>
        <definition>struct k_sem end_sema1</definition>
        <argsstring></argsstring>
        <name>end_sema1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="343" column="19" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="27" bodyend="-1" declfile="tests/kernel/stack/stack/src/main.c" declline="343" declcolumn="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="stack_2stack_2src_2main_8c_1a3e5082a695fa1629b46f67ac150ba1e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_STACK_DEFINE</definition>
        <argsstring>(stack1, 4)</argsstring>
        <name>K_STACK_DEFINE</name>
        <param>
          <type>stack1</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="51" column="1" declfile="tests/kernel/stack/stack/src/main.c" declline="51" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="stack_2stack_2src_2main_8c_1a5ce3379632135a4e0b3832f918e62ba8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_STACK_DEFINE</definition>
        <argsstring>(stack2, 4)</argsstring>
        <name>K_STACK_DEFINE</name>
        <param>
          <type>stack2</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="52" column="1" declfile="tests/kernel/stack/stack/src/main.c" declline="52" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="stack_2stack_2src_2main_8c_1af73c8fc120f73cb7caedb4a06e76869e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_THREAD_STACK_DEFINE</definition>
        <argsstring>(threadstack,(512+CONFIG_TEST_EXTRA_STACK_SIZE))</argsstring>
        <name>K_THREAD_STACK_DEFINE</name>
        <param>
          <type>threadstack</type>
        </param>
        <param>
          <type>(512+CONFIG_TEST_EXTRA_STACK_SIZE)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="55" column="1" declfile="tests/kernel/stack/stack/src/main.c" declline="55" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="stack_2stack_2src_2main_8c_1a584037d797b4d8bda265a55c6f49ff41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_HEAP_DEFINE</definition>
        <argsstring>(test_pool, 128 *3)</argsstring>
        <name>K_HEAP_DEFINE</name>
        <param>
          <type><ref refid="test__queue_8h_1a4dc595a0cb08f33192e6b5519acd86b8" kindref="member">test_pool</ref></type>
        </param>
        <param>
          <type>128 *</type>
          <declname>3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="69" column="1" declfile="tests/kernel/stack/stack/src/main.c" declline="69" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga969dfd191f24488451037a01f743fb45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_thread2thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_thread2thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to verify data passing between threads via stack. </para>
        </briefdescription>
        <detaileddescription>
<para>Static define and Dynamic define stacks, Then initialize them. Current thread push or pop data item into the stack. Create a new thread pop or push data item into the stack. Controlled by semaphore. Verify data passing between threads via stack And verify stack can be define at compile time.</para>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1ga4400a39ef48289305cf66a092d5c6c7d" kindref="member">k_stack_init()</ref>, <ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref>, <ref refid="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" kindref="member">K_STACK_DEFINE(x)</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: test k_stack_init stack</para>
<para>TESTPOINT: test K_STACK_DEFINE stack</para>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="75" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="116" bodyend="124" declfile="tests/kernel/stack/stack/src/main.c" declline="75" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1gaf06348e349a2076ea86503cedce2b9ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_thread2isr</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_thread2isr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verifies data passing between thread and ISR via stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1ga4400a39ef48289305cf66a092d5c6c7d" kindref="member">k_stack_init()</ref>, <ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref>, <ref refid="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" kindref="member">K_STACK_DEFINE(x)</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: test k_stack_init stack</para>
<para>TESTPOINT: test K_STACK_DEFINE stack</para>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="76" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="147" bodyend="155" declfile="tests/kernel/stack/stack/src/main.c" declline="76" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga10c0d7a266192050fde52f8d92b0a902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_pop_fail</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_pop_fail</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verifies stack pop functionality. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1ga4400a39ef48289305cf66a092d5c6c7d" kindref="member">k_stack_init()</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="77" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_fail.c" bodystart="45" bodyend="50" declfile="tests/kernel/stack/stack/src/main.c" declline="77" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga9677d2b8125bcd28a15635a7e0d960fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_alloc_thread2thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_alloc_thread2thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1gab97d924db1aef3f6adade156a107d45c" kindref="member">k_stack_alloc_init()</ref>, <ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref>, <ref refid="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" kindref="member">K_STACK_DEFINE(x)</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref>, <ref refid="group__stack__apis_1ga819f4e7b2cf11cf2e1b80933fdcb67ea" kindref="member">k_stack_cleanup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: thread-thread data passing via stack</para>
<para>Requested buffer allocation from the test pool.</para>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="78" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="161" bodyend="187" declfile="tests/kernel/stack/stack/src/main.c" declline="78" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga0c527106c2441f8d2c033fc0c36c4418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_pop_can_wait</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_pop_can_wait</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test that the stack pop can be waited if no item availablle. </para>
        </briefdescription>
        <detaileddescription>
<para>Create and initialize a new stack Set two timeout parameters to indicate the maximum amount of time the thread will wait.</para>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref>, <ref refid="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" kindref="member">K_STACK_DEFINE(x)</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="308" column="6" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="308" bodyend="335" declfile="tests/kernel/stack/stack/src/main.c" declline="79" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1gae5e87cb1b3de61f6124574a09729db38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_cleanup_error</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_cleanup_error</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verifies cleanup a stack that still be needed by another thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1ga819f4e7b2cf11cf2e1b80933fdcb67ea" kindref="member">k_stack_cleanup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="80" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_fail.c" bodystart="57" bodyend="73" declfile="tests/kernel/stack/stack/src/main.c" declline="80" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1gabe16f26904c1e1ec7a21be8d84122ad0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_push_full</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_push_full</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verifies push a data in the full stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="81" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_fail.c" bodystart="79" bodyend="90" declfile="tests/kernel/stack/stack/src/main.c" declline="81" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga8afe7ec83d6d7cfd369954c194a0e820" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_multithread_competition</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_multithread_competition</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test multi-threads to get data from stack. </para>
        </briefdescription>
        <detaileddescription>
<para>Define three threads, and set a higher priority for two of them, and set a lower priority for the last one. Then Add a delay between creating the two high priority threads. Test point:<orderedlist>
<listitem><para>Any number of threads may wait(K_FOREVER set) on an empty stack simultaneously.</para>
</listitem><listitem><para>When data is pushed, it is given to the highest priority thread that has waited longest. </para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="82" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="233" bodyend="280" declfile="tests/kernel/stack/stack/src/main.c" declline="82" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga9ebcc1991c52c1882e5a22da1e15fdc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_alloc_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_alloc_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test case of requesting a buffer larger than resource pool. </para>
        </briefdescription>
        <detaileddescription>
<para>Try to request a buffer larger than resource pool for stack, then see if returns an expected value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="83" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="290" bodyend="298" declfile="tests/kernel/stack/stack/src/main.c" declline="83" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1gad464dd62dbebefeff5ee3b1a4f82fcb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_user_thread2thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_user_thread2thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verifies data passing between user threads via stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1ga4400a39ef48289305cf66a092d5c6c7d" kindref="member">k_stack_init()</ref>, <ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref>, <ref refid="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" kindref="member">K_STACK_DEFINE(x)</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="85" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="131" bodyend="140" declfile="tests/kernel/stack/stack/src/main.c" declline="85" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1gadcd6c968abc5a6c26b4bf4bbb7cb5416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_user_pop_fail</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_user_pop_fail</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verifies stack pop from a user thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1ga4400a39ef48289305cf66a092d5c6c7d" kindref="member">k_stack_init()</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="86" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_fail.c" bodystart="97" bodyend="106" declfile="tests/kernel/stack/stack/src/main.c" declline="86" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1gaba94c90db8907ff8931b462ed58fbbff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_user_init_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_user_init_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verifies stack alloc and initialize a null pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1gab97d924db1aef3f6adade156a107d45c" kindref="member">k_stack_alloc_init()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="87" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_fail.c" bodystart="112" bodyend="116" declfile="tests/kernel/stack/stack/src/main.c" declline="87" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga613658fe6fe89d1e4a21a64e2e9d389c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_user_init_invalid_value</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_user_init_invalid_value</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify that alloc and initialize a stack with 0 memory. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1gab97d924db1aef3f6adade156a107d45c" kindref="member">k_stack_alloc_init()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="88" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_fail.c" bodystart="123" bodyend="130" declfile="tests/kernel/stack/stack/src/main.c" declline="88" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga0a907159f4ecb44bab62f5e4a0dfe153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_user_push_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_user_push_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify that push some data into a NULL pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="89" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_fail.c" bodystart="137" bodyend="141" declfile="tests/kernel/stack/stack/src/main.c" declline="89" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1gabdc234f1604211e05ea9317c9a9cb709" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_user_pop_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_user_pop_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verifies pop data from a NULL pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="90" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_fail.c" bodystart="147" bodyend="151" declfile="tests/kernel/stack/stack/src/main.c" declline="90" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga62551fca8b73e3c535ea34befda6ac4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_user_pop_permission</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_user_pop_permission</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verifies cleanup a stack that its data still be waited by another thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="91" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_fail.c" bodystart="158" bodyend="168" declfile="tests/kernel/stack/stack/src/main.c" declline="91" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stack_2stack_2src_2main_8c_1aa7d3ca1282c3d5c808b5eb399563afaf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tIsr_entry_push</definition>
        <argsstring>(const void *p)</argsstring>
        <name>tIsr_entry_push</name>
        <param>
          <type>const void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="109" column="13" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="109" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="stack_2stack_2src_2main_8c_1adbdde999075a6cbbb550b6be2c55425e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tIsr_entry_pop</definition>
        <argsstring>(const void *p)</argsstring>
        <name>tIsr_entry_pop</name>
        <param>
          <type>const void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="119" column="13" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="119" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="stack_2stack_2src_2main_8c_1ae3387eaa97dab23c0444f998418c769c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void thread_entry_fn_single</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>thread_entry_fn_single</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="133" column="13" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="133" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="stack_2stack_2src_2main_8c_1a5c567d109350eff0fc6b0037c1af3f3d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void thread_entry_fn_dual</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>thread_entry_fn_dual</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="154" column="13" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="154" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="stack_2stack_2src_2main_8c_1a5de5b99fabd8d080dc833acf10ff3e00" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void thread_entry_fn_isr</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>thread_entry_fn_isr</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="171" column="13" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="171" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga63ff12b661e06b32517cea03f012ad4d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_single_stack_play</definition>
        <argsstring>(void)</argsstring>
        <name>test_single_stack_play</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify data passing between threads using single stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref>, <ref refid="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" kindref="member">K_STACK_DEFINE(x)</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="194" column="13" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="194" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga6f50b38507a133bca918502af4610a42" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_dual_stack_play</definition>
        <argsstring>(void)</argsstring>
        <name>test_dual_stack_play</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify data passing between threads using dual stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref>, <ref refid="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" kindref="member">K_STACK_DEFINE(x)</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="231" column="13" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="231" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1gabae0e2066040a8f20bd69395bfdedd09" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_isr_stack_play</definition>
        <argsstring>(void)</argsstring>
        <name>test_isr_stack_play</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify data passing between thread and ISR. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref>, <ref refid="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" kindref="member">K_STACK_DEFINE(x)</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="260" column="13" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="260" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga5ee5d8c8d91951e976c377aad77092f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void thread_entry_wait</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>thread_entry_wait</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="288" column="6" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="288" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="stack_2stack_2src_2main_8c_1a8a4533f287d99bb2d7c24c0e29c9a449" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_main</definition>
        <argsstring>(void)</argsstring>
        <name>test_main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>test case main entry </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/main.c" line="346" column="6" bodyfile="tests/kernel/stack/stack/src/main.c" bodystart="346" bodyend="375"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>@file</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Use<sp/>stack<sp/>API&apos;s<sp/>in<sp/>different<sp/>scenarios</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>This<sp/>module<sp/>tests<sp/>following<sp/>three<sp/>basic<sp/>scenarios:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>Scenario<sp/>#1</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>Test<sp/>thread<sp/>enters<sp/>items<sp/>into<sp/>a<sp/>stack,<sp/>starts<sp/>the<sp/>Child<sp/>thread<sp/>and</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>waits<sp/>for<sp/>a<sp/>semaphore.<sp/>Child<sp/>thread<sp/>extracts<sp/>all<sp/>items<sp/>from<sp/>the<sp/>stack</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>and<sp/>enters<sp/>some<sp/>items<sp/>back<sp/>into<sp/>the<sp/>stack.<sp/>Child<sp/>thread<sp/>gives<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>semaphore<sp/>for<sp/>Test<sp/>thread<sp/>to<sp/>continue.<sp/>Once<sp/>the<sp/>control<sp/>is<sp/>returned</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>back<sp/>to<sp/>Test<sp/>thread,<sp/>it<sp/>extracts<sp/>all<sp/>items<sp/>from<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>Scenario<sp/>#2</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>Test<sp/>thread<sp/>enters<sp/>an<sp/>item<sp/>into<sp/>stack2,<sp/>starts<sp/>a<sp/>Child<sp/>thread<sp/>and</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>extract<sp/>an<sp/>item<sp/>from<sp/>stack1<sp/>once<sp/>the<sp/>item<sp/>is<sp/>there.<sp/>The<sp/>child<sp/>thread</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>will<sp/>extract<sp/>an<sp/>item<sp/>from<sp/>stack2<sp/>once<sp/>the<sp/>item<sp/>is<sp/>there<sp/>and<sp/>and<sp/>enter</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>an<sp/>item<sp/>to<sp/>stack1.<sp/>The<sp/>flow<sp/>of<sp/>control<sp/>goes<sp/>from<sp/>Test<sp/>thread<sp/>to<sp/>Child</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>thread<sp/>and<sp/>so<sp/>forth.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>Scenario<sp/>#3</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>Tests<sp/>the<sp/>ISR<sp/>interfaces.<sp/>Test<sp/>thread<sp/>pushes<sp/>items<sp/>into<sp/>stack2<sp/>and<sp/>gives</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>control<sp/>to<sp/>the<sp/>Child<sp/>thread.<sp/>Child<sp/>thread<sp/>pops<sp/>items<sp/>from<sp/>stack2<sp/>and<sp/>then</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>pushes<sp/>items<sp/>into<sp/>stack1.<sp/>Child<sp/>thread<sp/>gives<sp/>back<sp/>control<sp/>to<sp/>the<sp/>Test<sp/>thread</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>and<sp/>Test<sp/>thread<sp/>pops<sp/>the<sp/>items<sp/>from<sp/>stack1.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>All<sp/>the<sp/>Push<sp/>and<sp/>Pop<sp/>operations<sp/>happen<sp/>in<sp/>ISR<sp/>Context.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ztest_8h" kindref="compound">ztest.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="irq__offload_8h" kindref="compound">irq_offload.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TSTACK_SIZE<sp/><sp/><sp/><sp/><sp/>(512<sp/>+<sp/>CONFIG_TEST_EXTRA_STACK_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STACK_LEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>stack<sp/>objects<sp/>used<sp/>in<sp/>this<sp/>test<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="obj__tracking_2src_2main_8c_1a1aa9dab1908c3c6066acec2ffcdcf715" kindref="member">K_STACK_DEFINE</ref>(stack1,<sp/><ref refid="stack_2stack_2src_2main_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><ref refid="obj__tracking_2src_2main_8c_1a1aa9dab1908c3c6066acec2ffcdcf715" kindref="member">K_STACK_DEFINE</ref>(stack2,<sp/><ref refid="stack_2stack_2src_2main_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>thread<sp/>info<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><ref refid="condvar_2condvar__api_2src_2main_8c_1abb291232121138c783bcbd0addb9a4f3" kindref="member">K_THREAD_STACK_DEFINE</ref>(threadstack,<sp/><ref refid="stack_2stack_2src_2main_8c_1aa820b6b1cef8d50aa349ffeb5224c550" kindref="member">TSTACK_SIZE</ref>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/><ref refid="structthread__data" kindref="compound">thread_data</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Data<sp/>pushed<sp/>to<sp/>stack<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__ztest__test__deprecated_1ga2c7d0aa85e7f320d582395c5ded90133" kindref="member">ZTEST_DMEM</ref><sp/>stack_data_t<sp/><ref refid="stack_2stack_2src_2main_8c_1a798208f9521552be6451766094139e7e" kindref="member">data1</ref>[<ref refid="stack_2stack_2src_2main_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>]<sp/>=<sp/>{<sp/>0xAAAA,<sp/>0xBBBB,<sp/>0xCCCC,<sp/>0xDDDD<sp/>};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__ztest__test__deprecated_1ga2c7d0aa85e7f320d582395c5ded90133" kindref="member">ZTEST_DMEM</ref><sp/>stack_data_t<sp/><ref refid="stack_2stack_2src_2main_8c_1a5a55fbc25dcda0bf98e11da0e2a38d99" kindref="member">data2</ref>[<ref refid="stack_2stack_2src_2main_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>]<sp/>=<sp/>{<sp/>0x1111,<sp/>0x2222,<sp/>0x3333,<sp/>0x4444<sp/>};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__ztest__test__deprecated_1ga2c7d0aa85e7f320d582395c5ded90133" kindref="member">ZTEST_DMEM</ref><sp/>stack_data_t<sp/><ref refid="stack_2stack_2src_2main_8c_1a693deeab0d55e365f031e1eb49984b04" kindref="member">data_isr</ref>[<ref refid="stack_2stack_2src_2main_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>]<sp/>=<sp/>{<sp/>0xABCD,<sp/>0xABCD,<sp/>0xABCD,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xABCD<sp/>};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>semaphore<sp/>to<sp/>sync<sp/>threads<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_sem<sp/><ref refid="msgq_2msgq__api_2src_2main_8c_1a37d12066b90b5226eb1895e59f5908e8" kindref="member">end_sema</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><ref refid="mem__protect_2mem__protect_2src_2main_8c_1ab742abc145c11f7f6f211687f12c881a" kindref="member">K_HEAP_DEFINE</ref>(<ref refid="pipe_2pipe__api_2src_2main_8c_1a4dc595a0cb08f33192e6b5519acd86b8" kindref="member">test_pool</ref>,<sp/>128<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_stack<sp/><ref refid="stack_2stack_2src_2main_8c_1a8032a4f3bd65d0cd0b03b39961bfeb81" kindref="member">kstack</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_stack<sp/><ref refid="smp__boot__delay_2src_2main_8c_1a96786824adbf96016a9dbf6eded02b94" kindref="member">stack</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_sem<sp/><ref refid="msgq_2msgq__api_2src_2main_8c_1a37d12066b90b5226eb1895e59f5908e8" kindref="member">end_sema</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1ga969dfd191f24488451037a01f743fb45" kindref="member">test_stack_thread2thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1gaf06348e349a2076ea86503cedce2b9ac" kindref="member">test_stack_thread2isr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1ga10c0d7a266192050fde52f8d92b0a902" kindref="member">test_stack_pop_fail</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1ga9677d2b8125bcd28a15635a7e0d960fe" kindref="member">test_stack_alloc_thread2thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1ga0c527106c2441f8d2c033fc0c36c4418" kindref="member">test_stack_pop_can_wait</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1gae5e87cb1b3de61f6124574a09729db38" kindref="member">test_stack_cleanup_error</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1gabe16f26904c1e1ec7a21be8d84122ad0" kindref="member">test_stack_push_full</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1ga8afe7ec83d6d7cfd369954c194a0e820" kindref="member">test_stack_multithread_competition</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1ga9ebcc1991c52c1882e5a22da1e15fdc1" kindref="member">test_stack_alloc_null</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_USERSPACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1gad464dd62dbebefeff5ee3b1a4f82fcb4" kindref="member">test_stack_user_thread2thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1gadcd6c968abc5a6c26b4bf4bbb7cb5416" kindref="member">test_stack_user_pop_fail</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1gaba94c90db8907ff8931b462ed58fbbff" kindref="member">test_stack_user_init_null</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1ga613658fe6fe89d1e4a21a64e2e9d389c" kindref="member">test_stack_user_init_invalid_value</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1ga0a907159f4ecb44bab62f5e4a0dfe153" kindref="member">test_stack_user_push_null</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1gabdc234f1604211e05ea9317c9a9cb709" kindref="member">test_stack_user_pop_null</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1ga62551fca8b73e3c535ea34befda6ac4b" kindref="member">test_stack_user_pop_permission</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dummy_test(_name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>void<sp/>_name(void)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ztest_test_skip();<sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">dummy_test(<ref refid="group__kernel__stack__tests_1gad464dd62dbebefeff5ee3b1a4f82fcb4" kindref="member">test_stack_user_thread2thread</ref>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal">dummy_test(<ref refid="group__kernel__stack__tests_1gadcd6c968abc5a6c26b4bf4bbb7cb5416" kindref="member">test_stack_user_pop_fail</ref>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal">dummy_test(<ref refid="group__kernel__stack__tests_1gaba94c90db8907ff8931b462ed58fbbff" kindref="member">test_stack_user_init_null</ref>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal">dummy_test(<ref refid="group__kernel__stack__tests_1ga613658fe6fe89d1e4a21a64e2e9d389c" kindref="member">test_stack_user_init_invalid_value</ref>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">dummy_test(<ref refid="group__kernel__stack__tests_1ga0a907159f4ecb44bab62f5e4a0dfe153" kindref="member">test_stack_user_push_null</ref>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal">dummy_test(<ref refid="group__kernel__stack__tests_1gabdc234f1604211e05ea9317c9a9cb709" kindref="member">test_stack_user_pop_null</ref>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal">dummy_test(<ref refid="group__kernel__stack__tests_1ga62551fca8b73e3c535ea34befda6ac4b" kindref="member">test_stack_user_pop_permission</ref>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_USERSPACE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>entry<sp/>of<sp/>contexts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_2stack_2src_2main_8c_1aa7d3ca1282c3d5c808b5eb399563afaf" kindref="member">tIsr_entry_push</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="kobject_8c_1a5bf2789125fcfa98cff775cb82fbd3c9" kindref="member">p</ref>)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>i;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Push<sp/>items<sp/>to<sp/>stack<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0U;<sp/>i<sp/>&lt;<sp/><ref refid="stack_2stack_2src_2main_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push</ref>((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_stack<sp/>*)<ref refid="kobject_8c_1a5bf2789125fcfa98cff775cb82fbd3c9" kindref="member">p</ref>,<sp/><ref refid="stack_2stack_2src_2main_8c_1a693deeab0d55e365f031e1eb49984b04" kindref="member">data_isr</ref>[i]);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_2stack_2src_2main_8c_1adbdde999075a6cbbb550b6be2c55425e" kindref="member">tIsr_entry_pop</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="kobject_8c_1a5bf2789125fcfa98cff775cb82fbd3c9" kindref="member">p</ref>)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>i;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pop<sp/>items<sp/>from<sp/>stack<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0U;<sp/>i<sp/>&lt;<sp/><ref refid="stack_2stack_2src_2main_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="kobject_8c_1a5bf2789125fcfa98cff775cb82fbd3c9" kindref="member">p</ref><sp/>==<sp/>&amp;stack1)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop</ref>((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_stack<sp/>*)<ref refid="kobject_8c_1a5bf2789125fcfa98cff775cb82fbd3c9" kindref="member">p</ref>,<sp/>&amp;<ref refid="stack_2stack_2src_2main_8c_1a798208f9521552be6451766094139e7e" kindref="member">data1</ref>[i],<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop</ref>((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_stack<sp/>*)<ref refid="kobject_8c_1a5bf2789125fcfa98cff775cb82fbd3c9" kindref="member">p</ref>,<sp/>&amp;<ref refid="stack_2stack_2src_2main_8c_1a5a55fbc25dcda0bf98e11da0e2a38d99" kindref="member">data2</ref>[i],<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_2stack_2src_2main_8c_1ae3387eaa97dab23c0444f998418c769c" kindref="member">thread_entry_fn_single</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_data_t<sp/>tmp[<ref refid="stack_2stack_2src_2main_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>];</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>i;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pop<sp/>items<sp/>from<sp/>stack<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/><ref refid="stack_2stack_2src_2main_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>;<sp/>i;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop</ref>((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_stack<sp/>*)p1,<sp/>&amp;tmp[i<sp/>-<sp/>1],<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gacc41f998b701997e4eafb6ed7b9d537c" kindref="member">zassert_false</ref>(<ref refid="string_8h_1ad8bfbfa1e4ad284ded921dd775735521" kindref="member">memcmp</ref>(tmp,<sp/><ref refid="stack_2stack_2src_2main_8c_1a798208f9521552be6451766094139e7e" kindref="member">data1</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tmp)),</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Push<sp/>&amp;<sp/>Pop<sp/>items<sp/>does<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Push<sp/>items<sp/>from<sp/>stack<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0U;<sp/>i<sp/>&lt;<sp/><ref refid="stack_2stack_2src_2main_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push</ref>((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_stack<sp/>*)p1,<sp/><ref refid="stack_2stack_2src_2main_8c_1a5a55fbc25dcda0bf98e11da0e2a38d99" kindref="member">data2</ref>[i]);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Give<sp/>control<sp/>back<sp/>to<sp/>Test<sp/>thread<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gab9be3cf1988af2cd6afdace52d497c84" kindref="member">k_sem_give</ref>(&amp;<ref refid="msgq_2msgq__api_2src_2main_8c_1a37d12066b90b5226eb1895e59f5908e8" kindref="member">end_sema</ref>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_2stack_2src_2main_8c_1a5c567d109350eff0fc6b0037c1af3f3d" kindref="member">thread_entry_fn_dual</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_data_t<sp/>tmp[<ref refid="stack_2stack_2src_2main_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>];</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>i;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0U;<sp/>i<sp/>&lt;<sp/><ref refid="stack_2stack_2src_2main_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pop<sp/>items<sp/>from<sp/>stack2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop</ref>(p2,<sp/>&amp;tmp[i],<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Push<sp/>items<sp/>to<sp/>stack1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push</ref>(p1,<sp/><ref refid="stack_2stack_2src_2main_8c_1a798208f9521552be6451766094139e7e" kindref="member">data1</ref>[i]);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gacc41f998b701997e4eafb6ed7b9d537c" kindref="member">zassert_false</ref>(<ref refid="string_8h_1ad8bfbfa1e4ad284ded921dd775735521" kindref="member">memcmp</ref>(tmp,<sp/><ref refid="stack_2stack_2src_2main_8c_1a5a55fbc25dcda0bf98e11da0e2a38d99" kindref="member">data2</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tmp)),</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Push<sp/>&amp;<sp/>Pop<sp/>items<sp/>does<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_2stack_2src_2main_8c_1a5de5b99fabd8d080dc833acf10ff3e00" kindref="member">thread_entry_fn_isr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pop<sp/>items<sp/>from<sp/>stack2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="irq__offload_8h_1a429859dd7ac3d88a4b7ae858835847ce" kindref="member">irq_offload</ref>(<ref refid="stack_2stack_2src_2main_8c_1adbdde999075a6cbbb550b6be2c55425e" kindref="member">tIsr_entry_pop</ref>,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)p2);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gacc41f998b701997e4eafb6ed7b9d537c" kindref="member">zassert_false</ref>(<ref refid="string_8h_1ad8bfbfa1e4ad284ded921dd775735521" kindref="member">memcmp</ref>(<ref refid="stack_2stack_2src_2main_8c_1a693deeab0d55e365f031e1eb49984b04" kindref="member">data_isr</ref>,<sp/><ref refid="stack_2stack_2src_2main_8c_1a5a55fbc25dcda0bf98e11da0e2a38d99" kindref="member">data2</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="stack_2stack_2src_2main_8c_1a693deeab0d55e365f031e1eb49984b04" kindref="member">data_isr</ref>)),</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Push<sp/>&amp;<sp/>Pop<sp/>items<sp/>does<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Push<sp/>items<sp/>to<sp/>stack1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="irq__offload_8h_1a429859dd7ac3d88a4b7ae858835847ce" kindref="member">irq_offload</ref>(<ref refid="stack_2stack_2src_2main_8c_1aa7d3ca1282c3d5c808b5eb399563afaf" kindref="member">tIsr_entry_push</ref>,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)p1);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Give<sp/>control<sp/>back<sp/>to<sp/>Test<sp/>thread<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gab9be3cf1988af2cd6afdace52d497c84" kindref="member">k_sem_give</ref>(&amp;<ref refid="msgq_2msgq__api_2src_2main_8c_1a37d12066b90b5226eb1895e59f5908e8" kindref="member">end_sema</ref>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1ga63ff12b661e06b32517cea03f012ad4d" kindref="member">test_single_stack_play</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_data_t<sp/>tmp[<ref refid="stack_2stack_2src_2main_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>];</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>i;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Init<sp/>kernel<sp/>objects<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gadcd0e6cfba3392fb887222eafe4c1845" kindref="member">k_sem_init</ref>(&amp;<ref refid="msgq_2msgq__api_2src_2main_8c_1a37d12066b90b5226eb1895e59f5908e8" kindref="member">end_sema</ref>,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Push<sp/>items<sp/>to<sp/>stack<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0U;<sp/>i<sp/>&lt;<sp/><ref refid="stack_2stack_2src_2main_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push</ref>(&amp;stack1,<sp/><ref refid="stack_2stack_2src_2main_8c_1a798208f9521552be6451766094139e7e" kindref="member">data1</ref>[i]);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref><sp/>=<sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="structthread__data" kindref="compound">thread_data</ref>,<sp/>threadstack,<sp/><ref refid="stack_2stack_2src_2main_8c_1aa820b6b1cef8d50aa349ffeb5224c550" kindref="member">TSTACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_2stack_2src_2main_8c_1ae3387eaa97dab23c0444f998418c769c" kindref="member">thread_entry_fn_single</ref>,<sp/>&amp;stack1,<sp/>NULL,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(0),<sp/><ref refid="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" kindref="member">K_USER</ref><sp/>|</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" kindref="member">K_INHERIT_PERMS</ref>,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Let<sp/>the<sp/>child<sp/>thread<sp/>run<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gac71e2383c1920dddc45a561cacfef090" kindref="member">k_sem_take</ref>(&amp;<ref refid="msgq_2msgq__api_2src_2main_8c_1a37d12066b90b5226eb1895e59f5908e8" kindref="member">end_sema</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pop<sp/>items<sp/>from<sp/>stack<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/><ref refid="stack_2stack_2src_2main_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>;<sp/>i;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop</ref>(&amp;stack1,<sp/>&amp;tmp[i<sp/>-<sp/>1],<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gacc41f998b701997e4eafb6ed7b9d537c" kindref="member">zassert_false</ref>(<ref refid="string_8h_1ad8bfbfa1e4ad284ded921dd775735521" kindref="member">memcmp</ref>(tmp,<sp/><ref refid="stack_2stack_2src_2main_8c_1a5a55fbc25dcda0bf98e11da0e2a38d99" kindref="member">data2</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tmp)),</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Push<sp/>&amp;<sp/>Pop<sp/>items<sp/>does<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>spawn<sp/>thread<sp/>to<sp/>avoid<sp/>side<sp/>effect<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1ga6f50b38507a133bca918502af4610a42" kindref="member">test_dual_stack_play</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_data_t<sp/>tmp[<ref refid="stack_2stack_2src_2main_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>];</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>i;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref><sp/>=<sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="structthread__data" kindref="compound">thread_data</ref>,<sp/>threadstack,<sp/><ref refid="stack_2stack_2src_2main_8c_1aa820b6b1cef8d50aa349ffeb5224c550" kindref="member">TSTACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_2stack_2src_2main_8c_1a5c567d109350eff0fc6b0037c1af3f3d" kindref="member">thread_entry_fn_dual</ref>,<sp/>&amp;stack1,<sp/>&amp;stack2,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(0),<sp/><ref refid="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" kindref="member">K_USER</ref><sp/>|</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" kindref="member">K_INHERIT_PERMS</ref>,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0U;<sp/>i<sp/>&lt;<sp/><ref refid="stack_2stack_2src_2main_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Push<sp/>items<sp/>to<sp/>stack2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push</ref>(&amp;stack2,<sp/><ref refid="stack_2stack_2src_2main_8c_1a5a55fbc25dcda0bf98e11da0e2a38d99" kindref="member">data2</ref>[i]);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pop<sp/>items<sp/>from<sp/>stack1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop</ref>(&amp;stack1,<sp/>&amp;tmp[i],<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gacc41f998b701997e4eafb6ed7b9d537c" kindref="member">zassert_false</ref>(<ref refid="string_8h_1ad8bfbfa1e4ad284ded921dd775735521" kindref="member">memcmp</ref>(tmp,<sp/><ref refid="stack_2stack_2src_2main_8c_1a798208f9521552be6451766094139e7e" kindref="member">data1</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tmp)),</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Push<sp/>&amp;<sp/>Pop<sp/>items<sp/>does<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>spawn<sp/>thread<sp/>to<sp/>avoid<sp/>side<sp/>effect<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1gabae0e2066040a8f20bd69395bfdedd09" kindref="member">test_isr_stack_play</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Init<sp/>kernel<sp/>objects<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gadcd0e6cfba3392fb887222eafe4c1845" kindref="member">k_sem_init</ref>(&amp;<ref refid="msgq_2msgq__api_2src_2main_8c_1a37d12066b90b5226eb1895e59f5908e8" kindref="member">end_sema</ref>,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref><sp/>=<sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="structthread__data" kindref="compound">thread_data</ref>,<sp/>threadstack,<sp/><ref refid="stack_2stack_2src_2main_8c_1aa820b6b1cef8d50aa349ffeb5224c550" kindref="member">TSTACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_2stack_2src_2main_8c_1a5de5b99fabd8d080dc833acf10ff3e00" kindref="member">thread_entry_fn_isr</ref>,<sp/>&amp;stack1,<sp/>&amp;stack2,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(0),</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" kindref="member">K_INHERIT_PERMS</ref>,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Push<sp/>items<sp/>to<sp/>stack2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="irq__offload_8h_1a429859dd7ac3d88a4b7ae858835847ce" kindref="member">irq_offload</ref>(<ref refid="stack_2stack_2src_2main_8c_1aa7d3ca1282c3d5c808b5eb399563afaf" kindref="member">tIsr_entry_push</ref>,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;stack2);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Let<sp/>the<sp/>child<sp/>thread<sp/>run<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gac71e2383c1920dddc45a561cacfef090" kindref="member">k_sem_take</ref>(&amp;<ref refid="msgq_2msgq__api_2src_2main_8c_1a37d12066b90b5226eb1895e59f5908e8" kindref="member">end_sema</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pop<sp/>items<sp/>from<sp/>stack1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="irq__offload_8h_1a429859dd7ac3d88a4b7ae858835847ce" kindref="member">irq_offload</ref>(<ref refid="stack_2stack_2src_2main_8c_1adbdde999075a6cbbb550b6be2c55425e" kindref="member">tIsr_entry_pop</ref>,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;stack1);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gacc41f998b701997e4eafb6ed7b9d537c" kindref="member">zassert_false</ref>(<ref refid="string_8h_1ad8bfbfa1e4ad284ded921dd775735521" kindref="member">memcmp</ref>(<ref refid="stack_2stack_2src_2main_8c_1a693deeab0d55e365f031e1eb49984b04" kindref="member">data_isr</ref>,<sp/><ref refid="stack_2stack_2src_2main_8c_1a798208f9521552be6451766094139e7e" kindref="member">data1</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="stack_2stack_2src_2main_8c_1a693deeab0d55e365f031e1eb49984b04" kindref="member">data_isr</ref>)),</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Push<sp/>&amp;<sp/>Pop<sp/>items<sp/>does<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>spawn<sp/>thread<sp/>to<sp/>avoid<sp/>side<sp/>effect<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>);</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>the<sp/>thread<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1ga5ee5d8c8d91951e976c377aad77092f5" kindref="member">thread_entry_wait</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_data_t<sp/>*txdata<sp/>=<sp/>p3;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push</ref>(p1,<sp/>*(txdata<sp/>+<sp/>2));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push</ref>(p1,<sp/>*(txdata<sp/>+<sp/>3));</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1ga0c527106c2441f8d2c033fc0c36c4418" kindref="member">test_stack_pop_can_wait</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_stack<sp/>stack3;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_data_t<sp/>tx_data[<ref refid="stack_2stack_2src_2main_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>]<sp/>=<sp/>{<sp/>0xaa,<sp/>0xbb,<sp/>0xcc,<sp/>0xdd<sp/>};</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_data_t<sp/>rx_data[<ref refid="stack_2stack_2src_2main_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>]<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1gab97d924db1aef3f6adade156a107d45c" kindref="member">k_stack_alloc_init</ref>(&amp;stack3,<sp/>2);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref><sp/>=<sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="structthread__data" kindref="compound">thread_data</ref>,<sp/>threadstack,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_2stack_2src_2main_8c_1aa820b6b1cef8d50aa349ffeb5224c550" kindref="member">TSTACK_SIZE</ref>,<sp/><ref refid="group__kernel__stack__tests_1ga5ee5d8c8d91951e976c377aad77092f5" kindref="member">thread_entry_wait</ref>,<sp/>&amp;stack3,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>tx_data,<sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(0),<sp/>0,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push</ref>(&amp;stack3,<sp/>tx_data[i]);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop</ref>(&amp;stack3,<sp/>&amp;rx_data[i],<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(rx_data[2]<sp/>==<sp/>tx_data[2],<sp/></highlight><highlight class="stringliteral">&quot;wait<sp/>foreve<sp/>and<sp/>pop<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop</ref>(&amp;stack3,<sp/>&amp;rx_data[3],<sp/><ref refid="group__clock__apis_1ga302af954e87b10a9b731f1ad07775e9f" kindref="member">K_MSEC</ref>(50));</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(rx_data[3]<sp/>==<sp/>tx_data[3],<sp/></highlight><highlight class="stringliteral">&quot;Wait<sp/>maxmum<sp/>time<sp/>pop<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>spawn<sp/>thread<sp/>to<sp/>avoid<sp/>side<sp/>effect<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*free<sp/>the<sp/>buffer<sp/>allocated*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1ga819f4e7b2cf11cf2e1b80933fdcb67ea" kindref="member">k_stack_cleanup</ref>(&amp;stack3);</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_stack<sp/><ref refid="stack_2stack_2src_2main_8c_1a3808bea60358be7dddc26ee430bd64cd" kindref="member">threadstack1</ref>;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/><ref refid="stack_2stack_2src_2main_8c_1a142b35a972e1d49b2f774510d10c8a74" kindref="member">thread_data1</ref>;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_sem<sp/><ref refid="stack_2stack_2src_2main_8c_1ac9d283d96985728282a611f383fd3e74" kindref="member">end_sema1</ref>;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">/*test<sp/>case<sp/>main<sp/>entry*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="common_2src_2main_8c_1a8a4533f287d99bb2d7c24c0e29c9a449" kindref="member">test_main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="347"><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gafec540511e6d2e0a074a5bfb515c53b0" kindref="member">k_thread_access_grant</ref>(<ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>(),<sp/>&amp;stack1,<sp/>&amp;stack2,<sp/>&amp;<ref refid="structthread__data" kindref="compound">thread_data</ref>,</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="msgq_2msgq__api_2src_2main_8c_1a37d12066b90b5226eb1895e59f5908e8" kindref="member">end_sema</ref>,<sp/>&amp;threadstack,<sp/>&amp;<ref refid="stack_2stack_2src_2main_8c_1a8032a4f3bd65d0cd0b03b39961bfeb81" kindref="member">kstack</ref>,<sp/>&amp;<ref refid="smp__boot__delay_2src_2main_8c_1a96786824adbf96016a9dbf6eded02b94" kindref="member">stack</ref>,<sp/>&amp;<ref refid="stack_2stack_2src_2main_8c_1a142b35a972e1d49b2f774510d10c8a74" kindref="member">thread_data1</ref>,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="stack_2stack_2src_2main_8c_1ac9d283d96985728282a611f383fd3e74" kindref="member">end_sema1</ref>,<sp/>&amp;<ref refid="stack_2stack_2src_2main_8c_1a3808bea60358be7dddc26ee430bd64cd" kindref="member">threadstack1</ref>);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga3f46c06833add2a2e0ddb7242f06702c" kindref="member">k_thread_heap_assign</ref>(<ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>(),<sp/>&amp;<ref refid="pipe_2pipe__api_2src_2main_8c_1a4dc595a0cb08f33192e6b5519acd86b8" kindref="member">test_pool</ref>);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga2ad3ecbbedb04310c6a4ac997a8d3550" kindref="member">ztest_test_suite</ref>(test_stack_usage,</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__stack__tests_1ga969dfd191f24488451037a01f743fb45" kindref="member">test_stack_thread2thread</ref>),</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="group__kernel__stack__tests_1gad464dd62dbebefeff5ee3b1a4f82fcb4" kindref="member">test_stack_user_thread2thread</ref>),</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__stack__tests_1gaf06348e349a2076ea86503cedce2b9ac" kindref="member">test_stack_thread2isr</ref>),</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__stack__tests_1ga10c0d7a266192050fde52f8d92b0a902" kindref="member">test_stack_pop_fail</ref>),</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__stack__tests_1ga8afe7ec83d6d7cfd369954c194a0e820" kindref="member">test_stack_multithread_competition</ref>),</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__stack__tests_1gae5e87cb1b3de61f6124574a09729db38" kindref="member">test_stack_cleanup_error</ref>),</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__stack__tests_1gabe16f26904c1e1ec7a21be8d84122ad0" kindref="member">test_stack_push_full</ref>),</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="group__kernel__stack__tests_1gadcd6c968abc5a6c26b4bf4bbb7cb5416" kindref="member">test_stack_user_pop_fail</ref>),</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="group__kernel__stack__tests_1gaba94c90db8907ff8931b462ed58fbbff" kindref="member">test_stack_user_init_null</ref>),</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="group__kernel__stack__tests_1ga613658fe6fe89d1e4a21a64e2e9d389c" kindref="member">test_stack_user_init_invalid_value</ref>),</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="group__kernel__stack__tests_1ga0a907159f4ecb44bab62f5e4a0dfe153" kindref="member">test_stack_user_push_null</ref>),</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="group__kernel__stack__tests_1gabdc234f1604211e05ea9317c9a9cb709" kindref="member">test_stack_user_pop_null</ref>),</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="group__kernel__stack__tests_1ga62551fca8b73e3c535ea34befda6ac4b" kindref="member">test_stack_user_pop_permission</ref>),</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__stack__tests_1ga9677d2b8125bcd28a15635a7e0d960fe" kindref="member">test_stack_alloc_thread2thread</ref>),</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__stack__tests_1ga9ebcc1991c52c1882e5a22da1e15fdc1" kindref="member">test_stack_alloc_null</ref>),</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="group__kernel__stack__tests_1ga63ff12b661e06b32517cea03f012ad4d" kindref="member">test_single_stack_play</ref>),</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gab5438441a57724ddf51e6dda62e2681b" kindref="member">ztest_1cpu_user_unit_test</ref>(<ref refid="group__kernel__stack__tests_1ga6f50b38507a133bca918502af4610a42" kindref="member">test_dual_stack_play</ref>),</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6bec709a2a48c6065e6f5e01fea69685" kindref="member">ztest_1cpu_unit_test</ref>(<ref refid="group__kernel__stack__tests_1gabae0e2066040a8f20bd69395bfdedd09" kindref="member">test_isr_stack_play</ref>),</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__stack__tests_1ga0c527106c2441f8d2c033fc0c36c4418" kindref="member">test_stack_pop_can_wait</ref>));</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga7f76df4df4bf68a605b923fed8e5465c" kindref="member">ztest_run_test_suite</ref>(test_stack_usage);</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/kernel/stack/stack/src/main.c"/>
  </compounddef>
</doxygen>
