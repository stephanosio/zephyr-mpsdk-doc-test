<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__semaphore__apis" kind="group">
    <compoundname>semaphore_apis</compoundname>
    <title>Semaphore APIs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__semaphore__apis_1gadcd0e6cfba3392fb887222eafe4c1845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_sem_init</definition>
        <argsstring>(struct k_sem *sem, unsigned int initial_count, unsigned int limit)</argsstring>
        <name>k_sem_init</name>
        <param>
          <type>struct k_sem *</type>
          <declname>sem</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>initial_count</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Initialize a semaphore. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a semaphore object, prior to its first use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the semaphore. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initial_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial semaphore count. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum permitted semaphore count.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__semaphore__apis_1ga689359a77a0cebe737ef644c188f7e57" kindref="member">K_SEM_MAX_LIMIT</ref></para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Semaphore created successfully </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2872" column="6" declfile="include/kernel.h" declline="2872" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__semaphore__apis_1gac71e2383c1920dddc45a561cacfef090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_sem_take</definition>
        <argsstring>(struct k_sem *sem, k_timeout_t timeout)</argsstring>
        <name>k_sem_take</name>
        <param>
          <type>struct k_sem *</type>
          <declname>sem</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Take a semaphore. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine takes <emphasis>sem</emphasis>.</para>
<para><simplesect kind="note"><para><emphasis>timeout</emphasis> must be set to K_NO_WAIT if called from ISR.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the semaphore. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period to take the semaphore, or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Semaphore taken. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned without waiting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out, or the semaphore was reset during the waiting period. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2893" column="6" declfile="include/kernel.h" declline="2893" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__semaphore__apis_1gab9be3cf1988af2cd6afdace52d497c84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_sem_give</definition>
        <argsstring>(struct k_sem *sem)</argsstring>
        <name>k_sem_give</name>
        <param>
          <type>struct k_sem *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
<para>Give a semaphore. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine gives <emphasis>sem</emphasis>, unless the semaphore is already at its maximum permitted count.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the semaphore. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2905" column="7" declfile="include/kernel.h" declline="2905" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__semaphore__apis_1ga1bd12d8d8c1b9c6be9b665d0fefe5562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_sem_reset</definition>
        <argsstring>(struct k_sem *sem)</argsstring>
        <name>k_sem_reset</name>
        <param>
          <type>struct k_sem *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
<para>Resets a semaphore&apos;s count to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine sets the count of <emphasis>sem</emphasis> to zero. Any outstanding semaphore takes will be aborted with -EAGAIN.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the semaphore. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2916" column="7" declfile="include/kernel.h" declline="2916" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__semaphore__apis_1ga58843b581e170a1811fc38eecbfd01f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
        <definition>unsigned int k_sem_count_get</definition>
        <argsstring>(struct k_sem *sem)</argsstring>
        <name>k_sem_count_get</name>
        <param>
          <type>struct k_sem *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
<para>Get a semaphore&apos;s count. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine returns the current count of <emphasis>sem</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the semaphore.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current semaphore count. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2927" column="15" declfile="include/kernel.h" declline="2927" declcolumn="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__semaphore__apis_1ga689359a77a0cebe737ef644c188f7e57" prot="public" static="no">
        <name>K_SEM_MAX_LIMIT</name>
        <initializer>UINT_MAX</initializer>
        <briefdescription>
<para>Maximum limit value allowed for a semaphore. </para>
        </briefdescription>
        <detaileddescription>
<para>This is intended for use when a semaphore does not have an explicit maximum limit, and instead is just used for counting purposes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2855" column="9" bodyfile="include/kernel.h" bodystart="2855" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__semaphore__apis_1ga018a8aa43e02e704deee7b6341502946" prot="public" static="no">
        <name>K_SEM_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>initial_count</defname></param>
        <param><defname>count_limit</defname></param>
        <initializer>	<ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(k_sem, name) = \
		Z_SEM_INITIALIZER(name, initial_count, count_limit); \
	BUILD_ASSERT(((count_limit) != 0) &amp;&amp; \
		     ((initial_count) &lt;= (count_limit)) &amp;&amp; \
			 ((count_limit) &lt;= <ref refid="group__semaphore__apis_1ga689359a77a0cebe737ef644c188f7e57" kindref="member">K_SEM_MAX_LIMIT</ref>));</initializer>
        <briefdescription>
<para>Statically define and initialize a semaphore. </para>
        </briefdescription>
        <detaileddescription>
<para>The semaphore can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_sem<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the semaphore. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initial_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial semaphore count. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count_limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum permitted semaphore count. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2948" column="9" bodyfile="include/kernel.h" bodystart="2948" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
