<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__bt__mesh__health__cli" kind="group">
    <compoundname>bt_mesh_health_cli</compoundname>
    <title>Health Client Model</title>
    <innerclass refid="structbt__mesh__health__cli" prot="public">bt_mesh_health_cli</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__bt__mesh__health__cli_1gaa553f0dc5a56fee734751ab56339b26b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_health_cli_set</definition>
        <argsstring>(struct bt_mesh_model *model)</argsstring>
        <name>bt_mesh_health_cli_set</name>
        <param>
          <type>struct <ref refid="structbt__mesh__model" kindref="compound">bt_mesh_model</ref> *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Set Health client model instance to use for communication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Health Client model instance from the composition data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_cli.h" line="111" column="5" declfile="include/bluetooth/mesh/health_cli.h" declline="111" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__health__cli_1ga2a844dc96ebbf2663ea72a2b3019a10a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_health_fault_get</definition>
        <argsstring>(uint16_t addr, uint16_t app_idx, uint16_t cid, uint8_t *test_id, uint8_t *faults, size_t *fault_count)</argsstring>
        <name>bt_mesh_health_fault_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>app_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>cid</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>test_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>faults</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>fault_count</declname>
        </param>
        <briefdescription>
<para>Get the registered fault state for the given Company ID. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>test_id</computeroutput> and ( <computeroutput>faults</computeroutput> or <computeroutput>fault_count</computeroutput> ) as NULL This way the method will not wait for response and will return immediately after sending the command.</para>
<para>To process the response arguments of an async method, register the <computeroutput>fault_status</computeroutput> callback in <computeroutput><ref refid="structbt__mesh__health__cli" kindref="compound">bt_mesh_health_cli</ref></computeroutput> struct.</para>
<para><simplesect kind="see"><para><ref refid="group__bt__mesh__health__faults" kindref="compound">Health faults</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node element address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Application index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Company ID to get the registered faults of. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>test_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Test ID response buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>faults</parametername>
</parameternamelist>
<parameterdescription>
<para>Fault array response buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fault_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Fault count response buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_cli.h" line="134" column="5" declfile="include/bluetooth/mesh/health_cli.h" declline="134" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__health__cli_1gafdf71ea35a7e1439fcc64abe33def170" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_health_fault_clear</definition>
        <argsstring>(uint16_t addr, uint16_t app_idx, uint16_t cid, uint8_t *test_id, uint8_t *faults, size_t *fault_count)</argsstring>
        <name>bt_mesh_health_fault_clear</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>app_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>cid</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>test_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>faults</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>fault_count</declname>
        </param>
        <briefdescription>
<para>Clear the registered faults for the given Company ID. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>test_id</computeroutput> and ( <computeroutput>faults</computeroutput> or <computeroutput>fault_count</computeroutput> ) as NULL This way the method will not wait for response and will return immediately after sending the command.</para>
<para>To process the response arguments of an async method, register the <computeroutput>fault_status</computeroutput> callback in <computeroutput><ref refid="structbt__mesh__health__cli" kindref="compound">bt_mesh_health_cli</ref></computeroutput> struct.</para>
<para><simplesect kind="see"><para><ref refid="group__bt__mesh__health__faults" kindref="compound">Health faults</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node element address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Application index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Company ID to clear the registered faults for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>test_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Test ID response buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>faults</parametername>
</parameternamelist>
<parameterdescription>
<para>Fault array response buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fault_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Fault count response buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_cli.h" line="159" column="5" declfile="include/bluetooth/mesh/health_cli.h" declline="159" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__health__cli_1ga3820002d32f6861718790b0c62fe894b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_health_fault_clear_unack</definition>
        <argsstring>(uint16_t addr, uint16_t app_idx, uint16_t cid)</argsstring>
        <name>bt_mesh_health_fault_clear_unack</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>app_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>cid</declname>
        </param>
        <briefdescription>
<para>Clear the registered faults for the given Company ID (unacked). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__bt__mesh__health__faults" kindref="compound">Health faults</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node element address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Application index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Company ID to clear the registered faults for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_cli.h" line="173" column="5" declfile="include/bluetooth/mesh/health_cli.h" declline="173" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__health__cli_1gaf6cf8b5fbd6775f2c162a4782a8e5694" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_health_fault_test</definition>
        <argsstring>(uint16_t addr, uint16_t app_idx, uint16_t cid, uint8_t test_id, uint8_t *faults, size_t *fault_count)</argsstring>
        <name>bt_mesh_health_fault_test</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>app_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>cid</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>test_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>faults</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>fault_count</declname>
        </param>
        <briefdescription>
<para>Invoke a self-test procedure for the given Company ID. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>faults</computeroutput> or <computeroutput>fault_count</computeroutput> as NULL This way the method will not wait for response and will return immediately after sending the command.</para>
<para>To process the response arguments of an async method, register the <computeroutput>fault_status</computeroutput> callback in <computeroutput><ref refid="structbt__mesh__health__cli" kindref="compound">bt_mesh_health_cli</ref></computeroutput> struct.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node element address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Application index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Company ID to invoke the test for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>test_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Test ID response buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>faults</parametername>
</parameternamelist>
<parameterdescription>
<para>Fault array response buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fault_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Fault count response buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_cli.h" line="194" column="5" declfile="include/bluetooth/mesh/health_cli.h" declline="194" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__health__cli_1gae3d01713f11910c8eeded3a2a7f3c35f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_health_fault_test_unack</definition>
        <argsstring>(uint16_t addr, uint16_t app_idx, uint16_t cid, uint8_t test_id)</argsstring>
        <name>bt_mesh_health_fault_test_unack</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>app_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>cid</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>test_id</declname>
        </param>
        <briefdescription>
<para>Invoke a self-test procedure for the given Company ID (unacked). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node element address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Application index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Company ID to invoke the test for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>test_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Test ID response buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_cli.h" line="207" column="5" declfile="include/bluetooth/mesh/health_cli.h" declline="207" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__health__cli_1gad1d549fddc2a1792855cfa4e91a38606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_health_period_get</definition>
        <argsstring>(uint16_t addr, uint16_t app_idx, uint8_t *divisor)</argsstring>
        <name>bt_mesh_health_period_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>app_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>divisor</declname>
        </param>
        <briefdescription>
<para>Get the target node&apos;s Health fast period divisor. </para>
        </briefdescription>
        <detaileddescription>
<para>The health period divisor is used to increase the publish rate when a fault is registered. Normally, the Health server will publish with the period in the configured publish parameters. When a fault is registered, the publish period is divided by (1 &lt;&lt; divisor). For example, if the target node&apos;s Health server is configured to publish with a period of 16 seconds, and the Health fast period divisor is 5, the Health server will publish with an interval of 500 ms when a fault is registered.</para>
<para>This method can be used asynchronously by setting <computeroutput>divisor</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para>To process the response arguments of an async method, register the <computeroutput>period_status</computeroutput> callback in <computeroutput><ref refid="structbt__mesh__health__cli" kindref="compound">bt_mesh_health_cli</ref></computeroutput> struct.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node element address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Application index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>divisor</parametername>
</parameternamelist>
<parameterdescription>
<para>Health period divisor response buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_cli.h" line="233" column="5" declfile="include/bluetooth/mesh/health_cli.h" declline="233" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__health__cli_1ga26fe215b354597e1a2ef37921a3e2a47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_health_period_set</definition>
        <argsstring>(uint16_t addr, uint16_t app_idx, uint8_t divisor, uint8_t *updated_divisor)</argsstring>
        <name>bt_mesh_health_period_set</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>app_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>divisor</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>updated_divisor</declname>
        </param>
        <briefdescription>
<para>Set the target node&apos;s Health fast period divisor. </para>
        </briefdescription>
        <detaileddescription>
<para>The health period divisor is used to increase the publish rate when a fault is registered. Normally, the Health server will publish with the period in the configured publish parameters. When a fault is registered, the publish period is divided by (1 &lt;&lt; divisor). For example, if the target node&apos;s Health server is configured to publish with a period of 16 seconds, and the Health fast period divisor is 5, the Health server will publish with an interval of 500 ms when a fault is registered.</para>
<para>This method can be used asynchronously by setting <computeroutput>updated_divisor</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para>To process the response arguments of an async method, register the <computeroutput>period_status</computeroutput> callback in <computeroutput><ref refid="structbt__mesh__health__cli" kindref="compound">bt_mesh_health_cli</ref></computeroutput> struct.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node element address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Application index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>divisor</parametername>
</parameternamelist>
<parameterdescription>
<para>New Health period divisor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>updated_divisor</parametername>
</parameternamelist>
<parameterdescription>
<para>Health period divisor response buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_cli.h" line="260" column="5" declfile="include/bluetooth/mesh/health_cli.h" declline="260" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__health__cli_1gaa1dfd9afd13246136f15492268901943" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_health_period_set_unack</definition>
        <argsstring>(uint16_t addr, uint16_t app_idx, uint8_t divisor)</argsstring>
        <name>bt_mesh_health_period_set_unack</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>app_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>divisor</declname>
        </param>
        <briefdescription>
<para>Set the target node&apos;s Health fast period divisor (unacknowledged). </para>
        </briefdescription>
        <detaileddescription>
<para>This is an unacknowledged version of this API.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node element address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Application index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>divisor</parametername>
</parameternamelist>
<parameterdescription>
<para>New Health period divisor.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_cli.h" line="273" column="5" declfile="include/bluetooth/mesh/health_cli.h" declline="273" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__health__cli_1gaa774a167e94cfbb14d64dad08d870ba3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_health_attention_get</definition>
        <argsstring>(uint16_t addr, uint16_t app_idx, uint8_t *attention)</argsstring>
        <name>bt_mesh_health_attention_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>app_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>attention</declname>
        </param>
        <briefdescription>
<para>Get the current attention timer value. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>attention</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para>To process the response arguments of an async method, register the <computeroutput>attention_status</computeroutput> callback in <computeroutput><ref refid="structbt__mesh__health__cli" kindref="compound">bt_mesh_health_cli</ref></computeroutput> struct.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node element address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Application index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attention</parametername>
</parameternamelist>
<parameterdescription>
<para>Attention timer response buffer, measured in seconds.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_cli.h" line="291" column="5" declfile="include/bluetooth/mesh/health_cli.h" declline="291" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__health__cli_1ga9083440c812a14dd46845846d1732cc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_health_attention_set</definition>
        <argsstring>(uint16_t addr, uint16_t app_idx, uint8_t attention, uint8_t *updated_attention)</argsstring>
        <name>bt_mesh_health_attention_set</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>app_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>attention</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>updated_attention</declname>
        </param>
        <briefdescription>
<para>Set the attention timer. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used asynchronously by setting <computeroutput>updated_attention</computeroutput> as NULL. This way the method will not wait for response and will return immediately after sending the command.</para>
<para>To process the response arguments of an async method, register the <computeroutput>attention_status</computeroutput> callback in <computeroutput><ref refid="structbt__mesh__health__cli" kindref="compound">bt_mesh_health_cli</ref></computeroutput> struct.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node element address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Application index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attention</parametername>
</parameternamelist>
<parameterdescription>
<para>New attention timer time, in seconds. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>updated_attention</parametername>
</parameternamelist>
<parameterdescription>
<para>Attention timer response buffer, measured in seconds.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_cli.h" line="311" column="5" declfile="include/bluetooth/mesh/health_cli.h" declline="311" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__health__cli_1gaecc3985fc546ef66c3419fad0a118d2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_health_attention_set_unack</definition>
        <argsstring>(uint16_t addr, uint16_t app_idx, uint8_t attention)</argsstring>
        <name>bt_mesh_health_attention_set_unack</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>app_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>attention</declname>
        </param>
        <briefdescription>
<para>Set the attention timer (unacknowledged). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target node element address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Application index to encrypt with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attention</parametername>
</parameternamelist>
<parameterdescription>
<para>New attention timer time, in seconds.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_cli.h" line="322" column="5" declfile="include/bluetooth/mesh/health_cli.h" declline="322" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__health__cli_1ga9abc0db22da327d02d23371bba59b46a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
        <definition>int32_t bt_mesh_health_cli_timeout_get</definition>
        <argsstring>(void)</argsstring>
        <name>bt_mesh_health_cli_timeout_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current transmission timeout value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The configured transmission timeout in milliseconds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_cli.h" line="329" column="9" declfile="include/bluetooth/mesh/health_cli.h" declline="329" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__health__cli_1gaf3d54597a74a458df0053bd0599d39e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_mesh_health_cli_timeout_set</definition>
        <argsstring>(int32_t timeout)</argsstring>
        <name>bt_mesh_health_cli_timeout_set</name>
        <param>
          <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Set the transmission timeout value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The new transmission timeout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_cli.h" line="335" column="6" declfile="include/bluetooth/mesh/health_cli.h" declline="335" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__bt__mesh__health__cli_1ga0f869fc7d19f5e8be5953a8ece6e07f6" prot="public" static="no">
        <name>BT_MESH_MODEL_HEALTH_CLI</name>
        <param><defname>cli_data</defname></param>
        <initializer>	<ref refid="group__bt__mesh__access_1gac062c101b7310020e11a527de9c40d3a" kindref="member">BT_MESH_MODEL_CB</ref>(<ref refid="group__bt__mesh__access_1gab58b85b7a77feeb579973177c12bb446" kindref="member">BT_MESH_MODEL_ID_HEALTH_CLI</ref>, bt_mesh_health_cli_op,   \
			 NULL, cli_data, &amp;bt_mesh_health_cli_cb)</initializer>
        <briefdescription>
<para>Generic Health Client model composition data entry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cli_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <ref refid="group__bt__mesh__health__cli" kindref="compound">Health Client Model</ref> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_cli.h" line="101" column="9" bodyfile="include/bluetooth/mesh/health_cli.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Health Client Model. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
