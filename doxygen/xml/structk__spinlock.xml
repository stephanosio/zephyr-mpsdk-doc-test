<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structk__spinlock" kind="struct" language="C++" prot="public">
    <compoundname>k_spinlock</compoundname>
    <includes refid="spinlock_8h" local="no">spinlock.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structk__spinlock_1af106eb0c1ab04b18a98893b91a2dafb6" prot="public" static="no" mutable="no">
        <type><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref></type>
        <definition>atomic_t k_spinlock::locked</definition>
        <argsstring></argsstring>
        <name>locked</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spinlock.h" line="44" column="10" bodyfile="include/spinlock.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Kernel Spin Lock. </para>
    </briefdescription>
    <detaileddescription>
<para>This struct defines a spin lock record on which CPUs can wait with <ref refid="group__spinlock__apis_1gaac60da4347f5b29ff8c4e5f24c99b3bf" kindref="member">k_spin_lock()</ref>. Any number of spinlocks may be defined in application code. </para>
    </detaileddescription>
    <location file="include/spinlock.h" line="42" column="1" bodyfile="include/spinlock.h" bodystart="42" bodyend="71"/>
    <listofallmembers>
      <member refid="structk__spinlock_1af106eb0c1ab04b18a98893b91a2dafb6" prot="public" virt="non-virtual"><scope>k_spinlock</scope><name>locked</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
