<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__led__interface" kind="group">
    <compoundname>led_interface</compoundname>
    <title>LED Interface</title>
    <innerclass refid="structled__info" prot="public">led_info</innerclass>
    <innerclass refid="structled__driver__api" prot="public">led_driver_api</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__led__interface_1ga3768de26cc9201629a54b4aeb318ec51" prot="public" static="no">
        <type>int(*</type>
        <definition>led_api_blink</definition>
        <argsstring>)(const struct device *dev, uint32_t led, uint32_t delay_on, uint32_t delay_off)</argsstring>
        <name>led_api_blink</name>
        <briefdescription>
<para>Callback API for blinking an LED. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__led__interface_1ga4f31fecd215e5597999be4d16b0d2dd5" kindref="member">led_blink()</ref> for argument descriptions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/led.h" line="52" column="9" bodyfile="include/drivers/led.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__led__interface_1ga86447854b8c17b3aee5e6c619e96bc70" prot="public" static="no">
        <type>int(*</type>
        <definition>led_api_get_info</definition>
        <argsstring>)(const struct device *dev, uint32_t led, const struct led_info **info)</argsstring>
        <name>led_api_get_info</name>
        <briefdescription>
<para>Optional API callback to get LED information. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__led__interface_1ga9925483b97073354f7be6b40aa2dad1a" kindref="member">led_get_info()</ref> for argument descriptions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/led.h" line="61" column="9" bodyfile="include/drivers/led.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__led__interface_1gaacc2d5697d9e4c74df65db5da9a583cf" prot="public" static="no">
        <type>int(*</type>
        <definition>led_api_set_brightness</definition>
        <argsstring>)(const struct device *dev, uint32_t led, uint8_t value)</argsstring>
        <name>led_api_set_brightness</name>
        <briefdescription>
<para>Callback API for setting brightness of an LED. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__led__interface_1gaca479fd77518331f4fc84f788e345882" kindref="member">led_set_brightness()</ref> for argument descriptions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/led.h" line="70" column="9" bodyfile="include/drivers/led.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__led__interface_1ga0155c0b5443464f82cd0b42ec01b1e42" prot="public" static="no">
        <type>int(*</type>
        <definition>led_api_set_color</definition>
        <argsstring>)(const struct device *dev, uint32_t led, uint8_t num_colors, const uint8_t *color)</argsstring>
        <name>led_api_set_color</name>
        <briefdescription>
<para>Optional API callback to set the colors of a LED. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__led__interface_1ga94dd46cc96f6ade5cebaa46a5f7ca5ea" kindref="member">led_set_color()</ref> for argument descriptions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/led.h" line="78" column="9" bodyfile="include/drivers/led.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__led__interface_1gaacb8e7b119d8c46b88a0471fed1b2eaa" prot="public" static="no">
        <type>int(*</type>
        <definition>led_api_on</definition>
        <argsstring>)(const struct device *dev, uint32_t led)</argsstring>
        <name>led_api_on</name>
        <briefdescription>
<para>Callback API for turning on an LED. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__led__interface_1gad4daafd7fcab22d1d68745b7264d0f73" kindref="member">led_on()</ref> for argument descriptions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/led.h" line="87" column="9" bodyfile="include/drivers/led.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__led__interface_1ga1464c5e3de2e600c5dd4306e0ca8b6b9" prot="public" static="no">
        <type>int(*</type>
        <definition>led_api_off</definition>
        <argsstring>)(const struct device *dev, uint32_t led)</argsstring>
        <name>led_api_off</name>
        <briefdescription>
<para>Callback API for turning off an LED. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__led__interface_1ga22c9dbe76f06fec327aebe06448d1542" kindref="member">led_off()</ref> for argument descriptions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/led.h" line="95" column="9" bodyfile="include/drivers/led.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__led__interface_1gabfaf97a50222d16129b0c5a7bf7741b8" prot="public" static="no">
        <type>int(*</type>
        <definition>led_api_write_channels</definition>
        <argsstring>)(const struct device *dev, uint32_t start_channel, uint32_t num_channels, const uint8_t *buf)</argsstring>
        <name>led_api_write_channels</name>
        <briefdescription>
<para>Callback API for writing a strip of LED channels. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__led__interface_1gabfaf97a50222d16129b0c5a7bf7741b8" kindref="member">led_api_write_channels()</ref> for arguments descriptions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/led.h" line="103" column="9" bodyfile="include/drivers/led.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__led__interface_1ga4f31fecd215e5597999be4d16b0d2dd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int led_blink</definition>
        <argsstring>(const struct device *dev, uint32_t led, uint32_t delay_on, uint32_t delay_off)</argsstring>
        <name>led_blink</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>led</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>delay_on</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>delay_off</declname>
        </param>
        <briefdescription>
<para>Blink an LED. </para>
        </briefdescription>
        <detaileddescription>
<para>This optional routine starts blinking a LED forever with the given time period.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>LED device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>led</parametername>
</parameternamelist>
<parameterdescription>
<para>LED number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay_on</parametername>
</parameternamelist>
<parameterdescription>
<para>Time period (in milliseconds) an LED should be ON </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay_off</parametername>
</parameternamelist>
<parameterdescription>
<para>Time period (in milliseconds) an LED should be OFF </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/led.h" line="135" column="6" declfile="include/drivers/led.h" declline="135" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__led__interface_1ga9925483b97073354f7be6b40aa2dad1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int led_get_info</definition>
        <argsstring>(const struct device *dev, uint32_t led, const struct led_info **info)</argsstring>
        <name>led_get_info</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>led</declname>
        </param>
        <param>
          <type>const struct <ref refid="structled__info" kindref="compound">led_info</ref> **</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Get LED information. </para>
        </briefdescription>
        <detaileddescription>
<para>This optional routine provides information about a LED.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>LED device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>led</parametername>
</parameternamelist>
<parameterdescription>
<para>LED number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pointer filled with LED information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/led.h" line="160" column="6" declfile="include/drivers/led.h" declline="160" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__led__interface_1gaca479fd77518331f4fc84f788e345882" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int led_set_brightness</definition>
        <argsstring>(const struct device *dev, uint32_t led, uint8_t value)</argsstring>
        <name>led_set_brightness</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>led</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set LED brightness. </para>
        </briefdescription>
        <detaileddescription>
<para>This optional routine sets the brightness of a LED to the given value. Calling this function after <ref refid="group__led__interface_1ga4f31fecd215e5597999be4d16b0d2dd5" kindref="member">led_blink()</ref> won&apos;t affect blinking.</para>
<para>LEDs which can only be turned on or off may provide this function. These should simply turn the LED on if <computeroutput>value</computeroutput> is nonzero, and off if <computeroutput>value</computeroutput> is zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>LED device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>led</parametername>
</parameternamelist>
<parameterdescription>
<para>LED number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Brightness value to set in percent </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/led.h" line="191" column="6" declfile="include/drivers/led.h" declline="191" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__led__interface_1ga24d4007f81483d0fe8b9988288adf59a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int led_write_channels</definition>
        <argsstring>(const struct device *dev, uint32_t start_channel, uint32_t num_channels, const uint8_t *buf)</argsstring>
        <name>led_write_channels</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>start_channel</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_channels</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Write/update a strip of LED channels. </para>
        </briefdescription>
        <detaileddescription>
<para>This optional routine writes a strip of LED channels to the given array of levels. Therefore it can be used to configure several LEDs at the same time.</para>
<para>Calling this function after <ref refid="group__led__interface_1ga4f31fecd215e5597999be4d16b0d2dd5" kindref="member">led_blink()</ref> won&apos;t affect blinking.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>LED device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Absolute number (i.e. not relative to a LED) of the first channel to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_channels</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of channels to write/update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>array of values to configure the channels with. num_channels entries must be provided. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/led.h" line="223" column="6" declfile="include/drivers/led.h" declline="223" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__led__interface_1ga717bdbe76331b6286c58feb6e3e214dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int led_set_channel</definition>
        <argsstring>(const struct device *dev, uint32_t channel, uint8_t value)</argsstring>
        <name>led_set_channel</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set a single LED channel. </para>
        </briefdescription>
        <detaileddescription>
<para>This optional routine sets a single LED channel to the given value.</para>
<para>Calling this function after <ref refid="group__led__interface_1ga4f31fecd215e5597999be4d16b0d2dd5" kindref="member">led_blink()</ref> won&apos;t affect blinking.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>LED device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Absolute channel number (i.e. not relative to a LED) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to configure the channel with </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/led.h" line="252" column="6" declfile="include/drivers/led.h" declline="252" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__led__interface_1ga94dd46cc96f6ade5cebaa46a5f7ca5ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int led_set_color</definition>
        <argsstring>(const struct device *dev, uint32_t led, uint8_t num_colors, const uint8_t *color)</argsstring>
        <name>led_set_color</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>led</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>num_colors</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set LED color. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine configures all the color channels of a LED with the given color array.</para>
<para>Calling this function after <ref refid="group__led__interface_1ga4f31fecd215e5597999be4d16b0d2dd5" kindref="member">led_blink()</ref> won&apos;t affect blinking.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>LED device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>led</parametername>
</parameternamelist>
<parameterdescription>
<para>LED number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_colors</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of colors in the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of colors. It must be ordered following the color mapping of the LED controller. See the the color_mapping member in struct <ref refid="structled__info" kindref="compound">led_info</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/led.h" line="277" column="6" declfile="include/drivers/led.h" declline="277" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__led__interface_1gad4daafd7fcab22d1d68745b7264d0f73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int led_on</definition>
        <argsstring>(const struct device *dev, uint32_t led)</argsstring>
        <name>led_on</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>led</declname>
        </param>
        <briefdescription>
<para>Turn on an LED. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine turns on an LED</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>LED device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>led</parametername>
</parameternamelist>
<parameterdescription>
<para>LED number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/led.h" line="301" column="6" declfile="include/drivers/led.h" declline="301" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__led__interface_1ga22c9dbe76f06fec327aebe06448d1542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int led_off</definition>
        <argsstring>(const struct device *dev, uint32_t led)</argsstring>
        <name>led_off</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>led</declname>
        </param>
        <briefdescription>
<para>Turn off an LED. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine turns off an LED</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>LED device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>led</parametername>
</parameternamelist>
<parameterdescription>
<para>LED number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/led.h" line="320" column="6" declfile="include/drivers/led.h" declline="320" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>LED Interface. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
