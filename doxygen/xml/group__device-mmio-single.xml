<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__device-mmio-single" kind="group">
    <compoundname>device-mmio-single</compoundname>
    <title>Single MMIO region macros</title>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__device-mmio-single_1ga47e037f86108c8da12d8a9b9a35e6ad5" prot="public" static="no">
        <name>DEVICE_MMIO_RAM</name>
        <initializer><ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref> _mmio</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Declare storage for MMIO information within a device&apos;s dev_data struct.</para>
<para>This gets accessed by the <ref refid="group__device-mmio-single_1ga8e15770c4ec118edbefc1ef95f1ace80" kindref="member">DEVICE_MMIO_MAP()</ref> and <ref refid="group__device-mmio-single_1ga8cb49d87ef6dc3b017d5b68860530b63" kindref="member">DEVICE_MMIO_GET()</ref> macros.</para>
<para>Depending on configuration, no memory may be reserved at all. This must be the first member of the data struct.</para>
<para>There must be a corresponding DEVICE_MMIO_ROM in config_info if the physical address is known at build time, but may be omitted if not (such as with PCIe)</para>
<para>Example for a driver named &quot;foo&quot;:</para>
<para>struct foo_driver_data { DEVICE_MMIO_RAM; int wibble; ... }</para>
<para>No build-time initialization of this memory is necessary; it will be set up in the init function by <ref refid="group__device-mmio-single_1ga8e15770c4ec118edbefc1ef95f1ace80" kindref="member">DEVICE_MMIO_MAP()</ref>.</para>
<para>A pointer to this memory may be obtained with <ref refid="group__device-mmio-single_1ga63f871dc2ec4c89839a1782e86e292bf" kindref="member">DEVICE_MMIO_RAM_PTR()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="157" column="9" bodyfile="include/sys/device_mmio.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-single_1ga63f871dc2ec4c89839a1782e86e292bf" prot="public" static="no">
        <name>DEVICE_MMIO_RAM_PTR</name>
        <param><defname>device</defname></param>
        <initializer>(<ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref> *)((<ref refid="structdevice" kindref="compound">device</ref>)-&gt;<ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a pointer to the RAM-based storage area for a device&apos;s MMIO address.</para>
<para>This is useful for the target MMIO address location when using <ref refid="group__device-mmio_1ga6b4a9841a5176104e1b63f7475d3d2a2" kindref="member">device_map()</ref> directly.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>device node_id object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>mm_reg_t</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to storage location </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="175" column="9" bodyfile="include/sys/device_mmio.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-single_1ga1dfb620f6b3c7ee9b2bc54044d0bc875" prot="public" static="no">
        <name>DEVICE_MMIO_ROM</name>
        <initializer>struct z_device_mmio_rom _mmio</initializer>
        <briefdescription>
<para>Declare storage for MMIO data within a device&apos;s config struct. </para>
        </briefdescription>
        <detaileddescription>
<para>This gets accessed by <ref refid="group__device-mmio-single_1ga8e15770c4ec118edbefc1ef95f1ace80" kindref="member">DEVICE_MMIO_MAP()</ref> and <ref refid="group__device-mmio-single_1ga8cb49d87ef6dc3b017d5b68860530b63" kindref="member">DEVICE_MMIO_GET()</ref> macros.</para>
<para>What gets stored here varies considerably by configuration. This must be the first member of the config struct. There must be a corresponding DEVICE_MMIO_RAM in data.</para>
<para>This storage is not used if the device is PCIe and may be omitted.</para>
<para>This should be initialized at build time with information from DTS using <ref refid="group__device-mmio-single_1ga023516c60725f8c6d62110f74af22549" kindref="member">DEVICE_MMIO_ROM_INIT()</ref>.</para>
<para>A pointer to this memory may be obtained with <ref refid="group__device-mmio-single_1ga6246f4c8bc1542d8960d3bda99a592e5" kindref="member">DEVICE_MMIO_ROM_PTR()</ref>.</para>
<para>Example for a driver named &quot;foo&quot;:</para>
<para>struct foo_config { DEVICE_MMIO_ROM; int baz; ... }</para>
<para><simplesect kind="see"><para><ref refid="group__device-mmio-single_1ga023516c60725f8c6d62110f74af22549" kindref="member">DEVICE_MMIO_ROM_INIT()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="206" column="9" bodyfile="include/sys/device_mmio.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-single_1ga6246f4c8bc1542d8960d3bda99a592e5" prot="public" static="no">
        <name>DEVICE_MMIO_ROM_PTR</name>
        <param><defname>dev</defname></param>
        <initializer>	((struct z_device_mmio_rom *)((dev)-&gt;config))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a pointer to the ROM-based storage area for a device&apos;s MMIO information. This macro will not work properly if the ROM storage was omitted from the config struct declaration, and should not be used in this case.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>device instance object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>struct</parametername>
</parameternamelist>
<parameterdescription>
<para>device_mmio_rom * pointer to storage location </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="219" column="9" bodyfile="include/sys/device_mmio.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-single_1ga023516c60725f8c6d62110f74af22549" prot="public" static="no">
        <name>DEVICE_MMIO_ROM_INIT</name>
        <param><defname>node_id</defname></param>
        <initializer>	._mmio = Z_DEVICE_MMIO_ROM_INITIALIZER(node_id)</initializer>
        <briefdescription>
<para>Initialize a DEVICE_MMIO_ROM member. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize MMIO-related information within a specific instance of a device config struct, using information from DTS.</para>
<para>Example for a driver belonging to the &quot;foo&quot; subsystem:</para>
<para>struct foo_config my_config = { <ref refid="group__device-mmio-single_1ga023516c60725f8c6d62110f74af22549" kindref="member">DEVICE_MMIO_ROM_INIT(DT_DRV_INST(...))</ref>, .baz = 2; ... }</para>
<para><simplesect kind="see"><para><ref refid="group__device-mmio-single_1ga1dfb620f6b3c7ee9b2bc54044d0bc875" kindref="member">DEVICE_MMIO_ROM()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>DTS node_id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="242" column="9" bodyfile="include/sys/device_mmio.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-single_1ga8e15770c4ec118edbefc1ef95f1ace80" prot="public" static="no">
        <name>DEVICE_MMIO_MAP</name>
        <param><defname>dev</defname></param>
        <param><defname>flags</defname></param>
        <initializer>	<ref refid="group__device-mmio_1ga6b4a9841a5176104e1b63f7475d3d2a2" kindref="member">device_map</ref>(<ref refid="group__device-mmio-single_1ga63f871dc2ec4c89839a1782e86e292bf" kindref="member">DEVICE_MMIO_RAM_PTR</ref>(dev), \
		   <ref refid="group__device-mmio-single_1ga6246f4c8bc1542d8960d3bda99a592e5" kindref="member">DEVICE_MMIO_ROM_PTR</ref>(dev)-&gt;phys_addr, \
		   <ref refid="group__device-mmio-single_1ga6246f4c8bc1542d8960d3bda99a592e5" kindref="member">DEVICE_MMIO_ROM_PTR</ref>(dev)-&gt;size, \
		   (<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>))</initializer>
        <briefdescription>
<para>Map MMIO memory into the address space. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not intended for PCIe devices; these must be probed at runtime and you will want to make a <ref refid="group__device-mmio_1ga6b4a9841a5176104e1b63f7475d3d2a2" kindref="member">device_map()</ref> call directly, using <ref refid="group__device-mmio-single_1ga63f871dc2ec4c89839a1782e86e292bf" kindref="member">DEVICE_MMIO_RAM_PTR()</ref> as the target virtual address location.</para>
<para>The flags argument is currently used for caching mode, which should be one of the DEVICE_CACHE_* macros. Unused bits are reserved for future expansion.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device object instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>cache mode flags </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="262" column="9" bodyfile="include/sys/device_mmio.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-single_1ga8cb49d87ef6dc3b017d5b68860530b63" prot="public" static="no">
        <name>DEVICE_MMIO_GET</name>
        <param><defname>dev</defname></param>
        <initializer>(*<ref refid="group__device-mmio-single_1ga63f871dc2ec4c89839a1782e86e292bf" kindref="member">DEVICE_MMIO_RAM_PTR</ref>(dev))</initializer>
        <briefdescription>
<para>Obtain the MMIO address for a device. </para>
        </briefdescription>
        <detaileddescription>
<para>For most microcontrollers MMIO addresses can be fixed values known at build time, and we can store this in device-&gt;config, residing in ROM.</para>
<para>However, some devices can only know their MMIO addresses at runtime, because they need to be memory-mapped into the address space, enumerated from PCI, or both.</para>
<para>This macro returns the linear address of the driver&apos;s MMIO region. This is for drivers which have exactly one MMIO region. A call must have been made to <ref refid="group__device-mmio_1ga6b4a9841a5176104e1b63f7475d3d2a2" kindref="member">device_map()</ref> in the driver init function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>mm_reg_t linear address of the MMIO region </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="291" column="9" bodyfile="include/sys/device_mmio.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>For drivers which need to manage just one MMIO region, the most common case. </para>
    </detaileddescription>
  </compounddef>
</doxygen>
