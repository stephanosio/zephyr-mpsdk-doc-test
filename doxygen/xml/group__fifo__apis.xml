<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__fifo__apis" kind="group">
    <compoundname>fifo_apis</compoundname>
    <title>FIFO APIs</title>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__fifo__apis_1gaeebf6ef54d4be61e19408f44a734a159" prot="public" static="no">
        <name>k_fifo_init</name>
        <param><defname>fifo</defname></param>
        <initializer>	({ \
	<ref refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_ENTER</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, init, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>); \
	<ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>)-&gt;_queue); \
	<ref refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_EXIT</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, init, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>); \
	})</initializer>
        <briefdescription>
<para>Initialize a FIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a FIFO queue, prior to its first use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the FIFO queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2145" column="9" bodyfile="include/kernel.h" bodystart="2145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fifo__apis_1gab744080af449e093df8dd4982e013e16" prot="public" static="no">
        <name>k_fifo_cancel_wait</name>
        <param><defname>fifo</defname></param>
        <initializer>	({ \
	<ref refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_ENTER</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, cancel_wait, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>); \
	<ref refid="group__queue__apis_1ga7c39d86cc6509f59ff9223cac3ea5071" kindref="member">k_queue_cancel_wait</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>)-&gt;_queue); \
	<ref refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_EXIT</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, cancel_wait, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>); \
	})</initializer>
        <briefdescription>
<para>Cancel waiting on a FIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine causes first thread pending on <emphasis>fifo</emphasis>, if any, to return from <ref refid="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" kindref="member">k_fifo_get()</ref> call with NULL value (as if timeout expired).</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the FIFO queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2163" column="9" bodyfile="include/kernel.h" bodystart="2163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fifo__apis_1ga3addb10f86f19e245c23362433d5c913" prot="public" static="no">
        <name>k_fifo_put</name>
        <param><defname>fifo</defname></param>
        <param><defname>data</defname></param>
        <initializer>	({ \
	<ref refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_ENTER</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, put, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>); \
	<ref refid="group__queue__apis_1gaa84522a5ace6e7f8ba61033baca6972f" kindref="member">k_queue_append</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>)-&gt;_queue, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>); \
	<ref refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_EXIT</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, put, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>); \
	})</initializer>
        <briefdescription>
<para>Add an element to a FIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine adds a data item to <emphasis>fifo</emphasis>. A FIFO data item must be aligned on a word boundary, and the first word of the item is reserved for the kernel&apos;s use.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the FIFO. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data item. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2182" column="9" bodyfile="include/kernel.h" bodystart="2182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fifo__apis_1gab1c5212040d12cbb92cede5cf54928ba" prot="public" static="no">
        <name>k_fifo_alloc_put</name>
        <param><defname>fifo</defname></param>
        <param><defname>data</defname></param>
        <initializer>	({ \
	<ref refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_ENTER</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, alloc_put, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>); \
	int <ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref> = <ref refid="group__queue__apis_1ga690f3a1450e946d75f31b3e499d1d06a" kindref="member">k_queue_alloc_append</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>)-&gt;_queue, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>); \
	<ref refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_EXIT</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, alloc_put, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>, <ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>); \
	<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>; \
	})</initializer>
        <briefdescription>
<para>Add an element to a FIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine adds a data item to <emphasis>fifo</emphasis>. There is an implicit memory allocation to create an additional temporary bookkeeping data structure from the calling thread&apos;s resource pool, which is automatically freed when the item is removed. The data itself is not copied.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the FIFO. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>if there isn&apos;t sufficient RAM in the caller&apos;s resource pool </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2205" column="9" bodyfile="include/kernel.h" bodystart="2205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fifo__apis_1ga1bf5f52290c83e54ba14358cbbb4051b" prot="public" static="no">
        <name>k_fifo_put_list</name>
        <param><defname>fifo</defname></param>
        <param><defname>head</defname></param>
        <param><defname>tail</defname></param>
        <initializer>	({ \
	<ref refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_ENTER</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, put_list, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, head, tail); \
	<ref refid="group__queue__apis_1ga91d1a144fc2aeb3dd655accc94ca43aa" kindref="member">k_queue_append_list</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>)-&gt;_queue, head, tail); \
	<ref refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_EXIT</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, put_list, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, head, tail); \
	})</initializer>
        <briefdescription>
<para>Atomically add a list of elements to a FIFO. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine adds a list of data items to <emphasis>fifo</emphasis> in one operation. The data items must be in a singly-linked list, with the first word of each data item pointing to the next data item; the list must be NULL-terminated.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the FIFO queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to first node in singly-linked list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tail</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to last node in singly-linked list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2227" column="9" bodyfile="include/kernel.h" bodystart="2227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fifo__apis_1ga4cdc286a7a6f0d43acab63a4846815e7" prot="public" static="no">
        <name>k_fifo_put_slist</name>
        <param><defname>fifo</defname></param>
        <param><defname>list</defname></param>
        <initializer>	({ \
	<ref refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_ENTER</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, put_slist, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, list); \
	<ref refid="group__queue__apis_1ga4eee0da7442d60572b05d60a9996e69d" kindref="member">k_queue_merge_slist</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>)-&gt;_queue, list); \
	<ref refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_EXIT</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, put_slist, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, list); \
	})</initializer>
        <briefdescription>
<para>Atomically add a list of elements to a FIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine adds a list of data items to <emphasis>fifo</emphasis> in one operation. The data items must be in a singly-linked list implemented using a sys_slist_t object. Upon completion, the sys_slist_t object is invalid and must be re-initialized via <ref refid="group__single-linked-list__apis_1ga913aea7661b4ab3b4b50a8efc0d70428" kindref="member">sys_slist_init()</ref>.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the FIFO queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to sys_slist_t object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2247" column="9" bodyfile="include/kernel.h" bodystart="2247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" prot="public" static="no">
        <name>k_fifo_get</name>
        <param><defname>fifo</defname></param>
        <param><defname>timeout</defname></param>
        <initializer>	({ \
	<ref refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_ENTER</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, get, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, <ref refid="timer_2cycle64_2src_2main_8c_1a8f4b69a82b00d7baf3f1f7d480bb7fa0" kindref="member">timeout</ref>); \
	void *<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref> = <ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>)-&gt;_queue, <ref refid="timer_2cycle64_2src_2main_8c_1a8f4b69a82b00d7baf3f1f7d480bb7fa0" kindref="member">timeout</ref>); \
	<ref refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_EXIT</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, get, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, <ref refid="timer_2cycle64_2src_2main_8c_1a8f4b69a82b00d7baf3f1f7d480bb7fa0" kindref="member">timeout</ref>, <ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>); \
	<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>; \
	})</initializer>
        <briefdescription>
<para>Get an element from a FIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine removes a data item from <emphasis>fifo</emphasis> in a &quot;first in, first out&quot; manner. The first word of the data item is reserved for the kernel&apos;s use.</para>
<para><simplesect kind="note"><para><emphasis>timeout</emphasis> must be set to K_NO_WAIT if called from ISR.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the FIFO queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period to obtain a data item, or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the data item if successful; NULL if returned without waiting, or waiting period timed out. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2271" column="9" bodyfile="include/kernel.h" bodystart="2271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fifo__apis_1gab7cec4adc128ed1fd2d194ba6cd8c640" prot="public" static="no">
        <name>k_fifo_is_empty</name>
        <param><defname>fifo</defname></param>
        <initializer>	<ref refid="group__queue__apis_1gadb2bb8088868b3c5801c72b320389ca9" kindref="member">k_queue_is_empty</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>)-&gt;_queue)</initializer>
        <briefdescription>
<para>Query a FIFO queue to see if it has data available. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the data might be already gone by the time this function returns if other threads is also trying to read from the FIFO.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the FIFO queue.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero if the FIFO queue is empty. </para>
</simplesect>
<simplesect kind="return"><para>0 if data is available. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2292" column="9" bodyfile="include/kernel.h" bodystart="2292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fifo__apis_1ga2e0c8608f095a929740fa94c94a4f389" prot="public" static="no">
        <name>k_fifo_peek_head</name>
        <param><defname>fifo</defname></param>
        <initializer>	({ \
	<ref refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_ENTER</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, peek_head, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>); \
	void *<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref> = <ref refid="group__queue__apis_1ga8ccd5137690c127a0f7d67619b88a52b" kindref="member">k_queue_peek_head</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>)-&gt;_queue); \
	<ref refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_EXIT</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, peek_head, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, <ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>); \
	<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>; \
	})</initializer>
        <briefdescription>
<para>Peek element at the head of a FIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>Return element from the head of FIFO queue without removing it. A usecase for this is if elements of the FIFO object are themselves containers. Then on each iteration of processing, a head container will be peeked, and some data processed out of it, and only if the container is empty, it will be completely remove from the FIFO queue.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the FIFO queue.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Head element, or NULL if the FIFO queue is empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2308" column="9" bodyfile="include/kernel.h" bodystart="2308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fifo__apis_1gafbe2ce9a6437b886cf149016187ba92f" prot="public" static="no">
        <name>k_fifo_peek_tail</name>
        <param><defname>fifo</defname></param>
        <initializer>	({ \
	<ref refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_ENTER</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, peek_tail, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>); \
	void *<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref> = <ref refid="group__queue__apis_1ga27a460c42836d8b093ad9274c14bb176" kindref="member">k_queue_peek_tail</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>)-&gt;_queue); \
	<ref refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_EXIT</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, peek_tail, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, <ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>); \
	<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>; \
	})</initializer>
        <briefdescription>
<para>Peek element at the tail of FIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>Return element from the tail of FIFO queue (without removing it). A usecase for this is if elements of the FIFO queue are themselves containers. Then it may be useful to add more data to the last container in a FIFO queue.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the FIFO queue.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tail element, or NULL if a FIFO queue is empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2327" column="9" bodyfile="include/kernel.h" bodystart="2327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fifo__apis_1ga230b02a526ecb0ae1598be75cb9a8274" prot="public" static="no">
        <name>K_FIFO_DEFINE</name>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="group__iterable__section__apis_1ga66939b955ea98a204119a6d6c5661cca" kindref="member">STRUCT_SECTION_ITERABLE_ALTERNATE</ref>(k_queue, <ref refid="structk__fifo" kindref="compound">k_fifo</ref>, name) = \
		Z_FIFO_INITIALIZER(name)</initializer>
        <briefdescription>
<para>Statically define and initialize a FIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>The FIFO queue can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_fifo<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the FIFO queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2344" column="9" bodyfile="include/kernel.h" bodystart="2344" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
