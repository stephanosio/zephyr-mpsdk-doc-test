<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__kernel__memory__slab__tests" kind="group">
    <compoundname>kernel_memory_slab_tests</compoundname>
    <title>Memory Slab Tests</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__kernel__memory__slab__tests_1ga8f38866a1e45c2579bf2d05bfb6051b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mheap_threadsafe</definition>
        <argsstring>(void)</argsstring>
        <name>test_mheap_threadsafe</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify alloc from multiple equal priority threads. </para>
        </briefdescription>
        <detaileddescription>
<para>Test creates three preemptive threads of equal priority. In each child thread , call <ref refid="group__heap__apis_1gaa8edf1e63e5d5dd78d7adcfd787394ee" kindref="member">k_malloc()</ref> to alloc a block of memory. Check These four threads can share the same heap space without interfering with each other. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_concept.c" line="75" column="6" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_concept.c" bodystart="75" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__memory__slab__tests_1ga560c5f74ce61f9109a78c76ad1b7c4db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mslab</definition>
        <argsstring>(void)</argsstring>
        <name>test_mslab</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Main task to test memory slab interfaces. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify that system allows for the definitions of boot-time memory regions. This routine calls <ref refid="mem__slab_2mslab_2src_2main_8c_1aa1f719b33bc3fc8c291e2ea04f32a30e" kindref="member">test_slab_get_all_blocks()</ref> to get all memory blocks from the map and calls <ref refid="mem__slab_2mslab_2src_2main_8c_1a07285cb4571f19ce465dd7b0637f6aa4" kindref="member">test_slab_free_all_blocks()</ref> to free all memory blocks. It also tries to wait (with and without timeout) for a memory block.</para>
<para><simplesect kind="see"><para><ref refid="group__mem__slab__apis_1gab16a46d8394aca18de740ad044a8734a" kindref="member">k_mem_slab_alloc()</ref>, <ref refid="group__mem__slab__apis_1gac76b96d7055e4ad94765c93530dd0720" kindref="member">k_mem_slab_num_used_get()</ref>, <ref refid="string_8h_1a4137694174d4ca2fad886a1db355015c" kindref="member">memset()</ref>, <ref refid="group__mem__slab__apis_1ga97915aee5a59e19f8b28185eed93aac7" kindref="member">k_mem_slab_free()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_slab/mslab/src/main.c" line="210" column="6" bodyfile="tests/kernel/mem_slab/mslab/src/main.c" bodystart="210" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__memory__slab__tests_1ga119178edcc474fb7d5c1d33721780b83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mslab_kinit</definition>
        <argsstring>(void)</argsstring>
        <name>test_mslab_kinit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize the memory slab using <ref refid="group__mem__slab__apis_1ga094a8f173f287e29bb287119c26889d1" kindref="member">k_mem_slab_init()</ref> and allocates/frees blocks. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize 3 memory blocks of block size 8 bytes using <simplesect kind="see"><para><ref refid="group__mem__slab__apis_1ga094a8f173f287e29bb287119c26889d1" kindref="member">k_mem_slab_init()</ref> and check if number of used blocks is 0 and <ref refid="stdlib_8h_1afbedc913aa4651b3c3b4b3aecd9b4711" kindref="member">free</ref> blocks is equal to number of blocks initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_slab/mslab_api/src/test_mslab_api.c" line="190" column="6" bodyfile="tests/kernel/mem_slab/mslab_api/src/test_mslab_api.c" bodystart="190" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__memory__slab__tests_1ga8204f07df44a811cc62136d2977e0fca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mslab_kdefine</definition>
        <argsstring>(void)</argsstring>
        <name>test_mslab_kdefine</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify <ref refid="test__mslab__api_8c_1a67df826563fb3212d38113e56131b289" kindref="member">K_MEM_SLAB_DEFINE()</ref> with allocates/frees blocks. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize 3 memory blocks of block size 8 bytes using <simplesect kind="see"><para><ref refid="test__mslab__api_8c_1a67df826563fb3212d38113e56131b289" kindref="member">K_MEM_SLAB_DEFINE()</ref> and check if number of used blocks is 0 and <ref refid="stdlib_8h_1afbedc913aa4651b3c3b4b3aecd9b4711" kindref="member">free</ref> blocks is equal to number of blocks initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_slab/mslab_api/src/test_mslab_api.c" line="209" column="6" bodyfile="tests/kernel/mem_slab/mslab_api/src/test_mslab_api.c" bodystart="209" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__memory__slab__tests_1gad286e91e6183fcf4f33d5dd291c5c384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mslab_alloc_free_thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_mslab_alloc_free_thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify alloc and free of blocks from mem_slab. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_slab/mslab_api/src/test_mslab_api.c" line="220" column="6" bodyfile="tests/kernel/mem_slab/mslab_api/src/test_mslab_api.c" bodystart="220" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__memory__slab__tests_1gac03a1baa471add66003ca7cd4258cf3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mslab_alloc_align</definition>
        <argsstring>(void)</argsstring>
        <name>test_mslab_alloc_align</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Allocate memory blocks and check for alignment of 8 bytes. </para>
        </briefdescription>
        <detaileddescription>
<para>Allocate 3 blocks of memory from 2 memory slabs respectively and check if all blocks are aligned to 8 bytes and free them. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_slab/mslab_api/src/test_mslab_api.c" line="235" column="6" bodyfile="tests/kernel/mem_slab/mslab_api/src/test_mslab_api.c" bodystart="235" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__memory__slab__tests_1ga25d58f739a95d0ae6fa95d03eba0b3f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mslab_alloc_timeout</definition>
        <argsstring>(void)</argsstring>
        <name>test_mslab_alloc_timeout</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify allocation of memory blocks with timeouts. </para>
        </briefdescription>
        <detaileddescription>
<para>Allocate 3 memory blocks from memory slab. Check allocation of another memory block with NO_WAIT set, since there are no blocks left to allocate in the memory slab, the allocation fails with return value -ENOMEM. Then the system up time is obtained, memory block allocation is tried with timeout of 2000 ms. Now the allocation API returns -EAGAIN as the waiting period is timeout. The test case also checks if timeout has really happened by checking delta period between the allocation request was made and return of -EAGAIN. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_slab/mslab_api/src/test_mslab_api.c" line="257" column="6" bodyfile="tests/kernel/mem_slab/mslab_api/src/test_mslab_api.c" bodystart="257" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__memory__slab__tests_1ga52b74937511303e73307dc6e9f27c157" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mslab_used_get</definition>
        <argsstring>(void)</argsstring>
        <name>test_mslab_used_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify count of allocated blocks. </para>
        </briefdescription>
        <detaileddescription>
<para>The test case allocates 3 blocks one after the other by checking for used block and free blocks in the memory slab - mslab. Once all 3 blocks are allocated, one more block is tried to allocates, which fails with return value -ENOMEM. It also checks the allocation with timeout. Again checks for used block and free blocks number using <simplesect kind="see"><para><ref refid="group__mem__slab__apis_1gac76b96d7055e4ad94765c93530dd0720" kindref="member">k_mem_slab_num_used_get()</ref> and </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__mem__slab__apis_1gae87577e2873cf746db69216a82f94aea" kindref="member">k_mem_slab_num_free_get()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_slab/mslab_api/src/test_mslab_api.c" line="276" column="6" bodyfile="tests/kernel/mem_slab/mslab_api/src/test_mslab_api.c" bodystart="276" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__memory__slab__tests_1ga77591f868e9df6d59a85f4de0aa7fab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mslab_pending</definition>
        <argsstring>(void)</argsstring>
        <name>test_mslab_pending</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify pending of allocating blocks. </para>
        </briefdescription>
        <detaileddescription>
<para>First, helper thread got all memory blocks, and there is no free block left. <ref refid="group__mem__slab__apis_1gab16a46d8394aca18de740ad044a8734a" kindref="member">k_mem_slab_alloc()</ref> with time out will fail and return -EAGAIN. Then <ref refid="group__mem__slab__apis_1gab16a46d8394aca18de740ad044a8734a" kindref="member">k_mem_slab_alloc()</ref> without timeout tries to wait for a memory block until helper thread free one. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_slab/mslab_api/src/test_mslab_api.c" line="293" column="6" bodyfile="tests/kernel/mem_slab/mslab_api/src/test_mslab_api.c" bodystart="293" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__memory__slab__tests_1ga512d1ead2072c0a9abd990eb29aa0745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mslab_kdefine_extern</definition>
        <argsstring>(void)</argsstring>
        <name>test_mslab_kdefine_extern</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test mem_slab access outside the module. </para>
        </briefdescription>
        <detaileddescription>
<para>The memory slab can be accessed outside the module where it is defined using: <programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_mem_slab<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_slab/mslab_api/src/test_mslab_extern.c" line="22" column="6" bodyfile="tests/kernel/mem_slab/mslab_api/src/test_mslab_extern.c" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__memory__slab__tests_1gac0984a2204c92a4254c5c2c16079dd91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mslab_alloc_wait_prio</definition>
        <argsstring>(void)</argsstring>
        <name>test_mslab_alloc_wait_prio</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify alloc with multiple threads. </para>
        </briefdescription>
        <detaileddescription>
<para>The test allocates all blocks of memory slab and then spawns 3 threads with lowest priority and 2 more with same priority higher than first thread with delay 10ms and 20ms. Checks the behavior of alloc when requested by multiple threads</para>
<para><simplesect kind="see"><para><ref refid="group__mem__slab__apis_1gab16a46d8394aca18de740ad044a8734a" kindref="member">k_mem_slab_alloc()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__mem__slab__apis_1ga97915aee5a59e19f8b28185eed93aac7" kindref="member">k_mem_slab_free()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: Any number of threads may wait on an empty memory slab simultaneously; when a memory block becomes available, it is given to the highest-priority thread that has waited the longest.</para>
<para>TESTPOINT: If all the blocks are currently in use, a thread can optionally wait for one to become available.</para>
        </inbodydescription>
        <location file="tests/kernel/mem_slab/mslab_concept/src/test_mslab_alloc_wait.c" line="51" column="6" bodyfile="tests/kernel/mem_slab/mslab_concept/src/test_mslab_alloc_wait.c" bodystart="51" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__memory__slab__tests_1ga58d6a9fba99ee0e71ee19e7852faf421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mslab_threadsafe</definition>
        <argsstring>(void)</argsstring>
        <name>test_mslab_threadsafe</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify alloc and free from multiple equal priority threads. </para>
        </briefdescription>
        <detaileddescription>
<para>Test creates 4 preemptive threads of equal priority. Then validates the synchronization of threads by allocating and freeing up the memory blocks in memory slab. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_slab/mslab_threadsafe/src/test_mslab_threadsafe.c" line="74" column="6" bodyfile="tests/kernel/mem_slab/mslab_threadsafe/src/test_mslab_threadsafe.c" bodystart="74" bodyend="94"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Test memory slab APIs. </para>
    </briefdescription>
    <detaileddescription>
<para>This module tests the following memory slab routines: <verbatim>k_mem_slab_alloc
k_mem_slab_free
k_mem_slab_num_used_get
</verbatim> <simplesect kind="note"><para>One should ensure that the block is released to the same memory slab from which it was allocated, and is only released once. Using an invalid pointer will have unpredictable side effects. </para>
</simplesect>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
