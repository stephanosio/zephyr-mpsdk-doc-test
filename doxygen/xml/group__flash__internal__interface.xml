<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__flash__internal__interface" kind="group">
    <compoundname>flash_internal_interface</compoundname>
    <title>FLASH internal Interface</title>
    <innerclass refid="structflash__pages__layout" prot="public">flash_pages_layout</innerclass>
    <innerclass refid="structflash__driver__api" prot="public">flash_driver_api</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__flash__internal__interface_1ga358404d040b7ef30c8d24106e97bc290" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* flash_api_read) (const struct device *dev, off_t offset, void *data, size_t len)</definition>
        <argsstring>)(const struct device *dev, off_t offset, void *data, size_t len)</argsstring>
        <name>flash_api_read</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="69" column="9" bodyfile="include/drivers/flash.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flash__internal__interface_1gaf6b0c3aa2b6514ac8936aa0c7fda96ba" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* flash_api_write) (const struct device *dev, off_t offset, const void *data, size_t len)</definition>
        <argsstring>)(const struct device *dev, off_t offset, const void *data, size_t len)</argsstring>
        <name>flash_api_write</name>
        <briefdescription>
<para>Flash write implementation handler type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Any necessary write protection management must be performed by the driver, with the driver responsible for ensuring the &quot;write-protect&quot; after the operation completes (successfully or not) matches the write-protect state when the operation was started. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="80" column="9" bodyfile="include/drivers/flash.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flash__internal__interface_1ga2178a2338e652396ba9811ca449f4cb5" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* flash_api_erase) (const struct device *dev, off_t offset, size_t size)</definition>
        <argsstring>)(const struct device *dev, off_t offset, size_t size)</argsstring>
        <name>flash_api_erase</name>
        <briefdescription>
<para>Flash erase implementation handler type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Any necessary erase protection management must be performed by the driver, with the driver responsible for ensuring the &quot;erase-protect&quot; after the operation completes (successfully or not) matches the erase-protect state when the operation was started. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="91" column="9" bodyfile="include/drivers/flash.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flash__internal__interface_1ga2dee3874cb1be4ef4dab599963c30e70" prot="public" static="no">
        <type>const struct <ref refid="structflash__parameters" kindref="compound">flash_parameters</ref> *(*</type>
        <definition>typedef const struct flash_parameters *(* flash_api_get_parameters) (const struct device *dev)</definition>
        <argsstring>)(const struct device *dev)</argsstring>
        <name>flash_api_get_parameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="91" column="9" bodyfile="include/drivers/flash.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flash__internal__interface_1ga7576411536217c9ec3e167e7a5ca82a5" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* flash_api_pages_layout) (const struct device *dev, const struct flash_pages_layout **layout, size_t *layout_size)</definition>
        <argsstring>)(const struct device *dev, const struct flash_pages_layout **layout, size_t *layout_size)</argsstring>
        <name>flash_api_pages_layout</name>
        <briefdescription>
<para>Retrieve a flash device&apos;s layout. </para>
        </briefdescription>
        <detaileddescription>
<para>A flash device layout is a run-length encoded description of the pages on the device. (Here, &quot;page&quot; means the smallest erasable area on the flash device.)</para>
<para>For flash memories which have uniform page sizes, this routine returns an array of length 1, which specifies the page size and number of pages in the memory.</para>
<para>Layouts for flash memories with nonuniform page sizes will be returned as an array with multiple elements, each of which describes a group of pages that all have the same size. In this case, the sequence of array elements specifies the order in which these groups occur on the device.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Flash device whose layout to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layout</parametername>
</parameternamelist>
<parameterdescription>
<para>The flash layout will be returned in this argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layout_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements in the returned layout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="118" column="9" bodyfile="include/drivers/flash.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flash__internal__interface_1gac7b802015885044df6a1872513b89ab5" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* flash_api_sfdp_read) (const struct device *dev, off_t offset, void *data, size_t len)</definition>
        <argsstring>)(const struct device *dev, off_t offset, void *data, size_t len)</argsstring>
        <name>flash_api_sfdp_read</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="123" column="9" bodyfile="include/drivers/flash.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flash__internal__interface_1ga088369ef7593aa7c1fbe4cdad6e5b994" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* flash_api_read_jedec_id) (const struct device *dev, uint8_t *id)</definition>
        <argsstring>)(const struct device *dev, uint8_t *id)</argsstring>
        <name>flash_api_read_jedec_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="125" column="9" bodyfile="include/drivers/flash.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>FLASH internal Interface. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
