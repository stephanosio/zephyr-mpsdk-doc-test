<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__subsys__pm__sys" kind="group">
    <compoundname>subsys_pm_sys</compoundname>
    <title>System</title>
    <innerclass refid="structpm__notifier" prot="public">pm_notifier</innerclass>
    <innergroup refid="group__subsys__pm__sys__constraint">Constraints</innergroup>
    <innergroup refid="group__subsys__pm__sys__hooks">Hooks</innergroup>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__subsys__pm__sys_1ga5c22778e2981505a833e8fc9067e1667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool pm_power_state_force</definition>
        <argsstring>(uint8_t cpu, struct pm_state_info info)</argsstring>
        <name>pm_power_state_force</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>cpu</declname>
        </param>
        <param>
          <type>struct <ref refid="structpm__state__info" kindref="compound">pm_state_info</ref></type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Force usage of given power state. </para>
        </briefdescription>
        <detaileddescription>
<para>This function overrides decision made by PM policy forcing usage of given power state upon next entry of the idle thread.</para>
<para><simplesect kind="note"><para>This function can only run in thread context</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpu</parametername>
</parameternamelist>
<parameterdescription>
<para>CPU index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Power state which should be used in the ongoing suspend operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/pm.h" line="80" column="6" declfile="include/pm/pm.h" declline="80" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__sys_1ga066945118b8f287ee56aacf41b677a78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pm_notifier_register</definition>
        <argsstring>(struct pm_notifier *notifier)</argsstring>
        <name>pm_notifier_register</name>
        <param>
          <type>struct <ref refid="structpm__notifier" kindref="compound">pm_notifier</ref> *</type>
          <declname>notifier</declname>
        </param>
        <briefdescription>
<para>Register a power management notifier. </para>
        </briefdescription>
        <detaileddescription>
<para>Register the given notifier from the power management notification list.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notifier</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpm__notifier" kindref="compound">pm_notifier</ref> object to be registered. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/pm.h" line="90" column="6" declfile="include/pm/pm.h" declline="90" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__sys_1gab0856d662e50a3847a1b70cb8370849a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pm_notifier_unregister</definition>
        <argsstring>(struct pm_notifier *notifier)</argsstring>
        <name>pm_notifier_unregister</name>
        <param>
          <type>struct <ref refid="structpm__notifier" kindref="compound">pm_notifier</ref> *</type>
          <declname>notifier</declname>
        </param>
        <briefdescription>
<para>Unregister a power management notifier. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove the given notifier from the power management notification list. After that this object callbacks will not be called.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notifier</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structpm__notifier" kindref="compound">pm_notifier</ref> object to be unregistered.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the notifier was successfully removed, a negative value otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/pm.h" line="103" column="5" declfile="include/pm/pm.h" declline="103" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__sys_1ga9d244527bfaa67a9fbae4a5bbe1ab6bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structpm__state__info" kindref="compound">pm_state_info</ref></type>
        <definition>struct pm_state_info pm_power_state_next_get</definition>
        <argsstring>(uint8_t cpu)</argsstring>
        <name>pm_power_state_next_get</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Gets the next power state that will be used. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the next power state that will be used by the SoC.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpu</parametername>
</parameternamelist>
<parameterdescription>
<para>CPU index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>next <ref refid="structpm__state__info" kindref="compound">pm_state_info</ref> that will be used </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/pm.h" line="114" column="20" declfile="include/pm/pm.h" declline="114" declcolumn="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>System Power Management API. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
