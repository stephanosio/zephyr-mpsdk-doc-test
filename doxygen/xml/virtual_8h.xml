<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="virtual_8h" kind="file" language="C++">
    <compoundname>virtual.h</compoundname>
    <includes local="no">kernel.h</includes>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes refid="stdbool_8h" local="no">stdbool.h</includes>
    <includes refid="atomic_8h" local="no">sys/atomic.h</includes>
    <includes refid="net__ip_8h" local="no">net/net_ip.h</includes>
    <includes refid="net__pkt_8h" local="no">net/net_pkt.h</includes>
    <includes refid="util_8h" local="no">sys/util.h</includes>
    <includes refid="net__if_8h" local="no">net/net_if.h</includes>
    <includedby refid="virtual__mgmt_8h" local="no">include/net/virtual_mgmt.h</includedby>
    <incdepgraph>
      <node id="30">
        <label>logging/log.h</label>
        <link refid="log_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>logging/log_core.h</label>
        <link refid="include_2logging_2log__core_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>logging/log_instance.h</label>
        <link refid="log__instance_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>logging/log_msg.h</label>
        <link refid="log__msg_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>logging/log_msg2.h</label>
        <link refid="include_2logging_2log__msg2_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>net/buf.h</label>
        <link refid="net_2buf_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>net/capture.h</label>
        <link refid="capture_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>net/ethernet_vlan.h</label>
        <link refid="ethernet__vlan_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>net/hostname.h</label>
        <link refid="hostname_8h"/>
      </node>
      <node id="57">
        <label>net/net_context.h</label>
        <link refid="net__context_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>net/net_core.h</label>
        <link refid="net__core_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>net/net_event.h</label>
        <link refid="net__event_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>net/net_if.h</label>
        <link refid="net__if_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>net/net_ip.h</label>
        <link refid="net__ip_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>net/net_l2.h</label>
        <link refid="net__l2_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>net/net_linkaddr.h</label>
        <link refid="net__linkaddr_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>net/net_mgmt.h</label>
        <link refid="net__mgmt_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>net/net_pkt.h</label>
        <link refid="net__pkt_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>net/net_stats.h</label>
        <link refid="net__stats_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>net/net_timeout.h</label>
        <link refid="net__timeout_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>net/ptp_time.h</label>
        <link refid="ptp__time_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/net/virtual.h</label>
        <link refid="virtual_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="16">
        <label>sys/byteorder.h</label>
        <link refid="byteorder_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>sys/cbprintf.h</label>
        <link refid="cbprintf_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>sys/cbprintf_cxx.h</label>
        <link refid="cbprintf__cxx_8h"/>
      </node>
      <node id="38">
        <label>sys/cbprintf_internal.h</label>
        <link refid="cbprintf__internal_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>sys/mpsc_packet.h</label>
        <link refid="mpsc__packet_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="9">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="3">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="6">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="5">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="37">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>syscalls/log_core.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2log__core_8h"/>
      </node>
      <node id="41">
        <label>syscalls/log_msg2.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2log__msg2_8h"/>
      </node>
      <node id="40">
        <label>alloca.h</label>
      </node>
      <node id="49">
        <label>device.h</label>
      </node>
      <node id="2">
        <label>kernel.h</label>
      </node>
      <node id="19">
        <label>stdarg.h</label>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
      <node id="42">
        <label>syscall.h</label>
      </node>
      <node id="24">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="56">
        <label>syscalls/net_if.h</label>
      </node>
      <node id="25">
        <label>syscalls/net_ip.h</label>
      </node>
      <node id="28">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>include/net/virtual.h</label>
        <link refid="virtual_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/net/virtual_mgmt.h</label>
        <link refid="virtual__mgmt_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structvirtual__interface__api" prot="public">virtual_interface_api</innerclass>
    <innerclass refid="structvirtual__interface__context" prot="public">virtual_interface_context</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__virtual_1ga4c1e6f8afb017c6f9db3cf8f271554ca" prot="public" static="no">
        <name>NET_VIRTUAL_INTERFACE_INIT</name>
        <param><defname>dev_name</defname></param>
        <param><defname>drv_name</defname></param>
        <param><defname>init_fn</defname></param>
        <param><defname>pm_action_cb</defname></param>
        <param><defname>data</defname></param>
        <param><defname>cfg</defname></param>
        <param><defname>prio</defname></param>
        <param><defname>api</defname></param>
        <param><defname>mtu</defname></param>
        <initializer>	Z_NET_VIRTUAL_INTERFACE_INIT(<ref refid="group__devicetree-generic-id_1ga710cc4455dd7e738f43f750153163855" kindref="member">DT_INVALID_NODE</ref>, dev_name,		\
				     drv_name, init_fn, pm_action_cb,	\
				     <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>, cfg, prio, api, mtu)</initializer>
        <briefdescription>
<para>Create a virtual network interface. Binding to another interface is done at runtime by calling <ref refid="group__virtual_1ga5cba6ff65402b591a0e42d05f258671f" kindref="member">net_virtual_interface_attach()</ref>. The attaching is done automatically when setting up tunneling when peer IP address is set in IP tunneling driver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Network device name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>drv_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name this instance of the driver exposes to the system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to the init function of the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm_action_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to PM action callback. Can be NULL if not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s private data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>The address to the structure containing the configuration information for this instance of the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization level at which configuration occurs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>api</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides an initial pointer to the API function struct used by the driver. Can be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mtu</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum transfer unit in bytes for this network interface. This is the default value and its value can be tweaked at runtime. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/virtual.h" line="310" column="9" bodyfile="include/net/virtual.h" bodystart="308" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__virtual_1ga8f188f5c2f19960d7113da52aefe8091" prot="public" static="no" strong="no">
        <type></type>
        <name>virtual_interface_caps</name>
        <enumvalue id="group__virtual_1gga8f188f5c2f19960d7113da52aefe8091a097c314c36dc5f7129f1c8bb1e110071" prot="public">
          <name>VIRTUAL_INTERFACE_IPIP</name>
          <initializer>= BIT(1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IPIP tunnel </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Virtual interface capabilities </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/virtual.h" line="37" column="1" bodyfile="include/net/virtual.h" bodystart="37" bodyend="47"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__virtual_1ga5cba6ff65402b591a0e42d05f258671f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_virtual_interface_attach</definition>
        <argsstring>(struct net_if *virtual_iface, struct net_if *iface)</argsstring>
        <name>net_virtual_interface_attach</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>virtual_iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Attach virtual network interface to the given network interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>virtual_iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual network interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface we are attached to. This can be NULL, if we want to detach.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if attaching failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/virtual.h" line="165" column="5" declfile="include/net/virtual.h" declline="165" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__virtual_1gabadf14eaa02978cde7030c99ddd3e279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
        <definition>struct net_if * net_virtual_get_iface</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_virtual_get_iface</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Return network interface related to this virtual network interface. The returned network interface is below this virtual network interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual network interface.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Network interface related to this virtual interface or NULL if no such interface exists. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/virtual.h" line="177" column="13" declfile="include/net/virtual.h" declline="177" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__virtual_1gaa7ff8ebb83fe98a1dfd23f319317a8de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * net_virtual_get_name</definition>
        <argsstring>(struct net_if *iface, char *buf, size_t len)</argsstring>
        <name>net_virtual_get_name</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Return the name of the virtual network interface L2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual network interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Max buffer length</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Name of the virtual network interface. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/virtual.h" line="188" column="6" declfile="include/net/virtual.h" declline="188" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__virtual_1ga2aaba616ed4fecc27138d5aae58a634f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_virtual_set_name</definition>
        <argsstring>(struct net_if *iface, const char *name)</argsstring>
        <name>net_virtual_set_name</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Set the name of the virtual network interface L2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual network interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the virtual L2 layer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/virtual.h" line="196" column="6" declfile="include/net/virtual.h" declline="196" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__virtual_1ga30f92f519a6f204ebeccd6053f17eaf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="group__net__l2_1gac7db0cc6c56d371a5803873074ec2516" kindref="member">net_l2_flags</ref></type>
        <definition>enum net_l2_flags net_virtual_set_flags</definition>
        <argsstring>(struct net_if *iface, enum net_l2_flags flags)</argsstring>
        <name>net_virtual_set_flags</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>enum <ref refid="group__net__l2_1gac7db0cc6c56d371a5803873074ec2516" kindref="member">net_l2_flags</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Set the L2 flags of the virtual network interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual network interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>L2 flags to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous flags that were set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/virtual.h" line="206" column="18" declfile="include/net/virtual.h" declline="206" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__virtual_1ga6c63773925ef7d96b0ba03d8978fd499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="group__net__core_1ga8e5393f3bdd85491f221324e637c3896" kindref="member">net_verdict</ref></type>
        <definition>enum net_verdict net_virtual_input</definition>
        <argsstring>(struct net_if *input_iface, struct net_addr *remote_addr, struct net_pkt *pkt)</argsstring>
        <name>net_virtual_input</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>input_iface</declname>
        </param>
        <param>
          <type>struct net_addr *</type>
          <declname>remote_addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
<para>Feed the IP pkt to stack if tunneling is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface receiving the pkt. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remote_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IP address of the sender. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Network packet.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Verdict what to do with the packet. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/virtual.h" line="218" column="17" declfile="include/net/virtual.h" declline="218" declcolumn="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Virtual Network Interface. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2021<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_NET_VIRTUAL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_NET_VIRTUAL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdbool_8h" kindref="compound">stdbool.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="atomic_8h" kindref="compound">sys/atomic.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="net__ip_8h" kindref="compound">net/net_ip.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="net__pkt_8h" kindref="compound">net/net_pkt.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="util_8h" kindref="compound">sys/util.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="net__if_8h" kindref="compound">net/net_if.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="group__virtual_1ga8f188f5c2f19960d7113da52aefe8091" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__virtual_1ga8f188f5c2f19960d7113da52aefe8091" kindref="member">virtual_interface_caps</ref><sp/>{</highlight></codeline>
<codeline lineno="39" refid="group__virtual_1gga8f188f5c2f19960d7113da52aefe8091a097c314c36dc5f7129f1c8bb1e110071" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__virtual_1gga8f188f5c2f19960d7113da52aefe8091a097c314c36dc5f7129f1c8bb1e110071" kindref="member">VIRTUAL_INTERFACE_IPIP</ref><sp/>=<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(1),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Marker<sp/>for<sp/>capabilities<sp/>-<sp/>must<sp/>be<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>enum.</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>It<sp/>is<sp/>here<sp/>because<sp/>the<sp/>capability<sp/>list<sp/>cannot<sp/>be<sp/>empty.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIRTUAL_INTERFACE_NUM_CAPS</highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>virtual_interface_config_type<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIRTUAL_INTERFACE_CONFIG_TYPE_PEER_ADDRESS,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIRTUAL_INTERFACE_CONFIG_TYPE_MTU,</highlight></codeline>
<codeline lineno="54"><highlight class="normal">};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">virtual_interface_config<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref><sp/>family;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/>peer4addr;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>peer6addr;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mtu;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="63"><highlight class="normal">};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_NET_L2_VIRTUAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VIRTUAL_MAX_NAME_LEN<sp/>CONFIG_NET_L2_VIRTUAL_MAX_NAME_LEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VIRTUAL_MAX_NAME_LEN<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="structvirtual__interface__api" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvirtual__interface__api" kindref="compound">virtual_interface_api</ref><sp/>{</highlight></codeline>
<codeline lineno="77" refid="structvirtual__interface__api_1a827cd13d885b7cc2f80eddd73e438e07" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">net_if_api<sp/><ref refid="structvirtual__interface__api_1aee1250773938536ab28e129113073ae7" kindref="member">iface_api</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__virtual_1ga8f188f5c2f19960d7113da52aefe8091" kindref="member">virtual_interface_caps</ref><sp/>(*<ref refid="structvirtual__interface__api_1a827cd13d885b7cc2f80eddd73e438e07" kindref="member">get_capabilities</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="structvirtual__interface__api_1af28a6ed36799006d185fab9129c6c120" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structvirtual__interface__api_1af28a6ed36799006d185fab9129c6c120" kindref="member">start</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="structvirtual__interface__api_1a09a317009d31ac5e9340c3ca7d2191c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structvirtual__interface__api_1a09a317009d31ac5e9340c3ca7d2191c4" kindref="member">stop</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="structvirtual__interface__api_1a285f8f872420209107f73b6b268af7b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structvirtual__interface__api_1a6fbfa013374bbafaa610b0a054d3a415" kindref="member">send</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface,<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__pkt" kindref="compound">net_pkt</ref><sp/>*pkt);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__net__core_1ga8e5393f3bdd85491f221324e637c3896" kindref="member">net_verdict</ref><sp/>(*<ref refid="structvirtual__interface__api_1a6f21e33e39caa00d51cca900a26f7070" kindref="member">recv</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface,<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__pkt" kindref="compound">net_pkt</ref><sp/>*pkt);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__net__core_1ga8e5393f3bdd85491f221324e637c3896" kindref="member">net_verdict</ref><sp/>(*<ref refid="structvirtual__interface__api_1a285f8f872420209107f73b6b268af7b2" kindref="member">input</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*input_iface,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">net_addr<sp/>*remote_addr,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__pkt" kindref="compound">net_pkt</ref><sp/>*pkt);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="structvirtual__interface__api_1a753258a8929347877997ca5d6a76eb8c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structvirtual__interface__api_1a753258a8929347877997ca5d6a76eb8c" kindref="member">attach</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*virtual_iface,<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="structvirtual__interface__api_1a591f1b7df5313c4a225dceaa04b1eeae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structvirtual__interface__api_1a591f1b7df5313c4a225dceaa04b1eeae" kindref="member">set_config</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>virtual_interface_config_type<sp/>type,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">virtual_interface_config<sp/>*config);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="structvirtual__interface__api_1a4ff5b92897926616778eb6fb696ebb16" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structvirtual__interface__api_1a4ff5b92897926616778eb6fb696ebb16" kindref="member">get_config</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>virtual_interface_config_type<sp/>type,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">virtual_interface_config<sp/>*config);</highlight></codeline>
<codeline lineno="116"><highlight class="normal">};</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>that<sp/>the<sp/>network<sp/>interface<sp/>API<sp/>is<sp/>properly<sp/>setup<sp/>inside</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>Virtual<sp/>API<sp/>struct<sp/>(it<sp/>is<sp/>the<sp/>first<sp/>one).</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">BUILD_ASSERT(offsetof(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvirtual__interface__api" kindref="compound">virtual_interface_api</ref>,<sp/>iface_api)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="structvirtual__interface__context" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvirtual__interface__context" kindref="compound">virtual_interface_context</ref><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Keep<sp/>track<sp/>of<sp/>contexts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref><sp/>node;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>My<sp/>virtual<sp/>network<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*virtual_iface;</highlight></codeline>
<codeline lineno="139" refid="structvirtual__interface__context_1a4a0aada1d7af7a86d2a4b12063f35c71" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*<ref refid="structvirtual__interface__context_1a4a0aada1d7af7a86d2a4b12063f35c71" kindref="member">iface</ref>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="structvirtual__interface__context_1a493cef75dd5000b19eab5db156015c6e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__net__l2_1gac7db0cc6c56d371a5803873074ec2516" kindref="member">net_l2_flags</ref><sp/><ref refid="structvirtual__interface__context_1a493cef75dd5000b19eab5db156015c6e" kindref="member">virtual_l2_flags</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="structvirtual__interface__context_1a7e4699c462a1edfdb755833a9ab28d8f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structvirtual__interface__context_1a7e4699c462a1edfdb755833a9ab28d8f" kindref="member">is_init</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="structvirtual__interface__context_1aaf591f82e0448f2b0cbf4ea6fcf05bff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__linkaddr__storage" kindref="compound">net_linkaddr_storage</ref><sp/><ref refid="structvirtual__interface__context_1aaf591f82e0448f2b0cbf4ea6fcf05bff" kindref="member">lladdr</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="structvirtual__interface__context_1a7d53af8860331f23b8ff83ba0bfcaacf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structvirtual__interface__context_1a7d53af8860331f23b8ff83ba0bfcaacf" kindref="member">name</ref>[VIRTUAL_MAX_NAME_LEN];</highlight></codeline>
<codeline lineno="154"><highlight class="normal">};</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="group__virtual_1ga5cba6ff65402b591a0e42d05f258671f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__virtual_1ga5cba6ff65402b591a0e42d05f258671f" kindref="member">net_virtual_interface_attach</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*virtual_iface,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="group__virtual_1gabadf14eaa02978cde7030c99ddd3e279" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*<ref refid="group__virtual_1gabadf14eaa02978cde7030c99ddd3e279" kindref="member">net_virtual_get_iface</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="group__virtual_1gaa7ff8ebb83fe98a1dfd23f319317a8de" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__virtual_1gaa7ff8ebb83fe98a1dfd23f319317a8de" kindref="member">net_virtual_get_name</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="group__virtual_1ga2aaba616ed4fecc27138d5aae58a634f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__virtual_1ga2aaba616ed4fecc27138d5aae58a634f" kindref="member">net_virtual_set_name</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="group__virtual_1ga30f92f519a6f204ebeccd6053f17eaf0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__net__l2_1gac7db0cc6c56d371a5803873074ec2516" kindref="member">net_l2_flags</ref><sp/><ref refid="group__virtual_1ga30f92f519a6f204ebeccd6053f17eaf0" kindref="member">net_virtual_set_flags</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__net__l2_1gac7db0cc6c56d371a5803873074ec2516" kindref="member">net_l2_flags</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="group__virtual_1ga6c63773925ef7d96b0ba03d8978fd499" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__net__core_1ga8e5393f3bdd85491f221324e637c3896" kindref="member">net_verdict</ref><sp/><ref refid="group__virtual_1ga6c63773925ef7d96b0ba03d8978fd499" kindref="member">net_virtual_input</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*input_iface,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>net_addr<sp/>*remote_addr,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__pkt" kindref="compound">net_pkt</ref><sp/>*pkt);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_NET_L2_VIRTUAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>net_virtual_init(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>net_virtual_init(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface)</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(iface);</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_NET_L2_VIRTUAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>net_virtual_disable(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>net_virtual_disable(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface)</highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(iface);</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VIRTUAL_L2_CTX_TYPE<sp/><sp/><sp/><sp/><sp/>struct<sp/>virtual_interface_context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__virtual_1ga8f188f5c2f19960d7113da52aefe8091" kindref="member">virtual_interface_caps</ref></highlight></codeline>
<codeline lineno="264"><highlight class="normal">net_virtual_get_iface_capabilities(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface)</highlight></codeline>
<codeline lineno="265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvirtual__interface__api" kindref="compound">virtual_interface_api</ref><sp/>*virt<sp/>=</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvirtual__interface__api" kindref="compound">virtual_interface_api</ref><sp/>*)<ref refid="group__net__if_1gaeb8c703f273bc07ae9bb7a0d8bfe6f3d" kindref="member">net_if_get_device</ref>(iface)-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!virt-&gt;<ref refid="structvirtual__interface__api_1a827cd13d885b7cc2f80eddd73e438e07" kindref="member">get_capabilities</ref>)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__virtual_1ga8f188f5c2f19960d7113da52aefe8091" kindref="member">virtual_interface_caps</ref>)0;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>virt-&gt;<ref refid="structvirtual__interface__api_1a827cd13d885b7cc2f80eddd73e438e07" kindref="member">get_capabilities</ref>(iface);</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_NET_VIRTUAL_INTERFACE_INIT(node_id,<sp/>dev_name,<sp/>drv_name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="277"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init_fn,<sp/>pm_action_cb,<sp/>data,<sp/>cfg,<sp/>\</highlight></codeline>
<codeline lineno="278"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prio,<sp/>api,<sp/>mtu)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="279"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_NET_DEVICE_INIT(node_id,<sp/>dev_name,<sp/>drv_name,<sp/>init_fn,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_action_cb,<sp/>data,<sp/>cfg,<sp/>prio,<sp/>api,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIRTUAL_L2,<sp/>NET_L2_GET_CTX_TYPE(VIRTUAL_L2),<sp/><sp/>\</highlight></codeline>
<codeline lineno="282"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtu)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="group__virtual_1ga4c1e6f8afb017c6f9db3cf8f271554ca" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_VIRTUAL_INTERFACE_INIT(dev_name,<sp/>drv_name,<sp/>init_fn,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="309"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_action_cb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="310"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data,<sp/>cfg,<sp/>prio,<sp/>api,<sp/>mtu)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="311"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_NET_VIRTUAL_INTERFACE_INIT(DT_INVALID_NODE,<sp/>dev_name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="312"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drv_name,<sp/>init_fn,<sp/>pm_action_cb,<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="313"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data,<sp/>cfg,<sp/>prio,<sp/>api,<sp/>mtu)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_NET_VIRTUAL_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/net/virtual.h"/>
  </compounddef>
</doxygen>
