<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="clock__control_8h" kind="file" language="C++">
    <compoundname>clock_control.h</compoundname>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">device.h</includes>
    <includes refid="____assert_8h" local="no">sys/__assert.h</includes>
    <includes refid="slist_8h" local="no">sys/slist.h</includes>
    <includedby refid="arm__clock__control_8h" local="no">include/drivers/clock_control/arm_clock_control.h</includedby>
    <includedby refid="lpc11u6x__clock__control_8h" local="no">include/drivers/clock_control/lpc11u6x_clock_control.h</includedby>
    <includedby refid="mchp__xec__clock__control_8h" local="no">include/drivers/clock_control/mchp_xec_clock_control.h</includedby>
    <includedby refid="nrf__clock__control_8h" local="no">include/drivers/clock_control/nrf_clock_control.h</includedby>
    <includedby refid="rcar__clock__control_8h" local="no">include/drivers/clock_control/rcar_clock_control.h</includedby>
    <includedby refid="stm32__clock__control_8h" local="no">include/drivers/clock_control/stm32_clock_control.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/drivers/clock_control.h</label>
        <link refid="clock__control_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="15">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="2">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="4">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="5">
        <label>device.h</label>
      </node>
      <node id="10">
        <label>stdarg.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>include/drivers/clock_control.h</label>
        <link refid="clock__control_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/drivers/clock_control/arm_clock_control.h</label>
        <link refid="arm__clock__control_8h"/>
      </node>
      <node id="3">
        <label>include/drivers/clock_control/lpc11u6x_clock_control.h</label>
        <link refid="lpc11u6x__clock__control_8h"/>
      </node>
      <node id="4">
        <label>include/drivers/clock_control/mchp_xec_clock_control.h</label>
        <link refid="mchp__xec__clock__control_8h"/>
      </node>
      <node id="5">
        <label>include/drivers/clock_control/nrf_clock_control.h</label>
        <link refid="nrf__clock__control_8h"/>
      </node>
      <node id="6">
        <label>include/drivers/clock_control/rcar_clock_control.h</label>
        <link refid="rcar__clock__control_8h"/>
      </node>
      <node id="7">
        <label>include/drivers/clock_control/stm32_clock_control.h</label>
        <link refid="stm32__clock__control_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structclock__control__driver__api" prot="public">clock_control_driver_api</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__clock__control__interface_1ga9aa9a4e00c1e7985a1fea6bed235003e" prot="public" static="no">
        <name>CLOCK_CONTROL_SUBSYS_ALL</name>
        <initializer>NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="37" column="9" bodyfile="include/drivers/clock_control.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__clock__control__interface_1gad12829335f0c954ab6d586549db45e09" prot="public" static="no" strong="no">
        <type></type>
        <name>clock_control_status</name>
        <enumvalue id="group__clock__control__interface_1ggad12829335f0c954ab6d586549db45e09aa1d03cc305aa2f510471e6f1ae1fbd52" prot="public">
          <name>CLOCK_CONTROL_STATUS_STARTING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__clock__control__interface_1ggad12829335f0c954ab6d586549db45e09a44a027c5e5bf19836aebc427098f0cfa" prot="public">
          <name>CLOCK_CONTROL_STATUS_OFF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__clock__control__interface_1ggad12829335f0c954ab6d586549db45e09a232119a145ecc5d6a1ff0454a97c92db" prot="public">
          <name>CLOCK_CONTROL_STATUS_ON</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__clock__control__interface_1ggad12829335f0c954ab6d586549db45e09a825b0d9a572d483343b109d0c3d288c0" prot="public">
          <name>CLOCK_CONTROL_STATUS_UNAVAILABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__clock__control__interface_1ggad12829335f0c954ab6d586549db45e09a4c939e7c8c38b5f2c50fe339a60c75cc" prot="public">
          <name>CLOCK_CONTROL_STATUS_UNKNOWN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Current clock status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="42" column="1" bodyfile="include/drivers/clock_control.h" bodystart="42" bodyend="48"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* clock_control_subsys_t</definition>
        <argsstring></argsstring>
        <name>clock_control_subsys_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>clock_control_subsys_t is a type to identify a clock controller sub-system. Such data pointed is opaque and relevant only to the clock controller driver instance being used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="55" column="14" bodyfile="include/drivers/clock_control.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__clock__control__interface_1ga05d8b476ef0331e1502702921d2801f1" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* clock_control_subsys_rate_t</definition>
        <argsstring></argsstring>
        <name>clock_control_subsys_rate_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>clock_control_subsys_rate_t is a type to identify a clock controller sub-system rate. Such data pointed is opaque and relevant only to set the clock controller rate of the driver instance being used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="63" column="14" bodyfile="include/drivers/clock_control.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__clock__control__interface_1ga17257fb3864dc5a33082c3422ad7c275" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* clock_control_cb_t) (const struct device *dev, clock_control_subsys_t subsys, void *user_data)</definition>
        <argsstring>)(const struct device *dev, clock_control_subsys_t subsys, void *user_data)</argsstring>
        <name>clock_control_cb_t</name>
        <briefdescription>
<para>Callback called on clock started. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device structure whose driver controls the clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subsys</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque data representing the clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="71" column="9" bodyfile="include/drivers/clock_control.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__clock__control__interface_1ga459b95cb726892b95537d15273413099" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* clock_control) (const struct device *dev, clock_control_subsys_t sys)</definition>
        <argsstring>)(const struct device *dev, clock_control_subsys_t sys)</argsstring>
        <name>clock_control</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="75" column="9" bodyfile="include/drivers/clock_control.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__clock__control__interface_1ga41087b8914b4bec0c1a61217122cc2a0" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* clock_control_get) (const struct device *dev, clock_control_subsys_t sys, uint32_t *rate)</definition>
        <argsstring>)(const struct device *dev, clock_control_subsys_t sys, uint32_t *rate)</argsstring>
        <name>clock_control_get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="78" column="9" bodyfile="include/drivers/clock_control.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__clock__control__interface_1ga0cd408e023fda272784c24d0c644014d" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* clock_control_async_on_fn) (const struct device *dev, clock_control_subsys_t sys, clock_control_cb_t cb, void *user_data)</definition>
        <argsstring>)(const struct device *dev, clock_control_subsys_t sys, clock_control_cb_t cb, void *user_data)</argsstring>
        <name>clock_control_async_on_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="82" column="9" bodyfile="include/drivers/clock_control.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__clock__control__interface_1ga0af123fbaa3572a9722f17c331936e9a" prot="public" static="no">
        <type>enum <ref refid="group__clock__control__interface_1gad12829335f0c954ab6d586549db45e09" kindref="member">clock_control_status</ref>(*</type>
        <definition>typedef enum clock_control_status(* clock_control_get_status_fn) (const struct device *dev, clock_control_subsys_t sys)</definition>
        <argsstring>)(const struct device *dev, clock_control_subsys_t sys)</argsstring>
        <name>clock_control_get_status_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="82" column="9" bodyfile="include/drivers/clock_control.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__clock__control__interface_1ga8ea31ee8a6e3aa69de0098efba63ae2b" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* clock_control_set) (const struct device *dev, clock_control_subsys_t sys, clock_control_subsys_rate_t rate)</definition>
        <argsstring>)(const struct device *dev, clock_control_subsys_t sys, clock_control_subsys_rate_t rate)</argsstring>
        <name>clock_control_set</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="91" column="9" bodyfile="include/drivers/clock_control.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__clock__control__interface_1gaec69b0989cefad79ffd5c92f060150b9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int clock_control_on</definition>
        <argsstring>(const struct device *dev, clock_control_subsys_t sys)</argsstring>
        <name>clock_control_on</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref></type>
          <declname>sys</declname>
        </param>
        <briefdescription>
<para>Enable a clock controlled by the device. </para>
        </briefdescription>
        <detaileddescription>
<para>On success, the clock is enabled and ready when this function returns. This function may sleep, and thus can only be called from thread context.</para>
<para>Use <ref refid="group__clock__control__interface_1ga03cedb9723e001d01c495f0abb6acfdf" kindref="member">clock_control_async_on()</ref> for non-blocking operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device structure whose driver controls the clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sys</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque data representing the clock. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="117" column="19" bodyfile="include/drivers/clock_control.h" bodystart="117" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="group__clock__control__interface_1gadbebc1c12937be561b761ef4a3b7d8a5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int clock_control_off</definition>
        <argsstring>(const struct device *dev, clock_control_subsys_t sys)</argsstring>
        <name>clock_control_off</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref></type>
          <declname>sys</declname>
        </param>
        <briefdescription>
<para>Disable a clock controlled by the device. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is non-blocking and can be called from any context. On success, the clock is disabled when this function returns.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device structure whose driver controls the clock </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sys</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque data representing the clock </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="140" column="19" bodyfile="include/drivers/clock_control.h" bodystart="140" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="group__clock__control__interface_1ga03cedb9723e001d01c495f0abb6acfdf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int clock_control_async_on</definition>
        <argsstring>(const struct device *dev, clock_control_subsys_t sys, clock_control_cb_t cb, void *user_data)</argsstring>
        <name>clock_control_async_on</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref></type>
          <declname>sys</declname>
        </param>
        <param>
          <type><ref refid="group__clock__control__interface_1ga17257fb3864dc5a33082c3422ad7c275" kindref="member">clock_control_cb_t</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Request clock to start with notification when clock has been started. </para>
        </briefdescription>
        <detaileddescription>
<para>Function is non-blocking and can be called from any context. User callback is called when clock is started.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sys</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an opaque data representing the sub-system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User context passed to the callback.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if start is successfully initiated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>if clock was already started and is starting or running. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If the requested mode of operation is not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>if the interface is not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>negative errno on vendor specific error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="170" column="19" bodyfile="include/drivers/clock_control.h" bodystart="170" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="group__clock__control__interface_1ga35be64d09222f44aa00cd1371a39613e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>enum <ref refid="group__clock__control__interface_1gad12829335f0c954ab6d586549db45e09" kindref="member">clock_control_status</ref></type>
        <definition>static enum clock_control_status clock_control_get_status</definition>
        <argsstring>(const struct device *dev, clock_control_subsys_t sys)</argsstring>
        <name>clock_control_get_status</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref></type>
          <declname>sys</declname>
        </param>
        <briefdescription>
<para>Get clock status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sys</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an opaque data representing the sub-system.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Status. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="197" column="40" bodyfile="include/drivers/clock_control.h" bodystart="197" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="group__clock__control__interface_1ga00f6af6d2668c2dfff0640fe176e89ff" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int clock_control_get_rate</definition>
        <argsstring>(const struct device *dev, clock_control_subsys_t sys, uint32_t *rate)</argsstring>
        <name>clock_control_get_rate</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref></type>
          <declname>sys</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Obtain the clock rate of given sub-system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the clock controller driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sys</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an opaque data representing the sub-system </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Subsystem clock rate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="221" column="19" bodyfile="include/drivers/clock_control.h" bodystart="221" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="group__clock__control__interface_1ga3bd25314e8bfcc62f0728d89321bb614" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int clock_control_set_rate</definition>
        <argsstring>(const struct device *dev, clock_control_subsys_t sys, clock_control_subsys_rate_t rate)</argsstring>
        <name>clock_control_set_rate</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref></type>
          <declname>sys</declname>
        </param>
        <param>
          <type><ref refid="group__clock__control__interface_1ga05d8b476ef0331e1502702921d2801f1" kindref="member">clock_control_subsys_rate_t</ref></type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Set the rate of the clock controlled by the device. </para>
        </briefdescription>
        <detaileddescription>
<para>On success, the new clock rate is set and ready when this function returns. This function may sleep, and thus can only be called from thread context.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device structure whose driver controls the clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sys</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque data representing the clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque data representing the clock rate to be used.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>if clock was already in the given rate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If the requested mode of operation is not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>if the interface is not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>negative errno on vendor specific error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="255" column="19" bodyfile="include/drivers/clock_control.h" bodystart="255" bodyend="271"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Public Clock Control APIs. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>clock_control.h<sp/>-<sp/>public<sp/>clock<sp/>controller<sp/>driver<sp/>API<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_DRIVERS_CLOCK_CONTROL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_DRIVERS_CLOCK_CONTROL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;device.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="____assert_8h" kindref="compound">sys/__assert.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="slist_8h" kindref="compound">sys/slist.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Clock<sp/>control<sp/>API<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Used<sp/>to<sp/>select<sp/>all<sp/>subsystem<sp/>of<sp/>a<sp/>clock<sp/>controller<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="group__clock__control__interface_1ga9aa9a4e00c1e7985a1fea6bed235003e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLOCK_CONTROL_SUBSYS_ALL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="group__clock__control__interface_1gad12829335f0c954ab6d586549db45e09" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__clock__control__interface_1gad12829335f0c954ab6d586549db45e09" kindref="member">clock_control_status</ref><sp/>{</highlight></codeline>
<codeline lineno="43" refid="group__clock__control__interface_1ggad12829335f0c954ab6d586549db45e09aa1d03cc305aa2f510471e6f1ae1fbd52" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1ggad12829335f0c954ab6d586549db45e09aa1d03cc305aa2f510471e6f1ae1fbd52" kindref="member">CLOCK_CONTROL_STATUS_STARTING</ref>,</highlight></codeline>
<codeline lineno="44" refid="group__clock__control__interface_1ggad12829335f0c954ab6d586549db45e09a44a027c5e5bf19836aebc427098f0cfa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1ggad12829335f0c954ab6d586549db45e09a44a027c5e5bf19836aebc427098f0cfa" kindref="member">CLOCK_CONTROL_STATUS_OFF</ref>,</highlight></codeline>
<codeline lineno="45" refid="group__clock__control__interface_1ggad12829335f0c954ab6d586549db45e09a232119a145ecc5d6a1ff0454a97c92db" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1ggad12829335f0c954ab6d586549db45e09a232119a145ecc5d6a1ff0454a97c92db" kindref="member">CLOCK_CONTROL_STATUS_ON</ref>,</highlight></codeline>
<codeline lineno="46" refid="group__clock__control__interface_1ggad12829335f0c954ab6d586549db45e09a825b0d9a572d483343b109d0c3d288c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1ggad12829335f0c954ab6d586549db45e09a825b0d9a572d483343b109d0c3d288c0" kindref="member">CLOCK_CONTROL_STATUS_UNAVAILABLE</ref>,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1ggad12829335f0c954ab6d586549db45e09a4c939e7c8c38b5f2c50fe339a60c75cc" kindref="member">CLOCK_CONTROL_STATUS_UNKNOWN</ref></highlight></codeline>
<codeline lineno="48" refid="group__clock__control__interface_1ggad12829335f0c954ab6d586549db45e09a4c939e7c8c38b5f2c50fe339a60c75cc" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="group__clock__control__interface_1ga05d8b476ef0331e1502702921d2801f1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__clock__control__interface_1ga05d8b476ef0331e1502702921d2801f1" kindref="member">clock_control_subsys_rate_t</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="group__clock__control__interface_1ga17257fb3864dc5a33082c3422ad7c275" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__clock__control__interface_1ga17257fb3864dc5a33082c3422ad7c275" kindref="member">clock_control_cb_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref><sp/>subsys,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="group__clock__control__interface_1ga459b95cb726892b95537d15273413099" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__clock__control__interface_1ga459b95cb726892b95537d15273413099" kindref="member">clock_control</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref><sp/>sys);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="group__clock__control__interface_1ga41087b8914b4bec0c1a61217122cc2a0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__clock__control__interface_1ga41087b8914b4bec0c1a61217122cc2a0" kindref="member">clock_control_get</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref><sp/>sys,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*rate);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="group__clock__control__interface_1ga0cd408e023fda272784c24d0c644014d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__clock__control__interface_1ga0cd408e023fda272784c24d0c644014d" kindref="member">clock_control_async_on_fn</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref><sp/>sys,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1ga17257fb3864dc5a33082c3422ad7c275" kindref="member">clock_control_cb_t</ref><sp/>cb,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__clock__control__interface_1gad12829335f0c954ab6d586549db45e09" kindref="member">clock_control_status</ref><sp/>(*<ref refid="group__clock__control__interface_1ga0af123fbaa3572a9722f17c331936e9a" kindref="member">clock_control_get_status_fn</ref>)(</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref><sp/>sys);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="group__clock__control__interface_1ga8ea31ee8a6e3aa69de0098efba63ae2b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__clock__control__interface_1ga8ea31ee8a6e3aa69de0098efba63ae2b" kindref="member">clock_control_set</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref><sp/>sys,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1ga05d8b476ef0331e1502702921d2801f1" kindref="member">clock_control_subsys_rate_t</ref><sp/>rate);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="structclock__control__driver__api" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structclock__control__driver__api" kindref="compound">clock_control_driver_api</ref><sp/>{</highlight></codeline>
<codeline lineno="96" refid="structclock__control__driver__api_1a3b267856bdde2be0e679a9d1b16b3b4f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1ga459b95cb726892b95537d15273413099" kindref="member">clock_control</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structclock__control__driver__api_1a3b267856bdde2be0e679a9d1b16b3b4f" kindref="member">on</ref>;</highlight></codeline>
<codeline lineno="97" refid="structclock__control__driver__api_1a92385c0e0c7bbf8fe955ad2281b7ccc3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1ga459b95cb726892b95537d15273413099" kindref="member">clock_control</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structclock__control__driver__api_1a92385c0e0c7bbf8fe955ad2281b7ccc3" kindref="member">off</ref>;</highlight></codeline>
<codeline lineno="98" refid="structclock__control__driver__api_1a9a4a9a2ed1f0b80e48ee0f50469c72dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1ga0cd408e023fda272784c24d0c644014d" kindref="member">clock_control_async_on_fn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structclock__control__driver__api_1a9a4a9a2ed1f0b80e48ee0f50469c72dc" kindref="member">async_on</ref>;</highlight></codeline>
<codeline lineno="99" refid="structclock__control__driver__api_1ab19c4aa8f48dfa33e8bce3189ea3c332" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1ga41087b8914b4bec0c1a61217122cc2a0" kindref="member">clock_control_get</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structclock__control__driver__api_1ab19c4aa8f48dfa33e8bce3189ea3c332" kindref="member">get_rate</ref>;</highlight></codeline>
<codeline lineno="100" refid="structclock__control__driver__api_1a64461593304fad858b6d8f8292ef62f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1ga0af123fbaa3572a9722f17c331936e9a" kindref="member">clock_control_get_status_fn</ref><sp/><sp/><sp/><sp/><sp/><ref refid="structclock__control__driver__api_1a64461593304fad858b6d8f8292ef62f9" kindref="member">get_status</ref>;</highlight></codeline>
<codeline lineno="101" refid="structclock__control__driver__api_1a15e5eb98d0684a0afdb51f46d4e3fb5c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1ga8ea31ee8a6e3aa69de0098efba63ae2b" kindref="member">clock_control_set</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structclock__control__driver__api_1a15e5eb98d0684a0afdb51f46d4e3fb5c" kindref="member">set_rate</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="group__clock__control__interface_1gaec69b0989cefad79ffd5c92f060150b9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__clock__control__interface_1gaec69b0989cefad79ffd5c92f060150b9" kindref="member">clock_control_on</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref><sp/>sys)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__device__model_1gaa4944bd850e90cbd52b0489f9b12edfb" kindref="member">device_is_ready</ref>(dev))<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1gab9b8cc17d1947160d13faaba7a18d6d1" kindref="member">ENODEV</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structclock__control__driver__api" kindref="compound">clock_control_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structclock__control__driver__api" kindref="compound">clock_control_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;<ref refid="structclock__control__driver__api_1a3b267856bdde2be0e679a9d1b16b3b4f" kindref="member">on</ref>(dev,<sp/>sys);</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="group__clock__control__interface_1gadbebc1c12937be561b761ef4a3b7d8a5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__clock__control__interface_1gadbebc1c12937be561b761ef4a3b7d8a5" kindref="member">clock_control_off</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref><sp/>sys)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__device__model_1gaa4944bd850e90cbd52b0489f9b12edfb" kindref="member">device_is_ready</ref>(dev))<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1gab9b8cc17d1947160d13faaba7a18d6d1" kindref="member">ENODEV</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structclock__control__driver__api" kindref="compound">clock_control_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structclock__control__driver__api" kindref="compound">clock_control_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;<ref refid="structclock__control__driver__api_1a92385c0e0c7bbf8fe955ad2281b7ccc3" kindref="member">off</ref>(dev,<sp/>sys);</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="group__clock__control__interface_1ga03cedb9723e001d01c495f0abb6acfdf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__clock__control__interface_1ga03cedb9723e001d01c495f0abb6acfdf" kindref="member">clock_control_async_on</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref><sp/>sys,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1ga17257fb3864dc5a33082c3422ad7c275" kindref="member">clock_control_cb_t</ref><sp/>cb,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>)</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structclock__control__driver__api" kindref="compound">clock_control_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structclock__control__driver__api" kindref="compound">clock_control_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(api-&gt;<ref refid="structclock__control__driver__api_1a9a4a9a2ed1f0b80e48ee0f50469c72dc" kindref="member">async_on</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1ga43785b9969e0bd1af532dbde06c5540b" kindref="member">ENOSYS</ref>;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__device__model_1gaa4944bd850e90cbd52b0489f9b12edfb" kindref="member">device_is_ready</ref>(dev))<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1gab9b8cc17d1947160d13faaba7a18d6d1" kindref="member">ENODEV</ref>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;<ref refid="structclock__control__driver__api_1a9a4a9a2ed1f0b80e48ee0f50469c72dc" kindref="member">async_on</ref>(dev,<sp/>sys,<sp/>cb,<sp/><ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="group__clock__control__interface_1ga35be64d09222f44aa00cd1371a39613e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__clock__control__interface_1gad12829335f0c954ab6d586549db45e09" kindref="member">clock_control_status</ref><sp/><ref refid="group__clock__control__interface_1ga35be64d09222f44aa00cd1371a39613e" kindref="member">clock_control_get_status</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref><sp/>sys)</highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structclock__control__driver__api" kindref="compound">clock_control_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structclock__control__driver__api" kindref="compound">clock_control_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!api-&gt;<ref refid="structclock__control__driver__api_1a64461593304fad858b6d8f8292ef62f9" kindref="member">get_status</ref>)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__clock__control__interface_1ggad12829335f0c954ab6d586549db45e09a4c939e7c8c38b5f2c50fe339a60c75cc" kindref="member">CLOCK_CONTROL_STATUS_UNKNOWN</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__device__model_1gaa4944bd850e90cbd52b0489f9b12edfb" kindref="member">device_is_ready</ref>(dev))<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__clock__control__interface_1ggad12829335f0c954ab6d586549db45e09a825b0d9a572d483343b109d0c3d288c0" kindref="member">CLOCK_CONTROL_STATUS_UNAVAILABLE</ref>;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;<ref refid="structclock__control__driver__api_1a64461593304fad858b6d8f8292ef62f9" kindref="member">get_status</ref>(dev,<sp/>sys);</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="group__clock__control__interface_1ga00f6af6d2668c2dfff0640fe176e89ff" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__clock__control__interface_1ga00f6af6d2668c2dfff0640fe176e89ff" kindref="member">clock_control_get_rate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref><sp/>sys,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*rate)</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__device__model_1gaa4944bd850e90cbd52b0489f9b12edfb" kindref="member">device_is_ready</ref>(dev))<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1gab9b8cc17d1947160d13faaba7a18d6d1" kindref="member">ENODEV</ref>;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structclock__control__driver__api" kindref="compound">clock_control_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structclock__control__driver__api" kindref="compound">clock_control_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(api-&gt;<ref refid="structclock__control__driver__api_1ab19c4aa8f48dfa33e8bce3189ea3c332" kindref="member">get_rate</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1ga43785b9969e0bd1af532dbde06c5540b" kindref="member">ENOSYS</ref>;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;<ref refid="structclock__control__driver__api_1ab19c4aa8f48dfa33e8bce3189ea3c332" kindref="member">get_rate</ref>(dev,<sp/>sys,<sp/>rate);</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="group__clock__control__interface_1ga3bd25314e8bfcc62f0728d89321bb614" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__clock__control__interface_1ga3bd25314e8bfcc62f0728d89321bb614" kindref="member">clock_control_set_rate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref><sp/>sys,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__control__interface_1ga05d8b476ef0331e1502702921d2801f1" kindref="member">clock_control_subsys_rate_t</ref><sp/>rate)</highlight></codeline>
<codeline lineno="258"><highlight class="normal">{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__device__model_1gaa4944bd850e90cbd52b0489f9b12edfb" kindref="member">device_is_ready</ref>(dev))<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1gab9b8cc17d1947160d13faaba7a18d6d1" kindref="member">ENODEV</ref>;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structclock__control__driver__api" kindref="compound">clock_control_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structclock__control__driver__api" kindref="compound">clock_control_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(api-&gt;<ref refid="structclock__control__driver__api_1a15e5eb98d0684a0afdb51f46d4e3fb5c" kindref="member">set_rate</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1ga43785b9969e0bd1af532dbde06c5540b" kindref="member">ENOSYS</ref>;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;<ref refid="structclock__control__driver__api_1a15e5eb98d0684a0afdb51f46d4e3fb5c" kindref="member">set_rate</ref>(dev,<sp/>sys,<sp/>rate);</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_DRIVERS_CLOCK_CONTROL_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/drivers/clock_control.h"/>
  </compounddef>
</doxygen>
