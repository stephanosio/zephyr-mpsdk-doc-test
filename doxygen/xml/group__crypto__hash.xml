<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__crypto__hash" kind="group">
    <compoundname>crypto_hash</compoundname>
    <title>Hash</title>
    <innerclass refid="structhash__ctx" prot="public">hash_ctx</innerclass>
    <innerclass refid="structhash__pkt" prot="public">hash_pkt</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__crypto__hash_1gaaea88501aa8243eacc8c57ac0914ac7a" prot="public" static="no" strong="no">
        <type></type>
        <name>hash_algo</name>
        <enumvalue id="group__crypto__hash_1ggaaea88501aa8243eacc8c57ac0914ac7aaa49fd348b98d55eca407ae88e3626265" prot="public">
          <name>CRYPTO_HASH_ALGO_SHA224</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__crypto__hash_1ggaaea88501aa8243eacc8c57ac0914ac7aa1b0b60a3270618fd492491668dc2ad43" prot="public">
          <name>CRYPTO_HASH_ALGO_SHA256</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__crypto__hash_1ggaaea88501aa8243eacc8c57ac0914ac7aabba9e518a333ce75825957fde1993dd5" prot="public">
          <name>CRYPTO_HASH_ALGO_SHA384</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__crypto__hash_1ggaaea88501aa8243eacc8c57ac0914ac7aa72a129765ae9e15f456c295c3917bf3f" prot="public">
          <name>CRYPTO_HASH_ALGO_SHA512</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hash algorithm </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/crypto/hash.h" line="26" column="1" bodyfile="include/crypto/hash.h" bodystart="26" bodyend="31"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__crypto__hash_1ga955369c6da6aa70ded229d8861292070" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* hash_op_t) (struct hash_ctx *ctx, struct hash_pkt *pkt, bool finish)</definition>
        <argsstring>)(struct hash_ctx *ctx, struct hash_pkt *pkt, bool finish)</argsstring>
        <name>hash_op_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/crypto/hash.h" line="38" column="9" bodyfile="include/crypto/hash.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__crypto__hash_1ga1f49008c35d9f04b66e587d1b43404bd" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* hash_completion_cb) (struct hash_pkt *completed, int status)</definition>
        <argsstring>)(struct hash_pkt *completed, int status)</argsstring>
        <name>hash_completion_cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/crypto/hash.h" line="114" column="9" bodyfile="include/crypto/hash.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__crypto__hash_1ga9b736d047cbfb7530ffa0bc4b64d6ad1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int hash_begin_session</definition>
        <argsstring>(const struct device *dev, struct hash_ctx *ctx, enum hash_algo algo)</argsstring>
        <name>hash_begin_session</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structhash__ctx" kindref="compound">hash_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>enum <ref refid="group__crypto__hash_1gaaea88501aa8243eacc8c57ac0914ac7a" kindref="member">hash_algo</ref></type>
          <declname>algo</declname>
        </param>
        <briefdescription>
<para>Setup a hash session. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes one time parameters, like the algorithm which may remain constant for all operations in the session. The state may be cached in hardware and/or driver data state variables.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the context structure. Various one time parameters like session capabilities and algorithm are supplied via this structure. The structure documentation specifies which fields are to be populated by the app before making this call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algo</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash algorithm to be used in this session. e.g sha256</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/crypto/crypto.h" line="381" column="19" bodyfile="include/crypto/crypto.h" bodystart="381" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="group__crypto__hash_1gadafcd2ad79e0695245c8884b6b282508" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int hash_free_session</definition>
        <argsstring>(const struct device *dev, struct hash_ctx *ctx)</argsstring>
        <name>hash_free_session</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structhash__ctx" kindref="compound">hash_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Cleanup a hash session. </para>
        </briefdescription>
        <detaileddescription>
<para>Clears the hardware and/or driver state of a session. <simplesect kind="see"><para><ref refid="group__crypto__hash_1ga9b736d047cbfb7530ffa0bc4b64d6ad1" kindref="member">hash_begin_session</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the crypto hash context structure of the session to be freed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/crypto/crypto.h" line="417" column="19" bodyfile="include/crypto/crypto.h" bodystart="417" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="group__crypto__hash_1gaa69bbf41cc150dae0d97b215862729cf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int hash_callback_set</definition>
        <argsstring>(const struct device *dev, hash_completion_cb cb)</argsstring>
        <name>hash_callback_set</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__crypto__hash_1ga1f49008c35d9f04b66e587d1b43404bd" kindref="member">hash_completion_cb</ref></type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Registers an async hash completion callback with the driver. </para>
        </briefdescription>
        <detaileddescription>
<para>The application can register an async hash completion callback handler to be invoked by the driver, on completion of a prior request submitted via <ref refid="group__crypto__hash_1ga761e5d0bda9937d7fa4550c876a1c387" kindref="member">hash_compute()</ref>. Based on crypto device hardware semantics, this is likely to be invoked from an ISR context.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to application callback to be called by the driver.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -ENOTSUP if the driver does not support async op, negative errno code on other error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/crypto/crypto.h" line="441" column="19" bodyfile="include/crypto/crypto.h" bodystart="441" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="group__crypto__hash_1ga761e5d0bda9937d7fa4550c876a1c387" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int hash_compute</definition>
        <argsstring>(struct hash_ctx *ctx, struct hash_pkt *pkt)</argsstring>
        <name>hash_compute</name>
        <param>
          <type>struct <ref refid="structhash__ctx" kindref="compound">hash_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="structhash__pkt" kindref="compound">hash_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
<para>Perform a cryptographic hash function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hash context of this op. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure holding the input/output.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/crypto/crypto.h" line="464" column="19" bodyfile="include/crypto/crypto.h" bodystart="464" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="group__crypto__hash_1gaf54ee20fb1ca58764f6f301739c3ba93" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int hash_update</definition>
        <argsstring>(struct hash_ctx *ctx, struct hash_pkt *pkt)</argsstring>
        <name>hash_update</name>
        <param>
          <type>struct <ref refid="structhash__ctx" kindref="compound">hash_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="structhash__pkt" kindref="compound">hash_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
<para>Perform a cryptographic multipart hash operation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be called zero or more times, passing a slice of the the data. The hash is calculated using all the given pieces. To calculate the hash call <computeroutput><ref refid="group__crypto__hash_1ga761e5d0bda9937d7fa4550c876a1c387" kindref="member">hash_compute()</ref></computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hash context of this op. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure holding the input.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/crypto/crypto.h" line="483" column="19" bodyfile="include/crypto/crypto.h" bodystart="483" bodyend="488"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Crypto Hash APIs. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
