<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__stream__flash" kind="group">
    <compoundname>stream_flash</compoundname>
    <title>Stream to flash interface</title>
    <innerclass refid="structstream__flash__ctx" prot="public">stream_flash_ctx</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__stream__flash_1ga4fd8fdee7c82bc2b68d67ec9bbd36fca" prot="public" static="no">
        <type>int(*</type>
        <definition>stream_flash_callback_t</definition>
        <argsstring>)(uint8_t *buf, size_t len, size_t offset)</argsstring>
        <name>stream_flash_callback_t</name>
        <briefdescription>
<para>Signature for callback invoked after flash write completes. </para>
        </briefdescription>
        <detaileddescription>
<para>Functions of this type are invoked with a buffer containing data read back from the flash after a flash write has completed. This enables verifying that the data has been correctly stored (for instance by using a SHA function). The write buffer &apos;buf&apos; provided in stream_flash_init is used as a read buffer for this purpose.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the data read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset the data was read from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/stream_flash.h" line="45" column="9" bodyfile="include/storage/stream_flash.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__stream__flash_1ga63e6418e220136a9a0ab2992d9d8f937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stream_flash_init</definition>
        <argsstring>(struct stream_flash_ctx *ctx, const struct device *fdev, uint8_t *buf, size_t buf_len, size_t offset, size_t size, stream_flash_callback_t cb)</argsstring>
        <name>stream_flash_init</name>
        <param>
          <type>struct <ref refid="structstream__flash__ctx" kindref="compound">stream_flash_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>fdev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_len</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="group__stream__flash_1ga4fd8fdee7c82bc2b68d67ec9bbd36fca" kindref="member">stream_flash_callback_t</ref></type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Initialize context needed for stream writes to flash. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to be initialized </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fdev</parametername>
</parameternamelist>
<parameterdescription>
<para>Flash device to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Write buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of write buffer. Can not be larger than the page size. Must be multiple of the flash device write-block-size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset within flash device to start writing to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes available for performing buffered write. If this is &apos;0&apos;, the size will be set to the total size of the flash device minus the offset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback to be invoked on completed flash write operations.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>non-negative on success, negative errno code on fail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/stream_flash.h" line="83" column="5" declfile="include/storage/stream_flash.h" declline="83" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__flash_1gadcff5388f54e0e784619c706795fe7a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t stream_flash_bytes_written</definition>
        <argsstring>(struct stream_flash_ctx *ctx)</argsstring>
        <name>stream_flash_bytes_written</name>
        <param>
          <type>struct <ref refid="structstream__flash__ctx" kindref="compound">stream_flash_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Read number of bytes written to the flash. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>api-tags: pre-kernel-ok isr-ok</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of payload bytes written to flash. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/stream_flash.h" line="95" column="8" declfile="include/storage/stream_flash.h" declline="95" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__flash_1gaa23d33939f344fcd42a281afa5e6f1db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stream_flash_buffered_write</definition>
        <argsstring>(struct stream_flash_ctx *ctx, const uint8_t *data, size_t len, bool flush)</argsstring>
        <name>stream_flash_buffered_write</name>
        <param>
          <type>struct <ref refid="structstream__flash__ctx" kindref="compound">stream_flash_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Process input buffers to be written to flash device in single blocks. Will store remainder between calls. </para>
        </briefdescription>
        <detaileddescription>
<para>A final call to this function with flush set to true will write out the remaining block buffer to flash.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>when true this forces any buffered data to be written to flash A flush write should be the last write operation in a sequence of write operations for given context (although this is not mandatory if the total data size is a multiple of the buffer size).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>non-negative on success, negative errno code on fail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/stream_flash.h" line="114" column="5" declfile="include/storage/stream_flash.h" declline="114" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__flash_1ga75711b22789724c2d8629e1202dcb48d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stream_flash_erase_page</definition>
        <argsstring>(struct stream_flash_ctx *ctx, off_t off)</argsstring>
        <name>stream_flash_erase_page</name>
        <param>
          <type>struct <ref refid="structstream__flash__ctx" kindref="compound">stream_flash_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>off</declname>
        </param>
        <briefdescription>
<para>Erase the flash page to which a given offset belongs. </para>
        </briefdescription>
        <detaileddescription>
<para>This function erases a flash page to which an offset belongs if this page is not the page previously erased by the provided ctx (ctx-&gt;last_erased_page_start_offset).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>off</parametername>
</parameternamelist>
<parameterdescription>
<para>offset from the base address of the flash device</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>non-negative on success, negative errno code on fail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/stream_flash.h" line="129" column="5" declfile="include/storage/stream_flash.h" declline="129" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__flash_1ga2d90ef00da4ded8c2d0ffb1b2e4c2a2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stream_flash_progress_load</definition>
        <argsstring>(struct stream_flash_ctx *ctx, const char *settings_key)</argsstring>
        <name>stream_flash_progress_load</name>
        <param>
          <type>struct <ref refid="structstream__flash__ctx" kindref="compound">stream_flash_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>settings_key</declname>
        </param>
        <briefdescription>
<para>Load persistent stream write progress stored with key <computeroutput>settings_key</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>This function should be called directly after <ref refid="group__stream__flash_1ga63e6418e220136a9a0ab2992d9d8f937" kindref="member">stream_flash_init</ref> to load previous stream write progress before writing any data. If the loaded progress has fewer bytes written than <computeroutput>ctx</computeroutput> then it will be ignored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>settings_key</parametername>
</parameternamelist>
<parameterdescription>
<para>key to use with the settings module for loading the stream write progress</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>non-negative on success, negative errno code on fail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/stream_flash.h" line="145" column="5" declfile="include/storage/stream_flash.h" declline="145" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__flash_1ga6965ef8973f281fd0507e208d1645483" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stream_flash_progress_save</definition>
        <argsstring>(struct stream_flash_ctx *ctx, const char *settings_key)</argsstring>
        <name>stream_flash_progress_save</name>
        <param>
          <type>struct <ref refid="structstream__flash__ctx" kindref="compound">stream_flash_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>settings_key</declname>
        </param>
        <briefdescription>
<para>Save persistent stream write progress using key <computeroutput>settings_key</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>settings_key</parametername>
</parameternamelist>
<parameterdescription>
<para>key to use with the settings module for storing the stream write progress</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>non-negative on success, negative errno code on fail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/stream_flash.h" line="157" column="5" declfile="include/storage/stream_flash.h" declline="157" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__flash_1gafd736d9014a3c5060d5c43383d07ac59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stream_flash_progress_clear</definition>
        <argsstring>(struct stream_flash_ctx *ctx, const char *settings_key)</argsstring>
        <name>stream_flash_progress_clear</name>
        <param>
          <type>struct <ref refid="structstream__flash__ctx" kindref="compound">stream_flash_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>settings_key</declname>
        </param>
        <briefdescription>
<para>Clear persistent stream write progress stored with key <computeroutput>settings_key</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>settings_key</parametername>
</parameternamelist>
<parameterdescription>
<para>key previously used for storing the stream write progress</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>non-negative on success, negative errno code on fail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/stream_flash.h" line="169" column="5" declfile="include/storage/stream_flash.h" declline="169" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstraction over stream writes to flash. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
