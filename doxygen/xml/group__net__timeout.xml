<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__net__timeout" kind="group">
    <compoundname>net_timeout</compoundname>
    <title>Network long timeout primitives and helpers</title>
    <innerclass refid="structnet__timeout" prot="public">net_timeout</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__net__timeout_1ga833e08b83a671d4adff799d648a12417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_timeout_set</definition>
        <argsstring>(struct net_timeout *timeout, uint32_t lifetime, uint32_t now)</argsstring>
        <name>net_timeout_set</name>
        <param>
          <type>struct <ref refid="structnet__timeout" kindref="compound">net_timeout</ref> *</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>lifetime</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>now</declname>
        </param>
        <briefdescription>
<para>Configure a network timeout structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the timeout state.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lifetime</parametername>
</parameternamelist>
<parameterdescription>
<para>the duration of the timeout in seconds.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>now</parametername>
</parameternamelist>
<parameterdescription>
<para>the time at which the timeout started counting down, in milliseconds. This is generally a captured value of <ref refid="group__clock__apis_1ga9253cfb7b46af4d8994349323ce9872b" kindref="member">k_uptime_get_32()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_timeout.h" line="95" column="6" declfile="include/net/net_timeout.h" declline="95" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__timeout_1ga3d9804474050d070fc4224e834f8cefc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1ac714c0d2c1a4adb10e73cab29623314b" kindref="member">int64_t</ref></type>
        <definition>int64_t net_timeout_deadline</definition>
        <argsstring>(const struct net_timeout *timeout, int64_t now)</argsstring>
        <name>net_timeout_deadline</name>
        <param>
          <type>const struct <ref refid="structnet__timeout" kindref="compound">net_timeout</ref> *</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1ac714c0d2c1a4adb10e73cab29623314b" kindref="member">int64_t</ref></type>
          <declname>now</declname>
        </param>
        <briefdescription>
<para>Return the 64-bit system time at which the timeout will complete. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Correct behavior requires invocation of <ref refid="group__net__timeout_1ga07b07966dd10929f6d3774467614f006" kindref="member">net_timeout_evaluate()</ref> at its specified intervals.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>state a pointer to the timeout state, initialized by <ref refid="group__net__timeout_1ga833e08b83a671d4adff799d648a12417" kindref="member">net_timeout_set()</ref> and maintained by <ref refid="group__net__timeout_1ga07b07966dd10929f6d3774467614f006" kindref="member">net_timeout_evaluate()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>now</parametername>
</parameternamelist>
<parameterdescription>
<para>the full-precision value of <ref refid="group__clock__apis_1gae3e992cd3257c23d5b26d765fcbb2b69" kindref="member">k_uptime_get()</ref> relative to which the deadline will be calculated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of <ref refid="group__clock__apis_1gae3e992cd3257c23d5b26d765fcbb2b69" kindref="member">k_uptime_get()</ref> at which the timeout will expire. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_timeout.h" line="112" column="9" declfile="include/net/net_timeout.h" declline="112" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__net__timeout_1ga34e39484b19c39b3e37a4799848ad502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t net_timeout_remaining</definition>
        <argsstring>(const struct net_timeout *timeout, uint32_t now)</argsstring>
        <name>net_timeout_remaining</name>
        <param>
          <type>const struct <ref refid="structnet__timeout" kindref="compound">net_timeout</ref> *</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>now</declname>
        </param>
        <briefdescription>
<para>Calculate the remaining time to the timeout in whole seconds. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function rounds the remaining time down, i.e. if the timeout will occur in 3500 milliseconds the value 3 will be returned.</para>
</simplesect>
<simplesect kind="note"><para>Correct behavior requires invocation of <ref refid="group__net__timeout_1ga07b07966dd10929f6d3774467614f006" kindref="member">net_timeout_evaluate()</ref> at its specified intervals.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the timeout state</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>now</parametername>
</parameternamelist>
<parameterdescription>
<para>the time relative to which the estimate of remaining time should be calculated. This should be recently captured value from <ref refid="group__clock__apis_1ga9253cfb7b46af4d8994349323ce9872b" kindref="member">k_uptime_get_32()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if the timeout has completed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>positive</parametername>
</parameternamelist>
<parameterdescription>
<para>the remaining duration of the timeout, in seconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_timeout.h" line="132" column="10" declfile="include/net/net_timeout.h" declline="132" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__timeout_1ga07b07966dd10929f6d3774467614f006" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t net_timeout_evaluate</definition>
        <argsstring>(struct net_timeout *timeout, uint32_t now)</argsstring>
        <name>net_timeout_evaluate</name>
        <param>
          <type>struct <ref refid="structnet__timeout" kindref="compound">net_timeout</ref> *</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>now</declname>
        </param>
        <briefdescription>
<para>Update state to reflect elapsed time and get new delay. </para>
        </briefdescription>
        <detaileddescription>
<para>This function must be invoked periodically to (1) apply the effect of elapsed time on what remains of a total delay that exceeded the maximum representable delay, and (2) determine that either the timeout has completed or that the infrastructure must wait a certain period before checking again for completion.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the timeout state</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>now</parametername>
</parameternamelist>
<parameterdescription>
<para>the time relative to which the estimate of remaining time should be calculated. This should be recently captured value from <ref refid="group__clock__apis_1ga9253cfb7b46af4d8994349323ce9872b" kindref="member">k_uptime_get_32()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if the timeout has completed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>positive</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum delay until the state of this timeout should be re-evaluated, in milliseconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_timeout.h" line="153" column="10" declfile="include/net/net_timeout.h" declline="153" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__net__timeout_1gab59bff1cb36902a27ee8e887ef39a4ce" prot="public" static="no">
        <name>NET_TIMEOUT_MAX_VALUE</name>
        <initializer>((<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref>)<ref refid="stdint_8h_1a181807730d4a375f848ba139813ce04f" kindref="member">INT32_MAX</ref>)</initializer>
        <briefdescription>
<para>Divisor used to support ms resolution timeouts. </para>
        </briefdescription>
        <detaileddescription>
<para>Because delays are processed in work queues which are not invoked synchronously with clock changes we need to be able to detect timeouts after they occur, which requires comparing &quot;deadline&quot; to &quot;now&quot; with enough &quot;slop&quot; to handle any observable latency due to &quot;now&quot; advancing past &quot;deadline&quot;.</para>
<para>The simplest solution is to use the native conversion of the well-defined 32-bit unsigned difference to a 32-bit signed difference, which caps the maximum delay at INT32_MAX. This is compatible with the standard mechanism for detecting completion of deadlines that do not overflow their representation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_timeout.h" line="48" column="9" bodyfile="include/net/net_timeout.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Network long timeout primitives and helpers. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
