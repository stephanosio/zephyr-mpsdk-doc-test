<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__spinlock__apis" kind="group">
    <compoundname>spinlock_apis</compoundname>
    <title>Spinlock APIs</title>
    <innerclass refid="structk__spinlock" prot="public">k_spinlock</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__spinlock__apis_1gacacd3d3bbd31416dbbf6a0239be82ef0" prot="public" static="no">
        <type>struct z_spinlock_key</type>
        <definition>typedef struct z_spinlock_key k_spinlock_key_t</definition>
        <argsstring></argsstring>
        <name>k_spinlock_key_t</name>
        <briefdescription>
<para>Spinlock key type. </para>
        </briefdescription>
        <detaileddescription>
<para>This type defines a &quot;key&quot; value used by a spinlock implementation to store the system interrupt state at the time of a call to <ref refid="group__spinlock__apis_1gaac60da4347f5b29ff8c4e5f24c99b3bf" kindref="member">k_spin_lock()</ref>. It is expected to be passed to a matching <ref refid="group__spinlock__apis_1gaa54fc60d17d1033276aed4605671ed8e" kindref="member">k_spin_unlock()</ref>.</para>
<para>This type is opaque and should not be inspected by application code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spinlock.h" line="100" column="29" bodyfile="include/spinlock.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__spinlock__apis_1gaac60da4347f5b29ff8c4e5f24c99b3bf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> <ref refid="group__spinlock__apis_1gacacd3d3bbd31416dbbf6a0239be82ef0" kindref="member">k_spinlock_key_t</ref></type>
        <definition>static ALWAYS_INLINE k_spinlock_key_t k_spin_lock</definition>
        <argsstring>(struct k_spinlock *l)</argsstring>
        <name>k_spin_lock</name>
        <param>
          <type>struct <ref refid="structk__spinlock" kindref="compound">k_spinlock</ref> *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Lock a spinlock. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine locks the specified spinlock, returning a key handle representing interrupt state needed at unlock time. Upon returning, the calling thread is guaranteed not to be suspended or interrupted on its current CPU until it calls <ref refid="group__spinlock__apis_1gaa54fc60d17d1033276aed4605671ed8e" kindref="member">k_spin_unlock()</ref>. The implementation guarantees mutual exclusion: exactly one thread on one CPU will return from <ref refid="group__spinlock__apis_1gaac60da4347f5b29ff8c4e5f24c99b3bf" kindref="member">k_spin_lock()</ref> at a time. Other CPUs trying to acquire a lock already held by another CPU will enter an implementation-defined busy loop (&quot;spinning&quot;) until the lock is released.</para>
<para>Separate spin locks may be nested. It is legal to lock an (unlocked) spin lock while holding a different lock. Spin locks are not recursive, however: an attempt to acquire a spin lock that the CPU already holds will deadlock.</para>
<para>In circumstances where only one CPU exists, the behavior of <ref refid="group__spinlock__apis_1gaac60da4347f5b29ff8c4e5f24c99b3bf" kindref="member">k_spin_lock()</ref> remains as specified above, though obviously no spinning will take place. Implementations may be free to optimize in uniprocessor contexts such that the locking reduces to an interrupt mask operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the spinlock to lock </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A key value that must be passed to <ref refid="group__spinlock__apis_1gaa54fc60d17d1033276aed4605671ed8e" kindref="member">k_spin_unlock()</ref> when the lock is released. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spinlock.h" line="130" column="39" bodyfile="include/spinlock.h" bodystart="130" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="group__spinlock__apis_1gaa54fc60d17d1033276aed4605671ed8e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> void</type>
        <definition>static ALWAYS_INLINE void k_spin_unlock</definition>
        <argsstring>(struct k_spinlock *l, k_spinlock_key_t key)</argsstring>
        <name>k_spin_unlock</name>
        <param>
          <type>struct <ref refid="structk__spinlock" kindref="compound">k_spinlock</ref> *</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="group__spinlock__apis_1gacacd3d3bbd31416dbbf6a0239be82ef0" kindref="member">k_spinlock_key_t</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Unlock a spin lock. </para>
        </briefdescription>
        <detaileddescription>
<para>This releases a lock acquired by <ref refid="group__spinlock__apis_1gaac60da4347f5b29ff8c4e5f24c99b3bf" kindref="member">k_spin_lock()</ref>. After this function is called, any CPU will be able to acquire the lock. If other CPUs are currently spinning inside <ref refid="group__spinlock__apis_1gaac60da4347f5b29ff8c4e5f24c99b3bf" kindref="member">k_spin_lock()</ref> waiting for this lock, exactly one of them will return synchronously with the lock held.</para>
<para>Spin locks must be properly nested. A call to <ref refid="group__spinlock__apis_1gaa54fc60d17d1033276aed4605671ed8e" kindref="member">k_spin_unlock()</ref> must be made on the lock object most recently locked using <ref refid="group__spinlock__apis_1gaac60da4347f5b29ff8c4e5f24c99b3bf" kindref="member">k_spin_lock()</ref>, using the key value that it returned. Attempts to unlock mis-nested locks, or to unlock locks that are not held, or to passing a key parameter other than the one returned from <ref refid="group__spinlock__apis_1gaac60da4347f5b29ff8c4e5f24c99b3bf" kindref="member">k_spin_lock()</ref>, are illegal. When CONFIG_SPIN_VALIDATE is set, some of these errors can be detected by the framework.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the spinlock to release </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The value returned from <ref refid="group__spinlock__apis_1gaac60da4347f5b29ff8c4e5f24c99b3bf" kindref="member">k_spin_lock()</ref> when this lock was acquired </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spinlock.h" line="180" column="27" bodyfile="include/spinlock.h" bodystart="180" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="group__spinlock__apis_1ga0380368fc016ee2a757ad02e1b6804b0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> void</type>
        <definition>static ALWAYS_INLINE void k_spin_release</definition>
        <argsstring>(struct k_spinlock *l)</argsstring>
        <name>k_spin_release</name>
        <param>
          <type>struct <ref refid="structk__spinlock" kindref="compound">k_spinlock</ref> *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spinlock.h" line="204" column="27" bodyfile="include/spinlock.h" bodystart="204" bodyend="213"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Spinlock APIs. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
