<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__video__interface" kind="group">
    <compoundname>video_interface</compoundname>
    <title>Video Interface</title>
    <innerclass refid="structvideo__format" prot="public">video_format</innerclass>
    <innerclass refid="structvideo__format__cap" prot="public">video_format_cap</innerclass>
    <innerclass refid="structvideo__caps" prot="public">video_caps</innerclass>
    <innerclass refid="structvideo__buffer" prot="public">video_buffer</innerclass>
    <innerclass refid="structvideo__driver__api" prot="public">video_driver_api</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__video__interface_1gafa3d076a1324ea54b5c5ec7806cb2ef9" prot="public" static="no" strong="no">
        <type></type>
        <name>video_endpoint_id</name>
        <enumvalue id="group__video__interface_1ggafa3d076a1324ea54b5c5ec7806cb2ef9a4293b9f211c8ec80d5ad873cec7022c7" prot="public">
          <name>VIDEO_EP_NONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__video__interface_1ggafa3d076a1324ea54b5c5ec7806cb2ef9a450d124253f8463114b851b1e51960fb" prot="public">
          <name>VIDEO_EP_ANY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__video__interface_1ggafa3d076a1324ea54b5c5ec7806cb2ef9a33427df6cd696ceede84d93d5245d3e7" prot="public">
          <name>VIDEO_EP_IN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__video__interface_1ggafa3d076a1324ea54b5c5ec7806cb2ef9a69d107ac2c94372d4ae872b4e7e4b35a" prot="public">
          <name>VIDEO_EP_OUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>video_endpoint_id enum Identify the video device endpoint. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="117" column="1" bodyfile="include/drivers/video.h" bodystart="117" bodyend="122"/>
      </memberdef>
      <memberdef kind="enum" id="group__video__interface_1ga0f50f287c4075e992fbab6d8a990d7a8" prot="public" static="no" strong="no">
        <type></type>
        <name>video_signal_result</name>
        <enumvalue id="group__video__interface_1gga0f50f287c4075e992fbab6d8a990d7a8ad7499b0b62f470b63d624ec49d358db8" prot="public">
          <name>VIDEO_BUF_DONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__video__interface_1gga0f50f287c4075e992fbab6d8a990d7a8a268855ccd0d8e10f608d4dac5f76fac8" prot="public">
          <name>VIDEO_BUF_ABORTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__video__interface_1gga0f50f287c4075e992fbab6d8a990d7a8afe8726c40851834057bbf9d99b0433a3" prot="public">
          <name>VIDEO_BUF_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>video_event enum Identify video event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="128" column="1" bodyfile="include/drivers/video.h" bodystart="128" bodyend="132"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__video__interface_1ga0cc17cc7532305e6c1c826387745d653" prot="public" static="no">
        <type>int(*</type>
        <definition>video_api_set_format_t</definition>
        <argsstring>)(const struct device *dev, enum video_endpoint_id ep, struct video_format *fmt)</argsstring>
        <name>video_api_set_format_t</name>
        <briefdescription>
<para>Set video format See <ref refid="group__video__interface_1gae38df95199e41ac197b9754824b2bd29" kindref="member">video_set_format()</ref> for argument descriptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="139" column="9" bodyfile="include/drivers/video.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__video__interface_1ga4442f391f6d0281d323fb15ab47ced1e" prot="public" static="no">
        <type>int(*</type>
        <definition>video_api_get_format_t</definition>
        <argsstring>)(const struct device *dev, enum video_endpoint_id ep, struct video_format *fmt)</argsstring>
        <name>video_api_get_format_t</name>
        <briefdescription>
<para>get current video format See <ref refid="group__video__interface_1gac0964bd0b57c6be5e773a21af0438edc" kindref="member">video_get_format()</ref> for argument descriptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="148" column="9" bodyfile="include/drivers/video.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__video__interface_1ga11186fd10ade53fa17238dc0be634df0" prot="public" static="no">
        <type>int(*</type>
        <definition>video_api_enqueue_t</definition>
        <argsstring>)(const struct device *dev, enum video_endpoint_id ep, struct video_buffer *buf)</argsstring>
        <name>video_api_enqueue_t</name>
        <briefdescription>
<para>Enqueue a buffer in the driver’s incoming queue. See <ref refid="group__video__interface_1gac19d14a5875d48c96bd66a8bb65e8a51" kindref="member">video_enqueue()</ref> for argument descriptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="157" column="9" bodyfile="include/drivers/video.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__video__interface_1gaa51265cb53a7fd67f4d0fcaf37e72145" prot="public" static="no">
        <type>int(*</type>
        <definition>video_api_dequeue_t</definition>
        <argsstring>)(const struct device *dev, enum video_endpoint_id ep, struct video_buffer **buf, k_timeout_t timeout)</argsstring>
        <name>video_api_dequeue_t</name>
        <briefdescription>
<para>Dequeue a buffer from the driver’s outgoing queue. See <ref refid="group__video__interface_1ga9862024c9b07855609ea2078680c9afd" kindref="member">video_dequeue()</ref> for argument descriptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="166" column="9" bodyfile="include/drivers/video.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__video__interface_1ga92acfc12d5cf3a070f31faa9e9933bbf" prot="public" static="no">
        <type>int(*</type>
        <definition>video_api_flush_t</definition>
        <argsstring>)(const struct device *dev, enum video_endpoint_id ep, bool cancel)</argsstring>
        <name>video_api_flush_t</name>
        <briefdescription>
<para>Flush endpoint buffers, buffer are moved from incoming queue to outgoing queue. See <ref refid="group__video__interface_1gae5e6256ab799ca1cbbac4987b82bb145" kindref="member">video_flush()</ref> for argument descriptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="177" column="9" bodyfile="include/drivers/video.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__video__interface_1ga030f31941d35bc86fb54fb3cbbaf3dd0" prot="public" static="no">
        <type>int(*</type>
        <definition>video_api_stream_start_t</definition>
        <argsstring>)(const struct device *dev)</argsstring>
        <name>video_api_stream_start_t</name>
        <briefdescription>
<para>Start the capture or output process. See <ref refid="group__video__interface_1ga7145a18ad5e3e5d74398c89c00ea19f0" kindref="member">video_stream_start()</ref> for argument descriptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="186" column="9" bodyfile="include/drivers/video.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__video__interface_1ga33b8ca01b23aae7b1a90351730f039f0" prot="public" static="no">
        <type>int(*</type>
        <definition>video_api_stream_stop_t</definition>
        <argsstring>)(const struct device *dev)</argsstring>
        <name>video_api_stream_stop_t</name>
        <briefdescription>
<para>Stop the capture or output process. See <ref refid="group__video__interface_1ga6464dede55777c9082e85d6af43a4d48" kindref="member">video_stream_stop()</ref> for argument descriptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="193" column="9" bodyfile="include/drivers/video.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__video__interface_1gafb7b5f44634269333834264aa4116267" prot="public" static="no">
        <type>int(*</type>
        <definition>video_api_set_ctrl_t</definition>
        <argsstring>)(const struct device *dev, unsigned int cid, void *value)</argsstring>
        <name>video_api_set_ctrl_t</name>
        <briefdescription>
<para>set a video control value. See <ref refid="group__video__interface_1ga87873a4612cfbd2cb62595dec15cb77e" kindref="member">video_set_ctrl()</ref> for argument descriptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="200" column="9" bodyfile="include/drivers/video.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__video__interface_1gada5c8458841e608fb60370a275ab8d87" prot="public" static="no">
        <type>int(*</type>
        <definition>video_api_get_ctrl_t</definition>
        <argsstring>)(const struct device *dev, unsigned int cid, void *value)</argsstring>
        <name>video_api_get_ctrl_t</name>
        <briefdescription>
<para>get a video control value. See <ref refid="group__video__interface_1ga664122e82da802f1dff8b5c30e158acd" kindref="member">video_get_ctrl()</ref> for argument descriptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="209" column="9" bodyfile="include/drivers/video.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__video__interface_1ga93f92a3bb87b1a124a51b49b7154d9cb" prot="public" static="no">
        <type>int(*</type>
        <definition>video_api_get_caps_t</definition>
        <argsstring>)(const struct device *dev, enum video_endpoint_id ep, struct video_caps *caps)</argsstring>
        <name>video_api_get_caps_t</name>
        <briefdescription>
<para>Get capabilities of a video endpoint. See <ref refid="group__video__interface_1ga4d5237607c858708380955705a2023bd" kindref="member">video_get_caps()</ref> for argument descriptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="218" column="9" bodyfile="include/drivers/video.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__video__interface_1ga2e65c8d29be2b80514b1f9a7688f0978" prot="public" static="no">
        <type>int(*</type>
        <definition>video_api_set_signal_t</definition>
        <argsstring>)(const struct device *dev, enum video_endpoint_id ep, struct k_poll_signal *signal)</argsstring>
        <name>video_api_set_signal_t</name>
        <briefdescription>
<para>Register/Unregister poll signal for buffer events. See <ref refid="group__video__interface_1gab38a9f956f5d5452fc6e0c0f1bf382be" kindref="member">video_set_signal()</ref> for argument descriptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="227" column="9" bodyfile="include/drivers/video.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__video__interface_1gae38df95199e41ac197b9754824b2bd29" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int video_set_format</definition>
        <argsstring>(const struct device *dev, enum video_endpoint_id ep, struct video_format *fmt)</argsstring>
        <name>video_set_format</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__video__interface_1gafa3d076a1324ea54b5c5ec7806cb2ef9" kindref="member">video_endpoint_id</ref></type>
          <declname>ep</declname>
        </param>
        <param>
          <type>struct <ref refid="structvideo__format" kindref="compound">video_format</ref> *</type>
          <declname>fmt</declname>
        </param>
        <briefdescription>
<para>Set video format. </para>
        </briefdescription>
        <detaileddescription>
<para>Configure video device with a specific format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a video format struct.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Is successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If parameters are invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If format is not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="261" column="19" bodyfile="include/drivers/video.h" bodystart="261" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="group__video__interface_1gac0964bd0b57c6be5e773a21af0438edc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int video_get_format</definition>
        <argsstring>(const struct device *dev, enum video_endpoint_id ep, struct video_format *fmt)</argsstring>
        <name>video_get_format</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__video__interface_1gafa3d076a1324ea54b5c5ec7806cb2ef9" kindref="member">video_endpoint_id</ref></type>
          <declname>ep</declname>
        </param>
        <param>
          <type>struct <ref refid="structvideo__format" kindref="compound">video_format</ref> *</type>
          <declname>fmt</declname>
        </param>
        <briefdescription>
<para>Get video format. </para>
        </briefdescription>
        <detaileddescription>
<para>Get video device current video format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to video format struct.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>to video format </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="286" column="19" bodyfile="include/drivers/video.h" bodystart="286" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="group__video__interface_1gac19d14a5875d48c96bd66a8bb65e8a51" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int video_enqueue</definition>
        <argsstring>(const struct device *dev, enum video_endpoint_id ep, struct video_buffer *buf)</argsstring>
        <name>video_enqueue</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__video__interface_1gafa3d076a1324ea54b5c5ec7806cb2ef9" kindref="member">video_endpoint_id</ref></type>
          <declname>ep</declname>
        </param>
        <param>
          <type>struct <ref refid="structvideo__buffer" kindref="compound">video_buffer</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Enqueue a video buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Enqueue an empty (capturing) or filled (output) video buffer in the driver’s endpoint incoming queue.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the video buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Is successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If parameters are invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="314" column="19" bodyfile="include/drivers/video.h" bodystart="314" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="group__video__interface_1ga9862024c9b07855609ea2078680c9afd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int video_dequeue</definition>
        <argsstring>(const struct device *dev, enum video_endpoint_id ep, struct video_buffer **buf, k_timeout_t timeout)</argsstring>
        <name>video_dequeue</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__video__interface_1gafa3d076a1324ea54b5c5ec7806cb2ef9" kindref="member">video_endpoint_id</ref></type>
          <declname>ep</declname>
        </param>
        <param>
          <type>struct <ref refid="structvideo__buffer" kindref="compound">video_buffer</ref> **</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Dequeue a video buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Dequeue a filled (capturing) or displayed (output) buffer from the driver’s enpoint outgoing queue.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer a video buffer pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Is successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If parameters are invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="343" column="19" bodyfile="include/drivers/video.h" bodystart="343" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="group__video__interface_1gae5e6256ab799ca1cbbac4987b82bb145" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int video_flush</definition>
        <argsstring>(const struct device *dev, enum video_endpoint_id ep, bool cancel)</argsstring>
        <name>video_flush</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__video__interface_1gafa3d076a1324ea54b5c5ec7806cb2ef9" kindref="member">video_endpoint_id</ref></type>
          <declname>ep</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>cancel</declname>
        </param>
        <briefdescription>
<para>Flush endpoint buffers. </para>
        </briefdescription>
        <detaileddescription>
<para>A call to flush finishes when all endpoint buffers have been moved from incoming queue to outgoing queue. Either because canceled or fully processed through the video function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cancel</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, cancel buffer processing instead of waiting for completion.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Is successful, -ERRNO code otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="373" column="19" bodyfile="include/drivers/video.h" bodystart="373" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="group__video__interface_1ga7145a18ad5e3e5d74398c89c00ea19f0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int video_stream_start</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>video_stream_start</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Start the video device function. </para>
        </briefdescription>
        <detaileddescription>
<para>video_stream_start is called to enter ‘streaming’ state (capture, output...). The driver may receive buffers with <ref refid="group__video__interface_1gac19d14a5875d48c96bd66a8bb65e8a51" kindref="member">video_enqueue()</ref> before video_stream_start is called. If driver/device needs a minimum number of buffers before being able to start streaming, then driver set the min_vbuf_count to the related endpoint capabilities.</para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Is successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="399" column="19" bodyfile="include/drivers/video.h" bodystart="399" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="group__video__interface_1ga6464dede55777c9082e85d6af43a4d48" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int video_stream_stop</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>video_stream_stop</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Stop the video device function. </para>
        </briefdescription>
        <detaileddescription>
<para>On video_stream_stop, driver must stop any transactions or wait until they finish.</para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Is successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="420" column="19" bodyfile="include/drivers/video.h" bodystart="420" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="group__video__interface_1ga4d5237607c858708380955705a2023bd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int video_get_caps</definition>
        <argsstring>(const struct device *dev, enum video_endpoint_id ep, struct video_caps *caps)</argsstring>
        <name>video_get_caps</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__video__interface_1gafa3d076a1324ea54b5c5ec7806cb2ef9" kindref="member">video_endpoint_id</ref></type>
          <declname>ep</declname>
        </param>
        <param>
          <type>struct <ref refid="structvideo__caps" kindref="compound">video_caps</ref> *</type>
          <declname>caps</declname>
        </param>
        <briefdescription>
<para>Get the capabilities of a video endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>caps</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structvideo__caps" kindref="compound">video_caps</ref> struct to fill.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Is successful, -ERRNO code otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="445" column="19" bodyfile="include/drivers/video.h" bodystart="445" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="group__video__interface_1ga87873a4612cfbd2cb62595dec15cb77e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int video_set_ctrl</definition>
        <argsstring>(const struct device *dev, unsigned int cid, void *value)</argsstring>
        <name>video_set_ctrl</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>cid</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the value of a control. </para>
        </briefdescription>
        <detaileddescription>
<para>This set the value of a video control, value type depends on control ID, and must be interpreted accordingly.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Control ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the control value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Is successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If parameters are invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If format is not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="474" column="19" bodyfile="include/drivers/video.h" bodystart="474" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="group__video__interface_1ga664122e82da802f1dff8b5c30e158acd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int video_get_ctrl</definition>
        <argsstring>(const struct device *dev, unsigned int cid, void *value)</argsstring>
        <name>video_get_ctrl</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>cid</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Get the current value of a control. </para>
        </briefdescription>
        <detaileddescription>
<para>This retrieve the value of a video control, value type depends on control ID, and must be interpreted accordingly.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Control ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the control value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Is successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If parameters are invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If format is not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="502" column="19" bodyfile="include/drivers/video.h" bodystart="502" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="group__video__interface_1gab38a9f956f5d5452fc6e0c0f1bf382be" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int video_set_signal</definition>
        <argsstring>(const struct device *dev, enum video_endpoint_id ep, struct k_poll_signal *signal)</argsstring>
        <name>video_set_signal</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__video__interface_1gafa3d076a1324ea54b5c5ec7806cb2ef9" kindref="member">video_endpoint_id</ref></type>
          <declname>ep</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref> *</type>
          <declname>signal</declname>
        </param>
        <briefdescription>
<para>Register/Unregister k_poll signal for a video endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>Register a poll signal to the endpoint, which will be signaled on frame completion (done, aborted, error). Registering a NULL poll signal unregisters any previously registered signal.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signal</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Is successful, -ERRNO code otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="528" column="19" bodyfile="include/drivers/video.h" bodystart="528" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="group__video__interface_1ga8454f5568e24cf7b8a59dde765b4a804" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structvideo__buffer" kindref="compound">video_buffer</ref> *</type>
        <definition>struct video_buffer * video_buffer_alloc</definition>
        <argsstring>(size_t size)</argsstring>
        <name>video_buffer_alloc</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate video buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the video buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>to allocated video buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="549" column="19" declfile="include/drivers/video.h" declline="549" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__video__interface_1gad2661653db019b673153001b2c61b10f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void video_buffer_release</definition>
        <argsstring>(struct video_buffer *buf)</argsstring>
        <name>video_buffer_release</name>
        <param>
          <type>struct <ref refid="structvideo__buffer" kindref="compound">video_buffer</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Release a video buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the video buffer to release. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="556" column="6" declfile="include/drivers/video.h" declline="556" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__video__interface_1gabeacdd211927e893561446fd7299ab08" prot="public" static="no">
        <name>video_fourcc</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>c</defname></param>
        <param><defname>d</defname></param>
        <initializer>	((<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref>)(a) | ((<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref>)(b) &lt;&lt; 8) | ((<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref>)(<ref refid="kobject_8c_1aa52df6052d1a8a5319a5c99bbc852281" kindref="member">c</ref>) &lt;&lt; 16) | ((<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref>)(<ref refid="asm-macro-64-bit-gnu_8h_1a6b6a358e951559f7fd95cb1da716005c" kindref="member">d</ref>) &lt;&lt; 24))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="560" column="9" bodyfile="include/drivers/video.h" bodystart="560" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__video__interface_1ga64ad74bb6c92041a4190614b684ae024" prot="public" static="no">
        <name>VIDEO_PIX_FMT_BGGR8</name>
        <initializer><ref refid="group__video__interface_1gabeacdd211927e893561446fd7299ab08" kindref="member">video_fourcc</ref>(&apos;B&apos;, &apos;G&apos;, &apos;G&apos;, &apos;R&apos;) /*  8  BGBG.. GRGR.. */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="564" column="9" bodyfile="include/drivers/video.h" bodystart="564" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__video__interface_1gaebdfd9d4230b56f6b8533630356b8793" prot="public" static="no">
        <name>VIDEO_PIX_FMT_GBRG8</name>
        <initializer><ref refid="group__video__interface_1gabeacdd211927e893561446fd7299ab08" kindref="member">video_fourcc</ref>(&apos;G&apos;, &apos;B&apos;, &apos;R&apos;, &apos;G&apos;) /*  8  GBGB.. RGRG.. */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="565" column="9" bodyfile="include/drivers/video.h" bodystart="565" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__video__interface_1ga6b9c8d43406e45927f4e9e94504eae9c" prot="public" static="no">
        <name>VIDEO_PIX_FMT_GRBG8</name>
        <initializer><ref refid="group__video__interface_1gabeacdd211927e893561446fd7299ab08" kindref="member">video_fourcc</ref>(&apos;G&apos;, &apos;R&apos;, &apos;B&apos;, &apos;G&apos;) /*  8  GRGR.. BGBG.. */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="566" column="9" bodyfile="include/drivers/video.h" bodystart="566" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__video__interface_1ga0c98dc205b724c9e4556e41cc266d80e" prot="public" static="no">
        <name>VIDEO_PIX_FMT_RGGB8</name>
        <initializer><ref refid="group__video__interface_1gabeacdd211927e893561446fd7299ab08" kindref="member">video_fourcc</ref>(&apos;R&apos;, &apos;G&apos;, &apos;G&apos;, &apos;B&apos;) /*  8  RGRG.. GBGB.. */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="567" column="9" bodyfile="include/drivers/video.h" bodystart="567" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__video__interface_1gaf009d0eb7dbdb3bfd8883da03478c1ec" prot="public" static="no">
        <name>VIDEO_PIX_FMT_RGB565</name>
        <initializer><ref refid="group__video__interface_1gabeacdd211927e893561446fd7299ab08" kindref="member">video_fourcc</ref>(&apos;R&apos;, &apos;G&apos;, &apos;B&apos;, &apos;P&apos;) /* 16  RGB-5-6-5 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="570" column="9" bodyfile="include/drivers/video.h" bodystart="570" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__video__interface_1ga035a13c38c4f123411547e2c40d58bd2" prot="public" static="no">
        <name>VIDEO_PIX_FMT_JPEG</name>
        <initializer><ref refid="group__video__interface_1gabeacdd211927e893561446fd7299ab08" kindref="member">video_fourcc</ref>(&apos;J&apos;, &apos;P&apos;, &apos;E&apos;, &apos;G&apos;) /*  8  JPEG */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/video.h" line="573" column="9" bodyfile="include/drivers/video.h" bodystart="573" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Video Interface. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
