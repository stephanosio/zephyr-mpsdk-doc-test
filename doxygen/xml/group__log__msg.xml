<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__log__msg" kind="group">
    <compoundname>log_msg</compoundname>
    <title>Log message API</title>
    <innerclass refid="structlog__msg__ids" prot="public">log_msg_ids</innerclass>
    <innerclass refid="structlog__msg__generic__hdr" prot="public">log_msg_generic_hdr</innerclass>
    <innerclass refid="structlog__msg__std__hdr" prot="public">log_msg_std_hdr</innerclass>
    <innerclass refid="structlog__msg__hexdump__hdr" prot="public">log_msg_hexdump_hdr</innerclass>
    <innerclass refid="structlog__msg__hdr" prot="public">log_msg_hdr</innerclass>
    <innerclass refid="unionlog__msg__head__data" prot="public">log_msg_head_data</innerclass>
    <innerclass refid="structlog__msg__ext__head__data" prot="public">log_msg_ext_head_data</innerclass>
    <innerclass refid="structlog__msg" prot="public">log_msg</innerclass>
    <innerclass refid="structlog__msg__cont" prot="public">log_msg_cont</innerclass>
    <innerclass refid="unionlog__msg__chunk" prot="public">log_msg_chunk</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__log__msg_1ga60fcf7fd1423d631f2057111818143ca" prot="public" static="no">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> long</type>
        <definition>typedef unsigned long log_arg_t</definition>
        <argsstring></argsstring>
        <name>log_arg_t</name>
        <briefdescription>
<para>Log argument type. </para>
        </briefdescription>
        <detaileddescription>
<para>Should preferably be equivalent to a native word size. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="29" column="23" bodyfile="include/logging/log_msg.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__log__msg_1ga00a80b9f48ab8c446dc1e29018983e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void log_msg_pool_init</definition>
        <argsstring>(void)</argsstring>
        <name>log_msg_pool_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for initialization of the log message pool. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="165" column="6" declfile="include/logging/log_msg.h" declline="165" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1gad34f068325f8d3818005ce3bf5ed8d2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void log_msg_get</definition>
        <argsstring>(struct log_msg *msg)</argsstring>
        <name>log_msg_get</name>
        <param>
          <type>struct <ref refid="structlog__msg" kindref="compound">log_msg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Function for indicating that message is in use. </para>
        </briefdescription>
        <detaileddescription>
<para>Message can be used (read) by multiple users. Internal reference counter is atomically increased. See <ref refid="group__log__msg_1gaa7cb59b92b25a79dba0d013d4e565eb2" kindref="member">log_msg_put</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="174" column="6" declfile="include/logging/log_msg.h" declline="174" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1gaa7cb59b92b25a79dba0d013d4e565eb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void log_msg_put</definition>
        <argsstring>(struct log_msg *msg)</argsstring>
        <name>log_msg_put</name>
        <param>
          <type>struct <ref refid="structlog__msg" kindref="compound">log_msg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Function for indicating that message is no longer in use. </para>
        </briefdescription>
        <detaileddescription>
<para>Internal reference counter is atomically decreased. If reference counter equals 0 message is freed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="183" column="6" declfile="include/logging/log_msg.h" declline="183" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1ga5a3dfb0fe49d8ba541dd1fc9dcf71d0a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t log_msg_domain_id_get</definition>
        <argsstring>(struct log_msg *msg)</argsstring>
        <name>log_msg_domain_id_get</name>
        <param>
          <type>struct <ref refid="structlog__msg" kindref="compound">log_msg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Get domain ID of the message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Message</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Domain ID. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="191" column="24" bodyfile="include/logging/log_msg.h" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1ga6d69f64bb78e4e9d92340338326c435e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t log_msg_source_id_get</definition>
        <argsstring>(struct log_msg *msg)</argsstring>
        <name>log_msg_source_id_get</name>
        <param>
          <type>struct <ref refid="structlog__msg" kindref="compound">log_msg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Get source ID (module or instance) of the message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Message</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Source ID. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="202" column="24" bodyfile="include/logging/log_msg.h" bodystart="202" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1ga146bfd52f03be08b6e8fb472d8275622" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t log_msg_level_get</definition>
        <argsstring>(struct log_msg *msg)</argsstring>
        <name>log_msg_level_get</name>
        <param>
          <type>struct <ref refid="structlog__msg" kindref="compound">log_msg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Get severity level of the message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Message</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Severity message. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="213" column="24" bodyfile="include/logging/log_msg.h" bodystart="213" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1ga3ae6f1ab10f322506a136dd3e3070d48" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t log_msg_timestamp_get</definition>
        <argsstring>(struct log_msg *msg)</argsstring>
        <name>log_msg_timestamp_get</name>
        <param>
          <type>struct <ref refid="structlog__msg" kindref="compound">log_msg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Get timestamp of the message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Message</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timestamp value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="224" column="24" bodyfile="include/logging/log_msg.h" bodystart="224" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1ga914c4e8d90ccfda30f1105e18812b22b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool log_msg_is_std</definition>
        <argsstring>(struct log_msg *msg)</argsstring>
        <name>log_msg_is_std</name>
        <param>
          <type>struct <ref refid="structlog__msg" kindref="compound">log_msg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Check if message is of standard type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Message</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Standard message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Hexdump message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="236" column="20" bodyfile="include/logging/log_msg.h" bodystart="236" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1ga87ff24775dd5d88f779b2965da9f5f7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t log_msg_nargs_get</definition>
        <argsstring>(struct log_msg *msg)</argsstring>
        <name>log_msg_nargs_get</name>
        <param>
          <type>struct <ref refid="structlog__msg" kindref="compound">log_msg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Returns number of arguments in standard log message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Standard log message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of arguments. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="247" column="10" declfile="include/logging/log_msg.h" declline="247" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1gab6449857ff234005f8a2eec31b73b362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__log__msg_1ga60fcf7fd1423d631f2057111818143ca" kindref="member">log_arg_t</ref></type>
        <definition>log_arg_t log_msg_arg_get</definition>
        <argsstring>(struct log_msg *msg, uint32_t arg_idx)</argsstring>
        <name>log_msg_arg_get</name>
        <param>
          <type>struct <ref refid="structlog__msg" kindref="compound">log_msg</ref> *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>arg_idx</declname>
        </param>
        <briefdescription>
<para>Gets argument from standard log message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Standard log message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Argument value or 0 if arg_idx exceeds number of arguments in the message. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="257" column="11" declfile="include/logging/log_msg.h" declline="257" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1ga6b32d69271906dfd5ec883c496e51f65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * log_msg_str_get</definition>
        <argsstring>(struct log_msg *msg)</argsstring>
        <name>log_msg_str_get</name>
        <param>
          <type>struct <ref refid="structlog__msg" kindref="compound">log_msg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Gets pointer to the unformatted string from standard log message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Standard log message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="266" column="12" declfile="include/logging/log_msg.h" declline="266" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1ga97764c3d3bb243515f5c95bfa44297fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structlog__msg" kindref="compound">log_msg</ref> *</type>
        <definition>struct log_msg * log_msg_hexdump_create</definition>
        <argsstring>(const char *str, const uint8_t *data, uint32_t length)</argsstring>
        <name>log_msg_hexdump_create</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Allocates chunks for hexdump message and copies the data. </para>
        </briefdescription>
        <detaileddescription>
<para>Function resets header and sets following fields:<itemizedlist>
<listitem><para>message type</para>
</listitem><listitem><para>length</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>Allocation and partial filling is combined for performance reasons.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Data length.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to allocated head of the message or NULL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="282" column="14" declfile="include/logging/log_msg.h" declline="282" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1ga5bf3664a1e88859af545e64232f628e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void log_msg_hexdump_data_put</definition>
        <argsstring>(struct log_msg *msg, uint8_t *data, size_t *length, size_t offset)</argsstring>
        <name>log_msg_hexdump_data_put</name>
        <param>
          <type>struct <ref refid="structlog__msg" kindref="compound">log_msg</ref> *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Put data into hexdump log message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Input: requested amount. Output: actual amount. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="293" column="6" declfile="include/logging/log_msg.h" declline="293" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1ga908fe60dc33e29bac2eb42c2a54b15ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void log_msg_hexdump_data_get</definition>
        <argsstring>(struct log_msg *msg, uint8_t *data, size_t *length, size_t offset)</argsstring>
        <name>log_msg_hexdump_data_get</name>
        <param>
          <type>struct <ref refid="structlog__msg" kindref="compound">log_msg</ref> *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Get data from hexdump log message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer for data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Input: requested amount. Output: actual amount. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="305" column="6" declfile="include/logging/log_msg.h" declline="305" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1ga81b5033fae66d3d05209db2211ed34d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>union <ref refid="unionlog__msg__chunk" kindref="compound">log_msg_chunk</ref> *</type>
        <definition>union log_msg_chunk * log_msg_no_space_handle</definition>
        <argsstring>(void)</argsstring>
        <name>log_msg_no_space_handle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="310" column="20" declfile="include/logging/log_msg.h" declline="310" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1gae23ae828851c74aa13db87107caf62d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>union <ref refid="unionlog__msg__chunk" kindref="compound">log_msg_chunk</ref> *</type>
        <definition>union log_msg_chunk * log_msg_chunk_alloc</definition>
        <argsstring>(void)</argsstring>
        <name>log_msg_chunk_alloc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Allocate single chunk from the pool. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to the allocated chunk or NULL if failed to allocate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="316" column="20" declfile="include/logging/log_msg.h" declline="316" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1gaa34c281e9c6b45a29b9e55ff902e374d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structlog__msg" kindref="compound">log_msg</ref> *</type>
        <definition>static struct log_msg * log_msg_create_0</definition>
        <argsstring>(const char *str)</argsstring>
        <name>log_msg_create_0</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Create standard log message with no arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>Function resets header and sets following fields:<itemizedlist>
<listitem><para>message type</para>
</listitem><listitem><para>string pointer</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="return"><para>Pointer to allocated head of the message or NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="351" column="28" bodyfile="include/logging/log_msg.h" bodystart="351" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1gaf1eec61c29da3bd024b944e9a067c85f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structlog__msg" kindref="compound">log_msg</ref> *</type>
        <definition>static struct log_msg * log_msg_create_1</definition>
        <argsstring>(const char *str, log_arg_t arg1)</argsstring>
        <name>log_msg_create_1</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="group__log__msg_1ga60fcf7fd1423d631f2057111818143ca" kindref="member">log_arg_t</ref></type>
          <declname>arg1</declname>
        </param>
        <briefdescription>
<para>Create standard log message with one argument. </para>
        </briefdescription>
        <detaileddescription>
<para>Function resets header and sets following fields:<itemizedlist>
<listitem><para>message type</para>
</listitem><listitem><para>string pointer</para>
</listitem><listitem><para>number of arguments</para>
</listitem><listitem><para>argument</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg1</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to allocated head of the message or NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="375" column="28" bodyfile="include/logging/log_msg.h" bodystart="375" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1ga9859855a99966a4482f66da41fc5dccf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structlog__msg" kindref="compound">log_msg</ref> *</type>
        <definition>static struct log_msg * log_msg_create_2</definition>
        <argsstring>(const char *str, log_arg_t arg1, log_arg_t arg2)</argsstring>
        <name>log_msg_create_2</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="group__log__msg_1ga60fcf7fd1423d631f2057111818143ca" kindref="member">log_arg_t</ref></type>
          <declname>arg1</declname>
        </param>
        <param>
          <type><ref refid="group__log__msg_1ga60fcf7fd1423d631f2057111818143ca" kindref="member">log_arg_t</ref></type>
          <declname>arg2</declname>
        </param>
        <briefdescription>
<para>Create standard log message with two arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>Function resets header and sets following fields:<itemizedlist>
<listitem><para>message type</para>
</listitem><listitem><para>string pointer</para>
</listitem><listitem><para>number of arguments</para>
</listitem><listitem><para>arguments</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg1</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg2</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument 2.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to allocated head of the message or NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="403" column="28" bodyfile="include/logging/log_msg.h" bodystart="403" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1ga509d75155372abe5b324b228b52799e1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structlog__msg" kindref="compound">log_msg</ref> *</type>
        <definition>static struct log_msg * log_msg_create_3</definition>
        <argsstring>(const char *str, log_arg_t arg1, log_arg_t arg2, log_arg_t arg3)</argsstring>
        <name>log_msg_create_3</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="group__log__msg_1ga60fcf7fd1423d631f2057111818143ca" kindref="member">log_arg_t</ref></type>
          <declname>arg1</declname>
        </param>
        <param>
          <type><ref refid="group__log__msg_1ga60fcf7fd1423d631f2057111818143ca" kindref="member">log_arg_t</ref></type>
          <declname>arg2</declname>
        </param>
        <param>
          <type><ref refid="group__log__msg_1ga60fcf7fd1423d631f2057111818143ca" kindref="member">log_arg_t</ref></type>
          <declname>arg3</declname>
        </param>
        <briefdescription>
<para>Create standard log message with three arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>Function resets header and sets following fields:<itemizedlist>
<listitem><para>message type</para>
</listitem><listitem><para>string pointer</para>
</listitem><listitem><para>number of arguments</para>
</listitem><listitem><para>arguments</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg1</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg2</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument 2. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg3</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument 3.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to allocated head of the message or NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="434" column="28" bodyfile="include/logging/log_msg.h" bodystart="434" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1gaddd73c484ec86849c176934c6f983a34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structlog__msg" kindref="compound">log_msg</ref> *</type>
        <definition>struct log_msg * log_msg_create_n</definition>
        <argsstring>(const char *str, log_arg_t *args, uint32_t nargs)</argsstring>
        <name>log_msg_create_n</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="group__log__msg_1ga60fcf7fd1423d631f2057111818143ca" kindref="member">log_arg_t</ref> *</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>nargs</declname>
        </param>
        <briefdescription>
<para>Create standard log message with variable number of arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>Function resets header and sets following fields:<itemizedlist>
<listitem><para>message type</para>
</listitem><listitem><para>string pointer</para>
</listitem><listitem><para>number of arguments</para>
</listitem><listitem><para>arguments</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Array with arguments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nargs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of arguments.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to allocated head of the message or NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="466" column="14" declfile="include/logging/log_msg.h" declline="466" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1gaeef64d243b794ba77cff9ceff1691fd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t log_msg_mem_get_free</definition>
        <argsstring>(void)</argsstring>
        <name>log_msg_mem_get_free</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get number of free blocks from the log mem pool. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="473" column="10" declfile="include/logging/log_msg.h" declline="473" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1gaaf81fbf7786167d3c22074df83636f0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t log_msg_mem_get_used</definition>
        <argsstring>(void)</argsstring>
        <name>log_msg_mem_get_used</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get number of used blocks from the log mem pool. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="478" column="10" declfile="include/logging/log_msg.h" declline="478" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1gafb77acf737b6a62fcd3545af569ba1ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t log_msg_mem_get_max_used</definition>
        <argsstring>(void)</argsstring>
        <name>log_msg_mem_get_max_used</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get max used blocks from the log mem pool. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="483" column="10" declfile="include/logging/log_msg.h" declline="483" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__log__msg_1ga9169257736149471c6b0692102a9330c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t log_msg_get_slab_size</definition>
        <argsstring>(void)</argsstring>
        <name>log_msg_get_slab_size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get slab size. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Size of a slab used in slab pool for log messages. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="490" column="8" declfile="include/logging/log_msg.h" declline="490" declcolumn="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__log__msg_1ga5900a85c32582b5a4ce3f46ee52b7e9e" prot="public" static="no">
        <name>LOG_MAX_NARGS</name>
        <initializer>15</initializer>
        <briefdescription>
<para>Maximum number of arguments in the standard log entry. </para>
        </briefdescription>
        <detaileddescription>
<para>It is limited by 4 bit nargs field in the log message. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="35" column="9" bodyfile="include/logging/log_msg.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__msg_1ga269343a13ee57b72d62ab369d5a5c044" prot="public" static="no">
        <name>LOG_MSG_NARGS_SINGLE_CHUNK</name>
        <initializer>3U</initializer>
        <briefdescription>
<para>Number of arguments in the log entry which fits in one chunk. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="41" column="10" bodyfile="include/logging/log_msg.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__msg_1gadb487a9ce1f3413b2a91c97bf3c601c9" prot="public" static="no">
        <name>LOG_MSG_NARGS_HEAD_CHUNK</name>
        <initializer>	(<ref refid="group__log__msg_1ga269343a13ee57b72d62ab369d5a5c044" kindref="member">LOG_MSG_NARGS_SINGLE_CHUNK</ref> - (sizeof(void *)/sizeof(<ref refid="group__log__msg_1ga60fcf7fd1423d631f2057111818143ca" kindref="member">log_arg_t</ref>)))</initializer>
        <briefdescription>
<para>Number of arguments in the head of extended standard log message.. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="45" column="9" bodyfile="include/logging/log_msg.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__msg_1gacd9d4676590adf7231a760227fc17a9e" prot="public" static="no">
        <name>LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK</name>
        <initializer>	(<ref refid="group__log__msg_1ga269343a13ee57b72d62ab369d5a5c044" kindref="member">LOG_MSG_NARGS_SINGLE_CHUNK</ref> * sizeof(<ref refid="group__log__msg_1ga60fcf7fd1423d631f2057111818143ca" kindref="member">log_arg_t</ref>))</initializer>
        <briefdescription>
<para>Maximal amount of bytes in the hexdump entry which fits in one chunk. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="50" column="9" bodyfile="include/logging/log_msg.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__msg_1ga37f48c72db15497ee8e67942a65d594e" prot="public" static="no">
        <name>LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK</name>
        <initializer>	(<ref refid="group__log__msg_1gacd9d4676590adf7231a760227fc17a9e" kindref="member">LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK</ref> - sizeof(void *))</initializer>
        <briefdescription>
<para>Number of bytes in the first chunk of hexdump message if message consists of more than one chunk. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="56" column="9" bodyfile="include/logging/log_msg.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__msg_1ga6bf0f7d5e6318aa280e50ce59d27c2a4" prot="public" static="no">
        <name>HEXDUMP_BYTES_CONT_MSG</name>
        <initializer>	(sizeof(struct <ref refid="structlog__msg" kindref="compound">log_msg</ref>) - sizeof(void *))</initializer>
        <briefdescription>
<para>Number of bytes that can be stored in chunks following head chunk in hexdump log message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="62" column="9" bodyfile="include/logging/log_msg.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__msg_1gad5463a0306f9515aaace6e648a3fceeb" prot="public" static="no">
        <name>ARGS_CONT_MSG</name>
        <initializer>(<ref refid="group__log__msg_1ga6bf0f7d5e6318aa280e50ce59d27c2a4" kindref="member">HEXDUMP_BYTES_CONT_MSG</ref> / sizeof(<ref refid="group__log__msg_1ga60fcf7fd1423d631f2057111818143ca" kindref="member">log_arg_t</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="65" column="9" bodyfile="include/logging/log_msg.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__msg_1gaef0cd4f562f09242626fd7f2e01ee875" prot="public" static="no">
        <name>LOG_MSG_TYPE_STD</name>
        <initializer>0U</initializer>
        <briefdescription>
<para>Flag indicating standard log message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="68" column="9" bodyfile="include/logging/log_msg.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__msg_1ga2747b5933204d337ffee654b2f9d749c" prot="public" static="no">
        <name>LOG_MSG_TYPE_HEXDUMP</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Flag indicating hexdump log message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="71" column="9" bodyfile="include/logging/log_msg.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__msg_1ga495f7973d045ff48e62160b6e953d2c9" prot="public" static="no">
        <name>COMMON_PARAM_HDR</name>
        <param></param>
        <initializer>	<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> type : 1;	   \
	<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> ext : 1</initializer>
        <briefdescription>
<para>Common part of log message header. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="74" column="9" bodyfile="include/logging/log_msg.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__msg_1ga350cae59b8bc12eb56a74914103314de" prot="public" static="no">
        <name>LOG_MSG_HEXDUMP_LENGTH_BITS</name>
        <initializer>14</initializer>
        <briefdescription>
<para>Number of bits used for storing length of hexdump log message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="79" column="9" bodyfile="include/logging/log_msg.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__msg_1gaabb2c9581ff5e17f1a369983ba996cff" prot="public" static="no">
        <name>LOG_MSG_HEXDUMP_MAX_LENGTH</name>
        <initializer>(<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(<ref refid="group__log__msg_1ga350cae59b8bc12eb56a74914103314de" kindref="member">LOG_MSG_HEXDUMP_LENGTH_BITS</ref>) - 1)</initializer>
        <briefdescription>
<para>Maximum length of log hexdump message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_msg.h" line="82" column="9" bodyfile="include/logging/log_msg.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Log message API. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
