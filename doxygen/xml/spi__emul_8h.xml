<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="spi__emul_8h" kind="file" language="C++">
    <compoundname>spi_emul.h</compoundname>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes local="no">device.h</includes>
    <includes refid="emul_8h" local="no">drivers/emul.h</includes>
    <incdepgraph>
      <node id="6">
        <label>drivers/emul.h</label>
        <link refid="emul_8h"/>
      </node>
      <node id="1">
        <label>include/drivers/spi_emul.h</label>
        <link refid="spi__emul_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="5">
        <label>device.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structspi__emul" prot="public">spi_emul</innerclass>
    <innerclass refid="structspi__emul__api" prot="public">spi_emul_api</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__spi__emul__interface_1ga3c861d3e9943184e70202051cf3d227a" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* spi_emul_io_t) (struct spi_emul *emul, const struct spi_config *config, const struct spi_buf_set *tx_bufs, const struct spi_buf_set *rx_bufs)</definition>
        <argsstring>)(struct spi_emul *emul, const struct spi_config *config, const struct spi_buf_set *tx_bufs, const struct spi_buf_set *rx_bufs)</argsstring>
        <name>spi_emul_io_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Passes SPI messages to the emulator. The emulator updates the data with what was read back.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>emul</parametername>
</parameternamelist>
<parameterdescription>
<para>Emulator instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a valid <ref refid="structspi__config" kindref="compound">spi_config</ref> structure instance. Pointer-comparison may be used to detect changes from previous operations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tx_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer array where data to be sent originates from, or NULL if none. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer array where data to be read will be written to, or NULL if none.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi_emul.h" line="64" column="9" bodyfile="include/drivers/spi_emul.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__spi__emul__interface_1ga8b3e1068687e31722ef8ef8c3aa8ca03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int spi_emul_register</definition>
        <argsstring>(const struct device *dev, const char *name, struct spi_emul *emul)</argsstring>
        <name>spi_emul_register</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>struct <ref refid="structspi__emul" kindref="compound">spi_emul</ref> *</type>
          <declname>emul</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register an emulated device on the controller</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device that will use the emulator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>User-friendly name for this emulator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emul</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI emulator to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 indicating success (always) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi_emul.h" line="77" column="5" declfile="include/drivers/spi_emul.h" declline="77" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__emul__interface_1ga8b872edd18ec2911618919cc68229362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t spi_emul_get_config</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>spi_emul_get_config</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Back door to allow an emulator to retrieve the host configuration.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI device associated with the emulator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Bit-packed 32-bit value containing the device&apos;s runtime configuration </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi_emul.h" line="91" column="10" declfile="include/drivers/spi_emul.h" declline="91" declcolumn="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Public APIs for the SPI emulation drivers. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2020<sp/>Google<sp/>LLC</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_DRIVERS_SPI_SPI_EMUL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_DRIVERS_SPI_SPI_EMUL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;device.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="emul_8h" kindref="compound">drivers/emul.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">spi_msg;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__emul__api" kindref="compound">spi_emul_api</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="structspi__emul" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__emul" kindref="compound">spi_emul</ref><sp/>{</highlight></codeline>
<codeline lineno="36" refid="structspi__emul_1a4c49c2c9966eec74a9d010d22176bdd1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref><sp/><ref refid="structspi__emul_1a4c49c2c9966eec74a9d010d22176bdd1" kindref="member">node</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="structspi__emul_1aab969bac2be3a0b9df005131db657880" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structemul" kindref="compound">emul</ref><sp/>*<ref refid="structspi__emul_1aab969bac2be3a0b9df005131db657880" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>API<sp/>provided<sp/>for<sp/>this<sp/>device<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="structspi__emul_1a96649e8ea8360ad07ebbd721f999b0e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__emul__api" kindref="compound">spi_emul_api</ref><sp/>*<ref refid="structspi__emul_1a96649e8ea8360ad07ebbd721f999b0e7" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>SPI<sp/>chip-slect<sp/>of<sp/>the<sp/>emulated<sp/>device<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="structspi__emul_1a81450c3d7701c20da8d945e390e7cd33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structspi__emul_1a81450c3d7701c20da8d945e390e7cd33" kindref="member">chipsel</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="group__spi__emul__interface_1ga3c861d3e9943184e70202051cf3d227a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__spi__emul__interface_1ga3c861d3e9943184e70202051cf3d227a" kindref="member">spi_emul_io_t</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__emul" kindref="compound">spi_emul</ref><sp/>*<ref refid="structemul" kindref="compound">emul</ref>,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__config" kindref="compound">spi_config</ref><sp/>*config,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref><sp/>*tx_bufs,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__buf__set" kindref="compound">spi_buf_set</ref><sp/>*rx_bufs);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="group__spi__emul__interface_1ga8b3e1068687e31722ef8ef8c3aa8ca03" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__spi__emul__interface_1ga8b3e1068687e31722ef8ef8c3aa8ca03" kindref="member">spi_emul_register</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspi__emul" kindref="compound">spi_emul</ref><sp/>*<ref refid="structemul" kindref="compound">emul</ref>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="structspi__emul__api" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structspi__emul__api" kindref="compound">spi_emul_api</ref><sp/>{</highlight></codeline>
<codeline lineno="82" refid="structspi__emul__api_1a357c2c19a5d6eb7a14d895eb9b042085" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__spi__emul__interface_1ga3c861d3e9943184e70202051cf3d227a" kindref="member">spi_emul_io_t</ref><sp/><ref refid="structspi__emul__api_1a357c2c19a5d6eb7a14d895eb9b042085" kindref="member">io</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="group__spi__emul__interface_1ga8b872edd18ec2911618919cc68229362" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__spi__emul__interface_1ga8b872edd18ec2911618919cc68229362" kindref="member">spi_emul_get_config</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_DRIVERS_SPI_SPI_EMUL_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/drivers/spi_emul.h"/>
  </compounddef>
</doxygen>
