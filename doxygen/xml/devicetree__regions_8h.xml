<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="devicetree__regions_8h" kind="file" language="C++">
    <compoundname>devicetree_regions.h</compoundname>
      <sectiondef kind="define">
      <memberdef kind="define" id="devicetree__regions_8h_1a3244e16032cc575ab5c7275caca14801" prot="public" static="no">
        <name>LINKER_DT_NODE_REGION_NAME</name>
        <param><defname>node_id</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga5e5bfc9b1a6627b3f73014329e96340f" kindref="member">DT_PROP_OR</ref>(node_id, zephyr_memory_region, <ref refid="group__devicetree-generic-id_1gacd79818b99724d834e3bb7ae74ee02cf" kindref="member">DT_NODE_PATH</ref>(node_id))</initializer>
        <briefdescription>
<para>Get the linker memory-region name. </para>
        </briefdescription>
        <detaileddescription>
<para>This attempts to use the zephyr,memory-region property, falling back to the node path if it doesn&apos;t exist.</para>
<para>Example devicetree fragment: <verbatim>/ {
        soc {
                sram1: memory@2000000 {
                    zephyr,memory-region = &quot;MY_NAME&quot;;
                };
                sram2: memory@2001000 { ... };
        };
};
</verbatim> Example usage:</para>
<para><ref refid="devicetree__regions_8h_1a3244e16032cc575ab5c7275caca14801" kindref="member">LINKER_DT_NODE_REGION_NAME(DT_NODELABEL(sram1))</ref> // &quot;MY_NAME&quot; <ref refid="devicetree__regions_8h_1a3244e16032cc575ab5c7275caca14801" kindref="member">LINKER_DT_NODE_REGION_NAME(DT_NODELABEL(sram2))</ref> // &quot;/soc/memory@2001000&quot;</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the name of the memory memory region the node will generate </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linker/devicetree_regions.h" line="35" column="9" bodyfile="include/linker/devicetree_regions.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="devicetree__regions_8h_1a249e6f72a0632d749d9c6a258d6d9b92" prot="public" static="no">
        <name>LINKER_DT_REGION_FROM_NODE</name>
        <param><defname>node_id</defname></param>
        <param><defname>attr</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(<ref refid="group__devicetree-generic-exist_1ga3b769d8105c7679e1d0575a1e7f1f653" kindref="member">DT_NODE_HAS_STATUS</ref>(node_id, okay), \
		    (_REGION_DECLARE(node_id, attr)),  \
		    ())</initializer>
        <briefdescription>
<para>Generate a linker memory region from a devicetree node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>devicetree node identifier with a &lt;reg&gt; property defining region location and size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>region attributes to use (rx, rw, ...) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linker/devicetree_regions.h" line="60" column="9" bodyfile="include/linker/devicetree_regions.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2021,<sp/>Commonwealth<sp/>Scientific<sp/>and<sp/>Industrial<sp/>Research</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Organisation<sp/>(CSIRO)<sp/>ABN<sp/>41<sp/>687<sp/>119<sp/>230.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Generate<sp/>memory<sp/>regions<sp/>from<sp/>devicetree<sp/>nodes.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="devicetree__regions_8h_1a3244e16032cc575ab5c7275caca14801" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LINKER_DT_NODE_REGION_NAME(node_id)<sp/>\</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PROP_OR(node_id,<sp/>zephyr_memory_region,<sp/>DT_NODE_PATH(node_id))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_REGION_DECLARE(node_id,<sp/>attr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LINKER_DT_NODE_REGION_NAME(node_id)(attr)<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ORIGIN<sp/>=<sp/>DT_REG_ADDR(node_id),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LENGTH<sp/>=<sp/>DT_REG_SIZE(node_id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="devicetree__regions_8h_1a249e6f72a0632d749d9c6a258d6d9b92" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LINKER_DT_REGION_FROM_NODE(node_id,<sp/>attr)<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(DT_NODE_HAS_STATUS(node_id,<sp/>okay),<sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(_REGION_DECLARE(node_id,<sp/>attr)),<sp/><sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>())</highlight></codeline>
    </programlisting>
    <location file="include/linker/devicetree_regions.h"/>
  </compounddef>
</doxygen>
