<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__uart__interface" kind="group">
    <compoundname>uart_interface</compoundname>
    <title>UART Interface</title>
    <innerclass refid="structuart__config" prot="public">uart_config</innerclass>
    <innergroup refid="group__uart__async">Async UART API</innergroup>
    <innergroup refid="group__uart__interrupt">Interrupt-driven UART API</innergroup>
    <innergroup refid="group__uart__polling">Polling UART API</innergroup>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__uart__interface_1ga02552532e171e789efc1b000917a9be0" prot="public" static="no" strong="no">
        <type></type>
        <name>uart_line_ctrl</name>
        <enumvalue id="group__uart__interface_1gga02552532e171e789efc1b000917a9be0a3fdd02679f4f103190f3c12ab3cda00b" prot="public">
          <name>UART_LINE_CTRL_BAUD_RATE</name>
          <initializer>= BIT(0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1gga02552532e171e789efc1b000917a9be0a205d22bd797ab1c55323dc1ffda75f0d" prot="public">
          <name>UART_LINE_CTRL_RTS</name>
          <initializer>= BIT(1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1gga02552532e171e789efc1b000917a9be0a19e76af9901fc0274a9e27ff40e29e23" prot="public">
          <name>UART_LINE_CTRL_DTR</name>
          <initializer>= BIT(2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1gga02552532e171e789efc1b000917a9be0a6d2c438044dd64f5cef07bbe4c6b3e97" prot="public">
          <name>UART_LINE_CTRL_DCD</name>
          <initializer>= BIT(3)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1gga02552532e171e789efc1b000917a9be0a87d8bedb5c918c182b271884ee42d75c" prot="public">
          <name>UART_LINE_CTRL_DSR</name>
          <initializer>= BIT(4)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Line control signals. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="33" column="1" bodyfile="include/drivers/uart.h" bodystart="33" bodyend="39"/>
      </memberdef>
      <memberdef kind="enum" id="group__uart__interface_1gadeba6c5485e01dfc1c8a6e1c21668a88" prot="public" static="no" strong="no">
        <type></type>
        <name>uart_rx_stop_reason</name>
        <enumvalue id="group__uart__interface_1ggadeba6c5485e01dfc1c8a6e1c21668a88a442beffc51cdf265bbcb40810a9a6e54" prot="public">
          <name>UART_ERROR_OVERRUN</name>
          <initializer>= (1 &lt;&lt; 0)</initializer>
          <briefdescription>
<para>Overrun error. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggadeba6c5485e01dfc1c8a6e1c21668a88a86d38eac5a46e6659aa765164b833eb5" prot="public">
          <name>UART_ERROR_PARITY</name>
          <initializer>= (1 &lt;&lt; 1)</initializer>
          <briefdescription>
<para>Parity error. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggadeba6c5485e01dfc1c8a6e1c21668a88af13f72a8c615b4bc570b5a4df573407b" prot="public">
          <name>UART_ERROR_FRAMING</name>
          <initializer>= (1 &lt;&lt; 2)</initializer>
          <briefdescription>
<para>Framing error. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggadeba6c5485e01dfc1c8a6e1c21668a88a4986147e23cc46ab8c2aa7e151d09571" prot="public">
          <name>UART_BREAK</name>
          <initializer>= (1 &lt;&lt; 3)</initializer>
          <briefdescription>
<para>Break interrupt. </para>
          </briefdescription>
          <detaileddescription>
<para>A break interrupt was received. This happens when the serial input is held at a logic &apos;0&apos; state for longer than the sum of start time + data bits + parity + stop bits. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggadeba6c5485e01dfc1c8a6e1c21668a88aad8ca4dca9a846560293df71e6b39786" prot="public">
          <name>UART_ERROR_COLLISION</name>
          <initializer>= (1 &lt;&lt; 4)</initializer>
          <briefdescription>
<para>Collision error. </para>
          </briefdescription>
          <detaileddescription>
<para>This error is raised when transmitted data does not match received data. Typically this is useful in scenarios where the TX and RX lines maybe connected together such as RS-485 half-duplex. This error is only valid on UARTs that support collision checking. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Reception stop reasons. </para>
        </briefdescription>
        <detaileddescription>
<para>Values that correspond to events or errors responsible for stopping receiving. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="47" column="1" bodyfile="include/drivers/uart.h" bodystart="47" bodyend="72"/>
      </memberdef>
      <memberdef kind="enum" id="group__uart__interface_1gab2ab6aacb6e3c43bb26d4274157e5711" prot="public" static="no" strong="no">
        <type></type>
        <name>uart_config_parity</name>
        <enumvalue id="group__uart__interface_1ggab2ab6aacb6e3c43bb26d4274157e5711a6a23a2ef22fb3b144648b244fff82b8d" prot="public">
          <name>UART_CFG_PARITY_NONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab2ab6aacb6e3c43bb26d4274157e5711a8a618b0a531c8d62809e39eb56eaf5ed" prot="public">
          <name>UART_CFG_PARITY_ODD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab2ab6aacb6e3c43bb26d4274157e5711ac3a4310efe198a1fa7d977a5531486ba" prot="public">
          <name>UART_CFG_PARITY_EVEN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab2ab6aacb6e3c43bb26d4274157e5711a5ee61c29a32447644ff70385158a11ca" prot="public">
          <name>UART_CFG_PARITY_MARK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab2ab6aacb6e3c43bb26d4274157e5711a8dc5306c8ca26321431bcf22ce9b036c" prot="public">
          <name>UART_CFG_PARITY_SPACE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Parity modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="75" column="1" bodyfile="include/drivers/uart.h" bodystart="75" bodyend="81"/>
      </memberdef>
      <memberdef kind="enum" id="group__uart__interface_1gafc1aecb863e2456d73b78a49fcbad72e" prot="public" static="no" strong="no">
        <type></type>
        <name>uart_config_stop_bits</name>
        <enumvalue id="group__uart__interface_1ggafc1aecb863e2456d73b78a49fcbad72ea308c660590a9fd16143806e8bef002af" prot="public">
          <name>UART_CFG_STOP_BITS_0_5</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggafc1aecb863e2456d73b78a49fcbad72ea73024f1618eb04385bf488214c635e58" prot="public">
          <name>UART_CFG_STOP_BITS_1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggafc1aecb863e2456d73b78a49fcbad72ea1da47ec95b6a6eee65abef3d6d84f9ad" prot="public">
          <name>UART_CFG_STOP_BITS_1_5</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggafc1aecb863e2456d73b78a49fcbad72eae180ecebc76516e89669e1d16bfb31c6" prot="public">
          <name>UART_CFG_STOP_BITS_2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Number of stop bits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="84" column="1" bodyfile="include/drivers/uart.h" bodystart="84" bodyend="89"/>
      </memberdef>
      <memberdef kind="enum" id="group__uart__interface_1gab9f7de744a68a311330576d7da02c44a" prot="public" static="no" strong="no">
        <type></type>
        <name>uart_config_data_bits</name>
        <enumvalue id="group__uart__interface_1ggab9f7de744a68a311330576d7da02c44aa1b0545c2d1970e67d697b62510bfbe27" prot="public">
          <name>UART_CFG_DATA_BITS_5</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9f7de744a68a311330576d7da02c44aac6e0f3c0479164c34144d0e6e28298e4" prot="public">
          <name>UART_CFG_DATA_BITS_6</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9f7de744a68a311330576d7da02c44aa6120eb8f668b257c8c2dd0dc9cf0c913" prot="public">
          <name>UART_CFG_DATA_BITS_7</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9f7de744a68a311330576d7da02c44aa23f55bdb24b4016c8c23c518e981df97" prot="public">
          <name>UART_CFG_DATA_BITS_8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9f7de744a68a311330576d7da02c44aaf3b601af696d8841fe79871ca3e41e5f" prot="public">
          <name>UART_CFG_DATA_BITS_9</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Number of data bits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="92" column="1" bodyfile="include/drivers/uart.h" bodystart="92" bodyend="98"/>
      </memberdef>
      <memberdef kind="enum" id="group__uart__interface_1ga8e2f1b4a8d60d7a6c24835d1b26f99e8" prot="public" static="no" strong="no">
        <type></type>
        <name>uart_config_flow_control</name>
        <enumvalue id="group__uart__interface_1gga8e2f1b4a8d60d7a6c24835d1b26f99e8a546b28db6f8bfc26266e8f7d6b8ff973" prot="public">
          <name>UART_CFG_FLOW_CTRL_NONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1gga8e2f1b4a8d60d7a6c24835d1b26f99e8ad682bfe14a9f0860d1fdc3e8e9d56f86" prot="public">
          <name>UART_CFG_FLOW_CTRL_RTS_CTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1gga8e2f1b4a8d60d7a6c24835d1b26f99e8a0efc5de86bf80119f750cf372814309f" prot="public">
          <name>UART_CFG_FLOW_CTRL_DTR_DSR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Hardware flow control options. </para>
        </briefdescription>
        <detaileddescription>
<para>With flow control set to none, any operations related to flow control signals can be managed by user with uart_line_ctrl functions. In other cases, flow control is managed by hardware/driver. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="107" column="1" bodyfile="include/drivers/uart.h" bodystart="107" bodyend="111"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__uart__interface_1ga22ea20fd8e07153b3b71cc9416f5462f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int uart_err_check</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>uart_err_check</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Check whether an error was detected. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If no error was detected. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Error flags as defined in <ref refid="group__uart__interface_1gadeba6c5485e01dfc1c8a6e1c21668a88" kindref="member">uart_rx_stop_reason</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If not implemented. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="476" column="6" declfile="include/drivers/uart.h" declline="476" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1gaa0b75777b879af10543f7e8f463ff9a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int uart_configure</definition>
        <argsstring>(const struct device *dev, const struct uart_config *cfg)</argsstring>
        <name>uart_configure</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structuart__config" kindref="compound">uart_config</ref> *</type>
          <declname>cfg</declname>
        </param>
        <briefdescription>
<para>Set UART configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets UART configuration using data from *cfg.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>UART configuration structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Negative errno code in case of failure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If configuration is not supported by device or driver does not support setting configuration in runtime. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="622" column="6" declfile="include/drivers/uart.h" declline="622" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga81dfc5f2134de8e4acb5f063512cf703" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int uart_config_get</definition>
        <argsstring>(const struct device *dev, struct uart_config *cfg)</argsstring>
        <name>uart_config_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structuart__config" kindref="compound">uart_config</ref> *</type>
          <declname>cfg</declname>
        </param>
        <briefdescription>
<para>Get UART configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>Stores current UART configuration to *cfg, can be used to retrieve initial configuration after device was initialized using data from DTS.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>UART configuration structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Negative errno code in case of failure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If driver does not support getting current configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="650" column="6" declfile="include/drivers/uart.h" declline="650" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1gab039414b41145dc8d31349836da91263" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int uart_line_ctrl_set</definition>
        <argsstring>(const struct device *dev, uint32_t ctrl, uint32_t val)</argsstring>
        <name>uart_line_ctrl_set</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>ctrl</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Manipulate line control for UART. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctrl</parametername>
</parameternamelist>
<parameterdescription>
<para>The line control to manipulate (see enum uart_line_ctrl). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set to the line control.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If this function is not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If API is not enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Other negative errno value in case of failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="1485" column="6" declfile="include/drivers/uart.h" declline="1485" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1gafda8a550284a54c8e1d6b6638de978e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int uart_line_ctrl_get</definition>
        <argsstring>(const struct device *dev, uint32_t ctrl, uint32_t *val)</argsstring>
        <name>uart_line_ctrl_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>ctrl</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Retrieve line control for UART. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctrl</parametername>
</parameternamelist>
<parameterdescription>
<para>The line control to retrieve (see enum uart_line_ctrl). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to variable where to store the line control value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If this function is not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If API is not enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Other negative errno value in case of failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="1516" column="6" declfile="include/drivers/uart.h" declline="1516" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1gaa8683398e5d709b513509d08841ed51b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int uart_drv_cmd</definition>
        <argsstring>(const struct device *dev, uint32_t cmd, uint32_t p)</argsstring>
        <name>uart_drv_cmd</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>cmd</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Send extra command to driver. </para>
        </briefdescription>
        <detaileddescription>
<para>Implementation and accepted commands are driver specific. Refer to the drivers for more information.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter to the command.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If this function is not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If API is not enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Other negative errno value in case of failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="1550" column="6" declfile="include/drivers/uart.h" declline="1550" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>UART Interface. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
