<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__kernel__common__tests" kind="group">
    <compoundname>kernel_common_tests</compoundname>
    <title>Common Tests</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__kernel__common__tests_1ga674b21994cf9148555e16f401d63c9e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_atomic</definition>
        <argsstring>(void)</argsstring>
        <name>test_atomic</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify atomic functionalities. </para>
        </briefdescription>
        <detaileddescription>
<para>Test Objective:<itemizedlist>
<listitem><para>Test the function of the atomic operation API is correct.</para>
</listitem></itemizedlist>
</para>
<para>Test techniques:<itemizedlist>
<listitem><para>Dynamic analysis and testing</para>
</listitem><listitem><para>Functional and black box testing</para>
</listitem><listitem><para>Interface testing</para>
</listitem></itemizedlist>
</para>
<para>Prerequisite Conditions:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para>Input Specifications:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para>Test Procedure:<orderedlist>
<listitem><para>Call the API interface of the following atomic operations in turn, judge the change of function return value and target operands.</para>
</listitem></orderedlist>
<itemizedlist>
<listitem><para><ref refid="atomic__xtensa_8h_1a6c96fd0f67a7e091035ab989e2cbbfb1" kindref="member">atomic_cas()</ref></para>
</listitem><listitem><para><ref refid="atomic__xtensa_8h_1ad949b788f6573e626a03e7b38fbd5645" kindref="member">atomic_ptr_cas()</ref></para>
</listitem><listitem><para><ref refid="atomic__xtensa_8h_1a734abed45962c79745a48b6468c499f1" kindref="member">atomic_add()</ref></para>
</listitem><listitem><para><ref refid="atomic__xtensa_8h_1a59692f87d456173352f4ae3f777eb1b6" kindref="member">atomic_sub()</ref></para>
</listitem><listitem><para><ref refid="atomic__arch_8h_1aae47a9cbe5a6534967b417f602b37ac2" kindref="member">atomic_inc()</ref></para>
</listitem><listitem><para><ref refid="atomic__arch_8h_1ac260f0efbd970717eae4ac3bb493a0c4" kindref="member">atomic_dec()</ref></para>
</listitem><listitem><para><ref refid="atomic__xtensa_8h_1a70641cc94157f8d7be8f7fc2ebb72e02" kindref="member">atomic_get()</ref></para>
</listitem><listitem><para><ref refid="atomic__xtensa_8h_1a6271fb71dfdcdc389f6703d8ffb3f99e" kindref="member">atomic_ptr_get()</ref></para>
</listitem><listitem><para><ref refid="atomic__xtensa_8h_1a5da5d59cfe0071203119b4881c2edf25" kindref="member">atomic_set()</ref></para>
</listitem><listitem><para><ref refid="atomic__xtensa_8h_1a1448d2fb67f55f6084114dfd17f18b5f" kindref="member">atomic_ptr_set()</ref></para>
</listitem><listitem><para><ref refid="atomic__arch_8h_1a879b5f540c25fd09f1b84563e3dc8a91" kindref="member">atomic_clear()</ref></para>
</listitem><listitem><para><ref refid="atomic__arch_8h_1a7dca81028baa3f371ef487d683745762" kindref="member">atomic_ptr_clear()</ref></para>
</listitem><listitem><para><ref refid="atomic__xtensa_8h_1ae81ba87f31b1b2deee0da61697711b48" kindref="member">atomic_or()</ref></para>
</listitem><listitem><para><ref refid="atomic__xtensa_8h_1ab9c8fddee80b212bfe3d5da8d8fd09f1" kindref="member">atomic_xor()</ref></para>
</listitem><listitem><para><ref refid="atomic__xtensa_8h_1a41fc4b2cdd3fa7a407c2e28a9be581ac" kindref="member">atomic_and()</ref></para>
</listitem><listitem><para><ref refid="atomic__xtensa_8h_1acc0cbd2fd07f3d25b6e9366e0c01829a" kindref="member">atomic_nand()</ref></para>
</listitem><listitem><para><ref refid="group__atomic__apis_1ga190ddc108f45e7649689753c08658eae" kindref="member">atomic_test_bit()</ref></para>
</listitem><listitem><para><ref refid="group__atomic__apis_1ga53159437721084da0ec8ee70ec212472" kindref="member">atomic_test_and_clear_bit()</ref></para>
</listitem><listitem><para><ref refid="group__atomic__apis_1ga7ff45e13aa5f8be5d7a550e49f5c720b" kindref="member">atomic_test_and_set_bit()</ref></para>
</listitem><listitem><para><ref refid="group__atomic__apis_1ga1c1693d524c49d11fd32b323a39d718e" kindref="member">atomic_clear_bit()</ref></para>
</listitem><listitem><para><ref refid="group__atomic__apis_1ga17a3961ba7610ad6e595e602f70344a0" kindref="member">atomic_set_bit()</ref></para>
</listitem><listitem><para><ref refid="group__atomic__apis_1gad749f16ca51ffc26e7303988de1b8dbf" kindref="member">atomic_set_bit_to()</ref></para>
</listitem><listitem><para>ATOMIC_DEFINE</para>
</listitem></itemizedlist>
</para>
<para>Expected Test Result:<itemizedlist>
<listitem><para>The change of function return value and target operands is correct.</para>
</listitem></itemizedlist>
</para>
<para>Pass/Fail Criteria:<itemizedlist>
<listitem><para>Successful if check points in test procedure are all passed, otherwise failure.</para>
</listitem></itemizedlist>
</para>
<para>Assumptions and Constraints:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="atomic__xtensa_8h_1a6c96fd0f67a7e091035ab989e2cbbfb1" kindref="member">atomic_cas()</ref>, <ref refid="atomic__xtensa_8h_1a734abed45962c79745a48b6468c499f1" kindref="member">atomic_add()</ref>, <ref refid="atomic__xtensa_8h_1a59692f87d456173352f4ae3f777eb1b6" kindref="member">atomic_sub()</ref>, <ref refid="atomic__arch_8h_1aae47a9cbe5a6534967b417f602b37ac2" kindref="member">atomic_inc()</ref>, <ref refid="atomic__arch_8h_1ac260f0efbd970717eae4ac3bb493a0c4" kindref="member">atomic_dec()</ref>, <ref refid="atomic__xtensa_8h_1a70641cc94157f8d7be8f7fc2ebb72e02" kindref="member">atomic_get()</ref>, <ref refid="atomic__xtensa_8h_1a5da5d59cfe0071203119b4881c2edf25" kindref="member">atomic_set()</ref>, <ref refid="atomic__arch_8h_1a879b5f540c25fd09f1b84563e3dc8a91" kindref="member">atomic_clear()</ref>, <ref refid="atomic__xtensa_8h_1ae81ba87f31b1b2deee0da61697711b48" kindref="member">atomic_or()</ref>, <ref refid="atomic__xtensa_8h_1a41fc4b2cdd3fa7a407c2e28a9be581ac" kindref="member">atomic_and()</ref>, <ref refid="atomic__xtensa_8h_1ab9c8fddee80b212bfe3d5da8d8fd09f1" kindref="member">atomic_xor()</ref>, <ref refid="atomic__xtensa_8h_1acc0cbd2fd07f3d25b6e9366e0c01829a" kindref="member">atomic_nand()</ref>, <ref refid="group__atomic__apis_1ga190ddc108f45e7649689753c08658eae" kindref="member">atomic_test_bit()</ref>, <ref refid="group__atomic__apis_1ga53159437721084da0ec8ee70ec212472" kindref="member">atomic_test_and_clear_bit()</ref>, <ref refid="group__atomic__apis_1ga7ff45e13aa5f8be5d7a550e49f5c720b" kindref="member">atomic_test_and_set_bit()</ref>, <ref refid="group__atomic__apis_1ga1c1693d524c49d11fd32b323a39d718e" kindref="member">atomic_clear_bit()</ref>, <ref refid="group__atomic__apis_1ga17a3961ba7610ad6e595e602f70344a0" kindref="member">atomic_set_bit()</ref>, <ref refid="group__atomic__apis_1ga249c575db9764486197709b327f7370e" kindref="member">ATOMIC_DEFINE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/atomic.c" line="97" column="6" bodyfile="tests/kernel/common/src/atomic.c" bodystart="97" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga103fe8057e7e23a7136fe05f1e055237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atomic_handler</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>atomic_handler</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/atomic.c" line="292" column="6" bodyfile="tests/kernel/common/src/atomic.c" bodystart="292" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gae4f64eff153f6d061c63f74df3e70bf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_threads_access_atomic</definition>
        <argsstring>(void)</argsstring>
        <name>test_threads_access_atomic</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify atomic operation with threads. </para>
        </briefdescription>
        <detaileddescription>
<para>Creat two preempt threads with equal priority to atomiclly access the same atomic value. Because these preempt threads are of equal priority, so enable time slice to make them scheduled. The thread will execute for some time. In this time, the two sub threads will be scheduled separately according to the time slice. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/atomic.c" line="317" column="6" bodyfile="tests/kernel/common/src/atomic.c" bodystart="317" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga9304658012875412c13d0026ce930787" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool cmp_u32_arrays</definition>
        <argsstring>(uint32_t *a1, uint32_t *a2, size_t sz)</argsstring>
        <name>cmp_u32_arrays</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>a1</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/bitarray.c" line="29" column="13" bodyfile="tests/kernel/common/src/bitarray.c" bodystart="29" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga039bb1108b5cd0c222be4508109aac16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void validate_bitarray_define</definition>
        <argsstring>(sys_bitarray_t *ba, size_t num_bits)</argsstring>
        <name>validate_bitarray_define</name>
        <param>
          <type><ref refid="bitarray_8h_1a168a1da9ac2bee523bdc9778e94fd841" kindref="member">sys_bitarray_t</ref> *</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/bitarray.c" line="52" column="6" bodyfile="tests/kernel/common/src/bitarray.c" bodystart="52" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga766d7b312892be18a1ce35dd5eeef8a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_bitarray_declare</definition>
        <argsstring>(void)</argsstring>
        <name>test_bitarray_declare</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test defining of bitarrays. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bitarray_8h_1abbe958c6b995023665651e4aa050aa62" kindref="member">SYS_BITARRAY_DEFINE()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/bitarray.c" line="80" column="6" bodyfile="tests/kernel/common/src/bitarray.c" bodystart="80" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga7f8744fbe1d7e11f685b346784f3b6f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool bitarray_bundles_is_zero</definition>
        <argsstring>(sys_bitarray_t *ba)</argsstring>
        <name>bitarray_bundles_is_zero</name>
        <param>
          <type><ref refid="bitarray_8h_1a168a1da9ac2bee523bdc9778e94fd841" kindref="member">sys_bitarray_t</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/bitarray.c" line="103" column="6" bodyfile="tests/kernel/common/src/bitarray.c" bodystart="103" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gae430ada0f7131bb9b523f9a4ae491d63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_bitarray_set_clear</definition>
        <argsstring>(void)</argsstring>
        <name>test_bitarray_set_clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test bitarrays set and clear. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bitarray_8h_1a5fe657e79fee3e111284e4184eb6b681" kindref="member">sys_bitarray_set_bit()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="bitarray_8h_1a795e8bf81f5717addf523cec124cde4e" kindref="member">sys_bitarray_clear_bit()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="bitarray_8h_1ae024ace00949fe8c565081e62818449d" kindref="member">sys_bitarray_test_bit()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="bitarray_8h_1ad1761b9eae8a1d9302893ce5f8591923" kindref="member">sys_bitarray_test_and_set_bit()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="bitarray_8h_1a40fa4d37f1fb2da8789f70de50c599d5" kindref="member">sys_bitarray_test_and_clear_bit()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/bitarray.c" line="127" column="6" bodyfile="tests/kernel/common/src/bitarray.c" bodystart="127" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gabcbe08c8508b4c30f7c3f950d6f3e782" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void alloc_and_free_predefined</definition>
        <argsstring>(void)</argsstring>
        <name>alloc_and_free_predefined</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/bitarray.c" line="279" column="6" bodyfile="tests/kernel/common/src/bitarray.c" bodystart="279" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga88c1c186b920700ee59fb98aad38cf25" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t count_bits</definition>
        <argsstring>(uint32_t val)</argsstring>
        <name>count_bits</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/bitarray.c" line="340" column="22" bodyfile="tests/kernel/common/src/bitarray.c" bodystart="340" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga9040453080ce45df8a02c9227adbce93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t get_bitarray_popcnt</definition>
        <argsstring>(sys_bitarray_t *ba)</argsstring>
        <name>get_bitarray_popcnt</name>
        <param>
          <type><ref refid="bitarray_8h_1a168a1da9ac2bee523bdc9778e94fd841" kindref="member">sys_bitarray_t</ref> *</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/bitarray.c" line="356" column="8" bodyfile="tests/kernel/common/src/bitarray.c" bodystart="356" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gaf68e220db3cae89dc9dee344eb1d65a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void alloc_and_free_loop</definition>
        <argsstring>(int divisor)</argsstring>
        <name>alloc_and_free_loop</name>
        <param>
          <type>int</type>
          <declname>divisor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/bitarray.c" line="368" column="6" bodyfile="tests/kernel/common/src/bitarray.c" bodystart="368" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gaab4aa973b69686dd30cf4bc9335984e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void alloc_and_free_interval</definition>
        <argsstring>(void)</argsstring>
        <name>alloc_and_free_interval</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/bitarray.c" line="427" column="6" bodyfile="tests/kernel/common/src/bitarray.c" bodystart="427" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga6f425be5d73db7bee1196ad703361bad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_bitarray_alloc_free</definition>
        <argsstring>(void)</argsstring>
        <name>test_bitarray_alloc_free</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test bitarrays allocation and free. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bitarray_8h_1ac96766d9441a3b143aa386e2ac79ffd9" kindref="member">sys_bitarray_alloc()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="bitarray_8h_1af9a2c34896d3b1866a5a60f78d4166b0" kindref="member">sys_bitarray_free()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/bitarray.c" line="484" column="6" bodyfile="tests/kernel/common/src/bitarray.c" bodystart="484" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gad421f39eb6fd767b9d5721bed2076f61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_bitarray_region_set_clear</definition>
        <argsstring>(void)</argsstring>
        <name>test_bitarray_region_set_clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/bitarray.c" line="505" column="6" bodyfile="tests/kernel/common/src/bitarray.c" bodystart="505" bodyend="616"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga2cbd1f795436828558d522a1ee09e512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_ffs</definition>
        <argsstring>(void)</argsstring>
        <name>test_ffs</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test find MSB and LSB operations. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify the functions that find out the most significiant bit and least significiant bit work as expected.</para>
<para><simplesect kind="see"><para><ref refid="ffs_8h_1a088db7d02e8f1fc559cbe1ec048494e8" kindref="member">find_msb_set()</ref>, <ref refid="ffs_8h_1a860b01217c1d5eb5f416272c3b719113" kindref="member">find_lsb_set()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/bitarray.c" line="626" column="6" bodyfile="tests/kernel/common/src/bitarray.c" bodystart="626" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gac3a3c54e89579bd2e7285c9e4f7c9bfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_bitfield</definition>
        <argsstring>(void)</argsstring>
        <name>test_bitfield</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test bitfield operations. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="sys__bitops_8h_1a43a2682b576dd69995dfdd203134f2a6" kindref="member">sys_test_bit()</ref>, <ref refid="sys__bitops_8h_1a04ab5115c17cc5ddfe2d788cb7bdcbbe" kindref="member">sys_set_bit()</ref>, <ref refid="sys__bitops_8h_1a3a7b18493a4a34f82c9409453277265d" kindref="member">sys_clear_bit()</ref>, <ref refid="x86_2arch_8h_1a185a9d6bf53f3e815f6385c3f500f4fc" kindref="member">sys_bitfield_set_bit()</ref>, <ref refid="x86_2arch_8h_1a7167fa52e3fb5416c93527fea091c446" kindref="member">sys_bitfield_clear_bit()</ref>, <ref refid="x86_2arch_8h_1a6547612936cc24eae4ff0217ea654c4d" kindref="member">sys_bitfield_test_bit()</ref>, <ref refid="x86_2arch_8h_1aa770dbc8057ea68ed43b5eac0db9b390" kindref="member">sys_bitfield_test_and_set_bit()</ref>, <ref refid="x86_2arch_8h_1ab27f26cae6ce9e528d078fd49b9b4952" kindref="member">sys_bitfield_test_and_clear_bit()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/bitfield.c" line="34" column="6" bodyfile="tests/kernel/common/src/bitfield.c" bodystart="34" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga660aca94aa927ddfad9ea172d86819b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_byteorder_memcpy_swap</definition>
        <argsstring>(void)</argsstring>
        <name>test_byteorder_memcpy_swap</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test swapping for memory contents. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify the functionality provided by <ref refid="byteorder_8h_1a00935c7276235df4c16dd0f9ef524e67" kindref="member">sys_memcpy_swap()</ref></para>
<para><simplesect kind="see"><para><ref refid="byteorder_8h_1a00935c7276235df4c16dd0f9ef524e67" kindref="member">sys_memcpy_swap()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/byteorder.c" line="24" column="6" bodyfile="tests/kernel/common/src/byteorder.c" bodystart="24" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga98d75da7dea678df350986745aae7d98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_byteorder_mem_swap</definition>
        <argsstring>(void)</argsstring>
        <name>test_byteorder_mem_swap</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="byteorder_8h_1ae86b6050e71ec755abb284be3a02d28a" kindref="member">sys_mem_swap()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Test if <ref refid="byteorder_8h_1ae86b6050e71ec755abb284be3a02d28a" kindref="member">sys_mem_swap()</ref> reverses the contents</para>
<para><simplesect kind="see"><para><ref refid="byteorder_8h_1ae86b6050e71ec755abb284be3a02d28a" kindref="member">sys_mem_swap()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/byteorder.c" line="48" column="6" bodyfile="tests/kernel/common/src/byteorder.c" bodystart="48" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga4a650d0cfb89dd39e1426ef59811f783" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sys_get_be64</definition>
        <argsstring>(void)</argsstring>
        <name>test_sys_get_be64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="byteorder_8h_1ad8e00ff5c0b9e394291936d1a570c215" kindref="member">sys_get_be64()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Test if <ref refid="byteorder_8h_1ad8e00ff5c0b9e394291936d1a570c215" kindref="member">sys_get_be64()</ref> correctly handles endianness.</para>
<para><simplesect kind="see"><para><ref refid="byteorder_8h_1ad8e00ff5c0b9e394291936d1a570c215" kindref="member">sys_get_be64()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/byteorder.c" line="77" column="6" bodyfile="tests/kernel/common/src/byteorder.c" bodystart="77" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga40243671b7abc68995a7dd5563e44352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sys_put_be64</definition>
        <argsstring>(void)</argsstring>
        <name>test_sys_put_be64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="byteorder_8h_1a3e0d2e4e85249497011f5f9ea0d2987c" kindref="member">sys_put_be64()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Test if <ref refid="byteorder_8h_1a3e0d2e4e85249497011f5f9ea0d2987c" kindref="member">sys_put_be64()</ref> correctly handles endianness.</para>
<para><simplesect kind="see"><para><ref refid="byteorder_8h_1a3e0d2e4e85249497011f5f9ea0d2987c" kindref="member">sys_put_be64()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/byteorder.c" line="96" column="6" bodyfile="tests/kernel/common/src/byteorder.c" bodystart="96" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gaf75d03dccd57f7bd10d3e7dc1f860389" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sys_get_be48</definition>
        <argsstring>(void)</argsstring>
        <name>test_sys_get_be48</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="byteorder_8h_1acf0fa9761998529910e022b80126ff6b" kindref="member">sys_get_be48()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Test if <ref refid="byteorder_8h_1acf0fa9761998529910e022b80126ff6b" kindref="member">sys_get_be48()</ref> correctly handles endianness.</para>
<para><simplesect kind="see"><para><ref refid="byteorder_8h_1acf0fa9761998529910e022b80126ff6b" kindref="member">sys_get_be48()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/byteorder.c" line="116" column="6" bodyfile="tests/kernel/common/src/byteorder.c" bodystart="116" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gafb9f66453c98202850849d346ad8e091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sys_put_be48</definition>
        <argsstring>(void)</argsstring>
        <name>test_sys_put_be48</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="byteorder_8h_1abe8d617e8a5469c303a512fe94a55443" kindref="member">sys_put_be48()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Test if <ref refid="byteorder_8h_1abe8d617e8a5469c303a512fe94a55443" kindref="member">sys_put_be48()</ref> correctly handles endianness.</para>
<para><simplesect kind="see"><para><ref refid="byteorder_8h_1abe8d617e8a5469c303a512fe94a55443" kindref="member">sys_put_be48()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/byteorder.c" line="135" column="6" bodyfile="tests/kernel/common/src/byteorder.c" bodystart="135" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gae90d8e50ec4407f56e29a160a765bf9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sys_get_be32</definition>
        <argsstring>(void)</argsstring>
        <name>test_sys_get_be32</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="byteorder_8h_1a4db31229c7a8a80dace3870664b6442d" kindref="member">sys_get_be32()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Test if <ref refid="byteorder_8h_1a4db31229c7a8a80dace3870664b6442d" kindref="member">sys_get_be32()</ref> correctly handles endianness.</para>
<para><simplesect kind="see"><para><ref refid="byteorder_8h_1a4db31229c7a8a80dace3870664b6442d" kindref="member">sys_get_be32()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/byteorder.c" line="154" column="6" bodyfile="tests/kernel/common/src/byteorder.c" bodystart="154" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga1b976c6c61d2486af453cae6101cbbd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sys_put_be32</definition>
        <argsstring>(void)</argsstring>
        <name>test_sys_put_be32</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="byteorder_8h_1a21f25ff68591217034f3414594425286" kindref="member">sys_put_be32()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Test if <ref refid="byteorder_8h_1a21f25ff68591217034f3414594425286" kindref="member">sys_put_be32()</ref> correctly handles endianness.</para>
<para><simplesect kind="see"><para><ref refid="byteorder_8h_1a21f25ff68591217034f3414594425286" kindref="member">sys_put_be32()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/byteorder.c" line="173" column="6" bodyfile="tests/kernel/common/src/byteorder.c" bodystart="173" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga425263163d5a918b1545fc8557b9605b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sys_get_be24</definition>
        <argsstring>(void)</argsstring>
        <name>test_sys_get_be24</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="byteorder_8h_1ac65e83f46ef042862b675995f74fcd9b" kindref="member">sys_get_be24()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Test if <ref refid="byteorder_8h_1ac65e83f46ef042862b675995f74fcd9b" kindref="member">sys_get_be24()</ref> correctly handles endianness.</para>
<para><simplesect kind="see"><para><ref refid="byteorder_8h_1ac65e83f46ef042862b675995f74fcd9b" kindref="member">sys_get_be24()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/byteorder.c" line="193" column="6" bodyfile="tests/kernel/common/src/byteorder.c" bodystart="193" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga0983bbbb7a0d0df5d1c17f49279c204e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sys_put_be24</definition>
        <argsstring>(void)</argsstring>
        <name>test_sys_put_be24</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="byteorder_8h_1a7aa82f69d08ebde8077fc3d2ebfbc53b" kindref="member">sys_put_be24()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Test if <ref refid="byteorder_8h_1a7aa82f69d08ebde8077fc3d2ebfbc53b" kindref="member">sys_put_be24()</ref> correctly handles endianness.</para>
<para><simplesect kind="see"><para><ref refid="byteorder_8h_1a7aa82f69d08ebde8077fc3d2ebfbc53b" kindref="member">sys_put_be24()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/byteorder.c" line="212" column="6" bodyfile="tests/kernel/common/src/byteorder.c" bodystart="212" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gaec5a0de48899f101d02ce678b9c45c90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sys_get_be16</definition>
        <argsstring>(void)</argsstring>
        <name>test_sys_get_be16</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="byteorder_8h_1a91fae25b12126c2b35d240f56866184d" kindref="member">sys_get_be16()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Test if <ref refid="byteorder_8h_1a91fae25b12126c2b35d240f56866184d" kindref="member">sys_get_be16()</ref> correctly handles endianness.</para>
<para><simplesect kind="see"><para><ref refid="byteorder_8h_1a91fae25b12126c2b35d240f56866184d" kindref="member">sys_get_be16()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/byteorder.c" line="232" column="6" bodyfile="tests/kernel/common/src/byteorder.c" bodystart="232" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gab5ef4369e53ab683b674ea0e7b8ae6d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sys_put_be16</definition>
        <argsstring>(void)</argsstring>
        <name>test_sys_put_be16</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="byteorder_8h_1a68df8f14dfc0d8715d16ac87dd4c73d2" kindref="member">sys_put_be16()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Test if <ref refid="byteorder_8h_1a68df8f14dfc0d8715d16ac87dd4c73d2" kindref="member">sys_put_be16()</ref> correctly handles endianness.</para>
<para><simplesect kind="see"><para><ref refid="byteorder_8h_1a68df8f14dfc0d8715d16ac87dd4c73d2" kindref="member">sys_put_be16()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/byteorder.c" line="251" column="6" bodyfile="tests/kernel/common/src/byteorder.c" bodystart="251" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga4893aa71839ca49eac801ca731430578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sys_get_le16</definition>
        <argsstring>(void)</argsstring>
        <name>test_sys_get_le16</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="byteorder_8h_1a5c2c537b960a29bdd29133f902a67f6a" kindref="member">sys_get_le16()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Test if <ref refid="byteorder_8h_1a5c2c537b960a29bdd29133f902a67f6a" kindref="member">sys_get_le16()</ref> correctly handles endianness.</para>
<para><simplesect kind="see"><para><ref refid="byteorder_8h_1a5c2c537b960a29bdd29133f902a67f6a" kindref="member">sys_get_le16()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/byteorder.c" line="271" column="6" bodyfile="tests/kernel/common/src/byteorder.c" bodystart="271" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gab716dac717c91177d5b7949f03c4e9ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sys_put_le16</definition>
        <argsstring>(void)</argsstring>
        <name>test_sys_put_le16</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="byteorder_8h_1af8f30219c861bb07d097374204d386dd" kindref="member">sys_put_le16()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Test if <ref refid="byteorder_8h_1af8f30219c861bb07d097374204d386dd" kindref="member">sys_put_le16()</ref> correctly handles endianness.</para>
<para><simplesect kind="see"><para><ref refid="byteorder_8h_1af8f30219c861bb07d097374204d386dd" kindref="member">sys_put_le16()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/byteorder.c" line="290" column="6" bodyfile="tests/kernel/common/src/byteorder.c" bodystart="290" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga13e1b4b829e74204484d05878622ea14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sys_get_le24</definition>
        <argsstring>(void)</argsstring>
        <name>test_sys_get_le24</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="byteorder_8h_1aa75ded65c52f8308de46670b78339b7c" kindref="member">sys_get_le24()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Test if <ref refid="byteorder_8h_1aa75ded65c52f8308de46670b78339b7c" kindref="member">sys_get_le24()</ref> correctly handles endianness.</para>
<para><simplesect kind="see"><para><ref refid="byteorder_8h_1aa75ded65c52f8308de46670b78339b7c" kindref="member">sys_get_le24()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/byteorder.c" line="310" column="6" bodyfile="tests/kernel/common/src/byteorder.c" bodystart="310" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga024f32559bb51d4f964ac3cc4fe493fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sys_put_le24</definition>
        <argsstring>(void)</argsstring>
        <name>test_sys_put_le24</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="byteorder_8h_1a10bdc6fccf288e1d5215dba9c031c730" kindref="member">sys_put_le24()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Test if <ref refid="byteorder_8h_1a10bdc6fccf288e1d5215dba9c031c730" kindref="member">sys_put_le24()</ref> correctly handles endianness.</para>
<para><simplesect kind="see"><para><ref refid="byteorder_8h_1a10bdc6fccf288e1d5215dba9c031c730" kindref="member">sys_put_le24()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/byteorder.c" line="329" column="6" bodyfile="tests/kernel/common/src/byteorder.c" bodystart="329" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga74d1a25313c1a19bcad3abc6253eb903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sys_get_le32</definition>
        <argsstring>(void)</argsstring>
        <name>test_sys_get_le32</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="byteorder_8h_1aa7422f922db351d2da1d52195d43b8a4" kindref="member">sys_get_le32()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Test if <ref refid="byteorder_8h_1aa7422f922db351d2da1d52195d43b8a4" kindref="member">sys_get_le32()</ref> correctly handles endianness.</para>
<para><simplesect kind="see"><para><ref refid="byteorder_8h_1aa7422f922db351d2da1d52195d43b8a4" kindref="member">sys_get_le32()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/byteorder.c" line="349" column="6" bodyfile="tests/kernel/common/src/byteorder.c" bodystart="349" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gaaeeef85960e86e9584ae89dc7f53f6c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sys_put_le32</definition>
        <argsstring>(void)</argsstring>
        <name>test_sys_put_le32</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="byteorder_8h_1aff60d0dcda6a48df4ea248f898a92de0" kindref="member">sys_put_le32()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Test if <ref refid="byteorder_8h_1aff60d0dcda6a48df4ea248f898a92de0" kindref="member">sys_put_le32()</ref> correctly handles endianness.</para>
<para><simplesect kind="see"><para><ref refid="byteorder_8h_1aff60d0dcda6a48df4ea248f898a92de0" kindref="member">sys_put_le32()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/byteorder.c" line="368" column="6" bodyfile="tests/kernel/common/src/byteorder.c" bodystart="368" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gaf977a29e10e680d1f0a29a2855fc3666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sys_get_le48</definition>
        <argsstring>(void)</argsstring>
        <name>test_sys_get_le48</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="byteorder_8h_1a601c3cefbdfd8befa336339a87fd70fd" kindref="member">sys_get_le48()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Test if <ref refid="byteorder_8h_1a601c3cefbdfd8befa336339a87fd70fd" kindref="member">sys_get_le48()</ref> correctly handles endianness.</para>
<para><simplesect kind="see"><para><ref refid="byteorder_8h_1a601c3cefbdfd8befa336339a87fd70fd" kindref="member">sys_get_le48()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/byteorder.c" line="388" column="6" bodyfile="tests/kernel/common/src/byteorder.c" bodystart="388" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gabff3be50fd48cd44958d125650d60476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sys_put_le48</definition>
        <argsstring>(void)</argsstring>
        <name>test_sys_put_le48</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="byteorder_8h_1aa6950654cc7fd67ab4f83235da59665a" kindref="member">sys_put_le48()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Test if <ref refid="byteorder_8h_1aa6950654cc7fd67ab4f83235da59665a" kindref="member">sys_put_le48()</ref> correctly handles endianness.</para>
<para><simplesect kind="see"><para><ref refid="byteorder_8h_1aa6950654cc7fd67ab4f83235da59665a" kindref="member">sys_put_le48()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/byteorder.c" line="407" column="6" bodyfile="tests/kernel/common/src/byteorder.c" bodystart="407" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga8dd256af1042d75ba3e56e667db30dac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sys_get_le64</definition>
        <argsstring>(void)</argsstring>
        <name>test_sys_get_le64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="byteorder_8h_1a678b08370e157ce5eb7117832aa86408" kindref="member">sys_get_le64()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Test if <ref refid="byteorder_8h_1a678b08370e157ce5eb7117832aa86408" kindref="member">sys_get_le64()</ref> correctly handles endianness.</para>
<para><simplesect kind="see"><para><ref refid="byteorder_8h_1a678b08370e157ce5eb7117832aa86408" kindref="member">sys_get_le64()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/byteorder.c" line="427" column="6" bodyfile="tests/kernel/common/src/byteorder.c" bodystart="427" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga5288d59b16e6cd95504330b2679f1d4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sys_put_le64</definition>
        <argsstring>(void)</argsstring>
        <name>test_sys_put_le64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="byteorder_8h_1a7d89d4b4b278fefa3e65fc6c3894a70c" kindref="member">sys_put_le64()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Test if <ref refid="byteorder_8h_1a7d89d4b4b278fefa3e65fc6c3894a70c" kindref="member">sys_put_le64()</ref> correctly handles endianness.</para>
<para><simplesect kind="see"><para><ref refid="byteorder_8h_1a7d89d4b4b278fefa3e65fc6c3894a70c" kindref="member">sys_put_le64()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/byteorder.c" line="446" column="6" bodyfile="tests/kernel/common/src/byteorder.c" bodystart="446" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga9c83a40ebc767e1ad2421ba2ae023320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_clock_uptime</definition>
        <argsstring>(void)</argsstring>
        <name>test_clock_uptime</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test clock uptime APIs functionality. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__clock__apis_1gae3e992cd3257c23d5b26d765fcbb2b69" kindref="member">k_uptime_get()</ref>, <ref refid="group__clock__apis_1ga9253cfb7b46af4d8994349323ce9872b" kindref="member">k_uptime_get_32()</ref>, <ref refid="group__clock__apis_1gad748b2fe83b36884dc087b4af367de80" kindref="member">k_uptime_delta()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: uptime elapse</para>
<para>TESTPOINT: uptime elapse lower 32-bit</para>
<para>TESTPOINT: uptime straddled ms boundary</para>
<para>TESTPOINT: uptime delta</para>
        </inbodydescription>
        <location file="tests/kernel/common/src/clock.c" line="50" column="6" bodyfile="tests/kernel/common/src/clock.c" bodystart="50" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga43a1128fed9e18fec85b6d46624fe1fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_clock_cycle_32</definition>
        <argsstring>(void)</argsstring>
        <name>test_clock_cycle_32</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test 32-bit clock cycle functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Test Objectve:<itemizedlist>
<listitem><para>The kernel architecture provide a 32bit monotonically increasing cycle counter</para>
</listitem><listitem><para>This routine tests the <ref refid="group__clock__apis_1ga208687de625e0036558343b4e66143d3" kindref="member">k_cycle_get_32()</ref> and <ref refid="group__clock__apis_1ga9253cfb7b46af4d8994349323ce9872b" kindref="member">k_uptime_get_32()</ref> <ref refid="group__clock__apis_1ga208687de625e0036558343b4e66143d3" kindref="member">k_cycle_get_32()</ref> get cycles by accessing hardware clock. <ref refid="group__clock__apis_1ga9253cfb7b46af4d8994349323ce9872b" kindref="member">k_uptime_get_32()</ref> return cycles by transforming ticks into cycles.</para>
</listitem></itemizedlist>
</para>
<para>Testing techniques<itemizedlist>
<listitem><para>Functional and black box testing</para>
</listitem></itemizedlist>
</para>
<para>Prerequisite Condition:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para>Input Specifications:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para>Expected Test Result:<itemizedlist>
<listitem><para>The timer increases monotonically</para>
</listitem></itemizedlist>
</para>
<para>Pass/Fail criteria:<itemizedlist>
<listitem><para>Success if cycles increase monotonically, failure otherwise.</para>
</listitem></itemizedlist>
</para>
<para>Test Procedure:<orderedlist>
<listitem><para>At mili-second boundary, get cycles repeatedly by <ref refid="group__clock__apis_1ga208687de625e0036558343b4e66143d3" kindref="member">k_cycle_get_32()</ref> till cycles increased</para>
</listitem><listitem><para>At mili-second boundary, get cycles repeatedly by <ref refid="group__clock__apis_1ga9253cfb7b46af4d8994349323ce9872b" kindref="member">k_uptime_get_32()</ref> till cycles increased</para>
</listitem><listitem><para>Cross check cycles gotten by <ref refid="group__clock__apis_1ga208687de625e0036558343b4e66143d3" kindref="member">k_cycle_get_32()</ref> and <ref refid="group__clock__apis_1ga9253cfb7b46af4d8994349323ce9872b" kindref="member">k_uptime_get_32()</ref>, the delta cycle should be greater than 1 milli-second.</para>
</listitem></orderedlist>
</para>
<para>Assumptions and Constraints<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__clock__apis_1ga208687de625e0036558343b4e66143d3" kindref="member">k_cycle_get_32()</ref>, <ref refid="group__clock__apis_1ga9253cfb7b46af4d8994349323ce9872b" kindref="member">k_uptime_get_32()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: cycle elapse</para>
<para>TESTPOINT: cycle/uptime cross check</para>
        </inbodydescription>
        <location file="tests/kernel/common/src/clock.c" line="125" column="6" bodyfile="tests/kernel/common/src/clock.c" bodystart="125" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gaecc19e112ec1f0990476c569415ab18d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_clock_cycle_64</definition>
        <argsstring>(void)</argsstring>
        <name>test_clock_cycle_64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test 64-bit clock cycle functionality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/clock.c" line="166" column="6" bodyfile="tests/kernel/common/src/clock.c" bodystart="166" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga43eb2123f52c8b76a63dabeb71ec213d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void duration_expire</definition>
        <argsstring>(struct k_timer *timer)</argsstring>
        <name>duration_expire</name>
        <param>
          <type>struct k_timer *</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/clock.c" line="199" column="13" bodyfile="tests/kernel/common/src/clock.c" bodystart="199" bodyend="202" declfile="tests/kernel/common/src/clock.c" declline="29" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gae28562d96c21477ae84a2fa073f2c790" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stop_expire</definition>
        <argsstring>(struct k_timer *timer)</argsstring>
        <name>stop_expire</name>
        <param>
          <type>struct k_timer *</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/clock.c" line="204" column="13" bodyfile="tests/kernel/common/src/clock.c" bodystart="204" bodyend="207" declfile="tests/kernel/common/src/clock.c" declline="30" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga37c671b1954f4d64db1780a694eb9a72" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void init_data_count</definition>
        <argsstring>(void)</argsstring>
        <name>init_data_count</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/clock.c" line="209" column="13" bodyfile="tests/kernel/common/src/clock.c" bodystart="209" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga6588a750425fc87489bb3006385b5f13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_ms_time_duration</definition>
        <argsstring>(void)</argsstring>
        <name>test_ms_time_duration</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test millisecond time duration. </para>
        </briefdescription>
        <detaileddescription>
<para>initialize a timer, then providing time duration in millisecond, and check the duration time whether correct.</para>
<para><simplesect kind="see"><para><ref refid="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" kindref="member">k_timer_init()</ref>, <ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref>, <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref>, <ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: waiting time less than duration and check the count</para>
<para>TESTPOINT: proving duration in millisecond</para>
<para>TESTPOINT: waiting time more than duration and check the count</para>
<para>cleanup environemtn</para>
        </inbodydescription>
        <location file="tests/kernel/common/src/clock.c" line="227" column="6" bodyfile="tests/kernel/common/src/clock.c" bodystart="227" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga0f504167b62d85064806318554a9d1ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__no_optimization void</type>
        <definition>__no_optimization void test_nop</definition>
        <argsstring>(void)</argsstring>
        <name>test_nop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test the <ref refid="arc_2arch_8h_1a0af98dc5138e02248173c30b8f07210f" kindref="member">arch_nop()</ref> by invoking and measure it. </para>
        </briefdescription>
        <detaileddescription>
<para>This test is mainly for coverage of the code. <ref refid="arc_2arch_8h_1a0af98dc5138e02248173c30b8f07210f" kindref="member">arch_nop()</ref> is a special implementation and it will behave differently on different platforms. By the way, this also measures how many cycles it spends for platforms that support it.</para>
<para>FYI: The potential uses of <ref refid="arc_2arch_8h_1a0af98dc5138e02248173c30b8f07210f" kindref="member">arch_nop()</ref> could be:<itemizedlist>
<listitem><para>Code alignment: Although in this case it&apos;s much more likely the compiler doing so (or you&apos;re in an assembly file, in which case you&apos;re not calling <ref refid="arc_2arch_8h_1a0af98dc5138e02248173c30b8f07210f" kindref="member">arch_nop()</ref> anyway). And this would require that <ref refid="arc_2arch_8h_1a0af98dc5138e02248173c30b8f07210f" kindref="member">arch_nop()</ref> be ALWAYS_INLINE.</para>
</listitem><listitem><para>Giving you a guaranteed place to put a breakpoint / trace trigger / etc. when debugging. This is on main usage of <ref refid="arc_2arch_8h_1a0af98dc5138e02248173c30b8f07210f" kindref="member">arch_nop()</ref>; it inherently is generally debugging code removed before actually pushing.</para>
</listitem><listitem><para>Giving you a guaranteed place to put a patchpoint. E.g. ARMv7 allows nop (and a few other instructions) to be modified concurrently with execution, but not most other instructions.</para>
</listitem><listitem><para>Delaying a few instructions, e.g. for tight timing loops on M-cores.</para>
</listitem></itemizedlist>
</para>
<para>Our test here mainly aims at the 4th scenario mentioned above but also potentially tests the 1st scenario. So no optimization here to prevent <ref refid="arc_2arch_8h_1a0af98dc5138e02248173c30b8f07210f" kindref="member">arch_nop()</ref> has optimized by the compiler is necessary.</para>
<para><simplesect kind="see"><para><ref refid="arc_2arch_8h_1a0af98dc5138e02248173c30b8f07210f" kindref="member">arch_nop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/irq_offload.c" line="95" column="24" bodyfile="tests/kernel/common/src/irq_offload.c" bodystart="95" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gaa0b61563ef767d8d2276e7ffe0b14f5e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_version</definition>
        <argsstring>(void)</argsstring>
        <name>test_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__version__apis_1ga7979b71e0ee58ec1951b675a29368374" kindref="member">sys_kernel_version_get()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__version__apis_1ga7979b71e0ee58ec1951b675a29368374" kindref="member">sys_kernel_version_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/main.c" line="86" column="13" bodyfile="tests/kernel/common/src/main.c" bodystart="86" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga4d9014d724f801e6d7ca497bf332f65a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_multilib</definition>
        <argsstring>(void)</argsstring>
        <name>test_multilib</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test if correct multilib is selected. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/multilib.c" line="20" column="6" bodyfile="tests/kernel/common/src/multilib.c" bodystart="20" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga7a57ee919f3a90b9ddacabb970ecd2b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_printk</definition>
        <argsstring>(void)</argsstring>
        <name>test_printk</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk()</ref> functionality. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk()</ref>, __printk_get_hook(), __printk_hook_install(), <ref refid="printk_8h_1a0b0af71688f7e9170103d771d4e1eab2" kindref="member">snprintk()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/printk.c" line="99" column="6" bodyfile="tests/kernel/common/src/printk.c" bodystart="99" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga6c6a0a9fd80f06d514b6cd73b5bf60e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_timeout_order</definition>
        <argsstring>(void)</argsstring>
        <name>test_timeout_order</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test timeout ordering. </para>
        </briefdescription>
        <detaileddescription>
<para>Timeouts, when expiring on the same tick, should be handled in the same order they were queued.</para>
<para><simplesect kind="see"><para><ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/timeout_order.c" line="51" column="6" bodyfile="tests/kernel/common/src/timeout_order.c" bodystart="51" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gac6422c5081bc49ebf58525add936952b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_fatal</definition>
        <argsstring>(void)</argsstring>
        <name>test_fatal</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test the kernel fatal error handling works correctly. </para>
        </briefdescription>
        <detaileddescription>
<para>Manually trigger the crash with various ways and check that the kernel is handling that properly or not. Also the crash reason should match. Check for stack sentinel feature by overflowing the thread&apos;s stack and check for the exception.</para>
<para>Manually trigger the crash with various ways and check that the kernel is handling that properly or not. Also the crash reason should match. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/fatal/exception/src/main.c" line="287" column="6" bodyfile="tests/kernel/fatal/exception/src/main.c" bodystart="287" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gadad0d584b7bbfdf20f0958df4c26f2da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_fatal_on_smp</definition>
        <argsstring>(void)</argsstring>
        <name>test_fatal_on_smp</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test fatal error can be triggered on different core. </para>
        </briefdescription>
        <detaileddescription>
<para>When CONFIG_SMP is enabled, on some multiprocessor platforms, exception can be triggered on different core at the same time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="673" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="673" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga432420409c3573d174774a7a5ad29a47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_workq_on_smp</definition>
        <argsstring>(void)</argsstring>
        <name>test_workq_on_smp</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test system workq run on different core. </para>
        </briefdescription>
        <detaileddescription>
<para>When macro CONFIG_SMP is enabled, workq can be run on different core. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="703" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="703" bodyend="723"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__kernel__common__tests_1ga6b40459f5abb61b9b9c017c92d9c3560" prot="public" static="no">
        <name>FAIL_ALLOC_MSG_FMT</name>
        <initializer>&quot;sys_bitarray_alloc with region size %i allocated incorrectly&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/bitarray.c" line="46" column="9" bodyfile="tests/kernel/common/src/bitarray.c" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__kernel__common__tests_1gadd6c34cb90fde4698063a97f00d32a60" prot="public" static="no">
        <name>FAIL_ALLOC_RET_MSG_FMT</name>
        <initializer>&quot;sys_bitarray_alloc with region size %i returned incorrect <ref refid="structresult" kindref="compound">result</ref>&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/bitarray.c" line="47" column="9" bodyfile="tests/kernel/common/src/bitarray.c" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__kernel__common__tests_1gacd42d732d1f3a131ffac3f7d8dd9898d" prot="public" static="no">
        <name>FAIL_ALLOC_OFFSET_MSG_FMT</name>
        <initializer>&quot;sys_bitarray_alloc with region size %i gave incorrect offset&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/bitarray.c" line="48" column="9" bodyfile="tests/kernel/common/src/bitarray.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__kernel__common__tests_1ga17e55c3d4b9947a11191510e3f52c2f6" prot="public" static="no">
        <name>FAIL_FREE_MSG_FMT</name>
        <initializer>&quot;sys_bitarray_free with region size %i and offset %i failed&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/bitarray.c" line="49" column="9" bodyfile="tests/kernel/common/src/bitarray.c" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__kernel__common__tests_1ga9a8e700d56e7d858108b755ad3edb52e" prot="public" static="no">
        <name>FREE</name>
        <initializer>0U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/bitarray.c" line="50" column="9" bodyfile="tests/kernel/common/src/bitarray.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
