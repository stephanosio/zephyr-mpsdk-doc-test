<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structbt__l2cap__le__chan" kind="struct" language="C++" prot="public">
    <compoundname>bt_l2cap_le_chan</compoundname>
    <includes refid="l2cap_8h" local="no">l2cap.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structbt__l2cap__le__chan_1a980126cabc3824ab623d634d91f7d761" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structbt__l2cap__chan" kindref="compound">bt_l2cap_chan</ref></type>
        <definition>struct bt_l2cap_chan bt_l2cap_le_chan::chan</definition>
        <argsstring></argsstring>
        <name>chan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common L2CAP channel reference object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="170" column="20" bodyfile="include/bluetooth/l2cap.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__l2cap__le__chan_1a95808ad9bcd910b65bee31fa6bd4b638" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structbt__l2cap__le__endpoint" kindref="compound">bt_l2cap_le_endpoint</ref></type>
        <definition>struct bt_l2cap_le_endpoint bt_l2cap_le_chan::rx</definition>
        <argsstring></argsstring>
        <name>rx</name>
        <briefdescription>
<para>Channel Receiving Endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>If the application has set an alloc_buf channel callback for the channel to support receiving segmented L2CAP SDUs the application should inititalize the MTU of the Receiving Endpoint. Otherwise the MTU of the receiving endpoint will be initialized to <ref refid="group__bt__l2cap_1ga13b93a8f09157fbcf739fa4949840efe" kindref="member">BT_L2CAP_SDU_RX_MTU</ref> by the stack. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="179" column="27" bodyfile="include/bluetooth/l2cap.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__l2cap__le__chan_1a55d8ce850f365ac7ab7ff450ecb61f23" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t bt_l2cap_le_chan::pending_rx_mtu</definition>
        <argsstring></argsstring>
        <name>pending_rx_mtu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pending RX MTU on ECFC reconfigure, used internally by stack </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="182" column="10" bodyfile="include/bluetooth/l2cap.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__l2cap__le__chan_1a059f98cebf6f43a05937ac82815009e7" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structbt__l2cap__le__endpoint" kindref="compound">bt_l2cap_le_endpoint</ref></type>
        <definition>struct bt_l2cap_le_endpoint bt_l2cap_le_chan::tx</definition>
        <argsstring></argsstring>
        <name>tx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Channel Transmission Endpoint </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="185" column="27" bodyfile="include/bluetooth/l2cap.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__l2cap__le__chan_1a716ea69cb7261076023d0cf6384b3ebb" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__fifo" kindref="compound">k_fifo</ref></type>
        <definition>struct k_fifo bt_l2cap_le_chan::tx_queue</definition>
        <argsstring></argsstring>
        <name>tx_queue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Channel Transmission queue </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="187" column="13" bodyfile="include/bluetooth/l2cap.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__l2cap__le__chan_1ae6e98bc056be4f2209e897e4693788d5" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>struct net_buf* bt_l2cap_le_chan::tx_buf</definition>
        <argsstring></argsstring>
        <name>tx_buf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Channel Pending Transmission buffer <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="189" column="14" bodyfile="include/bluetooth/l2cap.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__l2cap__le__chan_1ae557daa4f1b2938e7189df7f0bd1e4d2" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__work" kindref="compound">k_work</ref></type>
        <definition>struct k_work bt_l2cap_le_chan::tx_work</definition>
        <argsstring></argsstring>
        <name>tx_work</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Channel Transmission work <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="191" column="13" bodyfile="include/bluetooth/l2cap.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__l2cap__le__chan_1a5208d49700f37f7ac5dc27c5a338f7ff" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__work" kindref="compound">k_work</ref></type>
        <definition>struct k_work bt_l2cap_le_chan::rx_work</definition>
        <argsstring></argsstring>
        <name>rx_work</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="196" column="13" bodyfile="include/bluetooth/l2cap.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__l2cap__le__chan_1a9d972f8a06eb1b964425238cdbf0c8a2" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__fifo" kindref="compound">k_fifo</ref></type>
        <definition>struct k_fifo bt_l2cap_le_chan::rx_queue</definition>
        <argsstring></argsstring>
        <name>rx_queue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="197" column="13" bodyfile="include/bluetooth/l2cap.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>LE L2CAP Channel structure. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="14">
        <label>__thread_entry</label>
      </node>
      <node id="12">
        <label>_callee_saved</label>
      </node>
      <node id="16">
        <label>_mem_domain_info</label>
      </node>
      <node id="22">
        <label>_slist</label>
      </node>
      <node id="5">
        <label>_snode</label>
      </node>
      <node id="21">
        <label>_thread_arch</label>
      </node>
      <node id="11">
        <label>_thread_base</label>
      </node>
      <node id="15">
        <label>_thread_stack_info</label>
      </node>
      <node id="23">
        <label>_timeout</label>
      </node>
      <node id="13">
        <label>_wait_q_t</label>
      </node>
      <node id="2">
        <label>bt_l2cap_chan</label>
        <link refid="structbt__l2cap__chan"/>
        <childnode refid="3" relation="usage">
          <edgelabel>ops</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>node</edgelabel>
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>destroy</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>rtx_work</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>rtx_sync</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>bt_l2cap_chan_ops</label>
        <link refid="structbt__l2cap__chan__ops"/>
        <childnode refid="4" relation="usage">
          <edgelabel>alloc_buf</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>bt_l2cap_le_chan</label>
        <link refid="structbt__l2cap__le__chan"/>
        <childnode refid="2" relation="usage">
          <edgelabel>chan</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>rx</edgelabel>
          <edgelabel>tx</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>rx_queue</edgelabel>
          <edgelabel>tx_queue</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>tx_buf</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>rx_work</edgelabel>
          <edgelabel>tx_work</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>bt_l2cap_le_endpoint</label>
        <link refid="structbt__l2cap__le__endpoint"/>
      </node>
      <node id="26">
        <label>k_fifo</label>
        <link refid="structk__fifo"/>
      </node>
      <node id="18">
        <label>k_heap</label>
        <link refid="structk__heap"/>
        <childnode refid="19" relation="usage">
          <edgelabel>heap</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>wait_q</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>lock</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>k_spinlock</label>
        <link refid="structk__spinlock"/>
      </node>
      <node id="10">
        <label>k_thread</label>
        <link refid="structk__thread"/>
        <childnode refid="11" relation="usage">
          <edgelabel>base</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>callee_saved</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>join_queue</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>entry</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>next_thread</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>stack_info</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>mem_domain_info</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>stack_obj</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>resource_pool</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>arch</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>k_work</label>
        <link refid="structk__work"/>
        <childnode refid="5" relation="usage">
          <edgelabel>node</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>handler</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>queue</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>k_work_delayable</label>
        <link refid="structk__work__delayable"/>
        <childnode refid="8" relation="usage">
          <edgelabel>work</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>timeout</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>queue</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>k_work_q</label>
        <link refid="structk__work__q"/>
        <childnode refid="10" relation="usage">
          <edgelabel>thread</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>pending</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>drainq</edgelabel>
          <edgelabel>notifyq</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>k_work_sync</label>
        <link refid="structk__work__sync"/>
      </node>
      <node id="4">
        <label>net_buf</label>
        <link refid="structnet__buf"/>
        <childnode refid="5" relation="usage">
          <edgelabel>node</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>frags</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>b</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>net_buf_simple</label>
        <link refid="structnet__buf__simple"/>
      </node>
      <node id="19">
        <label>sys_heap</label>
        <link refid="structsys__heap"/>
      </node>
      <node id="17">
        <label>z_thread_stack_element</label>
      </node>
    </collaborationgraph>
    <location file="include/bluetooth/l2cap.h" line="168" column="1" bodyfile="include/bluetooth/l2cap.h" bodystart="168" bodyend="198"/>
    <listofallmembers>
      <member refid="structbt__l2cap__le__chan_1a980126cabc3824ab623d634d91f7d761" prot="public" virt="non-virtual"><scope>bt_l2cap_le_chan</scope><name>chan</name></member>
      <member refid="structbt__l2cap__le__chan_1a55d8ce850f365ac7ab7ff450ecb61f23" prot="public" virt="non-virtual"><scope>bt_l2cap_le_chan</scope><name>pending_rx_mtu</name></member>
      <member refid="structbt__l2cap__le__chan_1a95808ad9bcd910b65bee31fa6bd4b638" prot="public" virt="non-virtual"><scope>bt_l2cap_le_chan</scope><name>rx</name></member>
      <member refid="structbt__l2cap__le__chan_1a9d972f8a06eb1b964425238cdbf0c8a2" prot="public" virt="non-virtual"><scope>bt_l2cap_le_chan</scope><name>rx_queue</name></member>
      <member refid="structbt__l2cap__le__chan_1a5208d49700f37f7ac5dc27c5a338f7ff" prot="public" virt="non-virtual"><scope>bt_l2cap_le_chan</scope><name>rx_work</name></member>
      <member refid="structbt__l2cap__le__chan_1a059f98cebf6f43a05937ac82815009e7" prot="public" virt="non-virtual"><scope>bt_l2cap_le_chan</scope><name>tx</name></member>
      <member refid="structbt__l2cap__le__chan_1ae6e98bc056be4f2209e897e4693788d5" prot="public" virt="non-virtual"><scope>bt_l2cap_le_chan</scope><name>tx_buf</name></member>
      <member refid="structbt__l2cap__le__chan_1a716ea69cb7261076023d0cf6384b3ebb" prot="public" virt="non-virtual"><scope>bt_l2cap_le_chan</scope><name>tx_queue</name></member>
      <member refid="structbt__l2cap__le__chan_1ae557daa4f1b2938e7189df7f0bd1e4d2" prot="public" virt="non-virtual"><scope>bt_l2cap_le_chan</scope><name>tx_work</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
