<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="test__stack__contexts_8c" kind="file" language="C++">
    <compoundname>test_stack_contexts.c</compoundname>
    <includes refid="ztest_8h" local="no">ztest.h</includes>
    <includes refid="irq__offload_8h" local="no">irq_offload.h</includes>
    <incdepgraph>
      <node id="17">
        <label>app_memory/app_memdomain.h</label>
        <link refid="app__memdomain_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>app_memory/mem_domain.h</label>
        <link refid="mem__domain_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>arch/arch_inlines.h</label>
        <link refid="arch__inlines_8h"/>
      </node>
      <node id="66">
        <label>arch/cpu.h</label>
        <link refid="include_2arch_2cpu_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>arch/structs.h</label>
        <link refid="structs_8h"/>
      </node>
      <node id="65">
        <label>arch/syscall.h</label>
        <link refid="arch_2syscall_8h"/>
      </node>
      <node id="29">
        <label>devicetree.h</label>
        <link refid="devicetree_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>devicetree/clocks.h</label>
        <link refid="clocks_8h"/>
      </node>
      <node id="36">
        <label>devicetree/dma.h</label>
        <link refid="devicetree_2dma_8h"/>
      </node>
      <node id="38">
        <label>devicetree/fixed-partitions.h</label>
        <link refid="fixed-partitions_8h"/>
      </node>
      <node id="34">
        <label>devicetree/gpio.h</label>
        <link refid="devicetree_2gpio_8h"/>
      </node>
      <node id="32">
        <label>devicetree/io-channels.h</label>
        <link refid="io-channels_8h"/>
      </node>
      <node id="40">
        <label>devicetree/ordinals.h</label>
        <link refid="ordinals_8h"/>
      </node>
      <node id="41">
        <label>devicetree/pinctrl.h</label>
        <link refid="devicetree_2pinctrl_8h"/>
      </node>
      <node id="37">
        <label>devicetree/pwms.h</label>
        <link refid="pwms_8h"/>
      </node>
      <node id="35">
        <label>devicetree/spi.h</label>
        <link refid="devicetree_2spi_8h"/>
      </node>
      <node id="39">
        <label>devicetree/zephyr.h</label>
        <link refid="devicetree_2zephyr_8h"/>
      </node>
      <node id="75">
        <label>fatal.h</label>
        <link refid="fatal_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>init.h</label>
        <link refid="init_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>irq_offload.h</label>
        <link refid="irq__offload_8h"/>
      </node>
      <node id="45">
        <label>kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>kernel/mempool_heap.h</label>
        <link refid="mempool__heap_8h"/>
      </node>
      <node id="51">
        <label>kernel/sched_priq.h</label>
        <link refid="sched__priq_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>kernel/stats.h</label>
        <link refid="kernel_2stats_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>kernel/thread.h</label>
        <link refid="kernel_2thread_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>kernel/thread_stack.h</label>
        <link refid="kernel_2thread__stack_8h"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>kernel_includes.h</label>
        <link refid="kernel__includes_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>kernel_structs.h</label>
        <link refid="kernel__structs_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>kernel_version.h</label>
        <link refid="kernel__version_8h"/>
      </node>
      <node id="28">
        <label>linker/devicetree_reserved.h</label>
        <link refid="devicetree__reserved_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>linker/linker-defs.h</label>
        <link refid="linker-defs_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>linker/section_tags.h</label>
        <link refid="section__tags_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>linker/sections.h</label>
        <link refid="sections_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>sys/arch_interface.h</label>
        <link refid="arch__interface_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="42">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>sys/kobject.h</label>
        <link refid="include_2sys_2kobject_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>sys/rb.h</label>
        <link refid="rb_8h"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>sys/sflist.h</label>
        <link refid="sflist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>sys/sys_heap.h</label>
        <link refid="sys__heap_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>sys/time_units.h</label>
        <link refid="time__units_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="23">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>sys_clock.h</label>
        <link refid="include_2sys__clock_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>timing/types.h</label>
        <link refid="include_2timing_2types_8h"/>
      </node>
      <node id="4">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="19">
        <label>toolchain/common.h</label>
        <link refid="common_8h"/>
      </node>
      <node id="86">
        <label>tracing/tracing.h</label>
        <link refid="tracing_2tracing_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>tracing/tracing_macros.h</label>
        <link refid="tracing__macros_8h"/>
      </node>
      <node id="87">
        <label>tracking.h</label>
        <link refid="tracking_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="13">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="8">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="11">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>offsets.h</label>
        <link refid="offsets_8h"/>
      </node>
      <node id="64">
        <label>syscall_list.h</label>
        <link refid="syscall__list_8h"/>
      </node>
      <node id="88">
        <label>syscalls/kernel.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kernel_8h"/>
      </node>
      <node id="81">
        <label>syscalls/kobject.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kobject_8h"/>
      </node>
      <node id="2">
        <label>ztest.h</label>
        <link refid="ztest_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ztest_assert.h</label>
        <link refid="ztest__assert_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ztest_mock.h</label>
        <link refid="ztest__mock_8h"/>
      </node>
      <node id="15">
        <label>ztest_test.h</label>
        <link refid="ztest__test_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>ztest_test_deprecated.h</label>
        <link refid="ztest__test__deprecated_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/kernel/stack/stack/src/test_stack_contexts.c</label>
        <link refid="test__stack__contexts_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>alloca.h</label>
      </node>
      <node id="68">
        <label>arch/cpu.h</label>
      </node>
      <node id="31">
        <label>devicetree_fixups.h</label>
      </node>
      <node id="30">
        <label>devicetree_unfixed.h</label>
      </node>
      <node id="43">
        <label>kernel.h</label>
      </node>
      <node id="6">
        <label>stdarg.h</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="84">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="89">
        <label>syscalls/ztest_test.h</label>
      </node>
      <node id="90">
        <label>tc_util.h</label>
      </node>
      <node id="9">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="test__stack__contexts_8c_1a6423a880df59733d2d9b509c7718d3a9" prot="public" static="no">
        <name>STACK_SIZE</name>
        <initializer>(512 + CONFIG_TEST_EXTRA_STACK_SIZE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="9" column="11" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__stack__contexts_8c_1a82c9bc91d6207f493c814b2c33dfdba4" prot="public" static="no">
        <name>STACK_LEN</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="10" column="9" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__stack__contexts_8c_1ae1a138dfded25bd913e55abca66155e8" prot="public" static="no">
        <name>HIGH_T1</name>
        <initializer>0xaaa</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="11" column="9" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__stack__contexts_8c_1ab0866f3015b0f2478e02a1e655571893" prot="public" static="no">
        <name>HIGH_T2</name>
        <initializer>0xbbb</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="12" column="9" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__stack__contexts_8c_1a408d2e9ada5737e616c7d4d5bad1cd37" prot="public" static="no">
        <name>LOW_PRIO</name>
        <initializer>0xccc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="13" column="9" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="13" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="test__stack__contexts_8c_1a6856ea318b5a9498715e4444b13a1de1" prot="public" static="no" mutable="no">
        <type>struct k_stack</type>
        <definition>struct k_stack stack</definition>
        <argsstring></argsstring>
        <name>stack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="18" column="14" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__stack__contexts_8c_1a142b35a972e1d49b2f774510d10c8a74" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref></type>
        <definition>struct k_thread thread_data1</definition>
        <argsstring></argsstring>
        <name>thread_data1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="21" column="15" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__stack__contexts_8c_1a51e826f3264fc3f396c06163ef48ea5d" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref></type>
        <definition>struct k_thread high_pro_thread_t1</definition>
        <argsstring></argsstring>
        <name>high_pro_thread_t1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="23" column="22" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__stack__contexts_8c_1a988171b95bb5ba539270106d14b002bc" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref></type>
        <definition>struct k_thread high_pro_thread_t2</definition>
        <argsstring></argsstring>
        <name>high_pro_thread_t2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="25" column="22" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__stack__contexts_8c_1a79b904d25e56ee3842fba10e33cda702" prot="public" static="yes" mutable="no">
        <type><ref refid="group__ztest__test_1ga2c7d0aa85e7f320d582395c5ded90133" kindref="member">ZTEST_DMEM</ref> stack_data_t</type>
        <definition>ZTEST_DMEM stack_data_t data[4]</definition>
        <argsstring>[4]</argsstring>
        <name>data</name>
        <initializer>= { 0xABCD, 0x1234 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="26" column="32" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__stack__contexts_8c_1ac9d283d96985728282a611f383fd3e74" prot="public" static="no" mutable="no">
        <type>struct k_sem</type>
        <definition>struct k_sem end_sema1</definition>
        <argsstring></argsstring>
        <name>end_sema1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="27" column="12" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__stack__contexts_8c_1ab70e2b825f805f34e21e3ce905d8404d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_STACK_DEFINE</definition>
        <argsstring>(kstack, 4)</argsstring>
        <name>K_STACK_DEFINE</name>
        <param>
          <type><ref refid="stack_2stack_2src_2main_8c_1a8032a4f3bd65d0cd0b03b39961bfeb81" kindref="member">kstack</ref></type>
        </param>
        <param>
          <type>4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TESTPOINT: init via K_STACK_DEFINE </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="16" column="1" declfile="tests/kernel/stack/stack/src/test_stack_contexts.c" declline="16" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test__stack__contexts_8c_1a213c0f58ba31bd588381224dbd97e9eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_STACK_DEFINE</definition>
        <argsstring>(kstack_test_alloc, 4)</argsstring>
        <name>K_STACK_DEFINE</name>
        <param>
          <type>kstack_test_alloc</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="17" column="1" declfile="tests/kernel/stack/stack/src/test_stack_contexts.c" declline="17" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test__stack__contexts_8c_1a088fa67efa0d6a42934d333bf6d99777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_THREAD_STACK_DEFINE</definition>
        <argsstring>(threadstack1,(512+CONFIG_TEST_EXTRA_STACK_SIZE))</argsstring>
        <name>K_THREAD_STACK_DEFINE</name>
        <param>
          <type><ref refid="stack_2stack_2src_2main_8c_1a3808bea60358be7dddc26ee430bd64cd" kindref="member">threadstack1</ref></type>
        </param>
        <param>
          <type>(512+CONFIG_TEST_EXTRA_STACK_SIZE)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="20" column="1" declfile="tests/kernel/stack/stack/src/test_stack_contexts.c" declline="20" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test__stack__contexts_8c_1afa438e156028f40c5ceaf5c2fc59e662" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_THREAD_STACK_DEFINE</definition>
        <argsstring>(threadstack_t1,(512+CONFIG_TEST_EXTRA_STACK_SIZE))</argsstring>
        <name>K_THREAD_STACK_DEFINE</name>
        <param>
          <type>threadstack_t1</type>
        </param>
        <param>
          <type>(512+CONFIG_TEST_EXTRA_STACK_SIZE)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="22" column="1" declfile="tests/kernel/stack/stack/src/test_stack_contexts.c" declline="22" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test__stack__contexts_8c_1a04e9ed8080eb411376a1b5430be059e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_THREAD_STACK_DEFINE</definition>
        <argsstring>(threadstack_t2,(512+CONFIG_TEST_EXTRA_STACK_SIZE))</argsstring>
        <name>K_THREAD_STACK_DEFINE</name>
        <param>
          <type>threadstack_t2</type>
        </param>
        <param>
          <type>(512+CONFIG_TEST_EXTRA_STACK_SIZE)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="24" column="1" declfile="tests/kernel/stack/stack/src/test_stack_contexts.c" declline="24" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test__stack__contexts_8c_1a6d4afaa36cc879ec05f0dbe044fd69f2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tstack_push</definition>
        <argsstring>(struct k_stack *pstack)</argsstring>
        <name>tstack_push</name>
        <param>
          <type>struct k_stack *</type>
          <declname>pstack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: stack push</para>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="29" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="29" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="test__stack__contexts_8c_1ab3ea71cede79abf0afd3ac04b095bec8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tstack_pop</definition>
        <argsstring>(struct k_stack *pstack)</argsstring>
        <name>tstack_pop</name>
        <param>
          <type>struct k_stack *</type>
          <declname>pstack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: stack pop</para>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="37" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="37" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="test__stack__contexts_8c_1aa7d3ca1282c3d5c808b5eb399563afaf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tIsr_entry_push</definition>
        <argsstring>(const void *p)</argsstring>
        <name>tIsr_entry_push</name>
        <param>
          <type>const void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="49" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="test__stack__contexts_8c_1adbdde999075a6cbbb550b6be2c55425e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tIsr_entry_pop</definition>
        <argsstring>(const void *p)</argsstring>
        <name>tIsr_entry_pop</name>
        <param>
          <type>const void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="54" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="test__stack__contexts_8c_1a757b88d684794c799892d1a4c28fd86f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tThread_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>tThread_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="59" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="59" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="test__stack__contexts_8c_1a6251f773e37edfb2d09322d95a46389b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tstack_thread_thread</definition>
        <argsstring>(struct k_stack *pstack)</argsstring>
        <name>tstack_thread_thread</name>
        <param>
          <type>struct k_stack *</type>
          <declname>pstack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: thread-thread data passing via stack</para>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="67" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="67" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="test__stack__contexts_8c_1a548826eaacb0b08a27474487c8df6cff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tstack_thread_isr</definition>
        <argsstring>(struct k_stack *pstack)</argsstring>
        <name>tstack_thread_isr</name>
        <param>
          <type>struct k_stack *</type>
          <declname>pstack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: thread-isr data passing via stack</para>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="85" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="85" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga969dfd191f24488451037a01f743fb45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_thread2thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_thread2thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to verify data passing between threads via stack. </para>
        </briefdescription>
        <detaileddescription>
<para>Static define and Dynamic define stacks, Then initialize them. Current thread push or pop data item into the stack. Create a new thread pop or push data item into the stack. Controlled by semaphore. Verify data passing between threads via stack And verify stack can be define at compile time.</para>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1ga4400a39ef48289305cf66a092d5c6c7d" kindref="member">k_stack_init()</ref>, <ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref>, <ref refid="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" kindref="member">K_STACK_DEFINE(x)</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: test k_stack_init stack</para>
<para>TESTPOINT: test K_STACK_DEFINE stack</para>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="116" column="6" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="116" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1gad464dd62dbebefeff5ee3b1a4f82fcb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_user_thread2thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_user_thread2thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verifies data passing between user threads via stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1ga4400a39ef48289305cf66a092d5c6c7d" kindref="member">k_stack_init()</ref>, <ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref>, <ref refid="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" kindref="member">K_STACK_DEFINE(x)</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="131" column="6" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="131" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1gaf06348e349a2076ea86503cedce2b9ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_thread2isr</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_thread2isr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verifies data passing between thread and ISR via stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1ga4400a39ef48289305cf66a092d5c6c7d" kindref="member">k_stack_init()</ref>, <ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref>, <ref refid="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" kindref="member">K_STACK_DEFINE(x)</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: test k_stack_init stack</para>
<para>TESTPOINT: test K_STACK_DEFINE stack</para>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="147" column="6" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="147" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga9677d2b8125bcd28a15635a7e0d960fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_alloc_thread2thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_alloc_thread2thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__stack__apis_1gab97d924db1aef3f6adade156a107d45c" kindref="member">k_stack_alloc_init()</ref>, <ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push()</ref>, <ref refid="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" kindref="member">K_STACK_DEFINE(x)</ref>, <ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop()</ref>, <ref refid="group__stack__apis_1ga819f4e7b2cf11cf2e1b80933fdcb67ea" kindref="member">k_stack_cleanup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: thread-thread data passing via stack</para>
<para>Requested buffer allocation from the test pool.</para>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="161" column="6" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="161" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga740c522468d2a3f4e6525124ebd6c99b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void low_prio_wait_for_stack</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>low_prio_wait_for_stack</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="189" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="189" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1gadc9a51dfcee171b7a0b0dceea7cd2582" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void high_prio_t1_wait_for_stack</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>high_prio_t1_wait_for_stack</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="199" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="199" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga293923cc3111ca27e16a185ee1351f81" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void high_prio_t2_wait_for_stack</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>high_prio_t2_wait_for_stack</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="209" column="13" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="209" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga8afe7ec83d6d7cfd369954c194a0e820" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_multithread_competition</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_multithread_competition</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test multi-threads to get data from stack. </para>
        </briefdescription>
        <detaileddescription>
<para>Define three threads, and set a higher priority for two of them, and set a lower priority for the last one. Then Add a delay between creating the two high priority threads. Test point:<orderedlist>
<listitem><para>Any number of threads may wait(K_FOREVER set) on an empty stack simultaneously.</para>
</listitem><listitem><para>When data is pushed, it is given to the highest priority thread that has waited longest. </para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="233" column="6" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="233" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__stack__tests_1ga9ebcc1991c52c1882e5a22da1e15fdc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_stack_alloc_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_stack_alloc_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test case of requesting a buffer larger than resource pool. </para>
        </briefdescription>
        <detaileddescription>
<para>Try to request a buffer larger than resource pool for stack, then see if returns an expected value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/stack/stack/src/test_stack_contexts.c" line="290" column="6" bodyfile="tests/kernel/stack/stack/src/test_stack_contexts.c" bodystart="290" bodyend="298"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ztest_8h" kindref="compound">ztest.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="irq__offload_8h" kindref="compound">irq_offload.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STACK_SIZE<sp/>(512<sp/>+<sp/>CONFIG_TEST_EXTRA_STACK_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STACK_LEN<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HIGH_T1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xaaa</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HIGH_T2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xbbb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOW_PRIO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xccc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><ref refid="test__stack__contexts_8c_1ab70e2b825f805f34e21e3ce905d8404d" kindref="member">K_STACK_DEFINE</ref>(<ref refid="stack_2stack_2src_2main_8c_1a8032a4f3bd65d0cd0b03b39961bfeb81" kindref="member">kstack</ref>,<sp/><ref refid="test__stack__contexts_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><ref refid="test__stack__contexts_8c_1ab70e2b825f805f34e21e3ce905d8404d" kindref="member">K_STACK_DEFINE</ref>(kstack_test_alloc,<sp/><ref refid="test__stack__contexts_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_stack<sp/><ref refid="test__stack__contexts_8c_1a6856ea318b5a9498715e4444b13a1de1" kindref="member">stack</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><ref refid="test__stack__contexts_8c_1a088fa67efa0d6a42934d333bf6d99777" kindref="member">K_THREAD_STACK_DEFINE</ref>(<ref refid="stack_2stack_2src_2main_8c_1a3808bea60358be7dddc26ee430bd64cd" kindref="member">threadstack1</ref>,<sp/><ref refid="test__stack__contexts_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/><ref refid="test__stack__contexts_8c_1a142b35a972e1d49b2f774510d10c8a74" kindref="member">thread_data1</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><ref refid="test__stack__contexts_8c_1a088fa67efa0d6a42934d333bf6d99777" kindref="member">K_THREAD_STACK_DEFINE</ref>(threadstack_t1,<sp/><ref refid="test__stack__contexts_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/><ref refid="test__stack__contexts_8c_1a51e826f3264fc3f396c06163ef48ea5d" kindref="member">high_pro_thread_t1</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><ref refid="test__stack__contexts_8c_1a088fa67efa0d6a42934d333bf6d99777" kindref="member">K_THREAD_STACK_DEFINE</ref>(threadstack_t2,<sp/><ref refid="test__stack__contexts_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/><ref refid="test__stack__contexts_8c_1a988171b95bb5ba539270106d14b002bc" kindref="member">high_pro_thread_t2</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__ztest__test__deprecated_1ga2c7d0aa85e7f320d582395c5ded90133" kindref="member">ZTEST_DMEM</ref><sp/>stack_data_t<sp/><ref refid="test__stack__contexts_8c_1a79b904d25e56ee3842fba10e33cda702" kindref="member">data</ref>[<ref refid="test__stack__contexts_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>]<sp/>=<sp/>{<sp/>0xABCD,<sp/>0x1234<sp/>};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_sem<sp/><ref refid="test__stack__contexts_8c_1ac9d283d96985728282a611f383fd3e74" kindref="member">end_sema1</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__stack__contexts_8c_1a6d4afaa36cc879ec05f0dbe044fd69f2" kindref="member">tstack_push</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_stack<sp/>*pstack)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="test__stack__contexts_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push</ref>(pstack,<sp/><ref refid="test__stack__contexts_8c_1a79b904d25e56ee3842fba10e33cda702" kindref="member">data</ref>[i]);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__stack__contexts_8c_1ab3ea71cede79abf0afd3ac04b095bec8" kindref="member">tstack_pop</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_stack<sp/>*pstack)</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_data_t<sp/>rx_data;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="test__stack__contexts_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref><sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gacc41f998b701997e4eafb6ed7b9d537c" kindref="member">zassert_false</ref>(<ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop</ref>(pstack,<sp/>&amp;rx_data,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>),<sp/>NULL);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(rx_data,<sp/><ref refid="test__stack__contexts_8c_1a79b904d25e56ee3842fba10e33cda702" kindref="member">data</ref>[i],<sp/>NULL);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*entry<sp/>of<sp/>contexts*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__stack__contexts_8c_1aa7d3ca1282c3d5c808b5eb399563afaf" kindref="member">tIsr_entry_push</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="kobject_8c_1a5bf2789125fcfa98cff775cb82fbd3c9" kindref="member">p</ref>)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__stack__contexts_8c_1a6d4afaa36cc879ec05f0dbe044fd69f2" kindref="member">tstack_push</ref>((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_stack<sp/>*)<ref refid="kobject_8c_1a5bf2789125fcfa98cff775cb82fbd3c9" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__stack__contexts_8c_1adbdde999075a6cbbb550b6be2c55425e" kindref="member">tIsr_entry_pop</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="kobject_8c_1a5bf2789125fcfa98cff775cb82fbd3c9" kindref="member">p</ref>)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__stack__contexts_8c_1ab3ea71cede79abf0afd3ac04b095bec8" kindref="member">tstack_pop</ref>((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_stack<sp/>*)<ref refid="kobject_8c_1a5bf2789125fcfa98cff775cb82fbd3c9" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__stack__contexts_8c_1a757b88d684794c799892d1a4c28fd86f" kindref="member">tThread_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__stack__contexts_8c_1ab3ea71cede79abf0afd3ac04b095bec8" kindref="member">tstack_pop</ref>((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_stack<sp/>*)p1);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gab9be3cf1988af2cd6afdace52d497c84" kindref="member">k_sem_give</ref>(&amp;<ref refid="test__stack__contexts_8c_1ac9d283d96985728282a611f383fd3e74" kindref="member">end_sema1</ref>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__stack__contexts_8c_1a6d4afaa36cc879ec05f0dbe044fd69f2" kindref="member">tstack_push</ref>((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_stack<sp/>*)p1);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gab9be3cf1988af2cd6afdace52d497c84" kindref="member">k_sem_give</ref>(&amp;<ref refid="test__stack__contexts_8c_1ac9d283d96985728282a611f383fd3e74" kindref="member">end_sema1</ref>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__stack__contexts_8c_1a6251f773e37edfb2d09322d95a46389b" kindref="member">tstack_thread_thread</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_stack<sp/>*pstack)</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gadcd0e6cfba3392fb887222eafe4c1845" kindref="member">k_sem_init</ref>(&amp;<ref refid="test__stack__contexts_8c_1ac9d283d96985728282a611f383fd3e74" kindref="member">end_sema1</ref>,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref><sp/>=<sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="test__stack__contexts_8c_1a142b35a972e1d49b2f774510d10c8a74" kindref="member">thread_data1</ref>,<sp/><ref refid="stack_2stack_2src_2main_8c_1a3808bea60358be7dddc26ee430bd64cd" kindref="member">threadstack1</ref>,<sp/><ref refid="test__stack__contexts_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__stack__contexts_8c_1a757b88d684794c799892d1a4c28fd86f" kindref="member">tThread_entry</ref>,<sp/>pstack,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(0),<sp/><ref refid="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" kindref="member">K_USER</ref><sp/>|</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" kindref="member">K_INHERIT_PERMS</ref>,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__stack__contexts_8c_1a6d4afaa36cc879ec05f0dbe044fd69f2" kindref="member">tstack_push</ref>(pstack);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gac71e2383c1920dddc45a561cacfef090" kindref="member">k_sem_take</ref>(&amp;<ref refid="test__stack__contexts_8c_1ac9d283d96985728282a611f383fd3e74" kindref="member">end_sema1</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gac71e2383c1920dddc45a561cacfef090" kindref="member">k_sem_take</ref>(&amp;<ref refid="test__stack__contexts_8c_1ac9d283d96985728282a611f383fd3e74" kindref="member">end_sema1</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__stack__contexts_8c_1ab3ea71cede79abf0afd3ac04b095bec8" kindref="member">tstack_pop</ref>(pstack);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>clear<sp/>the<sp/>spawn<sp/>thread<sp/>to<sp/>avoid<sp/>side<sp/>effect<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__stack__contexts_8c_1a548826eaacb0b08a27474487c8df6cff" kindref="member">tstack_thread_isr</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_stack<sp/>*pstack)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gadcd0e6cfba3392fb887222eafe4c1845" kindref="member">k_sem_init</ref>(&amp;<ref refid="test__stack__contexts_8c_1ac9d283d96985728282a611f383fd3e74" kindref="member">end_sema1</ref>,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="irq__offload_8h_1a429859dd7ac3d88a4b7ae858835847ce" kindref="member">irq_offload</ref>(<ref refid="test__stack__contexts_8c_1aa7d3ca1282c3d5c808b5eb399563afaf" kindref="member">tIsr_entry_push</ref>,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)pstack);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__stack__contexts_8c_1ab3ea71cede79abf0afd3ac04b095bec8" kindref="member">tstack_pop</ref>(pstack);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__stack__contexts_8c_1a6d4afaa36cc879ec05f0dbe044fd69f2" kindref="member">tstack_push</ref>(pstack);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="irq__offload_8h_1a429859dd7ac3d88a4b7ae858835847ce" kindref="member">irq_offload</ref>(<ref refid="test__stack__contexts_8c_1adbdde999075a6cbbb550b6be2c55425e" kindref="member">tIsr_entry_pop</ref>,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)pstack);</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1ga969dfd191f24488451037a01f743fb45" kindref="member">test_stack_thread2thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1ga4400a39ef48289305cf66a092d5c6c7d" kindref="member">k_stack_init</ref>(&amp;<ref refid="test__stack__contexts_8c_1a6856ea318b5a9498715e4444b13a1de1" kindref="member">stack</ref>,<sp/><ref refid="test__stack__contexts_8c_1a79b904d25e56ee3842fba10e33cda702" kindref="member">data</ref>,<sp/><ref refid="test__stack__contexts_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__stack__contexts_8c_1a6251f773e37edfb2d09322d95a46389b" kindref="member">tstack_thread_thread</ref>(&amp;<ref refid="test__stack__contexts_8c_1a6856ea318b5a9498715e4444b13a1de1" kindref="member">stack</ref>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__stack__contexts_8c_1a6251f773e37edfb2d09322d95a46389b" kindref="member">tstack_thread_thread</ref>(&amp;<ref refid="stack_2stack_2src_2main_8c_1a8032a4f3bd65d0cd0b03b39961bfeb81" kindref="member">kstack</ref>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_USERSPACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1gad464dd62dbebefeff5ee3b1a4f82fcb4" kindref="member">test_stack_user_thread2thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_stack<sp/>*<ref refid="test__stack__contexts_8c_1a6856ea318b5a9498715e4444b13a1de1" kindref="member">stack</ref><sp/>=<sp/>k_object_alloc(K_OBJ_STACK);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gad78332e6bd37812e56ccc4af601542e4" kindref="member">zassert_not_null</ref>(<ref refid="test__stack__contexts_8c_1a6856ea318b5a9498715e4444b13a1de1" kindref="member">stack</ref>,<sp/></highlight><highlight class="stringliteral">&quot;couldn&apos;t<sp/>allocate<sp/>stack<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gacc41f998b701997e4eafb6ed7b9d537c" kindref="member">zassert_false</ref>(<ref refid="group__stack__apis_1gab97d924db1aef3f6adade156a107d45c" kindref="member">k_stack_alloc_init</ref>(<ref refid="test__stack__contexts_8c_1a6856ea318b5a9498715e4444b13a1de1" kindref="member">stack</ref>,<sp/><ref refid="test__stack__contexts_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>),</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;stack<sp/>init<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__stack__contexts_8c_1a6251f773e37edfb2d09322d95a46389b" kindref="member">tstack_thread_thread</ref>(<ref refid="test__stack__contexts_8c_1a6856ea318b5a9498715e4444b13a1de1" kindref="member">stack</ref>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1gaf06348e349a2076ea86503cedce2b9ac" kindref="member">test_stack_thread2isr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1ga4400a39ef48289305cf66a092d5c6c7d" kindref="member">k_stack_init</ref>(&amp;<ref refid="test__stack__contexts_8c_1a6856ea318b5a9498715e4444b13a1de1" kindref="member">stack</ref>,<sp/><ref refid="test__stack__contexts_8c_1a79b904d25e56ee3842fba10e33cda702" kindref="member">data</ref>,<sp/><ref refid="test__stack__contexts_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__stack__contexts_8c_1a548826eaacb0b08a27474487c8df6cff" kindref="member">tstack_thread_isr</ref>(&amp;<ref refid="test__stack__contexts_8c_1a6856ea318b5a9498715e4444b13a1de1" kindref="member">stack</ref>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__stack__contexts_8c_1a548826eaacb0b08a27474487c8df6cff" kindref="member">tstack_thread_isr</ref>(&amp;<ref refid="stack_2stack_2src_2main_8c_1a8032a4f3bd65d0cd0b03b39961bfeb81" kindref="member">kstack</ref>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1ga9677d2b8125bcd28a15635a7e0d960fe" kindref="member">test_stack_alloc_thread2thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1gab97d924db1aef3f6adade156a107d45c" kindref="member">k_stack_alloc_init</ref>(&amp;kstack_test_alloc,<sp/><ref refid="test__stack__contexts_8c_1a82c9bc91d6207f493c814b2c33dfdba4" kindref="member">STACK_LEN</ref>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gadcd0e6cfba3392fb887222eafe4c1845" kindref="member">k_sem_init</ref>(&amp;<ref refid="test__stack__contexts_8c_1ac9d283d96985728282a611f383fd3e74" kindref="member">end_sema1</ref>,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref><sp/>=<sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="test__stack__contexts_8c_1a142b35a972e1d49b2f774510d10c8a74" kindref="member">thread_data1</ref>,<sp/><ref refid="stack_2stack_2src_2main_8c_1a3808bea60358be7dddc26ee430bd64cd" kindref="member">threadstack1</ref>,<sp/><ref refid="test__stack__contexts_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__stack__contexts_8c_1a757b88d684794c799892d1a4c28fd86f" kindref="member">tThread_entry</ref>,<sp/>&amp;kstack_test_alloc,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(0),<sp/>0,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__stack__contexts_8c_1a6d4afaa36cc879ec05f0dbe044fd69f2" kindref="member">tstack_push</ref>(&amp;kstack_test_alloc);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gac71e2383c1920dddc45a561cacfef090" kindref="member">k_sem_take</ref>(&amp;<ref refid="test__stack__contexts_8c_1ac9d283d96985728282a611f383fd3e74" kindref="member">end_sema1</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gac71e2383c1920dddc45a561cacfef090" kindref="member">k_sem_take</ref>(&amp;<ref refid="test__stack__contexts_8c_1ac9d283d96985728282a611f383fd3e74" kindref="member">end_sema1</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__stack__contexts_8c_1ab3ea71cede79abf0afd3ac04b095bec8" kindref="member">tstack_pop</ref>(&amp;kstack_test_alloc);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>clear<sp/>the<sp/>spawn<sp/>thread<sp/>to<sp/>avoid<sp/>side<sp/>effect<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1ga819f4e7b2cf11cf2e1b80933fdcb67ea" kindref="member">k_stack_cleanup</ref>(&amp;kstack_test_alloc);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__stack__apis_1gab97d924db1aef3f6adade156a107d45c" kindref="member">k_stack_alloc_init</ref>(&amp;kstack_test_alloc,<sp/>(<ref refid="test__stack__contexts_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>/2)+1);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>==<sp/>-<ref refid="group__system__errno_1ga6a05c923dad0c1208043e9c20a58c8e5" kindref="member">ENOMEM</ref>,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;requested<sp/>buffer<sp/>is<sp/>smaller<sp/>than<sp/>resource<sp/>pool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1ga740c522468d2a3f4e6525124ebd6c99b" kindref="member">low_prio_wait_for_stack</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_stack<sp/>*pstack<sp/>=<sp/>p1;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_data_t<sp/>output;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop</ref>(pstack,<sp/>&amp;output,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(output<sp/>==<sp/><ref refid="test__stack__contexts_8c_1a408d2e9ada5737e616c7d4d5bad1cd37" kindref="member">LOW_PRIO</ref>,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>low<sp/>priority<sp/>thread<sp/>get<sp/>the<sp/>stack<sp/>data<sp/>failed<sp/>lastly&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1gadc9a51dfcee171b7a0b0dceea7cd2582" kindref="member">high_prio_t1_wait_for_stack</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_stack<sp/>*pstack<sp/>=<sp/>p1;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_data_t<sp/>output;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop</ref>(pstack,<sp/>&amp;output,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(output<sp/>==<sp/><ref refid="test__stack__contexts_8c_1ae1a138dfded25bd913e55abca66155e8" kindref="member">HIGH_T1</ref>,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>highest<sp/>priority<sp/>and<sp/>waited<sp/>longest<sp/>get<sp/>the<sp/>stack<sp/>data<sp/>failed<sp/>firstly&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1ga293923cc3111ca27e16a185ee1351f81" kindref="member">high_prio_t2_wait_for_stack</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_stack<sp/>*pstack<sp/>=<sp/>p1;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_data_t<sp/>output;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop</ref>(pstack,<sp/>&amp;output,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(output<sp/>==<sp/><ref refid="test__stack__contexts_8c_1ab0866f3015b0f2478e02a1e655571893" kindref="member">HIGH_T2</ref>,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>higher<sp/>priority<sp/>and<sp/>waited<sp/>longer<sp/>get<sp/>the<sp/>stack<sp/>data<sp/>failed<sp/>secondly&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1ga8afe7ec83d6d7cfd369954c194a0e820" kindref="member">test_stack_multithread_competition</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__sched__timeslice__and__lock_8c_1a53a6460ab46277db22e6847e69c6a8a6" kindref="member">old_prio</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga3a46ed8ad2c3b12416fafe11325f82b3" kindref="member">k_thread_priority_get</ref>(<ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>());</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prio<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_data_t<sp/>test_data[3];</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string_8h_1a4137694174d4ca2fad886a1db355015c" kindref="member">memset</ref>(test_data,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test_data));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga24e50a60c524d1eb22fe21cdf269b6a6" kindref="member">k_thread_priority_set</ref>(<ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>(),<sp/>prio);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>some<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_data[0]<sp/>=<sp/><ref refid="test__stack__contexts_8c_1ae1a138dfded25bd913e55abca66155e8" kindref="member">HIGH_T1</ref>;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_data[1]<sp/>=<sp/><ref refid="test__stack__contexts_8c_1ab0866f3015b0f2478e02a1e655571893" kindref="member">HIGH_T2</ref>;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_data[2]<sp/>=<sp/><ref refid="test__stack__contexts_8c_1a408d2e9ada5737e616c7d4d5bad1cd37" kindref="member">LOW_PRIO</ref>;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="test__stack__contexts_8c_1a142b35a972e1d49b2f774510d10c8a74" kindref="member">thread_data1</ref>,<sp/><ref refid="stack_2stack_2src_2main_8c_1a3808bea60358be7dddc26ee430bd64cd" kindref="member">threadstack1</ref>,<sp/><ref refid="test__stack__contexts_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__kernel__stack__tests_1ga740c522468d2a3f4e6525124ebd6c99b" kindref="member">low_prio_wait_for_stack</ref>,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="test__stack__contexts_8c_1a6856ea318b5a9498715e4444b13a1de1" kindref="member">stack</ref>,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prio<sp/>+<sp/>4,<sp/>0,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="test__stack__contexts_8c_1a51e826f3264fc3f396c06163ef48ea5d" kindref="member">high_pro_thread_t1</ref>,<sp/>threadstack_t1,<sp/><ref refid="test__stack__contexts_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__kernel__stack__tests_1gadc9a51dfcee171b7a0b0dceea7cd2582" kindref="member">high_prio_t1_wait_for_stack</ref>,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="test__stack__contexts_8c_1a6856ea318b5a9498715e4444b13a1de1" kindref="member">stack</ref>,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prio<sp/>+<sp/>2,<sp/>0,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>thread<sp/>thread_data1<sp/>and<sp/>high_pro_thread_t1<sp/>wait<sp/>more<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga48d4b041790454da4d68ac8711f29657" kindref="member">k_sleep</ref>(<ref refid="group__clock__apis_1ga302af954e87b10a9b731f1ad07775e9f" kindref="member">K_MSEC</ref>(10));</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="test__stack__contexts_8c_1a988171b95bb5ba539270106d14b002bc" kindref="member">high_pro_thread_t2</ref>,<sp/>threadstack_t2,<sp/><ref refid="test__stack__contexts_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__kernel__stack__tests_1ga293923cc3111ca27e16a185ee1351f81" kindref="member">high_prio_t2_wait_for_stack</ref>,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="test__stack__contexts_8c_1a6856ea318b5a9498715e4444b13a1de1" kindref="member">stack</ref>,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prio<sp/>+<sp/>2,<sp/>0,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>them<sp/>and<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga48d4b041790454da4d68ac8711f29657" kindref="member">k_sleep</ref>(<ref refid="group__clock__apis_1ga302af954e87b10a9b731f1ad07775e9f" kindref="member">K_MSEC</ref>(50));</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Insert<sp/>some<sp/>data<sp/>to<sp/>wake<sp/>up<sp/>thread<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push</ref>(&amp;<ref refid="test__stack__contexts_8c_1a6856ea318b5a9498715e4444b13a1de1" kindref="member">stack</ref>,<sp/>test_data[0]);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push</ref>(&amp;<ref refid="test__stack__contexts_8c_1a6856ea318b5a9498715e4444b13a1de1" kindref="member">stack</ref>,<sp/>test_data[1]);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push</ref>(&amp;<ref refid="test__stack__contexts_8c_1a6856ea318b5a9498715e4444b13a1de1" kindref="member">stack</ref>,<sp/>test_data[2]);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>for<sp/>thread<sp/>exiting<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(&amp;<ref refid="test__stack__contexts_8c_1a142b35a972e1d49b2f774510d10c8a74" kindref="member">thread_data1</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(&amp;<ref refid="test__stack__contexts_8c_1a51e826f3264fc3f396c06163ef48ea5d" kindref="member">high_pro_thread_t1</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(&amp;<ref refid="test__stack__contexts_8c_1a988171b95bb5ba539270106d14b002bc" kindref="member">high_pro_thread_t2</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Revert<sp/>priority<sp/>of<sp/>the<sp/>main<sp/>thread<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga24e50a60c524d1eb22fe21cdf269b6a6" kindref="member">k_thread_priority_set</ref>(<ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>(),<sp/><ref refid="test__sched__timeslice__and__lock_8c_1a53a6460ab46277db22e6847e69c6a8a6" kindref="member">old_prio</ref>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__stack__tests_1ga9ebcc1991c52c1882e5a22da1e15fdc1" kindref="member">test_stack_alloc_null</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Requested<sp/>buffer<sp/>allocation<sp/>from<sp/>the<sp/>test<sp/>pool.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__stack__apis_1gab97d924db1aef3f6adade156a107d45c" kindref="member">k_stack_alloc_init</ref>(&amp;kstack_test_alloc,<sp/>(<ref refid="test__stack__contexts_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>/2)+1);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>==<sp/>-<ref refid="group__system__errno_1ga6a05c923dad0c1208043e9c20a58c8e5" kindref="member">ENOMEM</ref>,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;requested<sp/>buffer<sp/>is<sp/>smaller<sp/>than<sp/>resource<sp/>pool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="tests/kernel/stack/stack/src/test_stack_contexts.c"/>
  </compounddef>
</doxygen>
