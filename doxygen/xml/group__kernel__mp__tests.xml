<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__kernel__mp__tests" kind="group">
    <compoundname>kernel_mp_tests</compoundname>
    <title>MP Tests</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__kernel__mp__tests_1gaf062cee72746962208d8ce5075ed2d05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mp_start</definition>
        <argsstring>(void)</argsstring>
        <name>test_mp_start</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to verify CPU start. </para>
        </briefdescription>
        <detaileddescription>
<para>Test Objective:<itemizedlist>
<listitem><para>To verify kernel architecture layer shall provide a means to start non-boot CPUs on SMP systems. The way we verify it is to call it by give it parameters especially the target executing function, etc. Then check if the function is running or not.</para>
</listitem></itemizedlist>
</para>
<para>Testing techniques:<itemizedlist>
<listitem><para>Interface testing, function and block box testing, dynamic analysis and testing</para>
</listitem></itemizedlist>
</para>
<para>Prerequisite Conditions:<itemizedlist>
<listitem><para>CONFIG_MP_NUM_CPUS &gt; 1</para>
</listitem></itemizedlist>
</para>
<para>Input Specifications:<itemizedlist>
<listitem><para>CPU ID: the cpu want to start</para>
</listitem><listitem><para>Stack structure</para>
</listitem><listitem><para>Stack size</para>
</listitem><listitem><para>Target executing function</para>
</listitem><listitem><para>An argument that pass to the function</para>
</listitem></itemizedlist>
</para>
<para>Test Procedure:<orderedlist>
<listitem><para>In main thread, given and set a global variable cpu_arg to 12345.</para>
</listitem><listitem><para>Call <ref refid="group__arch-smp_1gad25e65419116c6bb3e6d6362e780fb83" kindref="member">arch_start_cpu()</ref> with parameters</para>
</listitem><listitem><para>Enter a while loop and wait for cpu_running equals to 1.</para>
</listitem><listitem><para>In target function, check if the address is &amp;cpu_arg and its content equal to 12345.</para>
</listitem><listitem><para>Set the global flag varible cpu_running to 1.</para>
</listitem><listitem><para>In main thread, check if the cpu_running equals to 1.</para>
</listitem></orderedlist>
</para>
<para>Expected Test Result:<itemizedlist>
<listitem><para>The given function execute cpu is running and .</para>
</listitem></itemizedlist>
</para>
<para>Pass/Fail Criteria:<itemizedlist>
<listitem><para>Successful if the check of step 4, 6 are all pass.</para>
</listitem><listitem><para>Failure if one of the check of step 4, 6 is failed.</para>
</listitem></itemizedlist>
</para>
<para>Assumptions and Constraints:<itemizedlist>
<listitem><para>This test using for the platform that support MP or SMP, in our current scenario which own over two CPUs.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__arch-smp_1gad25e65419116c6bb3e6d6362e780fb83" kindref="member">arch_start_cpu()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mp/src/main.c" line="95" column="6" bodyfile="tests/kernel/mp/src/main.c" bodystart="95" bodyend="105"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Tests for multi processing. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
