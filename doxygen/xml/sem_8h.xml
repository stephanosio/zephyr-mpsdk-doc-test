<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="sem_8h" kind="file" language="C++">
    <compoundname>sem.h</compoundname>
    <includes local="no">kernel.h</includes>
    <includes refid="atomic_8h" local="no">sys/atomic.h</includes>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includedby refid="mem__protect_2sys__sem_2src_2main_8c" local="no">tests/kernel/mem_protect/sys_sem/src/main.c</includedby>
    <incdepgraph>
      <node id="3">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="1">
        <label>include/sys/sem.h</label>
        <link refid="sem_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="9">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="7">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="8">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="2">
        <label>kernel.h</label>
      </node>
      <node id="6">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>include/sys/sem.h</label>
        <link refid="sem_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>tests/kernel/mem_protect/sys_sem/src/main.c</label>
        <link refid="mem__protect_2sys__sem_2src_2main_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structsys__sem" prot="public">sys_sem</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__user__semaphore__apis_1gad7b4e3a8910b78e4beb0ec20524426e1" prot="public" static="no">
        <name>SYS_SEM_DEFINE</name>
        <param><defname>_name</defname></param>
        <param><defname>_initial_count</defname></param>
        <param><defname>_count_limit</defname></param>
        <initializer>	struct <ref refid="structsys__sem" kindref="compound">sys_sem</ref> _name = { \
		.futex = { _initial_count }, \
		.limit = _count_limit \
	}; \
	BUILD_ASSERT(((_count_limit) != 0) &amp;&amp; \
		     ((_initial_count) &lt;= (_count_limit)))</initializer>
        <briefdescription>
<para>Statically define and initialize a <ref refid="structsys__sem" kindref="compound">sys_sem</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The semaphore can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>sys_sem<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para>Route this to memory domains using <ref refid="mem__protect_2userspace_2src_2main_8c_1a9067a0a2728b358c511417b2de42c731" kindref="member">K_APP_DMEM()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the semaphore. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_initial_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial semaphore count. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_count_limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum permitted semaphore count. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sem.h" line="62" column="9" bodyfile="include/sys/sem.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__user__semaphore__apis_1gae20385545bbf7a9dfd59afa74bf1120a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_sem_init</definition>
        <argsstring>(struct sys_sem *sem, unsigned int initial_count, unsigned int limit)</argsstring>
        <name>sys_sem_init</name>
        <param>
          <type>struct <ref refid="structsys__sem" kindref="compound">sys_sem</ref> *</type>
          <declname>sem</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>initial_count</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Initialize a semaphore. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a semaphore instance, prior to its first use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the semaphore. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initial_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial semaphore count. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum permitted semaphore count.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Bad parameters, the value of limit should be located in (0, INT_MAX] and initial_count shouldn&apos;t be greater than limit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sem.h" line="95" column="5" declfile="include/sys/sem.h" declline="95" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__user__semaphore__apis_1gaae32032398db1f693ad3f876863f78b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_sem_give</definition>
        <argsstring>(struct sys_sem *sem)</argsstring>
        <name>sys_sem_give</name>
        <param>
          <type>struct <ref refid="structsys__sem" kindref="compound">sys_sem</ref> *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
<para>Give a semaphore. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine gives <emphasis>sem</emphasis>, unless the semaphore is already at its maximum permitted count.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the semaphore.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Semaphore given. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter address not recognized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EACCES</parametername>
</parameternamelist>
<parameterdescription>
<para>Caller does not have enough access. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Count reached Maximum permitted count and try again. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sem.h" line="111" column="5" declfile="include/sys/sem.h" declline="111" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__user__semaphore__apis_1gaf742a29f89a816fa34b8d6d33e221b77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_sem_take</definition>
        <argsstring>(struct sys_sem *sem, k_timeout_t timeout)</argsstring>
        <name>sys_sem_take</name>
        <param>
          <type>struct <ref refid="structsys__sem" kindref="compound">sys_sem</ref> *</type>
          <declname>sem</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Take a <ref refid="structsys__sem" kindref="compound">sys_sem</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine takes <emphasis>sem</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the <ref refid="structsys__sem" kindref="compound">sys_sem</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period to take the <ref refid="structsys__sem" kindref="compound">sys_sem</ref>, or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structsys__sem" kindref="compound">sys_sem</ref> taken. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter address not recognized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ETIMEDOUT</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EACCES</parametername>
</parameternamelist>
<parameterdescription>
<para>Caller does not have enough access. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sem.h" line="127" column="5" declfile="include/sys/sem.h" declline="127" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__user__semaphore__apis_1ga7b287ca3cc3ab2766d7c1beec1849894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
        <definition>unsigned int sys_sem_count_get</definition>
        <argsstring>(struct sys_sem *sem)</argsstring>
        <name>sys_sem_count_get</name>
        <param>
          <type>struct <ref refid="structsys__sem" kindref="compound">sys_sem</ref> *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="structsys__sem" kindref="compound">sys_sem</ref>&apos;s value. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine returns the current value of <emphasis>sem</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the <ref refid="structsys__sem" kindref="compound">sys_sem</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current value of <ref refid="structsys__sem" kindref="compound">sys_sem</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sem.h" line="138" column="14" declfile="include/sys/sem.h" declline="138" declcolumn="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>public <ref refid="structsys__sem" kindref="compound">sys_sem</ref> APIs. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_SYS_SEM_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_SYS_SEM_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>sys_sem<sp/>exists<sp/>in<sp/>user<sp/>memory<sp/>working<sp/>as<sp/>counter<sp/>semaphore<sp/>for</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>user<sp/>mode<sp/>thread<sp/>when<sp/>user<sp/>mode<sp/>enabled.<sp/>When<sp/>user<sp/>mode<sp/>isn&apos;t</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>enabled,<sp/>sys_sem<sp/>behaves<sp/>like<sp/>k_sem.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="atomic_8h" kindref="compound">sys/atomic.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="structsys__sem" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsys__sem" kindref="compound">sys_sem</ref><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_USERSPACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="structsys__sem_1aa121aa4e951fbf7cd60e7937797f9e4c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__futex" kindref="compound">k_futex</ref><sp/><ref refid="structsys__sem_1aa121aa4e951fbf7cd60e7937797f9e4c" kindref="member">futex</ref>;</highlight></codeline>
<codeline lineno="36" refid="structsys__sem_1ab8d906d43d61fa13b7dba8107dd35e34" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsys__sem_1ab8d906d43d61fa13b7dba8107dd35e34" kindref="member">limit</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_sem<sp/>kernel_sem;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_USERSPACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="group__user__semaphore__apis_1gad7b4e3a8910b78e4beb0ec20524426e1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_SEM_DEFINE(_name,<sp/>_initial_count,<sp/>_count_limit)<sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>sys_sem<sp/>_name<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.futex<sp/>=<sp/>{<sp/>_initial_count<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.limit<sp/>=<sp/>_count_limit<sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUILD_ASSERT(((_count_limit)<sp/>!=<sp/>0)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((_initial_count)<sp/>&lt;=<sp/>(_count_limit)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Stuff<sp/>this<sp/>in<sp/>the<sp/>section<sp/>with<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>k_sem<sp/>objects,<sp/>since<sp/>they</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>are<sp/>identical<sp/>and<sp/>can<sp/>be<sp/>treated<sp/>as<sp/>a<sp/>k_sem<sp/>in<sp/>the<sp/>boot<sp/>initialization<sp/>code</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_SEM_DEFINE(_name,<sp/>_initial_count,<sp/>_count_limit)<sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRUCT_SECTION_ITERABLE_ALTERNATE(k_sem,<sp/>sys_sem,<sp/>_name)<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.kernel_sem<sp/>=<sp/>Z_SEM_INITIALIZER(_name.kernel_sem,<sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_initial_count,<sp/>_count_limit)<sp/>\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUILD_ASSERT(((_count_limit)<sp/>!=<sp/>0)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((_initial_count)<sp/>&lt;=<sp/>(_count_limit)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="group__user__semaphore__apis_1gae20385545bbf7a9dfd59afa74bf1120a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__user__semaphore__apis_1gae20385545bbf7a9dfd59afa74bf1120a" kindref="member">sys_sem_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsys__sem" kindref="compound">sys_sem</ref><sp/>*<ref refid="timeout__order_8c_1a415c37e05febf68101d95d933a50c66b" kindref="member">sem</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initial_count,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="group__user__semaphore__apis_1gaae32032398db1f693ad3f876863f78b4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__user__semaphore__apis_1gaae32032398db1f693ad3f876863f78b4" kindref="member">sys_sem_give</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsys__sem" kindref="compound">sys_sem</ref><sp/>*<ref refid="timeout__order_8c_1a415c37e05febf68101d95d933a50c66b" kindref="member">sem</ref>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="group__user__semaphore__apis_1gaf742a29f89a816fa34b8d6d33e221b77" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__user__semaphore__apis_1gaf742a29f89a816fa34b8d6d33e221b77" kindref="member">sys_sem_take</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsys__sem" kindref="compound">sys_sem</ref><sp/>*<ref refid="timeout__order_8c_1a415c37e05febf68101d95d933a50c66b" kindref="member">sem</ref>,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="group__user__semaphore__apis_1ga7b287ca3cc3ab2766d7c1beec1849894" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__user__semaphore__apis_1ga7b287ca3cc3ab2766d7c1beec1849894" kindref="member">sys_sem_count_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsys__sem" kindref="compound">sys_sem</ref><sp/>*<ref refid="timeout__order_8c_1a415c37e05febf68101d95d933a50c66b" kindref="member">sem</ref>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="include/sys/sem.h"/>
  </compounddef>
</doxygen>
