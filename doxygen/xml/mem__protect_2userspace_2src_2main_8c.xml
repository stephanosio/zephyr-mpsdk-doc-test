<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="mem__protect_2userspace_2src_2main_8c" kind="file" language="C++">
    <compoundname>main.c</compoundname>
    <includes local="no">zephyr.h</includes>
    <includes refid="ztest_8h" local="no">ztest.h</includes>
    <includes refid="kernel__structs_8h" local="no">kernel_structs.h</includes>
    <includes refid="string_8h" local="no">string.h</includes>
    <includes refid="stdlib_8h" local="no">stdlib.h</includes>
    <includes refid="app__memdomain_8h" local="no">app_memory/app_memdomain.h</includes>
    <includes refid="util_8h" local="no">sys/util.h</includes>
    <includes refid="stack_8h" local="no">debug/stack.h</includes>
    <includes refid="syscall__handler_8h" local="no">syscall_handler.h</includes>
    <includes refid="mem__protect_2userspace_2src_2test__syscall_8h" local="yes">test_syscall.h</includes>
    <includes refid="linker-defs_8h" local="no">linker/linker-defs.h</includes>
    <includes local="no">syscalls/check_syscall_context_mrsh.c</includes>
    <incdepgraph>
      <node id="17">
        <label>app_memory/app_memdomain.h</label>
        <link refid="app__memdomain_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>app_memory/mem_domain.h</label>
        <link refid="mem__domain_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>arch/arch_inlines.h</label>
        <link refid="arch__inlines_8h"/>
      </node>
      <node id="66">
        <label>arch/cpu.h</label>
        <link refid="include_2arch_2cpu_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>arch/structs.h</label>
        <link refid="structs_8h"/>
      </node>
      <node id="65">
        <label>arch/syscall.h</label>
        <link refid="arch_2syscall_8h"/>
      </node>
      <node id="92">
        <label>debug/stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>devicetree.h</label>
        <link refid="devicetree_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>devicetree/clocks.h</label>
        <link refid="clocks_8h"/>
      </node>
      <node id="36">
        <label>devicetree/dma.h</label>
        <link refid="devicetree_2dma_8h"/>
      </node>
      <node id="38">
        <label>devicetree/fixed-partitions.h</label>
        <link refid="fixed-partitions_8h"/>
      </node>
      <node id="34">
        <label>devicetree/gpio.h</label>
        <link refid="devicetree_2gpio_8h"/>
      </node>
      <node id="32">
        <label>devicetree/io-channels.h</label>
        <link refid="io-channels_8h"/>
      </node>
      <node id="40">
        <label>devicetree/ordinals.h</label>
        <link refid="ordinals_8h"/>
      </node>
      <node id="41">
        <label>devicetree/pinctrl.h</label>
        <link refid="devicetree_2pinctrl_8h"/>
      </node>
      <node id="37">
        <label>devicetree/pwms.h</label>
        <link refid="pwms_8h"/>
      </node>
      <node id="35">
        <label>devicetree/spi.h</label>
        <link refid="devicetree_2spi_8h"/>
      </node>
      <node id="39">
        <label>devicetree/zephyr.h</label>
        <link refid="devicetree_2zephyr_8h"/>
      </node>
      <node id="75">
        <label>fatal.h</label>
        <link refid="fatal_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>init.h</label>
        <link refid="init_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>irq_offload.h</label>
        <link refid="irq__offload_8h"/>
      </node>
      <node id="45">
        <label>kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>kernel/mempool_heap.h</label>
        <link refid="mempool__heap_8h"/>
      </node>
      <node id="51">
        <label>kernel/sched_priq.h</label>
        <link refid="sched__priq_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>kernel/stats.h</label>
        <link refid="kernel_2stats_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>kernel/thread.h</label>
        <link refid="kernel_2thread_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>kernel/thread_stack.h</label>
        <link refid="kernel_2thread__stack_8h"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>kernel_includes.h</label>
        <link refid="kernel__includes_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>kernel_structs.h</label>
        <link refid="kernel__structs_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>kernel_version.h</label>
        <link refid="kernel__version_8h"/>
      </node>
      <node id="28">
        <label>linker/devicetree_reserved.h</label>
        <link refid="devicetree__reserved_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>linker/linker-defs.h</label>
        <link refid="linker-defs_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>linker/section_tags.h</label>
        <link refid="section__tags_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>linker/sections.h</label>
        <link refid="sections_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>logging/log.h</label>
        <link refid="log_8h"/>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>logging/log_core.h</label>
        <link refid="include_2logging_2log__core_8h"/>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>logging/log_instance.h</label>
        <link refid="log__instance_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>logging/log_msg.h</label>
        <link refid="log__msg_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>logging/log_msg2.h</label>
        <link refid="include_2logging_2log__msg2_8h"/>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>sys/arch_interface.h</label>
        <link refid="arch__interface_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="99">
        <label>sys/cbprintf.h</label>
        <link refid="cbprintf_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>sys/cbprintf_cxx.h</label>
        <link refid="cbprintf__cxx_8h"/>
      </node>
      <node id="100">
        <label>sys/cbprintf_internal.h</label>
        <link refid="cbprintf__internal_8h"/>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>sys/kobject.h</label>
        <link refid="include_2sys_2kobject_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="106">
        <label>sys/math_extras.h</label>
        <link refid="math__extras_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
      </node>
      <node id="107">
        <label>sys/math_extras_impl.h</label>
        <link refid="math__extras__impl_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>sys/mpsc_packet.h</label>
        <link refid="mpsc__packet_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>sys/rb.h</label>
        <link refid="rb_8h"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>sys/sflist.h</label>
        <link refid="sflist_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>sys/sys_heap.h</label>
        <link refid="sys__heap_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>sys/time_units.h</label>
        <link refid="time__units_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="23">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>sys_clock.h</label>
        <link refid="include_2sys__clock_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="105">
        <label>syscall_handler.h</label>
        <link refid="syscall__handler_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>timing/types.h</label>
        <link refid="include_2timing_2types_8h"/>
      </node>
      <node id="5">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="19">
        <label>toolchain/common.h</label>
        <link refid="common_8h"/>
      </node>
      <node id="86">
        <label>tracing/tracing.h</label>
        <link refid="tracing_2tracing_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>tracing/tracing_macros.h</label>
        <link refid="tracing__macros_8h"/>
      </node>
      <node id="87">
        <label>tracking.h</label>
        <link refid="tracking_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="13">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="9">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="11">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>stdlib.h</label>
        <link refid="stdlib_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>offsets.h</label>
        <link refid="offsets_8h"/>
      </node>
      <node id="64">
        <label>syscall_list.h</label>
        <link refid="syscall__list_8h"/>
      </node>
      <node id="88">
        <label>syscalls/kernel.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kernel_8h"/>
      </node>
      <node id="81">
        <label>syscalls/kobject.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kobject_8h"/>
      </node>
      <node id="104">
        <label>syscalls/log_core.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2log__core_8h"/>
      </node>
      <node id="102">
        <label>syscalls/log_msg2.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2log__msg2_8h"/>
      </node>
      <node id="3">
        <label>ztest.h</label>
        <link refid="ztest_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ztest_assert.h</label>
        <link refid="ztest__assert_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ztest_mock.h</label>
        <link refid="ztest__mock_8h"/>
      </node>
      <node id="15">
        <label>ztest_test.h</label>
        <link refid="ztest__test_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>ztest_test_deprecated.h</label>
        <link refid="ztest__test__deprecated_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/kernel/mem_protect/userspace/src/main.c</label>
        <link refid="mem__protect_2userspace_2src_2main_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
      </node>
      <node id="109">
        <label>test_syscall.h</label>
        <link refid="mem__protect_2userspace_2src_2test__syscall_8h"/>
        <childnode refid="110" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>alloca.h</label>
      </node>
      <node id="68">
        <label>arch/cpu.h</label>
      </node>
      <node id="31">
        <label>devicetree_fixups.h</label>
      </node>
      <node id="30">
        <label>devicetree_unfixed.h</label>
      </node>
      <node id="108">
        <label>driver-validation.h</label>
      </node>
      <node id="43">
        <label>kernel.h</label>
      </node>
      <node id="7">
        <label>stdarg.h</label>
      </node>
      <node id="6">
        <label>stddef.h</label>
      </node>
      <node id="103">
        <label>syscall.h</label>
      </node>
      <node id="111">
        <label>syscalls/check_syscall_context_mrsh.c</label>
      </node>
      <node id="84">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="110">
        <label>syscalls/test_syscall.h</label>
      </node>
      <node id="89">
        <label>syscalls/ztest_test.h</label>
      </node>
      <node id="90">
        <label>tc_util.h</label>
      </node>
      <node id="2">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="mem__protect_2userspace_2src_2main_8c_1ab56f6599fb46785e4265a3033ba91aa6" prot="public" static="no">
        <name>INFO</name>
        <param><defname>fmt</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(fmt, ##__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="33" column="9" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_2userspace_2src_2main_8c_1adec5a32ee1bee16e07eb10b6dc612e62" prot="public" static="no">
        <name>PIPE_LEN</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="34" column="9" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_2userspace_2src_2main_8c_1aac3f1f5a1b3d1bf58cb55dfa2ae351e4" prot="public" static="no">
        <name>BYTES_TO_READ_WRITE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="35" column="9" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_2userspace_2src_2main_8c_1a21d9543c516fffee84a7963224271f95" prot="public" static="no">
        <name>STACKSIZE</name>
        <initializer>(256 + CONFIG_TEST_EXTRA_STACKSIZE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="36" column="9" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_2userspace_2src_2main_8c_1a42724a5de7e302dc381a1d140fb33a14" prot="public" static="no">
        <name>test_oops</name>
        <param><defname>provided</defname></param>
        <param><defname>expected</defname></param>
        <initializer>	do { \
	<ref refid="mem__protect_2userspace_2src_2main_8c_1a9dd8b82f56a851f8f67456c9e34b0f14" kindref="member">expect_fault</ref> = <ref refid="stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7" kindref="member">true</ref>; \
	<ref refid="mem__protect_2userspace_2src_2main_8c_1afc16a22cddd3dce1283c2db807422812" kindref="member">expected_reason</ref> = <ref refid="threads_2thread__init_2src_2main_8c_1aa871625e1e2bdbe5f1d0fede91d1ea26" kindref="member">expected</ref>; \
	z_except_reason(provided); \
} while (<ref refid="stdbool_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="886" column="9" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="886" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="mem__protect_2userspace_2src_2main_8c_1a3b857266bf17469ebd0ded8a39cc1032" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__mem__domain" kindref="compound">k_mem_domain</ref></type>
        <definition>struct k_mem_domain alternate_domain</definition>
        <argsstring></argsstring>
        <name>alternate_domain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="43" column="19" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mem__protect_2userspace_2src_2main_8c_1a9dd8b82f56a851f8f67456c9e34b0f14" prot="public" static="yes" mutable="no">
        <type><ref refid="group__ztest__test_1gac3de5965061b1164a8033712c9094e23" kindref="member">ZTEST_BMEM</ref> volatile <ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>ZTEST_BMEM volatile bool expect_fault</definition>
        <argsstring></argsstring>
        <name>expect_fault</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="45" column="33" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mem__protect_2userspace_2src_2main_8c_1afc16a22cddd3dce1283c2db807422812" prot="public" static="yes" mutable="no">
        <type><ref refid="group__ztest__test_1gac3de5965061b1164a8033712c9094e23" kindref="member">ZTEST_BMEM</ref> volatile <ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
        <definition>ZTEST_BMEM volatile unsigned int expected_reason</definition>
        <argsstring></argsstring>
        <name>expected_reason</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="46" column="41" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mem__protect_2userspace_2src_2main_8c_1ab8f7f58eb5ee4fe331b9ca8813a8425a" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int kernel_data</definition>
        <argsstring></argsstring>
        <name>kernel_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="329" column="12" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mem__protect_2userspace_2src_2main_8c_1ad83484ed3aa02f7e7aeb627d3142cc2e" prot="public" static="yes" mutable="no">
        <type>struct k_sem</type>
        <definition>struct k_sem ksem</definition>
        <argsstring></argsstring>
        <name>ksem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="431" column="19" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mem__protect_2userspace_2src_2main_8c_1a818c8f20ac7ad831b44efa0615e1bb9e" prot="public" static="no" mutable="no">
        <type><ref refid="arch__interface_8h_1a3e4bde3075edb41069b258d999333b0e" kindref="member">k_thread_stack_t</ref></type>
        <definition>k_thread_stack_t ztest_thread_stack[]</definition>
        <argsstring>[]</argsstring>
        <name>ztest_thread_stack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="700" column="25" declfile="tests/kernel/mem_protect/userspace/src/main.c" declline="700" declcolumn="25"/>
      </memberdef>
      <memberdef kind="variable" id="mem__protect_2userspace_2src_2main_8c_1a682d4a453a392ba4cd32a9967ae88d1e" prot="public" static="yes" mutable="no">
        <type>struct k_sem</type>
        <definition>struct k_sem recycle_sem</definition>
        <argsstring></argsstring>
        <name>recycle_sem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="845" column="19" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="845" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1ae0a8bcbdc5e292de25c0f0171d445b60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_SEM_DEFINE</definition>
        <argsstring>(test_revoke_sem, 0, 1)</argsstring>
        <name>K_SEM_DEFINE</name>
        <param>
          <type>test_revoke_sem</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="38" column="1" declfile="tests/kernel/mem_protect/userspace/src/main.c" declline="38" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1ae0ea407e6bb1bcd4e7aa4c43660eb38f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_APPMEM_PARTITION_DEFINE</definition>
        <argsstring>(default_part)</argsstring>
        <name>K_APPMEM_PARTITION_DEFINE</name>
        <param>
          <type>default_part</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="49" column="1" declfile="tests/kernel/mem_protect/userspace/src/main.c" declline="49" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1ac35513960183b828e74e0cede36a9409" prot="public" static="no" const="no" explicit="no" inline="no" volatile="yes" virt="non-virtual">
        <type></type>
        <definition>K_APP_BMEM</definition>
        <argsstring>(default_part)</argsstring>
        <name>K_APP_BMEM</name>
        <param>
          <type>default_part</type>
        </param>
        <briefdescription>
<para>Test to pass a user object to system call. </para>
        </briefdescription>
        <detaileddescription>
<para>Test to write to kobject using pipe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="50" column="1" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="50" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void set_fault</definition>
        <argsstring>(unsigned int reason)</argsstring>
        <name>set_fault</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="64" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="64" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="group__fatal__apis_1gab6dfd75572a84729df534fde49ef7d85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_sys_fatal_error_handler</definition>
        <argsstring>(unsigned int reason, const z_arch_esf_t *pEsf)</argsstring>
        <name>k_sys_fatal_error_handler</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>reason</declname>
        </param>
        <param>
          <type>const z_arch_esf_t *</type>
          <declname>esf</declname>
          <defname>pEsf</defname>
        </param>
        <briefdescription>
<para>Fatal error policy handler. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is not invoked by application code, but is declared as a weak symbol so that applications may introduce their own policy.</para>
<para>The default implementation of this function halts the system unconditionally. Depending on architecture support, this may be a simple infinite loop, power off the hardware, or exit an emulator.</para>
<para>If this function returns, then the currently executing thread will be aborted.</para>
<para>A few notes for custom implementations:</para>
<para><itemizedlist>
<listitem><para>If the error is determined to be unrecoverable, <ref refid="group__log__ctrl_1ga9ee5a99e0487e3f1e6d289b12c19ad5a" kindref="member">LOG_PANIC()</ref> should be invoked to flush any pending logging buffers.</para>
</listitem><listitem><para>K_ERR_KERNEL_PANIC indicates a severe unrecoverable error in the kernel itself, and should not be considered recoverable. There is an assertion in z_fatal_error() to enforce this.</para>
</listitem><listitem><para>Even outside of a kernel panic, unless the fault occurred in user mode, the kernel itself may be in an inconsistent state, with API calls to kernel objects possibly exhibiting undefined behavior or triggering another exception.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>The reason for the fatal error </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>esf</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception context, with details and partial or full register state when the error occurred. May in some cases be NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="71" column="6" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="71" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a1e80606656db38389c306160294d6ae6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_is_usermode</definition>
        <argsstring>(void)</argsstring>
        <name>test_is_usermode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to check if the thread is in user mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="95" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="95" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a7ef2f1a0c2724bd8546e289f325765dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_write_control</definition>
        <argsstring>(void)</argsstring>
        <name>test_write_control</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to write to a control register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="108" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="108" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a3bf6b7786090c7f625b454c972a9c16a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_disable_mmu_mpu</definition>
        <argsstring>(void)</argsstring>
        <name>test_disable_mmu_mpu</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to disable memory protection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="192" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="192" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a0cfcb7f7a7fda9f734a0401c161e0564" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_read_kernram</definition>
        <argsstring>(void)</argsstring>
        <name>test_read_kernram</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to read from kernel RAM. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="254" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="254" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1af120025e84ef5281c3826b58044a6eba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_write_kernram</definition>
        <argsstring>(void)</argsstring>
        <name>test_write_kernram</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to write to kernel RAM. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="271" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="271" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1ae1f018e6507dbd115ffb3f1d27814620" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_write_kernro</definition>
        <argsstring>(void)</argsstring>
        <name>test_write_kernro</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to write kernel RO. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="289" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="289" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1af8960a284a5af1fceeef31db01980aba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_write_kerntext</definition>
        <argsstring>(void)</argsstring>
        <name>test_write_kerntext</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to write to kernel text section. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="320" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="320" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1aa6a9be1356784c7c545bb0a0738f1395" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_read_kernel_data</definition>
        <argsstring>(void)</argsstring>
        <name>test_read_kernel_data</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to read from kernel data section. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="336" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="336" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a86c6d565f76814cbc114ac9c482a7d7b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_write_kernel_data</definition>
        <argsstring>(void)</argsstring>
        <name>test_write_kernel_data</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to write to kernel data section. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="349" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="349" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a9067a0a2728b358c511417b2de42c731" prot="public" static="no" const="no" explicit="no" inline="no" volatile="yes" virt="non-virtual">
        <type></type>
        <definition>K_APP_DMEM</definition>
        <argsstring>(default_part) volatile</argsstring>
        <name>K_APP_DMEM</name>
        <param>
          <type>default_part</type>
        </param>
        <briefdescription>
<para>Test to read provileged stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="360" column="1" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="360" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a5852445ea3966748d4fbe92bf95d0c0f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_write_priv_stack</definition>
        <argsstring>(void)</argsstring>
        <name>test_write_priv_stack</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to write to privilege stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="395" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="395" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a024f46fba0857cf4a46bcfb8bf836bc6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_pass_noperms_object</definition>
        <argsstring>(void)</argsstring>
        <name>test_pass_noperms_object</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to pass object to a system call without permissions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="438" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="438" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1af445a4d41e2a5eece1db54153896a1de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void thread_body</definition>
        <argsstring>(void)</argsstring>
        <name>thread_body</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="449" column="6" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="449" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1ab9c5c524d21e393b7414351561e8dd8d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_start_kernel_thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_start_kernel_thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to start kernel thread from usermode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="458" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="458" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a3b47e253bd17e8c09b71a09d79aaf6a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_read_other_stack</definition>
        <argsstring>(void)</argsstring>
        <name>test_read_other_stack</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="524" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="524" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a95880eeeba13e753aa18dab644585d5f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_write_other_stack</definition>
        <argsstring>(void)</argsstring>
        <name>test_write_other_stack</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="529" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="529" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a83325c0cf88a98c1f5c4a534a15acc24" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_revoke_noperms_object</definition>
        <argsstring>(void)</argsstring>
        <name>test_revoke_noperms_object</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to revoke access to kobject without permission. </para>
        </briefdescription>
        <detaileddescription>
<para>User thread can only revoke their own access to an object. In that test user thread to revokes access to unathorized object, as a result the system will assert. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="544" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="544" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a8d4bd4391e15dab47384abd6e785b2ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_access_after_revoke</definition>
        <argsstring>(void)</argsstring>
        <name>test_access_after_revoke</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to access object after revoking access. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="560" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="560" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a201f733664c40739568b7faf1cab7e51" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void umode_enter_func</definition>
        <argsstring>(void)</argsstring>
        <name>umode_enter_func</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="572" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="572" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a102d0cb4a61c5ed72e85e1b4947e5069" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_user_mode_enter</definition>
        <argsstring>(void)</argsstring>
        <name>test_user_mode_enter</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to check supervisor thread enter one-way to usermode. </para>
        </briefdescription>
        <detaileddescription>
<para>A thread running in supervisor mode must have one-way operation ability to drop privileges to user mode. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="586" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="586" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a91edfc192fb825264b096556ac1daa36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_PIPE_DEFINE</definition>
        <argsstring>(kpipe, 1, 1)</argsstring>
        <name>K_PIPE_DEFINE</name>
        <param>
          <type>kpipe</type>
        </param>
        <param>
          <type>1</type>
        </param>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="595" column="1" declfile="tests/kernel/mem_protect/userspace/src/main.c" declline="595" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a2ad3e5df1022453b9ceaaedef4f55da2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_read_kobject_user_pipe</definition>
        <argsstring>(void)</argsstring>
        <name>test_read_kobject_user_pipe</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to read from kobject using pipe. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="623" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="623" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a86c28e70d8e2e5d9b038144e0cb8d95d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void user_half</definition>
        <argsstring>(void *arg1, void *arg2, void *arg3)</argsstring>
        <name>user_half</name>
        <param>
          <type>void *</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="638" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="638" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1ac47cc607166706e443077267ff630226" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void spawn_user</definition>
        <argsstring>(volatile bool *to_modify)</argsstring>
        <name>spawn_user</name>
        <param>
          <type>volatile <ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref> *</type>
          <declname>to_modify</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="652" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="652" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1ab4fb8ce4d58769338957dcee2151a81d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void drop_user</definition>
        <argsstring>(volatile bool *to_modify)</argsstring>
        <name>drop_user</name>
        <param>
          <type>volatile <ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref> *</type>
          <declname>to_modify</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="661" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="661" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1af9925ef21ba2d64a8d22fe2e1172ecfd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_init_and_access_other_memdomain</definition>
        <argsstring>(void)</argsstring>
        <name>test_init_and_access_other_memdomain</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test creation of new memory domains. </para>
        </briefdescription>
        <detaileddescription>
<para>We initialize a new memory domain and show that its partition configuration is correct. This new domain has &quot;alt_part&quot; in it, but not &quot;default_part&quot;. We then try to modify data in &quot;default_part&quot; and show it produces an exception since that partition is not in the new domain.</para>
<para>This caught a bug once where an MMU system copied page tables for the new domain and accidentally copied memory partition permissions from the source page tables, allowing the write to &quot;default_part&quot; to work. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="681" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="681" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a5c5a6a6cc4ed58164484de4240a95daf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_domain_add_thread_drop_to_user</definition>
        <argsstring>(void)</argsstring>
        <name>test_domain_add_thread_drop_to_user</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Show that changing between memory domains and dropping to user mode works as expected. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="708" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="708" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a2e5664cbf6ccabfb6134a8ff1056ee83" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_domain_add_part_drop_to_user</definition>
        <argsstring>(void)</argsstring>
        <name>test_domain_add_part_drop_to_user</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="722" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="722" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a3fbb0579c9ceea5b59aaa447e978c26f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_domain_remove_part_drop_to_user</definition>
        <argsstring>(void)</argsstring>
        <name>test_domain_remove_part_drop_to_user</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Show that self-removing a partition from a domain we are a member of, and then dropping to user mode faults as expected. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="739" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="739" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1af70f25f78d130e86b1c8cc9bc3b2ca8c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_domain_add_thread_context_switch</definition>
        <argsstring>(void)</argsstring>
        <name>test_domain_add_thread_context_switch</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Show that changing between memory domains and then switching to another thread in the same domain works as expected. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="759" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="759" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a1e8cca7a9037aecad4418a5f22f89f9e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_domain_add_part_context_switch</definition>
        <argsstring>(void)</argsstring>
        <name>test_domain_add_part_context_switch</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="771" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="771" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a31de57d8a544c8eed44988b82eb5a978" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_domain_remove_part_context_switch</definition>
        <argsstring>(void)</argsstring>
        <name>test_domain_remove_part_context_switch</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Show that self-removing a partition from a domain we are a member of, and then switching to another user thread in the same domain faults as expected. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="789" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="789" bodyend="801"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1ac42336e75069db295b2df173162abba8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_unimplemented_syscall</definition>
        <argsstring>(void)</argsstring>
        <name>test_unimplemented_syscall</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test unimplemented system call. </para>
        </briefdescription>
        <detaileddescription>
<para>Created a syscall with name <ref refid="mem__protect_2userspace_2src_2test__syscall_8h_1a4f9d734ae7b1d43fbe57b8ce2ba11ca6" kindref="member">missing_syscall()</ref> without a verification function. The kernel shall safety handle invocations of unimplemented system calls. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="818" column="6" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="818" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a9e492796b6eea50abd7b8896b8f2b967" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_bad_syscall</definition>
        <argsstring>(void)</argsstring>
        <name>test_bad_syscall</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test bad syscall handler. </para>
        </briefdescription>
        <detaileddescription>
<para>When a system call handler decides to terminate the calling thread, the kernel will produce error which indicates the context, where the faulting system call was made from user code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="834" column="6" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="834" bodyend="843"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a2892b69e433ac5f13e75d21d9d02eb4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_object_recycle</definition>
        <argsstring>(void)</argsstring>
        <name>test_object_recycle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test recycle object. </para>
        </briefdescription>
        <detaileddescription>
<para>Test recycle valid/invalid kernel object, see if perms_count changes as expected.</para>
<para><simplesect kind="see"><para>z_object_recycle(), z_object_find() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="857" column="6" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="857" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1aa59bf93d5b7875b7d5892da9a672fcba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_oops_panic</definition>
        <argsstring>(void)</argsstring>
        <name>test_oops_panic</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="892" column="6" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="892" bodyend="895"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1ae5170cb0477d7c7ed468e920513f8e51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_oops_oops</definition>
        <argsstring>(void)</argsstring>
        <name>test_oops_oops</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="897" column="6" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="897" bodyend="900"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a6f3340191e5aef60d839ba6360098623" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_oops_exception</definition>
        <argsstring>(void)</argsstring>
        <name>test_oops_exception</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="902" column="6" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="902" bodyend="905"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a0e19293f9c8637a4cfe1c66a5f899e09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_oops_maxint</definition>
        <argsstring>(void)</argsstring>
        <name>test_oops_maxint</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="907" column="6" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="907" bodyend="910"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a414be5515f6aa8df56628f37d900c51b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_oops_stackcheck</definition>
        <argsstring>(void)</argsstring>
        <name>test_oops_stackcheck</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="912" column="6" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="912" bodyend="915"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a353abf0f9f153f8a4150180c5d6b94a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_syscall_context</definition>
        <argsstring>(void)</argsstring>
        <name>test_syscall_context</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="938" column="6" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="938" bodyend="941"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a12b0e4a5d20d812f15e98cf808c659d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tls_leakage_user_part</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>tls_leakage_user_part</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="943" column="13" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="943" bodyend="951"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a92b375461f0490f034ff5b7f85691c78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_tls_leakage</definition>
        <argsstring>(void)</argsstring>
        <name>test_tls_leakage</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="953" column="6" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="953" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a8e683370cdd4bf561d5455f1d4019a43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tls_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>tls_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="969" column="6" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="969" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a1c7815a2a676b69ec3bec1e23b4cf978" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_tls_pointer</definition>
        <argsstring>(void)</argsstring>
        <name>test_tls_pointer</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="974" column="6" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="974" bodyend="999"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_2userspace_2src_2main_8c_1a8a4533f287d99bb2d7c24c0e29c9a449" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_main</definition>
        <argsstring>(void)</argsstring>
        <name>test_main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>test case main entry </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/userspace/src/main.c" line="1002" column="6" bodyfile="tests/kernel/mem_protect/userspace/src/main.c" bodystart="1002" bodyend="1084"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Parts<sp/>derived<sp/>from<sp/>tests/kernel/fatal/src/main.c,<sp/>which<sp/>has<sp/>the</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>following<sp/>copyright<sp/>and<sp/>license:</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zephyr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ztest_8h" kindref="compound">ztest.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="kernel__structs_8h" kindref="compound">kernel_structs.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="string_8h" kindref="compound">string.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdlib_8h" kindref="compound">stdlib.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="app__memdomain_8h" kindref="compound">app_memory/app_memdomain.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="util_8h" kindref="compound">sys/util.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stack_8h" kindref="compound">debug/stack.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="syscall__handler_8h" kindref="compound">syscall_handler.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="threads_2thread__stack_2src_2test__syscall_8h" kindref="compound">test_syscall.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_ARC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="arc__core__mpu_8h" kindref="compound">arch/arc/v2/mpu/arc_core_mpu.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_ARM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>arm_core_mpu_disable(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_RISCV)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;../arch/riscv/include/core_pmp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INFO(fmt,<sp/>...)<sp/>printk(fmt,<sp/>##__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PIPE_LEN<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BYTES_TO_READ_WRITE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STACKSIZE<sp/>(256<sp/>+<sp/>CONFIG_TEST_EXTRA_STACKSIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="mem__protect_2obj__validation_2src_2main_8c_1acccdee2c9edbab556b941bd865918c2a" kindref="member">K_SEM_DEFINE</ref>(test_revoke_sem,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Used<sp/>for<sp/>tests<sp/>that<sp/>switch<sp/>between<sp/>domains,<sp/>we<sp/>will<sp/>switch<sp/>between<sp/>the</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>default<sp/>domain<sp/>and<sp/>this<sp/>one.</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mem__domain" kindref="compound">k_mem_domain</ref><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a3b857266bf17469ebd0ded8a39cc1032" kindref="member">alternate_domain</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><ref refid="group__ztest__test__deprecated_1gac3de5965061b1164a8033712c9094e23" kindref="member">ZTEST_BMEM</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2mem__map_2src_2main_8c_1a8070ca470d932f569befe4c798ad93c2" kindref="member">expect_fault</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><ref refid="group__ztest__test__deprecated_1gac3de5965061b1164a8033712c9094e23" kindref="member">ZTEST_BMEM</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1afc16a22cddd3dce1283c2db807422812" kindref="member">expected_reason</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Partition<sp/>unique<sp/>to<sp/>default<sp/>domain<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="mem__protect_2userspace_2src_2main_8c_1ae0ea407e6bb1bcd4e7aa4c43660eb38f" kindref="member">K_APPMEM_PARTITION_DEFINE</ref>(default_part);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><ref refid="mem__protect_2userspace_2src_2main_8c_1ac35513960183b828e74e0cede36a9409" kindref="member">K_APP_BMEM</ref>(default_part)<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>default_bool;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Partition<sp/>unique<sp/>to<sp/>alternate<sp/>domain<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><ref refid="mem__protect_2userspace_2src_2main_8c_1ae0ea407e6bb1bcd4e7aa4c43660eb38f" kindref="member">K_APPMEM_PARTITION_DEFINE</ref>(alt_part);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="mem__protect_2userspace_2src_2main_8c_1ac35513960183b828e74e0cede36a9409" kindref="member">K_APP_BMEM</ref>(alt_part)<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>alt_bool;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/><ref refid="threads_2thread__stack_2src_2main_8c_1aaf99baf6b57ceed1a2949db9e149af47" kindref="member">test_thread</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a9bda3e00bf96550334eadf74c9af316b" kindref="member">K_THREAD_STACK_DEFINE</ref>(test_stack,<sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a21d9543c516fffee84a7963224271f95" kindref="member">STACKSIZE</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear_fault(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2mem__map_2src_2main_8c_1a8070ca470d932f569befe4c798ad93c2" kindref="member">expect_fault</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler_barrier();</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reason)</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2mem__map_2src_2main_8c_1a8070ca470d932f569befe4c798ad93c2" kindref="member">expect_fault</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1afc16a22cddd3dce1283c2db807422812" kindref="member">expected_reason</ref><sp/>=<sp/>reason;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler_barrier();</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__fatal__apis_1gab6dfd75572a84729df534fde49ef7d85" kindref="member">k_sys_fatal_error_handler</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reason,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>z_arch_esf_t<sp/>*pEsf)</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ab56f6599fb46785e4265a3033ba91aa6" kindref="member">INFO</ref>(</highlight><highlight class="stringliteral">&quot;Caught<sp/>system<sp/>error<sp/>--<sp/>reason<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>reason);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="mem__protect_2mem__map_2src_2main_8c_1a8070ca470d932f569befe4c798ad93c2" kindref="member">expect_fault</ref>)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="mem__protect_2userspace_2src_2main_8c_1afc16a22cddd3dce1283c2db807422812" kindref="member">expected_reason</ref><sp/>==<sp/>reason)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;System<sp/>error<sp/>was<sp/>expected\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clear_fault();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;Wrong<sp/>fault<sp/>reason,<sp/>expecting<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1afc16a22cddd3dce1283c2db807422812" kindref="member">expected_reason</ref>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__fatal__apis_1gaa8c0b43a2360e5319d7910e8e0ceb951" kindref="member">k_fatal_halt</ref>(reason);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;Unexpected<sp/>fault<sp/>during<sp/>test\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__fatal__apis_1gaa8c0b43a2360e5319d7910e8e0ceb951" kindref="member">k_fatal_halt</ref>(reason);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a1e80606656db38389c306160294d6ae6" kindref="member">test_is_usermode</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Confirm<sp/>that<sp/>we<sp/>are<sp/>in<sp/>fact<sp/>running<sp/>in<sp/>user<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clear_fault();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="syscall_8h_1acd625881dd1a23de2573fa86d870df20" kindref="member">k_is_user_context</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;thread<sp/>left<sp/>in<sp/>kernel<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a7ef2f1a0c2724bd8546e289f325765dc" kindref="member">test_write_control</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>write<sp/>to<sp/>a<sp/>control<sp/>register.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_X86)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_X86_64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;movq<sp/>$0xFFFFFFFF,<sp/>%rax;\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;movq<sp/>%rax,<sp/>%cr0;\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mov<sp/>%cr0,<sp/>%eax;\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>$0xfffeffff,<sp/>%eax;\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mov<sp/>%eax,<sp/>%cr0;\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;Write<sp/>to<sp/>control<sp/>register<sp/>did<sp/>not<sp/>fault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CONFIG_ARM64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>val<sp/>=<sp/><ref refid="include_2arch_2arm64_2cpu_8h_1a440d11721e78f76bd7022cc8aef83aca" kindref="member">SPSR_MODE_EL1T</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;msr<sp/>spsr_el1,<sp/>%0&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(val)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;Write<sp/>to<sp/>control<sp/>register<sp/>did<sp/>not<sp/>fault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CONFIG_ARM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_CPU_CORTEX_M)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msr_value;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clear_fault();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msr_value<sp/>=<sp/>__get_CONTROL();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msr_value<sp/>&amp;=<sp/>~(CONTROL_nPRIV_Msk);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__set_CONTROL(msr_value);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__DSB();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ISB();</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msr_value<sp/>=<sp/>__get_CONTROL();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((msr_value<sp/>&amp;<sp/>(CONTROL_nPRIV_Msk)),</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Write<sp/>to<sp/>control<sp/>register<sp/>was<sp/>successful&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>val;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>__get_SCTLR();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>|=<sp/>SCTLR_DZ_Msk;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__set_SCTLR(val);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;Write<sp/>to<sp/>control<sp/>register<sp/>did<sp/>not<sp/>fault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CONFIG_ARC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>er_status;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>_ARC_V2_ERSTATUS<sp/>is<sp/>privilege<sp/>aux<sp/>reg<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;lr<sp/>%0,<sp/>[0x402]\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(er_status)::</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CONFIG_RISCV)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;csrr<sp/>%0,<sp/>mstatus&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(status));</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Not<sp/>implemented<sp/>for<sp/>this<sp/>architecture&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;Write<sp/>to<sp/>control<sp/>register<sp/>did<sp/>not<sp/>fault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a3bf6b7786090c7f625b454c972a9c16a" kindref="member">test_disable_mmu_mpu</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>disable<sp/>memory<sp/>protections.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_X86)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_X86_64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;movq<sp/>%cr0,<sp/>%rax;\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;andq<sp/>$0x7ffeffff,<sp/>%rax;\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;movq<sp/>%rax,<sp/>%cr0;\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mov<sp/>%cr0,<sp/>%eax;\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>$0x7ffeffff,<sp/>%eax;\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mov<sp/>%eax,<sp/>%cr0;\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CONFIG_ARM64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>val;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;mrs<sp/>%0,<sp/>sctlr_el1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(val));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;msr<sp/>sctlr_el1,<sp/>%0&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(val<sp/>&amp;<sp/>~(<ref refid="include_2arch_2arm64_2cpu_8h_1a223e38830566f400f6d592a6bb7dd361" kindref="member">SCTLR_M_BIT</ref><sp/>|<sp/><ref refid="include_2arch_2arm64_2cpu_8h_1a752ac38bb53a96c6749fbfc09a1fb88d" kindref="member">SCTLR_C_BIT</ref>))</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CONFIG_ARM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CONFIG_TRUSTED_EXECUTION_NONSECURE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arm_core_mpu_disable();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disabling<sp/>MPU<sp/>from<sp/>unprivileged<sp/>code</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>generates<sp/>BusFault<sp/>which<sp/>is<sp/>not<sp/>banked</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>between<sp/>Security<sp/>states.<sp/>Do<sp/>not<sp/>execute</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>this<sp/>scenario<sp/>for<sp/>Non-Secure<sp/>Cortex-M.</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!CONFIG_TRUSTED_EXECUTION_NONSECURE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CONFIG_ARC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arc_core_mpu_disable();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CONFIG_RISCV)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_riscv_pmp_clear_config();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Not<sp/>implemented<sp/>for<sp/>this<sp/>architecture&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;Disable<sp/>MMU/MPU<sp/>did<sp/>not<sp/>fault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a0cfcb7f7a7fda9f734a0401c161e0564" kindref="member">test_read_kernram</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>read<sp/>from<sp/>kernel<sp/>RAM.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="kobject_8c_1a5bf2789125fcfa98cff775cb82fbd3c9" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kobject_8c_1a5bf2789125fcfa98cff775cb82fbd3c9" kindref="member">p</ref><sp/>=<sp/>_current-&gt;init_data;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;%p\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="kobject_8c_1a5bf2789125fcfa98cff775cb82fbd3c9" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;Read<sp/>from<sp/>kernel<sp/>RAM<sp/>did<sp/>not<sp/>fault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1af120025e84ef5281c3826b58044a6eba" kindref="member">test_write_kernram</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>write<sp/>to<sp/>kernel<sp/>RAM.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_current-&gt;init_data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;Write<sp/>to<sp/>kernel<sp/>RAM<sp/>did<sp/>not<sp/>fault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_k_neg_eagain;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="linker-defs_8h" kindref="compound">linker/linker-defs.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ae1f018e6507dbd115ffb3f1d27814620" kindref="member">test_write_kernro</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in_rodata;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>write<sp/>to<sp/>kernel<sp/>RO.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref><sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal">)&amp;_k_neg_eagain;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_rodata<sp/>=<sp/><ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref><sp/>&lt;<sp/>__rodata_region_end<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref><sp/>&gt;=<sp/>__rodata_region_start;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_LINKER_USE_PINNED_SECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!in_rodata)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_rodata<sp/>=<sp/><ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref><sp/>&lt;<sp/>lnkr_pinned_rodata_end<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref><sp/>&gt;=<sp/>lnkr_pinned_rodata_start;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(in_rodata,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;_k_neg_eagain<sp/>is<sp/>not<sp/>in<sp/>rodata&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_k_neg_eagain<sp/>=<sp/>-<ref refid="group__system__errno_1ga2d1678d5a7cc8ce499643f3b8957def4" kindref="member">EINVAL</ref>;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;Write<sp/>to<sp/>kernel<sp/>RO<sp/>did<sp/>not<sp/>fault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1af8960a284a5af1fceeef31db01980aba" kindref="member">test_write_kerntext</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>write<sp/>to<sp/>kernel<sp/>text.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string_8h_1a4137694174d4ca2fad886a1db355015c" kindref="member">memset</ref>(&amp;z_is_thread_essential,<sp/>0,<sp/>4);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;Write<sp/>to<sp/>kernel<sp/>text<sp/>did<sp/>not<sp/>fault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ab8f7f58eb5ee4fe331b9ca8813a8425a" kindref="member">kernel_data</ref>;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1aa6a9be1356784c7c545bb0a0738f1395" kindref="member">test_read_kernel_data</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="337"><highlight class="normal">{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;%d\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ab8f7f58eb5ee4fe331b9ca8813a8425a" kindref="member">kernel_data</ref>);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;Read<sp/>from<sp/>data<sp/>did<sp/>not<sp/>fault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a86c6d565f76814cbc114ac9c482a7d7b" kindref="member">test_write_kernel_data</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ab8f7f58eb5ee4fe331b9ca8813a8425a" kindref="member">kernel_data</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;Write<sp/>to<sp/><sp/>data<sp/>did<sp/>not<sp/>fault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*<sp/>volatile<sp/>to<sp/>avoid<sp/>compiler<sp/>mischief.</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><ref refid="mem__protect_2userspace_2src_2main_8c_1a9067a0a2728b358c511417b2de42c731" kindref="member">K_APP_DMEM</ref>(default_part)<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*priv_stack_ptr;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_ARC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><ref refid="mem__protect_2userspace_2src_2main_8c_1a9067a0a2728b358c511417b2de42c731" kindref="member">K_APP_DMEM</ref>(default_part)<sp/><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/>size<sp/>=<sp/>(0<sp/>-<sp/>CONFIG_PRIVILEGED_STACK_SIZE<sp/>-</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_ARC_STACK_GUARD_SIZE);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_read_priv_stack(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="372"><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>read<sp/>from<sp/>privileged<sp/>stack.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_ARC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="asm-macro-32-bit-gnu_8h_1a39e110111e0f42a0d4fb025a96888293" kindref="member">s</ref>[1];</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="asm-macro-32-bit-gnu_8h_1a39e110111e0f42a0d4fb025a96888293" kindref="member">s</ref>[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>priv_stack_ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;<ref refid="asm-macro-32-bit-gnu_8h_1a39e110111e0f42a0d4fb025a96888293" kindref="member">s</ref>[0]<sp/>-<sp/>size;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CONFIG_ARM)<sp/>||<sp/>defined(CONFIG_X86)<sp/>||<sp/>defined(CONFIG_RISCV)<sp/>||<sp/>defined(CONFIG_ARM64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>priv_stack_ptr<sp/>set<sp/>by<sp/>test_main()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Not<sp/>implemented<sp/>for<sp/>this<sp/>architecture&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;%c\n&quot;</highlight><highlight class="normal">,<sp/>*priv_stack_ptr);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;Read<sp/>from<sp/>privileged<sp/>stack<sp/>did<sp/>not<sp/>fault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a5852445ea3966748d4fbe92bf95d0c0f" kindref="member">test_write_priv_stack</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="396"><highlight class="normal">{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>write<sp/>to<sp/>privileged<sp/>stack.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_ARC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="asm-macro-32-bit-gnu_8h_1a39e110111e0f42a0d4fb025a96888293" kindref="member">s</ref>[1];</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="asm-macro-32-bit-gnu_8h_1a39e110111e0f42a0d4fb025a96888293" kindref="member">s</ref>[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>priv_stack_ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;<ref refid="asm-macro-32-bit-gnu_8h_1a39e110111e0f42a0d4fb025a96888293" kindref="member">s</ref>[0]<sp/>-<sp/>size;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CONFIG_ARM)<sp/>||<sp/>defined(CONFIG_X86)<sp/>||<sp/>defined(CONFIG_RISCV)<sp/>||<sp/>defined(CONFIG_ARM64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>priv_stack_ptr<sp/>set<sp/>by<sp/>test_main()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Not<sp/>implemented<sp/>for<sp/>this<sp/>architecture&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*priv_stack_ptr<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;Write<sp/>to<sp/>privileged<sp/>stack<sp/>did<sp/>not<sp/>fault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><ref refid="mem__protect_2userspace_2src_2main_8c_1ac35513960183b828e74e0cede36a9409" kindref="member">K_APP_BMEM</ref>(default_part)<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_sem<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a989f6708d698cae205e01a2f6738767f" kindref="member">sem</ref>;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_pass_user_object(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>pass<sp/>a<sp/>user<sp/>object<sp/>to<sp/>a<sp/>system<sp/>call.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52ad6bc280fafebf22e2c97481cc4a5b7c3" kindref="member">K_ERR_KERNEL_OOPS</ref>);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gadcd0e6cfba3392fb887222eafe4c1845" kindref="member">k_sem_init</ref>(&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1a989f6708d698cae205e01a2f6738767f" kindref="member">sem</ref>,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;Pass<sp/>a<sp/>user<sp/>object<sp/>to<sp/>a<sp/>syscall<sp/>did<sp/>not<sp/>fault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_sem<sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ad83484ed3aa02f7e7aeb627d3142cc2e" kindref="member">ksem</ref>;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a024f46fba0857cf4a46bcfb8bf836bc6" kindref="member">test_pass_noperms_object</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>pass<sp/>a<sp/>object<sp/>to<sp/>a<sp/>system<sp/>call<sp/>w/o<sp/>permissions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52ad6bc280fafebf22e2c97481cc4a5b7c3" kindref="member">K_ERR_KERNEL_OOPS</ref>);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gadcd0e6cfba3392fb887222eafe4c1845" kindref="member">k_sem_init</ref>(&amp;<ref refid="mem__protect_2userspace_2src_2main_8c_1ad83484ed3aa02f7e7aeb627d3142cc2e" kindref="member">ksem</ref>,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;Pass<sp/>an<sp/>unauthorized<sp/>object<sp/>to<sp/>a<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;syscall<sp/>did<sp/>not<sp/>fault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1af445a4d41e2a5eece1db54153896a1de" kindref="member">thread_body</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="450"><highlight class="normal">{</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ab9c5c524d21e393b7414351561e8dd8d" kindref="member">test_start_kernel_thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="459"><highlight class="normal">{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>start<sp/>a<sp/>kernel<sp/>thread<sp/>from<sp/>a<sp/>usermode<sp/>thread<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52ad6bc280fafebf22e2c97481cc4a5b7c3" kindref="member">K_ERR_KERNEL_OOPS</ref>);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="threads_2thread__stack_2src_2main_8c_1aaf99baf6b57ceed1a2949db9e149af47" kindref="member">test_thread</ref>,<sp/>test_stack,<sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a21d9543c516fffee84a7963224271f95" kindref="member">STACKSIZE</ref>,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref>)<ref refid="mem__protect_2userspace_2src_2main_8c_1af445a4d41e2a5eece1db54153896a1de" kindref="member">thread_body</ref>,<sp/>NULL,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(1),<sp/><ref refid="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" kindref="member">K_INHERIT_PERMS</ref>,</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;Create<sp/>a<sp/>kernel<sp/>thread<sp/>did<sp/>not<sp/>fault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CONFIG_MMU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>uthread_read_body(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="471"><highlight class="normal">{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*vptr<sp/>=<sp/>p1;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;%u\n&quot;</highlight><highlight class="normal">,<sp/>*vptr);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;Read<sp/>from<sp/>other<sp/>thread<sp/>stack<sp/>did<sp/>not<sp/>fault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>uthread_write_body(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*vptr<sp/>=<sp/>p1;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*vptr<sp/>=<sp/>2U;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;Write<sp/>to<sp/>other<sp/>thread<sp/>stack<sp/>did<sp/>not<sp/>fault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a3b47e253bd17e8c09b71a09d79aaf6a0" kindref="member">test_read_other_stack</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="494"><highlight class="normal">{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>read<sp/>from<sp/>another<sp/>thread&apos;s<sp/>stack.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="threads_2thread__stack_2src_2main_8c_1aaf99baf6b57ceed1a2949db9e149af47" kindref="member">test_thread</ref>,<sp/>test_stack,<sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a21d9543c516fffee84a7963224271f95" kindref="member">STACKSIZE</ref>,</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uthread_read_body,<sp/>&amp;val,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/><ref refid="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" kindref="member">K_USER</ref><sp/>|<sp/><ref refid="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" kindref="member">K_INHERIT_PERMS</ref>,</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(&amp;<ref refid="threads_2thread__stack_2src_2main_8c_1aaf99baf6b57ceed1a2949db9e149af47" kindref="member">test_thread</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a95880eeeba13e753aa18dab644585d5f" kindref="member">test_write_other_stack</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="513"><highlight class="normal">{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>write<sp/>to<sp/>another<sp/>thread&apos;s<sp/>stack.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="threads_2thread__stack_2src_2main_8c_1aaf99baf6b57ceed1a2949db9e149af47" kindref="member">test_thread</ref>,<sp/>test_stack,<sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a21d9543c516fffee84a7963224271f95" kindref="member">STACKSIZE</ref>,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uthread_write_body,<sp/>&amp;val,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/><ref refid="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" kindref="member">K_USER</ref><sp/>|<sp/><ref refid="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" kindref="member">K_INHERIT_PERMS</ref>,</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(&amp;<ref refid="threads_2thread__stack_2src_2main_8c_1aaf99baf6b57ceed1a2949db9e149af47" kindref="member">test_thread</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a3b47e253bd17e8c09b71a09d79aaf6a0" kindref="member">test_read_other_stack</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="525"><highlight class="normal">{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gada3b1fcfa71db1bf7787c03ff45256d5" kindref="member">ztest_test_skip</ref>();</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a95880eeeba13e753aa18dab644585d5f" kindref="member">test_write_other_stack</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="530"><highlight class="normal">{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gada3b1fcfa71db1bf7787c03ff45256d5" kindref="member">ztest_test_skip</ref>();</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_MMU<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a83325c0cf88a98c1f5c4a534a15acc24" kindref="member">test_revoke_noperms_object</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="545"><highlight class="normal">{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Attempt<sp/>to<sp/>revoke<sp/>access<sp/>to<sp/>kobject<sp/>w/o<sp/>permissions*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52ad6bc280fafebf22e2c97481cc4a5b7c3" kindref="member">K_ERR_KERNEL_OOPS</ref>);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__usermode__apis_1ga3cb1a024c0178918def2dd0186e565b3" kindref="member">k_object_release</ref>(&amp;<ref refid="mem__protect_2userspace_2src_2main_8c_1ad83484ed3aa02f7e7aeb627d3142cc2e" kindref="member">ksem</ref>);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;Revoke<sp/>access<sp/>to<sp/>unauthorized<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;did<sp/>not<sp/>fault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a8d4bd4391e15dab47384abd6e785b2ba" kindref="member">test_access_after_revoke</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="561"><highlight class="normal">{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__usermode__apis_1ga3cb1a024c0178918def2dd0186e565b3" kindref="member">k_object_release</ref>(&amp;test_revoke_sem);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>access<sp/>an<sp/>object<sp/>after<sp/>revoking<sp/>access<sp/>to<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52ad6bc280fafebf22e2c97481cc4a5b7c3" kindref="member">K_ERR_KERNEL_OOPS</ref>);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gac71e2383c1920dddc45a561cacfef090" kindref="member">k_sem_take</ref>(&amp;test_revoke_sem,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;Using<sp/>revoked<sp/>object<sp/>did<sp/>not<sp/>fault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a201f733664c40739568b7faf1cab7e51" kindref="member">umode_enter_func</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="573"><highlight class="normal">{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="syscall_8h_1acd625881dd1a23de2573fa86d870df20" kindref="member">k_is_user_context</ref>(),</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Thread<sp/>did<sp/>not<sp/>enter<sp/>user<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a102d0cb4a61c5ed72e85e1b4947e5069" kindref="member">test_user_mode_enter</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="587"><highlight class="normal">{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clear_fault();</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga3fbe1c8a5f3ef1c25382c7d6fca35764" kindref="member">k_thread_user_mode_enter</ref>((<ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref>)<ref refid="mem__protect_2userspace_2src_2main_8c_1a201f733664c40739568b7faf1cab7e51" kindref="member">umode_enter_func</ref>,</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Define<sp/>and<sp/>initialize<sp/>pipe.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><ref refid="mem__protect_2userspace_2src_2main_8c_1a91edfc192fb825264b096556ac1daa36" kindref="member">K_PIPE_DEFINE</ref>(kpipe,<sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1adec5a32ee1bee16e07eb10b6dc612e62" kindref="member">PIPE_LEN</ref>,<sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1aac3f1f5a1b3d1bf58cb55dfa2ae351e4" kindref="member">BYTES_TO_READ_WRITE</ref>);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><ref refid="mem__protect_2userspace_2src_2main_8c_1ac35513960183b828e74e0cede36a9409" kindref="member">K_APP_BMEM</ref>(default_part)<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_written_read;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_write_kobject_user_pipe(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="604"><highlight class="normal">{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Attempt<sp/>to<sp/>use<sp/>system<sp/>call<sp/>from<sp/>k_pipe_get<sp/>to<sp/>write<sp/>over</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>a<sp/>kernel<sp/>object.</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52ad6bc280fafebf22e2c97481cc4a5b7c3" kindref="member">K_ERR_KERNEL_OOPS</ref>);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__pipe__apis_1gada9aaf9a336d98a95441212f4223e9ef" kindref="member">k_pipe_get</ref>(&amp;kpipe,<sp/>&amp;test_revoke_sem,<sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1aac3f1f5a1b3d1bf58cb55dfa2ae351e4" kindref="member">BYTES_TO_READ_WRITE</ref>,</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;bytes_written_read,<sp/>1,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;System<sp/>call<sp/>memory<sp/>write<sp/>validation<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;did<sp/>not<sp/>fault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a2ad3e5df1022453b9ceaaedef4f55da2" kindref="member">test_read_kobject_user_pipe</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="624"><highlight class="normal">{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Attempt<sp/>to<sp/>use<sp/>system<sp/>call<sp/>from<sp/>k_pipe_put<sp/>to<sp/>read<sp/>a</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>kernel<sp/>object.</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52ad6bc280fafebf22e2c97481cc4a5b7c3" kindref="member">K_ERR_KERNEL_OOPS</ref>);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put</ref>(&amp;kpipe,<sp/>&amp;test_revoke_sem,<sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1aac3f1f5a1b3d1bf58cb55dfa2ae351e4" kindref="member">BYTES_TO_READ_WRITE</ref>,</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;bytes_written_read,<sp/>1,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;System<sp/>call<sp/>memory<sp/>read<sp/>validation<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;did<sp/>not<sp/>fault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a86c28e70d8e2e5d9b038144e0cb8d95d" kindref="member">user_half</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg3)</highlight></codeline>
<codeline lineno="639"><highlight class="normal">{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*bool_ptr<sp/>=<sp/>arg1;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*bool_ptr<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler_barrier();</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="mem__protect_2mem__map_2src_2main_8c_1a8070ca470d932f569befe4c798ad93c2" kindref="member">expect_fault</ref>)<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;Expecting<sp/>a<sp/>fatal<sp/>error<sp/>%d<sp/>but<sp/>succeeded<sp/>instead\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1afc16a22cddd3dce1283c2db807422812" kindref="member">expected_reason</ref>);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ztest__assert_8h_1acd6eb423f54dce8544f7c3b1618c0374" kindref="member">ztest_test_fail</ref>();</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ac47cc607166706e443077267ff630226" kindref="member">spawn_user</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*to_modify)</highlight></codeline>
<codeline lineno="653"><highlight class="normal">{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="threads_2thread__stack_2src_2main_8c_1aaf99baf6b57ceed1a2949db9e149af47" kindref="member">test_thread</ref>,<sp/>test_stack,<sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a21d9543c516fffee84a7963224271f95" kindref="member">STACKSIZE</ref>,<sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a86c28e70d8e2e5d9b038144e0cb8d95d" kindref="member">user_half</ref>,</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)to_modify,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/><ref refid="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" kindref="member">K_INHERIT_PERMS</ref><sp/>|<sp/><ref refid="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" kindref="member">K_USER</ref>,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(&amp;<ref refid="threads_2thread__stack_2src_2main_8c_1aaf99baf6b57ceed1a2949db9e149af47" kindref="member">test_thread</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ab4fb8ce4d58769338957dcee2151a81d" kindref="member">drop_user</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*to_modify)</highlight></codeline>
<codeline lineno="662"><highlight class="normal">{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga48d4b041790454da4d68ac8711f29657" kindref="member">k_sleep</ref>(<ref refid="group__clock__apis_1ga302af954e87b10a9b731f1ad07775e9f" kindref="member">K_MSEC</ref>(1));<sp/></highlight><highlight class="comment">/*<sp/>Force<sp/>a<sp/>context<sp/>switch<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga3fbe1c8a5f3ef1c25382c7d6fca35764" kindref="member">k_thread_user_mode_enter</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a86c28e70d8e2e5d9b038144e0cb8d95d" kindref="member">user_half</ref>,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)to_modify,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1af9925ef21ba2d64a8d22fe2e1172ecfd" kindref="member">test_init_and_access_other_memdomain</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="682"><highlight class="normal">{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mem__partition" kindref="compound">k_mem_partition</ref><sp/>*parts[]<sp/>=<sp/>{<sp/>&amp;<ref refid="group__ztest__test__deprecated_1ga3adced2fdda96833e6b1ecbf3d61d446" kindref="member">ztest_mem_partition</ref>,<sp/>&amp;alt_part<sp/>};</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1ga8a987bc85c02925685fe87213fe26c5a" kindref="member">k_mem_domain_init</ref>(&amp;<ref refid="mem__protect_2userspace_2src_2main_8c_1a3b857266bf17469ebd0ded8a39cc1032" kindref="member">alternate_domain</ref>,<sp/><ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(parts),<sp/>parts),</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>initialize<sp/>memory<sp/>domain&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Switch<sp/>to<sp/>alternate_domain<sp/>which<sp/>does<sp/>not<sp/>have<sp/>default_part<sp/>that</highlight></codeline>
<codeline lineno="690"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>contains<sp/>default_bool.<sp/>This<sp/>should<sp/>fault<sp/>when<sp/>we<sp/>try<sp/>to<sp/>write<sp/>it.</highlight></codeline>
<codeline lineno="691"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1ga7b4d6148d9375f020a268961d5afde2d" kindref="member">k_mem_domain_add_thread</ref>(&amp;<ref refid="mem__protect_2userspace_2src_2main_8c_1a3b857266bf17469ebd0ded8a39cc1032" kindref="member">alternate_domain</ref>,<sp/><ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>());</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ac47cc607166706e443077267ff630226" kindref="member">spawn_user</ref>(&amp;default_bool);</highlight></codeline>
<codeline lineno="695"><highlight class="normal">}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(CONFIG_ARM)<sp/>||<sp/>(defined(CONFIG_GEN_PRIV_STACKS)<sp/>&amp;&amp;<sp/>defined(CONFIG_RISCV)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*z_priv_stack_find(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*obj);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="arch__interface_8h_1a3e4bde3075edb41069b258d999333b0e" kindref="member">k_thread_stack_t</ref><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a818c8f20ac7ad831b44efa0615e1bb9e" kindref="member">ztest_thread_stack</ref>[];</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a5c5a6a6cc4ed58164484de4240a95daf" kindref="member">test_domain_add_thread_drop_to_user</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="709"><highlight class="normal">{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clear_fault();</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1ga7b4d6148d9375f020a268961d5afde2d" kindref="member">k_mem_domain_add_thread</ref>(&amp;<ref refid="mem__protect_2userspace_2src_2main_8c_1a3b857266bf17469ebd0ded8a39cc1032" kindref="member">alternate_domain</ref>,<sp/><ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>());</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ab4fb8ce4d58769338957dcee2151a81d" kindref="member">drop_user</ref>(&amp;alt_bool);</highlight></codeline>
<codeline lineno="713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@brief<sp/>Test<sp/>adding<sp/>application<sp/>memory<sp/>partition<sp/>to<sp/>memory<sp/>domain</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/>*<sp/>@details<sp/>Show<sp/>that<sp/>adding<sp/>a<sp/>partition<sp/>to<sp/>a<sp/>domain<sp/>and<sp/>then<sp/>dropping<sp/>to<sp/>user</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/>*<sp/>mode<sp/>works<sp/>as<sp/>expected.</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>kernel_memprotect_tests</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a2e5664cbf6ccabfb6134a8ff1056ee83" kindref="member">test_domain_add_part_drop_to_user</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="723"><highlight class="normal">{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clear_fault();</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition</ref>(&amp;<ref refid="group__mem__domain__apis_1ga3613abdb546a66059fa3f621a2ebd41a" kindref="member">k_mem_domain_default</ref>,<sp/>&amp;alt_part),</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>add<sp/>memory<sp/>partition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ab4fb8ce4d58769338957dcee2151a81d" kindref="member">drop_user</ref>(&amp;alt_bool);</highlight></codeline>
<codeline lineno="731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a3fbb0579c9ceea5b59aaa447e978c26f" kindref="member">test_domain_remove_part_drop_to_user</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="740"><highlight class="normal">{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>added<sp/>alt_part<sp/>to<sp/>the<sp/>default<sp/>domain<sp/>in<sp/>the<sp/>previous<sp/>test,</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>remove<sp/>it,<sp/>and<sp/>then<sp/>try<sp/>to<sp/>access<sp/>again.</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1gada4f8ce609d6b720ee88e11544555fc2" kindref="member">k_mem_domain_remove_partition</ref>(&amp;<ref refid="group__mem__domain__apis_1ga3613abdb546a66059fa3f621a2ebd41a" kindref="member">k_mem_domain_default</ref>,<sp/>&amp;alt_part),</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>remove<sp/>partition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ab4fb8ce4d58769338957dcee2151a81d" kindref="member">drop_user</ref>(&amp;alt_bool);</highlight></codeline>
<codeline lineno="751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1af70f25f78d130e86b1c8cc9bc3b2ca8c" kindref="member">test_domain_add_thread_context_switch</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="760"><highlight class="normal">{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clear_fault();</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1ga7b4d6148d9375f020a268961d5afde2d" kindref="member">k_mem_domain_add_thread</ref>(&amp;<ref refid="mem__protect_2userspace_2src_2main_8c_1a3b857266bf17469ebd0ded8a39cc1032" kindref="member">alternate_domain</ref>,<sp/><ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>());</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ac47cc607166706e443077267ff630226" kindref="member">spawn_user</ref>(&amp;alt_bool);</highlight></codeline>
<codeline lineno="764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Show<sp/>that<sp/>adding<sp/>a<sp/>partition<sp/>to<sp/>a<sp/>domain<sp/>and<sp/>then<sp/>switching<sp/>to<sp/>another</highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/>*<sp/>user<sp/>thread<sp/>in<sp/>the<sp/>same<sp/>domain<sp/>works<sp/>as<sp/>expected.</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>kernel_memprotect_tests</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a1e8cca7a9037aecad4418a5f22f89f9e" kindref="member">test_domain_add_part_context_switch</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="772"><highlight class="normal">{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clear_fault();</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition</ref>(&amp;<ref refid="group__mem__domain__apis_1ga3613abdb546a66059fa3f621a2ebd41a" kindref="member">k_mem_domain_default</ref>,<sp/>&amp;alt_part),</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>add<sp/>memory<sp/>partition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ac47cc607166706e443077267ff630226" kindref="member">spawn_user</ref>(&amp;alt_bool);</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a31de57d8a544c8eed44988b82eb5a978" kindref="member">test_domain_remove_part_context_switch</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="790"><highlight class="normal">{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>added<sp/>alt_part<sp/>to<sp/>the<sp/>default<sp/>domain<sp/>in<sp/>the<sp/>previous<sp/>test,</highlight></codeline>
<codeline lineno="792"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>remove<sp/>it,<sp/>and<sp/>then<sp/>try<sp/>to<sp/>access<sp/>again.</highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1gada4f8ce609d6b720ee88e11544555fc2" kindref="member">k_mem_domain_remove_partition</ref>(&amp;<ref refid="group__mem__domain__apis_1ga3613abdb546a66059fa3f621a2ebd41a" kindref="member">k_mem_domain_default</ref>,<sp/>&amp;alt_part),</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>remove<sp/>memory<sp/>partition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ac47cc607166706e443077267ff630226" kindref="member">spawn_user</ref>(&amp;alt_bool);</highlight></codeline>
<codeline lineno="801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>z_impl_missing_syscall(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="804"><highlight class="normal">{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Shouldn&apos;t<sp/>ever<sp/>get<sp/>here;<sp/>no<sp/>handler<sp/>function<sp/>compiled<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1aedd541f707b1463aaac15c7798340329" kindref="member">k_panic</ref>();</highlight></codeline>
<codeline lineno="807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ac42336e75069db295b2df173162abba8" kindref="member">test_unimplemented_syscall</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="819"><highlight class="normal">{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52ad6bc280fafebf22e2c97481cc4a5b7c3" kindref="member">K_ERR_KERNEL_OOPS</ref>);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2test__syscall_8h_1a4f9d734ae7b1d43fbe57b8ce2ba11ca6" kindref="member">missing_syscall</ref>();</highlight></codeline>
<codeline lineno="823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a9e492796b6eea50abd7b8896b8f2b967" kindref="member">test_bad_syscall</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="835"><highlight class="normal">{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52ad6bc280fafebf22e2c97481cc4a5b7c3" kindref="member">K_ERR_KERNEL_OOPS</ref>);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arch_2arc_2syscall_8h_1a5e9ab24b9c980e327903fbe3f5bd97f3" kindref="member">arch_syscall_invoke0</ref>(<ref refid="limits_8h_1a9ec306f36d50c7375e74f0d1c55a3a67" kindref="member">INT_MAX</ref>);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ace52222e1f9e88c4c9fb60e08066004c" kindref="member">set_fault</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52ad6bc280fafebf22e2c97481cc4a5b7c3" kindref="member">K_ERR_KERNEL_OOPS</ref>);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arch_2arc_2syscall_8h_1a5e9ab24b9c980e327903fbe3f5bd97f3" kindref="member">arch_syscall_invoke0</ref>(UINT_MAX);</highlight></codeline>
<codeline lineno="843"><highlight class="normal">}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_sem<sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a682d4a453a392ba4cd32a9967ae88d1e" kindref="member">recycle_sem</ref>;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a2892b69e433ac5f13e75d21d9d02eb4a" kindref="member">test_object_recycle</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="858"><highlight class="normal">{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">z_object<sp/>*ko;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>perms_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dummy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Validate<sp/>recycle<sp/>invalid<sp/>objects,<sp/>after<sp/>recycling<sp/>this<sp/>invalid</highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>object,<sp/>perms_count<sp/>should<sp/>finally<sp/>still<sp/>be<sp/>1.</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ko<sp/>=<sp/>z_object_find(&amp;dummy);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(ko<sp/>==<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>an<sp/>invalid<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_object_recycle(&amp;dummy);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ko<sp/>=<sp/>z_object_find(&amp;<ref refid="mem__protect_2userspace_2src_2main_8c_1a682d4a453a392ba4cd32a9967ae88d1e" kindref="member">recycle_sem</ref>);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)<ref refid="string_8h_1a4137694174d4ca2fad886a1db355015c" kindref="member">memset</ref>(ko-&gt;perms,<sp/>0xFF,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ko-&gt;perms));</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_object_recycle(&amp;<ref refid="mem__protect_2userspace_2src_2main_8c_1a682d4a453a392ba4cd32a9967ae88d1e" kindref="member">recycle_sem</ref>);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(ko<sp/>!=<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;kernel<sp/>object<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(ko-&gt;flags<sp/>&amp;<sp/><ref refid="group__usermode__apis_1ga1418482d67c7964855570fd0ac79628d" kindref="member">K_OBJ_FLAG_INITIALIZED</ref>,</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;object<sp/>wasn&apos;t<sp/>marked<sp/>as<sp/>initialized&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>CONFIG_MAX_THREAD_BYTES;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perms_count<sp/>+=<sp/>popcount(ko-&gt;perms[i]);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(perms_count<sp/>==<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>number<sp/>of<sp/>thread<sp/>permissions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>test_oops(provided,<sp/>expected)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="887"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expect_fault<sp/>=<sp/>true;<sp/>\</highlight></codeline>
<codeline lineno="888"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_reason<sp/>=<sp/>expected;<sp/>\</highlight></codeline>
<codeline lineno="889"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_except_reason(provided);<sp/>\</highlight></codeline>
<codeline lineno="890"><highlight class="preprocessor">}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1aa59bf93d5b7875b7d5892da9a672fcba" kindref="member">test_oops_panic</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="893"><highlight class="normal">{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a42724a5de7e302dc381a1d140fb33a14" kindref="member">test_oops</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52a6ea29e224a1bc958a961420471711617" kindref="member">K_ERR_KERNEL_PANIC</ref>,<sp/><ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52ad6bc280fafebf22e2c97481cc4a5b7c3" kindref="member">K_ERR_KERNEL_OOPS</ref>);</highlight></codeline>
<codeline lineno="895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1ae5170cb0477d7c7ed468e920513f8e51" kindref="member">test_oops_oops</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="898"><highlight class="normal">{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a42724a5de7e302dc381a1d140fb33a14" kindref="member">test_oops</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52ad6bc280fafebf22e2c97481cc4a5b7c3" kindref="member">K_ERR_KERNEL_OOPS</ref>,<sp/><ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52ad6bc280fafebf22e2c97481cc4a5b7c3" kindref="member">K_ERR_KERNEL_OOPS</ref>);</highlight></codeline>
<codeline lineno="900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a6f3340191e5aef60d839ba6360098623" kindref="member">test_oops_exception</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="903"><highlight class="normal">{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a42724a5de7e302dc381a1d140fb33a14" kindref="member">test_oops</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52af9ac087d07f036fae2e689a2afc8d88b" kindref="member">K_ERR_CPU_EXCEPTION</ref>,<sp/><ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52ad6bc280fafebf22e2c97481cc4a5b7c3" kindref="member">K_ERR_KERNEL_OOPS</ref>);</highlight></codeline>
<codeline lineno="905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a0e19293f9c8637a4cfe1c66a5f899e09" kindref="member">test_oops_maxint</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="908"><highlight class="normal">{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a42724a5de7e302dc381a1d140fb33a14" kindref="member">test_oops</ref>(<ref refid="limits_8h_1a9ec306f36d50c7375e74f0d1c55a3a67" kindref="member">INT_MAX</ref>,<sp/><ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52ad6bc280fafebf22e2c97481cc4a5b7c3" kindref="member">K_ERR_KERNEL_OOPS</ref>);</highlight></codeline>
<codeline lineno="910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a414be5515f6aa8df56628f37d900c51b" kindref="member">test_oops_stackcheck</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="913"><highlight class="normal">{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a42724a5de7e302dc381a1d140fb33a14" kindref="member">test_oops</ref>(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52a4156a6495ca0fe0867a17a91efc42e91" kindref="member">K_ERR_STACK_CHK_FAIL</ref>,<sp/><ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52a4156a6495ca0fe0867a17a91efc42e91" kindref="member">K_ERR_STACK_CHK_FAIL</ref>);</highlight></codeline>
<codeline lineno="915"><highlight class="normal">}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>z_impl_check_syscall_context(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="918"><highlight class="normal">{</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref><sp/>=<sp/><ref refid="group__isr__apis_1ga19fdde73c3b02fcca6cf1d1e67631228" kindref="member">irq_lock</ref>();</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__isr__apis_1ga646045943b3b2a130738bcc48867bf57" kindref="member">irq_unlock</ref>(<ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>that<sp/>interrupts<sp/>aren&apos;t<sp/>locked<sp/>when<sp/>handling<sp/>system<sp/>calls;</highlight></codeline>
<codeline lineno="924"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>key<sp/>has<sp/>the<sp/>previous<sp/>locking<sp/>state<sp/>before<sp/>the<sp/>above<sp/>irq_lock()<sp/>call.</highlight></codeline>
<codeline lineno="925"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="arch_2arc_2v2_2irq_8h_1adb441b26ed6818fea4ebba6b8853354b" kindref="member">arch_irq_unlocked</ref>(<ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>),<sp/></highlight><highlight class="stringliteral">&quot;irqs<sp/>locked<sp/>during<sp/>syscall&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>kernel<sp/>should<sp/>not<sp/>think<sp/>we<sp/>are<sp/>in<sp/>ISR<sp/>context<sp/>either<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gacc41f998b701997e4eafb6ed7b9d537c" kindref="member">zassert_false</ref>(<ref refid="group__isr__apis_1ga8482b0dd2283d12677a9ebe321667d16" kindref="member">k_is_in_isr</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;kernel<sp/>reports<sp/>irq<sp/>context&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>z_vrfy_check_syscall_context(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="933"><highlight class="normal">{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z_impl_check_syscall_context();</highlight></codeline>
<codeline lineno="935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;syscalls/check_syscall_context_mrsh.c&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2syscalls_2src_2main_8c_1a353abf0f9f153f8a4150180c5d6b94a2" kindref="member">test_syscall_context</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="939"><highlight class="normal">{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2userspace_2src_2test__syscall_8h_1ad908222998f8a453305a53a6bfccd867" kindref="member">check_syscall_context</ref>();</highlight></codeline>
<codeline lineno="941"><highlight class="normal">}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a12b0e4a5d20d812f15e98cf808c659d0" kindref="member">tls_leakage_user_part</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="944"><highlight class="normal">{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tls_area<sp/>=<sp/>p1;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_thread_userspace_local_data);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gacc41f998b701997e4eafb6ed7b9d537c" kindref="member">zassert_false</ref>(tls_area[i]<sp/>==<sp/>0xff,</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TLS<sp/>data<sp/>leakage<sp/>to<sp/>user<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="951"><highlight class="normal">}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a92b375461f0490f034ff5b7f85691c78" kindref="member">test_tls_leakage</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="954"><highlight class="normal">{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Tests<sp/>two<sp/>assertions:</highlight></codeline>
<codeline lineno="956"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="957"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>That<sp/>a<sp/>user<sp/>thread<sp/>has<sp/>full<sp/>access<sp/>to<sp/>its<sp/>TLS<sp/>area</highlight></codeline>
<codeline lineno="958"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>That<sp/>dropping<sp/>to<sp/>user<sp/>mode<sp/>doesn&apos;t<sp/>allow<sp/>any<sp/>TLS<sp/>data<sp/>set<sp/>in</highlight></codeline>
<codeline lineno="959"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>supervisor<sp/>mode<sp/>to<sp/>be<sp/>leaked</highlight></codeline>
<codeline lineno="960"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string_8h_1a4137694174d4ca2fad886a1db355015c" kindref="member">memset</ref>(_current-&gt;userspace_local_data,<sp/>0xff,</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>_thread_userspace_local_data));</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga3fbe1c8a5f3ef1c25382c7d6fca35764" kindref="member">k_thread_user_mode_enter</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a12b0e4a5d20d812f15e98cf808c659d0" kindref="member">tls_leakage_user_part</ref>,</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_current-&gt;userspace_local_data,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="967"><highlight class="normal">}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a8e683370cdd4bf561d5455f1d4019a43" kindref="member">tls_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="970"><highlight class="normal">{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;tls_entry\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a1c7815a2a676b69ec3bec1e23b4cf978" kindref="member">test_tls_pointer</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="975"><highlight class="normal">{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="threads_2thread__stack_2src_2main_8c_1aaf99baf6b57ceed1a2949db9e149af47" kindref="member">test_thread</ref>,<sp/>test_stack,<sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a21d9543c516fffee84a7963224271f95" kindref="member">STACKSIZE</ref>,<sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a8e683370cdd4bf561d5455f1d4019a43" kindref="member">tls_entry</ref>,</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>NULL,<sp/>1,<sp/><ref refid="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" kindref="member">K_USER</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;tls<sp/>pointer<sp/>for<sp/>thread<sp/>%p:<sp/>%p\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="threads_2thread__stack_2src_2main_8c_1aaf99baf6b57ceed1a2949db9e149af47" kindref="member">test_thread</ref>,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<ref refid="threads_2thread__stack_2src_2main_8c_1aaf99baf6b57ceed1a2949db9e149af47" kindref="member">test_thread</ref>.userspace_local_data);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;stack<sp/>buffer<sp/>reported<sp/>bounds:<sp/>[%p,<sp/>%p)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<ref refid="threads_2thread__stack_2src_2main_8c_1aaf99baf6b57ceed1a2949db9e149af47" kindref="member">test_thread</ref>.<ref refid="structk__thread_1a8be452e7b016fc901adad8518d7fe518" kindref="member">stack_info</ref>.start,</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(<ref refid="threads_2thread__stack_2src_2main_8c_1aaf99baf6b57ceed1a2949db9e149af47" kindref="member">test_thread</ref>.<ref refid="structk__thread_1a8be452e7b016fc901adad8518d7fe518" kindref="member">stack_info</ref>.start<sp/>+</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="threads_2thread__stack_2src_2main_8c_1aaf99baf6b57ceed1a2949db9e149af47" kindref="member">test_thread</ref>.<ref refid="structk__thread_1a8be452e7b016fc901adad8518d7fe518" kindref="member">stack_info</ref>.size));</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;stack<sp/>object<sp/>bounds:<sp/>[%p,<sp/>%p)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_stack,<sp/>test_stack<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test_stack));</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>tls_start<sp/>=<sp/>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>)<ref refid="threads_2thread__stack_2src_2main_8c_1aaf99baf6b57ceed1a2949db9e149af47" kindref="member">test_thread</ref>.userspace_local_data;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>tls_end<sp/>=<sp/>tls_start<sp/>+</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>_thread_userspace_local_data);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((tls_start<sp/>&lt;<sp/>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>)test_stack)<sp/>||</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tls_end<sp/>&gt;<sp/>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>)test_stack<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test_stack)))<sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;tls<sp/>area<sp/>out<sp/>of<sp/>bounds\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ztest__assert_8h_1acd6eb423f54dce8544f7c3b1618c0374" kindref="member">ztest_test_fail</ref>();</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="999"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="common_2src_2main_8c_1a8a4533f287d99bb2d7c24c0e29c9a449" kindref="member">test_main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Most<sp/>of<sp/>these<sp/>scenarios<sp/>use<sp/>the<sp/>default<sp/>domain<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition</ref>(&amp;<ref refid="group__mem__domain__apis_1ga3613abdb546a66059fa3f621a2ebd41a" kindref="member">k_mem_domain_default</ref>,<sp/>&amp;default_part);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>add<sp/>default<sp/>memory<sp/>partition<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1abde5aa8ca5e64a045b25b88f91370dcd" kindref="member">k_oops</ref>();</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_ARM64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">z_arm64_thread_stack_header<sp/>*hdr;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*vhdr<sp/>=<sp/>((</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">z_arm64_thread_stack_header<sp/>*)<ref refid="mem__protect_2userspace_2src_2main_8c_1a818c8f20ac7ad831b44efa0615e1bb9e" kindref="member">ztest_thread_stack</ref>);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdr<sp/>=<sp/>vhdr;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>priv_stack_ptr<sp/>=<sp/>(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;hdr-&gt;privilege_stack)<sp/>+</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hdr-&gt;privilege_stack)<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CONFIG_ARM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>priv_stack_ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)z_priv_stack_find(<ref refid="mem__protect_2userspace_2src_2main_8c_1a818c8f20ac7ad831b44efa0615e1bb9e" kindref="member">ztest_thread_stack</ref>);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CONFIG_X86)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">z_x86_thread_stack_header<sp/>*hdr;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*vhdr<sp/>=<sp/>((</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">z_x86_thread_stack_header<sp/>*)<ref refid="mem__protect_2userspace_2src_2main_8c_1a818c8f20ac7ad831b44efa0615e1bb9e" kindref="member">ztest_thread_stack</ref>);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdr<sp/>=<sp/>vhdr;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>priv_stack_ptr<sp/>=<sp/>(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;hdr-&gt;privilege_stack)<sp/>+</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hdr-&gt;privilege_stack)<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CONFIG_RISCV)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_GEN_PRIV_STACKS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>priv_stack_ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)z_priv_stack_find(<ref refid="mem__protect_2userspace_2src_2main_8c_1a818c8f20ac7ad831b44efa0615e1bb9e" kindref="member">ztest_thread_stack</ref>);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_thread_arch<sp/>*thread_struct;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_struct<sp/>=<sp/>((</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_thread_arch<sp/>*)<sp/><ref refid="mem__protect_2userspace_2src_2main_8c_1a818c8f20ac7ad831b44efa0615e1bb9e" kindref="member">ztest_thread_stack</ref>);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>priv_stack_ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)thread_struct-&gt;priv_stack_start<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="1038"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gafec540511e6d2e0a074a5bfb515c53b0" kindref="member">k_thread_access_grant</ref>(<ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>(),</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="threads_2thread__stack_2src_2main_8c_1aaf99baf6b57ceed1a2949db9e149af47" kindref="member">test_thread</ref>,<sp/>&amp;test_stack,</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;test_revoke_sem,<sp/>&amp;kpipe);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga2ad3ecbbedb04310c6a4ac997a8d3550" kindref="member">ztest_test_suite</ref>(userspace,</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a1e80606656db38389c306160294d6ae6" kindref="member">test_is_usermode</ref>),</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a7ef2f1a0c2724bd8546e289f325765dc" kindref="member">test_write_control</ref>),</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a3bf6b7786090c7f625b454c972a9c16a" kindref="member">test_disable_mmu_mpu</ref>),</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a0cfcb7f7a7fda9f734a0401c161e0564" kindref="member">test_read_kernram</ref>),</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1af120025e84ef5281c3826b58044a6eba" kindref="member">test_write_kernram</ref>),</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1ae1f018e6507dbd115ffb3f1d27814620" kindref="member">test_write_kernro</ref>),</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1af8960a284a5af1fceeef31db01980aba" kindref="member">test_write_kerntext</ref>),</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1aa6a9be1356784c7c545bb0a0738f1395" kindref="member">test_read_kernel_data</ref>),</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a86c6d565f76814cbc114ac9c482a7d7b" kindref="member">test_write_kernel_data</ref>),</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(test_read_priv_stack),</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a5852445ea3966748d4fbe92bf95d0c0f" kindref="member">test_write_priv_stack</ref>),</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(test_pass_user_object),</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a024f46fba0857cf4a46bcfb8bf836bc6" kindref="member">test_pass_noperms_object</ref>),</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1ab9c5c524d21e393b7414351561e8dd8d" kindref="member">test_start_kernel_thread</ref>),</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gab5438441a57724ddf51e6dda62e2681b" kindref="member">ztest_1cpu_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a3b47e253bd17e8c09b71a09d79aaf6a0" kindref="member">test_read_other_stack</ref>),</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gab5438441a57724ddf51e6dda62e2681b" kindref="member">ztest_1cpu_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a95880eeeba13e753aa18dab644585d5f" kindref="member">test_write_other_stack</ref>),</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a83325c0cf88a98c1f5c4a534a15acc24" kindref="member">test_revoke_noperms_object</ref>),</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a8d4bd4391e15dab47384abd6e785b2ba" kindref="member">test_access_after_revoke</ref>),</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a102d0cb4a61c5ed72e85e1b4947e5069" kindref="member">test_user_mode_enter</ref>),</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(test_write_kobject_user_pipe),</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a2ad3e5df1022453b9ceaaedef4f55da2" kindref="member">test_read_kobject_user_pipe</ref>),</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6bec709a2a48c6065e6f5e01fea69685" kindref="member">ztest_1cpu_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1af9925ef21ba2d64a8d22fe2e1172ecfd" kindref="member">test_init_and_access_other_memdomain</ref>),</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a5c5a6a6cc4ed58164484de4240a95daf" kindref="member">test_domain_add_thread_drop_to_user</ref>),</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a2e5664cbf6ccabfb6134a8ff1056ee83" kindref="member">test_domain_add_part_drop_to_user</ref>),</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a3fbb0579c9ceea5b59aaa447e978c26f" kindref="member">test_domain_remove_part_drop_to_user</ref>),</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1af70f25f78d130e86b1c8cc9bc3b2ca8c" kindref="member">test_domain_add_thread_context_switch</ref>),</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a1e8cca7a9037aecad4418a5f22f89f9e" kindref="member">test_domain_add_part_context_switch</ref>),</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a31de57d8a544c8eed44988b82eb5a978" kindref="member">test_domain_remove_part_context_switch</ref>),</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1ac42336e75069db295b2df173162abba8" kindref="member">test_unimplemented_syscall</ref>),</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a9e492796b6eea50abd7b8896b8f2b967" kindref="member">test_bad_syscall</ref>),</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1aa59bf93d5b7875b7d5892da9a672fcba" kindref="member">test_oops_panic</ref>),</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1ae5170cb0477d7c7ed468e920513f8e51" kindref="member">test_oops_oops</ref>),</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a6f3340191e5aef60d839ba6360098623" kindref="member">test_oops_exception</ref>),</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a0e19293f9c8637a4cfe1c66a5f899e09" kindref="member">test_oops_maxint</ref>),</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a414be5515f6aa8df56628f37d900c51b" kindref="member">test_oops_stackcheck</ref>),</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a2892b69e433ac5f13e75d21d9d02eb4a" kindref="member">test_object_recycle</ref>),</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="mem__protect_2syscalls_2src_2main_8c_1a353abf0f9f153f8a4150180c5d6b94a2" kindref="member">test_syscall_context</ref>),</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a92b375461f0490f034ff5b7f85691c78" kindref="member">test_tls_leakage</ref>),</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="mem__protect_2userspace_2src_2main_8c_1a1c7815a2a676b69ec3bec1e23b4cf978" kindref="member">test_tls_pointer</ref>)</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga7f76df4df4bf68a605b923fed8e5465c" kindref="member">ztest_run_test_suite</ref>(userspace);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/kernel/mem_protect/userspace/src/main.c"/>
  </compounddef>
</doxygen>
