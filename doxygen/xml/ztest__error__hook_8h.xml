<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="ztest__error__hook_8h" kind="file" language="C++">
    <compoundname>ztest_error_hook.h</compoundname>
    <includes local="no">zephyr.h</includes>
    <includedby refid="condvar_2condvar__api_2src_2main_8c" local="no">tests/kernel/condvar/condvar_api/src/main.c</includedby>
    <includedby refid="events_2sys__event_2src_2main_8c" local="no">tests/kernel/events/sys_event/src/main.c</includedby>
    <includedby refid="test__mutex__error_8c" local="no">tests/kernel/mutex/mutex_error_case/src/test_mutex_error.c</includedby>
    <includedby refid="test__pipe__fail_8c" local="no">tests/kernel/pipe/pipe_api/src/test_pipe_fail.c</includedby>
    <includedby refid="test__poll__fail_8c" local="no">tests/kernel/poll/src/test_poll_fail.c</includedby>
    <includedby refid="test__queue_8h" local="no">tests/kernel/queue/src/test_queue.h</includedby>
    <includedby refid="user__api_8c" local="no">tests/kernel/sched/schedule_api/src/user_api.c</includedby>
    <includedby refid="semaphore_2semaphore_2src_2main_8c" local="no">tests/kernel/semaphore/semaphore/src/main.c</includedby>
    <includedby refid="semaphore_2sys__sem_2src_2main_8c" local="no">tests/kernel/semaphore/sys_sem/src/main.c</includedby>
    <includedby refid="test__stack__fail_8c" local="no">tests/kernel/stack/stack/src/test_stack_fail.c</includedby>
    <includedby refid="threads_2thread__error__case_2src_2main_8c" local="no">tests/kernel/threads/thread_error_case/src/main.c</includedby>
    <includedby refid="timer_2timer__error__case_2src_2main_8c" local="no">tests/kernel/timer/timer_error_case/src/main.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>subsys/testsuite/ztest/include/ztest_error_hook.h</label>
        <link refid="ztest__error__hook_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>subsys/testsuite/ztest/include/ztest_error_hook.h</label>
        <link refid="ztest__error__hook_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>tests/kernel/condvar/condvar_api/src/main.c</label>
        <link refid="condvar_2condvar__api_2src_2main_8c"/>
      </node>
      <node id="3">
        <label>tests/kernel/events/sys_event/src/main.c</label>
        <link refid="events_2sys__event_2src_2main_8c"/>
      </node>
      <node id="4">
        <label>tests/kernel/mutex/mutex_error_case/src/test_mutex_error.c</label>
        <link refid="test__mutex__error_8c"/>
      </node>
      <node id="5">
        <label>tests/kernel/pipe/pipe_api/src/test_pipe_fail.c</label>
        <link refid="test__pipe__fail_8c"/>
      </node>
      <node id="6">
        <label>tests/kernel/poll/src/test_poll_fail.c</label>
        <link refid="test__poll__fail_8c"/>
      </node>
      <node id="8">
        <label>tests/kernel/queue/src/main.c</label>
        <link refid="queue_2src_2main_8c"/>
      </node>
      <node id="7">
        <label>tests/kernel/queue/src/test_queue.h</label>
        <link refid="test__queue_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>tests/kernel/queue/src/test_queue_contexts.c</label>
        <link refid="test__queue__contexts_8c"/>
      </node>
      <node id="10">
        <label>tests/kernel/queue/src/test_queue_fail.c</label>
        <link refid="test__queue__fail_8c"/>
      </node>
      <node id="11">
        <label>tests/kernel/queue/src/test_queue_loop.c</label>
        <link refid="test__queue__loop_8c"/>
      </node>
      <node id="12">
        <label>tests/kernel/queue/src/test_queue_user.c</label>
        <link refid="test__queue__user_8c"/>
      </node>
      <node id="13">
        <label>tests/kernel/sched/schedule_api/src/user_api.c</label>
        <link refid="user__api_8c"/>
      </node>
      <node id="14">
        <label>tests/kernel/semaphore/semaphore/src/main.c</label>
        <link refid="semaphore_2semaphore_2src_2main_8c"/>
      </node>
      <node id="15">
        <label>tests/kernel/semaphore/sys_sem/src/main.c</label>
        <link refid="semaphore_2sys__sem_2src_2main_8c"/>
      </node>
      <node id="16">
        <label>tests/kernel/stack/stack/src/test_stack_fail.c</label>
        <link refid="test__stack__fail_8c"/>
      </node>
      <node id="17">
        <label>tests/kernel/threads/thread_error_case/src/main.c</label>
        <link refid="threads_2thread__error__case_2src_2main_8c"/>
      </node>
      <node id="18">
        <label>tests/kernel/timer/timer_error_case/src/main.c</label>
        <link refid="timer_2timer__error__case_2src_2main_8c"/>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2020<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_ZTEST_FATAL_HOOK_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_ZTEST_FATAL_HOOK_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zephyr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_ZTEST_FATAL_HOOK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ztest_set_fault_valid(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@brief<sp/>A<sp/>hook<sp/>after<sp/>fatal<sp/>error<sp/>handler</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>@details<sp/>This<sp/>is<sp/>a<sp/>test<sp/>case<sp/>hook<sp/>that<sp/>can<sp/>run<sp/>code<sp/>from<sp/>test<sp/>case,<sp/>in</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>order<sp/>to<sp/>deal<sp/>with<sp/>some<sp/>special<sp/>case<sp/>when<sp/>catching<sp/>the<sp/>expected<sp/>fatal</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>error.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>Usage:<sp/>Define<sp/>your<sp/>own<sp/>hook<sp/>function<sp/>in<sp/>your<sp/>test<sp/>case<sp/>code,<sp/>and<sp/>do<sp/>what</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>you<sp/>want<sp/>to<sp/>do<sp/>after<sp/>fatal<sp/>error<sp/>handler.</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>By<sp/>default,<sp/>it<sp/>will<sp/>do<sp/>nothing<sp/>before<sp/>leaving<sp/>error<sp/>handler.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__mutex__error_8c_1a5aa0aa74980cc731ad5fe242b8dbbd5f" kindref="member">ztest_post_fatal_error_hook</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reason,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>z_arch_esf_t<sp/>*pEsf);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_ZTEST_ASSERT_HOOK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ztest_set_assert_valid(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@brief<sp/>A<sp/>hook<sp/>after<sp/>assert<sp/>fault<sp/>handler</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>@details<sp/>This<sp/>is<sp/>a<sp/>test<sp/>case<sp/>hook<sp/>that<sp/>can<sp/>run<sp/>code<sp/>from<sp/>test<sp/>case,<sp/>in</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>order<sp/>to<sp/>deal<sp/>with<sp/>some<sp/>special<sp/>case<sp/>when<sp/>catching<sp/>the<sp/>expected<sp/>assert</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>failed.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>Usage:<sp/>Define<sp/>your<sp/>own<sp/>hook<sp/>function<sp/>in<sp/>your<sp/>test<sp/>case<sp/>code,<sp/>and<sp/>do<sp/>what</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>you<sp/>want<sp/>to<sp/>do<sp/>after<sp/>assert<sp/>handler.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>By<sp/>default,<sp/>it<sp/>will<sp/>abort<sp/>the<sp/>thread<sp/>which<sp/>assert<sp/>failed.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ztest_post_assert_fail_hook(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_ZTEST_FATAL_HOOK)<sp/>||<sp/>defined(CONFIG_ZTEST_ASSERT_HOOK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;syscalls/ztest_error_hook.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_ZTEST_FATAL_HOOK_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="subsys/testsuite/ztest/include/ztest_error_hook.h"/>
  </compounddef>
</doxygen>
