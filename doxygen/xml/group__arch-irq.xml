<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__arch-irq" kind="group">
    <compoundname>arch-irq</compoundname>
    <title>Architecture-specific IRQ APIs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__arch-irq_1ga25bca3069cb999b6d4f924b87bf7de38" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
        <definition>static unsigned int arch_irq_lock</definition>
        <argsstring>(void)</argsstring>
        <name>arch_irq_lock</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lock interrupts on the current CPU</para>
<para><simplesect kind="see"><para><ref refid="group__isr__apis_1ga19fdde73c3b02fcca6cf1d1e67631228" kindref="member">irq_lock()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="247" column="28" declfile="include/sys/arch_interface.h" declline="247" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-irq_1gaa2b2745d8e99b8730b44805f4d3bbf05" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void arch_irq_unlock</definition>
        <argsstring>(unsigned int key)</argsstring>
        <name>arch_irq_unlock</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unlock interrupts on the current CPU</para>
<para><simplesect kind="see"><para><ref refid="group__isr__apis_1ga646045943b3b2a130738bcc48867bf57" kindref="member">irq_unlock()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="254" column="20" declfile="include/sys/arch_interface.h" declline="254" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-irq_1ga1b827afafc622d412962f568b78726dc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool arch_irq_unlocked</definition>
        <argsstring>(unsigned int key)</argsstring>
        <name>arch_irq_unlocked</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test if calling <ref refid="group__arch-irq_1gaa2b2745d8e99b8730b44805f4d3bbf05" kindref="member">arch_irq_unlock()</ref> with this key would unlock irqs</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>value returned by <ref refid="group__arch-irq_1ga25bca3069cb999b6d4f924b87bf7de38" kindref="member">arch_irq_lock()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if interrupts were unlocked prior to the <ref refid="group__arch-irq_1ga25bca3069cb999b6d4f924b87bf7de38" kindref="member">arch_irq_lock()</ref> call that produced the key argument. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="263" column="20" declfile="include/sys/arch_interface.h" declline="263" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-irq_1ga216d692e87bfba955a60f8e570e127df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arch_irq_disable</definition>
        <argsstring>(unsigned int irq)</argsstring>
        <name>arch_irq_disable</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>irq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disable the specified interrupt line</para>
<para><simplesect kind="note"><para>: The behavior of interrupts that arrive after this call returns and before the corresponding call to <ref refid="group__arch-irq_1gaa278d630653b33cb339621d725ed295a" kindref="member">arch_irq_enable()</ref> is undefined. The hardware is not required to latch and deliver such an interrupt, though on some architectures that may work. Other architectures will simply lose such an interrupt and never deliver it. Many drivers and subsystems are not tolerant of such dropped interrupts and it is the job of the application layer to ensure that behavior remains correct.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__isr__apis_1ga82c3a15d812f58e0f6525f358d031e6d" kindref="member">irq_disable()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="279" column="6" declfile="include/sys/arch_interface.h" declline="279" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-irq_1gaa278d630653b33cb339621d725ed295a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arch_irq_enable</definition>
        <argsstring>(unsigned int irq)</argsstring>
        <name>arch_irq_enable</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>irq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable the specified interrupt line</para>
<para><simplesect kind="see"><para><ref refid="group__isr__apis_1ga7ea700ee31e4ff036c997a554dbedfeb" kindref="member">irq_enable()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="286" column="6" declfile="include/sys/arch_interface.h" declline="286" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-irq_1ga3bd8e963a124421bb372dab4bdc6cd83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arch_irq_is_enabled</definition>
        <argsstring>(unsigned int irq)</argsstring>
        <name>arch_irq_is_enabled</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>irq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test if an interrupt line is enabled</para>
<para><simplesect kind="see"><para><ref refid="group__isr__apis_1ga71fef3867ba9818cf0a5baf8410a6354" kindref="member">irq_is_enabled()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="293" column="5" declfile="include/sys/arch_interface.h" declline="293" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-irq_1gaa4d733913e12a12e104dc4781cca7308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arch_irq_connect_dynamic</definition>
        <argsstring>(unsigned int irq, unsigned int priority, void(*routine)(const void *parameter), const void *parameter, uint32_t flags)</argsstring>
        <name>arch_irq_connect_dynamic</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>irq</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>priority</declname>
        </param>
        <param>
          <type>void(*)(const void *parameter)</type>
          <declname>routine</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Arch-specific hook to install a dynamic interrupt.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>irq</parametername>
</parameternamelist>
<parameterdescription>
<para>IRQ line number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt priority </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>routine</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt service routine </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>ISR parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Arch-specific IRQ configuration flag</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector assigned to this interrupt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="306" column="5" declfile="include/sys/arch_interface.h" declline="306" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-irq_1gaac8f60e7dfc5ce3222372798e96316ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
        <definition>unsigned int arch_irq_allocate</definition>
        <argsstring>(void)</argsstring>
        <name>arch_irq_allocate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Arch-specific hook for allocating IRQs. </para>
        </briefdescription>
        <detaileddescription>
<para>Note: disable/enable IRQ relevantly inside the implementation of such function to avoid concurrency issues. Also, an allocated IRQ is assumed to be used thus a following <simplesect kind="see"><para><ref refid="group__arch-irq_1ga5c85d7bf54a83190ed27587dc5a01de5" kindref="member">arch_irq_is_used()</ref> should return <ref refid="stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7" kindref="member">true</ref>.</para>
</simplesect>
<simplesect kind="return"><para>The newly allocated IRQ or UINT_MAX on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="364" column="14" declfile="include/sys/arch_interface.h" declline="364" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-irq_1ga5f0942bd035c50c9d2d91ada472f37c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arch_irq_set_used</definition>
        <argsstring>(unsigned int irq)</argsstring>
        <name>arch_irq_set_used</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>irq</declname>
        </param>
        <briefdescription>
<para>Arch-specific hook for declaring an IRQ being used. </para>
        </briefdescription>
        <detaileddescription>
<para>Note: disable/enable IRQ relevantly inside the implementation of such function to avoid concurrency issues.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>irq</parametername>
</parameternamelist>
<parameterdescription>
<para>the IRQ to declare being used </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="374" column="6" declfile="include/sys/arch_interface.h" declline="374" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-irq_1ga5c85d7bf54a83190ed27587dc5a01de5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool arch_irq_is_used</definition>
        <argsstring>(unsigned int irq)</argsstring>
        <name>arch_irq_is_used</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>irq</declname>
        </param>
        <briefdescription>
<para>Arch-specific hook for checking if an IRQ is being used already. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>irq</parametername>
</parameternamelist>
<parameterdescription>
<para>the IRQ to check</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if being, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="383" column="6" declfile="include/sys/arch_interface.h" declline="383" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-irq_1ga1dda03646da3989f08a3bad1b258c691" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool arch_is_in_isr</definition>
        <argsstring>(void)</argsstring>
        <name>arch_is_in_isr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test if the current context is in interrupt context</para>
<para>XXX: This is inconsistently handled among arches wrt exception context See: #17656</para>
<para><simplesect kind="return"><para>true if we are in interrupt context </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kernel/include/kernel_arch_interface.h" line="238" column="20" declfile="kernel/include/kernel_arch_interface.h" declline="238" declcolumn="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
