<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__can__isotp" kind="group">
    <compoundname>can_isotp</compoundname>
    <title>CAN ISO-TP Interface</title>
    <innerclass refid="structisotp__msg__id" prot="public">isotp_msg_id</innerclass>
    <innerclass refid="structisotp__fc__opts" prot="public">isotp_fc_opts</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__can__isotp_1gad4f9c0d3f847d453ea662128db2603bb" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* isotp_tx_callback_t) (int error_nr, void *arg)</definition>
        <argsstring>)(int error_nr, void *arg)</argsstring>
        <name>isotp_tx_callback_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="175" column="9" bodyfile="include/canbus/isotp.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__can__isotp_1ga6896dc5d603b9776228e2b28d8688bd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isotp_bind</definition>
        <argsstring>(struct isotp_recv_ctx *ctx, const struct device *can_dev, const struct isotp_msg_id *rx_addr, const struct isotp_msg_id *tx_addr, const struct isotp_fc_opts *opts, k_timeout_t timeout)</argsstring>
        <name>isotp_bind</name>
        <param>
          <type>struct isotp_recv_ctx *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>can_dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structisotp__msg__id" kindref="compound">isotp_msg_id</ref> *</type>
          <declname>rx_addr</declname>
        </param>
        <param>
          <type>const struct <ref refid="structisotp__msg__id" kindref="compound">isotp_msg_id</ref> *</type>
          <declname>tx_addr</declname>
        </param>
        <param>
          <type>const struct <ref refid="structisotp__fc__opts" kindref="compound">isotp_fc_opts</ref> *</type>
          <declname>opts</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Bind an address to a receiving context. </para>
        </briefdescription>
        <detaileddescription>
<para>This function binds an RX and TX address combination to an RX context. When data arrives from the specified address, it is buffered and can be read by calling isotp_recv. When calling this routine, a filter is applied in the CAN device, and the context is initialized. The context must be valid until calling unbind.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Context to store the internal states. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>can_dev</parametername>
</parameternamelist>
<parameterdescription>
<para>The CAN device to be used for sending and receiving. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier for incoming data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tx_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier for FC frames. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opts</parametername>
</parameternamelist>
<parameterdescription>
<para>Flow control options. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout for FF SF buffer allocation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>ISOTP_N_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ISOTP_NO_FREE_FILTER</parametername>
</parameternamelist>
<parameterdescription>
<para>if CAN device has no filters left. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="199" column="5" declfile="include/canbus/isotp.h" declline="199" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__can__isotp_1ga88746b8a5754edf7ec7a4a72fb88682f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void isotp_unbind</definition>
        <argsstring>(struct isotp_recv_ctx *ctx)</argsstring>
        <name>isotp_unbind</name>
        <param>
          <type>struct isotp_recv_ctx *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Unbind a context from the interface. </para>
        </briefdescription>
        <detaileddescription>
<para>This function removes the binding from isotp_bind. The filter is detached from the CAN device, and if a transmission is ongoing, buffers are freed. The context can be discarded safely after calling this function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Context that should be unbound. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="215" column="6" declfile="include/canbus/isotp.h" declline="215" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__can__isotp_1ga5181d483961f496a02503240fea3f7ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isotp_recv</definition>
        <argsstring>(struct isotp_recv_ctx *ctx, uint8_t *data, size_t len, k_timeout_t timeout)</argsstring>
        <name>isotp_recv</name>
        <param>
          <type>struct isotp_recv_ctx *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Read out received data from fifo. </para>
        </briefdescription>
        <detaileddescription>
<para>This function reads the data from the receive FIFO of the context. It blocks if the FIFO is empty. If an error occurs, the function returns a negative number and leaves the data buffer unchanged.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Context that is already bound. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a buffer where the data is copied to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout for incoming data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Number</parametername>
</parameternamelist>
<parameterdescription>
<para>of bytes copied on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ISOTP_WAIT_TIMEOUT</parametername>
</parameternamelist>
<parameterdescription>
<para>when &quot;timeout&quot; timed out </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ISOTP_N_*</parametername>
</parameternamelist>
<parameterdescription>
<para>on error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="234" column="5" declfile="include/canbus/isotp.h" declline="234" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__can__isotp_1gaaeec9de1c05c373667b917294ffe67db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isotp_recv_net</definition>
        <argsstring>(struct isotp_recv_ctx *ctx, struct net_buf **buffer, k_timeout_t timeout)</argsstring>
        <name>isotp_recv_net</name>
        <param>
          <type>struct isotp_recv_ctx *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> **</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Get the net buffer on data reception. </para>
        </briefdescription>
        <detaileddescription>
<para>This function reads incoming data into net-buffers. It blocks until the entire packet is received, BS is reached, or an error occurred. If BS was zero, the data is in a single <ref refid="structnet__buf" kindref="compound">net_buf</ref>. Otherwise, the data is fragmented in chunks of BS size. The net-buffers are referenced and must be freed with net_buf_unref after the data is processed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Context that is already bound. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer where the <ref refid="structnet__buf" kindref="compound">net_buf</ref> pointer is written to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout for incoming data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Remaining</parametername>
</parameternamelist>
<parameterdescription>
<para>data length for this transfer if BS &gt; 0, 0 for BS = 0 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ISOTP_WAIT_TIMEOUT</parametername>
</parameternamelist>
<parameterdescription>
<para>when &quot;timeout&quot; timed out </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ISOTP_N_*</parametername>
</parameternamelist>
<parameterdescription>
<para>on error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="255" column="5" declfile="include/canbus/isotp.h" declline="255" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__can__isotp_1ga9fe9f694e4e04faba406d14cddd72dbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isotp_send</definition>
        <argsstring>(struct isotp_send_ctx *ctx, const struct device *can_dev, const uint8_t *data, size_t len, const struct isotp_msg_id *tx_addr, const struct isotp_msg_id *rx_addr, isotp_tx_callback_t complete_cb, void *cb_arg)</argsstring>
        <name>isotp_send</name>
        <param>
          <type>struct isotp_send_ctx *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>can_dev</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const struct <ref refid="structisotp__msg__id" kindref="compound">isotp_msg_id</ref> *</type>
          <declname>tx_addr</declname>
        </param>
        <param>
          <type>const struct <ref refid="structisotp__msg__id" kindref="compound">isotp_msg_id</ref> *</type>
          <declname>rx_addr</declname>
        </param>
        <param>
          <type><ref refid="group__can__isotp_1gad4f9c0d3f847d453ea662128db2603bb" kindref="member">isotp_tx_callback_t</ref></type>
          <declname>complete_cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cb_arg</declname>
        </param>
        <briefdescription>
<para>Send data. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is used to send data to a peer that listens to the tx_addr. An internal work-queue is used to transfer the segmented data. Data and context must be valid until the transmission has finished. If a complete_cb is given, this function is non-blocking, and the callback is called on completion with the return value as a parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Context to store the internal states. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>can_dev</parametername>
</parameternamelist>
<parameterdescription>
<para>The CAN device to be used for sending and receiving. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be sent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the data to be sent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier for FC frames. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tx_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier for outgoing frames the receiver listens on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>complete_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Function called on completion or NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument passed to the complete callback.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>ISOTP_N_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ISOTP_N_*</parametername>
</parameternamelist>
<parameterdescription>
<para>on error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="279" column="5" declfile="include/canbus/isotp.h" declline="279" declcolumn="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__can__isotp_1gab7daaebbc303665beb2946ce077d5312" prot="public" static="no">
        <name>ISOTP_N_OK</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Completed successfully </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="49" column="9" bodyfile="include/canbus/isotp.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__isotp_1ga8298423e96932f94308f3064755d18fb" prot="public" static="no">
        <name>ISOTP_N_TIMEOUT_A</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ar/As has timed out </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="52" column="9" bodyfile="include/canbus/isotp.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__isotp_1ga9e525bb24928a2656e7cd2842b306553" prot="public" static="no">
        <name>ISOTP_N_TIMEOUT_BS</name>
        <initializer>-2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reception of next FC has timed out </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="55" column="9" bodyfile="include/canbus/isotp.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__isotp_1ga77b802df46c66ed6002f143b57f73b7a" prot="public" static="no">
        <name>ISOTP_N_TIMEOUT_CR</name>
        <initializer>-3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cr has timed out </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="58" column="9" bodyfile="include/canbus/isotp.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__isotp_1ga9caa5677a171e1bd0be06ebb6b006046" prot="public" static="no">
        <name>ISOTP_N_WRONG_SN</name>
        <initializer>-4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unexpected sequence number </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="61" column="9" bodyfile="include/canbus/isotp.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__isotp_1ga99312831df8e1822f02b41e3fccc0661" prot="public" static="no">
        <name>ISOTP_N_INVALID_FS</name>
        <initializer>-5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invalid flow status received </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="64" column="9" bodyfile="include/canbus/isotp.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__isotp_1ga45e3bfdd3948be6ccb3daec5db412b78" prot="public" static="no">
        <name>ISOTP_N_UNEXP_PDU</name>
        <initializer>-6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unexpected PDU received </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="67" column="9" bodyfile="include/canbus/isotp.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__isotp_1gad6bcb7b6fb8ab30da1a4ddeabe3e3178" prot="public" static="no">
        <name>ISOTP_N_WFT_OVRN</name>
        <initializer>-7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum number of WAIT flowStatus PDUs exceeded </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="70" column="9" bodyfile="include/canbus/isotp.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__isotp_1ga1b8e6b35a637b5f98e7a2ab4270efd41" prot="public" static="no">
        <name>ISOTP_N_BUFFER_OVERFLW</name>
        <initializer>-8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>FlowStatus OVFLW PDU was received </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="73" column="9" bodyfile="include/canbus/isotp.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__isotp_1ga0805646e65d39a9e2f15e110720887ca" prot="public" static="no">
        <name>ISOTP_N_ERROR</name>
        <initializer>-9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>General error </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="76" column="9" bodyfile="include/canbus/isotp.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__isotp_1gaf0624cd5e7d12e94f4a739bc47ee0361" prot="public" static="no">
        <name>ISOTP_NO_FREE_FILTER</name>
        <initializer>-10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Implementation specific errors Can&apos;t bind or send because the CAN device has no filter left </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="81" column="9" bodyfile="include/canbus/isotp.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__isotp_1ga901f61175e228a70c2f882bc999caea6" prot="public" static="no">
        <name>ISOTP_NO_NET_BUF_LEFT</name>
        <initializer>-11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>No net buffer left to allocate </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="84" column="9" bodyfile="include/canbus/isotp.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__isotp_1gaed5270f0ee489128adb8c2ea481c6c77" prot="public" static="no">
        <name>ISOTP_NO_BUF_DATA_LEFT</name>
        <initializer>-12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Not sufficient space in the buffer left for the data </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="87" column="9" bodyfile="include/canbus/isotp.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__isotp_1gac5cb1fafeb8aa5cf9fe1695612671c7d" prot="public" static="no">
        <name>ISOTP_NO_CTX_LEFT</name>
        <initializer>-13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>No context buffer left to allocate </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="90" column="9" bodyfile="include/canbus/isotp.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__isotp_1gaa3e873d4a80ee128f1858520874f93b6" prot="public" static="no">
        <name>ISOTP_RECV_TIMEOUT</name>
        <initializer>-14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Timeout for recv </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="93" column="9" bodyfile="include/canbus/isotp.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__isotp_1gaedb0e7330d19b1cdc380c0b36cabf2f5" prot="public" static="no">
        <name>ISOTP_FIXED_ADDR_SA_POS</name>
        <initializer>(0U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Position of fixed source address (SA) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="107" column="9" bodyfile="include/canbus/isotp.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__isotp_1ga2a9cbfd95bae05a9f7433f3b1c58689e" prot="public" static="no">
        <name>ISOTP_FIXED_ADDR_SA_MASK</name>
        <initializer>(0xFF &lt;&lt; <ref refid="group__can__isotp_1gaedb0e7330d19b1cdc380c0b36cabf2f5" kindref="member">ISOTP_FIXED_ADDR_SA_POS</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mask to obtain fixed source address (SA) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="110" column="9" bodyfile="include/canbus/isotp.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__isotp_1ga2b64d4dffde99159ae5120586364e1c6" prot="public" static="no">
        <name>ISOTP_FIXED_ADDR_TA_POS</name>
        <initializer>(8U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Position of fixed target address (TA) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="113" column="9" bodyfile="include/canbus/isotp.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__isotp_1ga5d5415982e04e506c9b045bfbe2be337" prot="public" static="no">
        <name>ISOTP_FIXED_ADDR_TA_MASK</name>
        <initializer>(0xFF &lt;&lt; <ref refid="group__can__isotp_1ga2b64d4dffde99159ae5120586364e1c6" kindref="member">ISOTP_FIXED_ADDR_TA_POS</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mask to obtain fixed target address (TA) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="116" column="9" bodyfile="include/canbus/isotp.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__isotp_1ga29f8806889f4e41c1529c35a56ee98a9" prot="public" static="no">
        <name>ISOTP_FIXED_ADDR_PRIO_POS</name>
        <initializer>(26U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Position of priority in fixed addressing mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="119" column="9" bodyfile="include/canbus/isotp.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__isotp_1gab5dc33148923e7cd58b438a8906d1ace" prot="public" static="no">
        <name>ISOTP_FIXED_ADDR_PRIO_MASK</name>
        <initializer>(0x7 &lt;&lt; <ref refid="group__can__isotp_1ga29f8806889f4e41c1529c35a56ee98a9" kindref="member">ISOTP_FIXED_ADDR_PRIO_POS</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mask for priority in fixed addressing mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="122" column="9" bodyfile="include/canbus/isotp.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__isotp_1gac27b3210cb754b4621c54923696bfe2d" prot="public" static="no">
        <name>ISOTP_FIXED_ADDR_RX_MASK</name>
        <initializer>(0x03FFFF00)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/canbus/isotp.h" line="125" column="9" bodyfile="include/canbus/isotp.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>CAN ISO-TP Interf. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
