<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="speculation_8h" kind="file" language="C++">
    <compoundname>speculation.h</compoundname>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includedby refid="common_2src_2main_8c" local="no">tests/kernel/common/src/main.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/sys/speculation.h</label>
        <link refid="speculation_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>include/sys/speculation.h</label>
        <link refid="speculation_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>tests/kernel/common/src/main.c</label>
        <link refid="common_2src_2main_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="speculation_8h_1aa677f654a5febe3a9b7525e4306ede09" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t k_array_index_sanitize</definition>
        <argsstring>(uint32_t index, uint32_t array_size)</argsstring>
        <name>k_array_index_sanitize</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>array_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sanitize an array index against bounds check bypass attacks aka the Spectre V1 vulnerability.</para>
<para>CPUs with speculative execution may speculate past any size checks and leak confidential data due to analysis of micro-architectural properties. This will unconditionally truncate any out-of-bounds indexes to zero in the speculative execution path using bit twiddling instead of any branch instructions.</para>
<para>Example usage:</para>
<para>if (index &lt; size) { index = k_array_index_sanitize(index, size); data = array[index]; }</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Untrusted array index which has been validated, but not used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The original index value if &lt; size, or 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/speculation.h" line="33" column="24" bodyfile="include/sys/speculation.h" bodystart="33" bodyend="54"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>Intel<sp/>Corporation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_MISC_SPECULATION_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_MISC_SPECULATION_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="speculation_8h_1aa677f654a5febe3a9b7525e4306ede09" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="speculation_8h_1aa677f654a5febe3a9b7525e4306ede09" kindref="member">k_array_index_sanitize</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a066ef29dcc0b3f5cdeab9a9aa274f610" kindref="member">index</ref>,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>array_size)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_BOUNDS_CHECK_BYPASS_MITIGATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/>signed_index<sp/>=<sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a066ef29dcc0b3f5cdeab9a9aa274f610" kindref="member">index</ref>,<sp/>signed_array_size<sp/>=<sp/>array_size;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Take<sp/>the<sp/>difference<sp/>between<sp/>index<sp/>and<sp/>max.</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>A<sp/>proper<sp/>value<sp/>will<sp/>result<sp/>in<sp/>a<sp/>negative<sp/>result.<sp/>We<sp/>also<sp/>AND<sp/>in</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>complement<sp/>of<sp/>index,<sp/>so<sp/>that<sp/>we<sp/>automatically<sp/>reject<sp/>any<sp/>large</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>indexes<sp/>which<sp/>would<sp/>wrap<sp/>around<sp/>the<sp/>difference<sp/>calculation.</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Sign-extend<sp/>just<sp/>the<sp/>sign<sp/>bit<sp/>to<sp/>produce<sp/>a<sp/>mask<sp/>of<sp/>all<sp/>1s<sp/>(accept)</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>or<sp/>all<sp/>0s<sp/>(truncate).</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>mask<sp/>=<sp/>((signed_index<sp/>-<sp/>signed_array_size)<sp/>&amp;<sp/>~signed_index)<sp/>&gt;&gt;<sp/>31;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a066ef29dcc0b3f5cdeab9a9aa274f610" kindref="member">index</ref><sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(array_size);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a066ef29dcc0b3f5cdeab9a9aa274f610" kindref="member">index</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_BOUNDS_CHECK_BYPASS_MITIGATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_MISC_SPECULATION_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/sys/speculation.h"/>
  </compounddef>
</doxygen>
