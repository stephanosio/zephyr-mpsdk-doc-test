<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="drivers_2can_8h" kind="file" language="C++">
    <compoundname>can.h</compoundname>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes local="no">device.h</includes>
    <includes refid="string_8h" local="no">string.h</includes>
    <includes refid="util_8h" local="no">sys/util.h</includes>
    <includes refid="stats_2stats_8h" local="no">stats/stats.h</includes>
    <includes local="no">syscalls/can.h</includes>
    <includedby refid="isotp_8h" local="no">include/canbus/isotp.h</includedby>
    <includedby refid="net_2can_8h" local="no">include/net/can.h</includedby>
    <includedby refid="socket__can_8h" local="no">include/net/socket_can.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/drivers/can.h</label>
        <link refid="drivers_2can_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>stats/stats.h</label>
        <link refid="stats_2stats_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="9">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="2">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="4">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="6">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>device.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="14">
        <label>syscalls/can.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/canbus/isotp.h</label>
        <link refid="isotp_8h"/>
      </node>
      <node id="1">
        <label>include/drivers/can.h</label>
        <link refid="drivers_2can_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/net/can.h</label>
        <link refid="net_2can_8h"/>
      </node>
      <node id="4">
        <label>include/net/socket_can.h</label>
        <link refid="socket__can_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structzcan__frame" prot="public">zcan_frame</innerclass>
    <innerclass refid="structzcan__filter" prot="public">zcan_filter</innerclass>
    <innerclass refid="structcan__bus__err__cnt" prot="public">can_bus_err_cnt</innerclass>
    <innerclass refid="structcan__timing" prot="public">can_timing</innerclass>
    <innerclass refid="structcan__device__state" prot="public">can_device_state</innerclass>
    <innerclass refid="structcan__frame" prot="public">can_frame</innerclass>
    <innerclass refid="structcan__filter" prot="public">can_filter</innerclass>
      <sectiondef kind="user-defined">
      <header>CAN frame definitions</header>
      <memberdef kind="define" id="group__can__interface_1ga4cd8ce34887b90baeeaa6a4aa048b398" prot="public" static="no">
        <name>CAN_STD_ID_MASK</name>
        <initializer>0x7FFU</initializer>
        <briefdescription>
<para>Bit mask for a standard (11-bit) CAN identifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="35" column="9" bodyfile="include/drivers/can.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga7987c1d4089742f87a7ac611add1a286" prot="public" static="no">
        <name>CAN_MAX_STD_ID</name>
        <initializer><ref refid="group__can__interface_1ga4cd8ce34887b90baeeaa6a4aa048b398" kindref="member">CAN_STD_ID_MASK</ref></initializer>
        <briefdescription>
<para>Maximum value for a standard (11-bit) CAN identifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="39" column="9" bodyfile="include/drivers/can.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga15ee71e8abcf51008925585049125986" prot="public" static="no">
        <name>CAN_EXT_ID_MASK</name>
        <initializer>0x1FFFFFFFU</initializer>
        <briefdescription>
<para>Bit mask for an extended (29-bit) CAN identifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="43" column="9" bodyfile="include/drivers/can.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga0f3572940065f8f6d54099e7a4175f8f" prot="public" static="no">
        <name>CAN_MAX_EXT_ID</name>
        <initializer><ref refid="group__can__interface_1ga15ee71e8abcf51008925585049125986" kindref="member">CAN_EXT_ID_MASK</ref></initializer>
        <briefdescription>
<para>Maximum value for an extended (29-bit) CAN identifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="47" column="9" bodyfile="include/drivers/can.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1gadc209a027ee700faf10461e2417bee50" prot="public" static="no">
        <name>CAN_MAX_DLC</name>
        <initializer>8U</initializer>
        <briefdescription>
<para>Maximum data length code for CAN 2.0A/2.0B. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="51" column="9" bodyfile="include/drivers/can.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1gad4b7310536c7e3252c2056abe64c0333" prot="public" static="no">
        <name>CANFD_MAX_DLC</name>
        <initializer>CONFIG_CANFD_MAX_DLC</initializer>
        <briefdescription>
<para>Maximum data length code for CAN-FD. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="55" column="9" bodyfile="include/drivers/can.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>CAN controller configuration</header>
      <memberdef kind="define" id="group__can__interface_1ga3f7eefd33eb0cb074e5d742c5097554a" prot="public" static="no">
        <name>CAN_SJW_NO_CHANGE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Synchronization Jump Width (SJW) value to indicate that the SJW should not be changed by the timing calculation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="695" column="9" bodyfile="include/drivers/can.h" bodystart="695" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga4af6d0d9ab72b195909f511ac65cb8fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int can_get_core_clock</definition>
        <argsstring>(const struct device *dev, uint32_t *rate)</argsstring>
        <name>can_get_core_clock</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Get the CAN core clock rate. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the CAN core clock rate. One time quantum is 1/(core clock rate).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rate</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN core clock rate in Hz.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or a negative error code on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="618" column="6" declfile="include/drivers/can.h" declline="618" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gac27fe64142603f0d32d422594356b2d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int can_calc_timing</definition>
        <argsstring>(const struct device *dev, struct can_timing *res, uint32_t bitrate, uint16_t sample_pnt)</argsstring>
        <name>can_calc_timing</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structcan__timing" kindref="compound">can_timing</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>bitrate</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>sample_pnt</declname>
        </param>
        <briefdescription>
<para>Calculate timing parameters from bitrate and sample point. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the timing parameters from a given bitrate in bits/s and the sampling point in permill (1/1000) of the entire bit time. The bitrate must alway match perfectly. If no result can be reached for the given parameters, -EINVAL is returned.</para>
<para><simplesect kind="note"><para>The requested <computeroutput>sample_pnt</computeroutput> will not always be matched perfectly. The algorithm calculates the best possible match.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">res</parametername>
</parameternamelist>
<parameterdescription>
<para>Result is written into the <emphasis><ref refid="structcan__timing" kindref="compound">can_timing</ref></emphasis> struct provided. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitrate</parametername>
</parameternamelist>
<parameterdescription>
<para>Target bitrate in bits/s. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample_pnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Sampling point in permill of the entire bit time.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>or positive sample point error on success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if there is no solution for the desired values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis><ref refid="group__can__interface_1ga4af6d0d9ab72b195909f511ac65cb8fa" kindref="member">can_get_core_clock()</ref></emphasis> is not available. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="647" column="5" declfile="include/drivers/can.h" declline="647" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga358cd73ed59c2099f4b2c6ceb397ca11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int can_calc_timing_data</definition>
        <argsstring>(const struct device *dev, struct can_timing *res, uint32_t bitrate, uint16_t sample_pnt)</argsstring>
        <name>can_calc_timing_data</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structcan__timing" kindref="compound">can_timing</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>bitrate</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>sample_pnt</declname>
        </param>
        <briefdescription>
<para>Calculate timing parameters for the data phase. </para>
        </briefdescription>
        <detaileddescription>
<para>Same as <emphasis><ref refid="group__can__interface_1gac27fe64142603f0d32d422594356b2d7" kindref="member">can_calc_timing()</ref></emphasis> but with the maximum and minimum values from the data phase.</para>
<para><simplesect kind="note"><para><verbatim>embed:rst:inline :kconfig:option:`CONFIG_CAN_FD_MODE` </verbatim> must be selected for this function to be available.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">res</parametername>
</parameternamelist>
<parameterdescription>
<para>Result is written into the <emphasis><ref refid="structcan__timing" kindref="compound">can_timing</ref></emphasis> struct provided. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitrate</parametername>
</parameternamelist>
<parameterdescription>
<para>Target bitrate for the data phase in bits/s </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample_pnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Sampling point for the data phase in permille of the entire bit time.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>or positive sample point error on success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if there is no solution for the desired values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis><ref refid="group__can__interface_1ga4af6d0d9ab72b195909f511ac65cb8fa" kindref="member">can_get_core_clock()</ref></emphasis> is not available. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="669" column="5" declfile="include/drivers/can.h" declline="669" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga7ee7a3296995c09c7f35f54029ed26cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int can_calc_prescaler</definition>
        <argsstring>(const struct device *dev, struct can_timing *timing, uint32_t bitrate)</argsstring>
        <name>can_calc_prescaler</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structcan__timing" kindref="compound">can_timing</ref> *</type>
          <declname>timing</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>bitrate</declname>
        </param>
        <briefdescription>
<para>Fill in the prescaler value for a given bitrate and timing. </para>
        </briefdescription>
        <detaileddescription>
<para>Fill the prescaler value in the timing struct. The sjw, prop_seg, phase_seg1 and phase_seg2 must be given.</para>
<para>The returned bitrate error is reminder of the devision of the clock rate by the bitrate times the timing segments.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timing</parametername>
</parameternamelist>
<parameterdescription>
<para>Result is written into the <ref refid="structcan__timing" kindref="compound">can_timing</ref> struct provided. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitrate</parametername>
</parameternamelist>
<parameterdescription>
<para>Target bitrate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>or positive bitrate error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Negative</parametername>
</parameternamelist>
<parameterdescription>
<para>error code on error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="689" column="5" declfile="include/drivers/can.h" declline="689" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gae8d117c765b9e0cd1d08e7d63e6ce47b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int can_set_timing</definition>
        <argsstring>(const struct device *dev, const struct can_timing *timing, const struct can_timing *timing_data)</argsstring>
        <name>can_set_timing</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structcan__timing" kindref="compound">can_timing</ref> *</type>
          <declname>timing</declname>
        </param>
        <param>
          <type>const struct <ref refid="structcan__timing" kindref="compound">can_timing</ref> *</type>
          <declname>timing_data</declname>
        </param>
        <briefdescription>
<para>Configure the bus timing of a CAN controller. </para>
        </briefdescription>
        <detaileddescription>
<para>If the sjw equals CAN_SJW_NO_CHANGE, the sjw parameter is not changed.</para>
<para><simplesect kind="note"><para>The parameter <computeroutput>timing_data</computeroutput> is only relevant for CAN-FD. If the controller does not support CAN-FD or if <verbatim>embed:rst:inline :kconfig:option:`CONFIG_CAN_FD_MODE` </verbatim> is not selected, the value of this parameter is ignored.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timing</parametername>
</parameternamelist>
<parameterdescription>
<para>Bus timings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timing_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Bus timings for data phase (CAN-FD only).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input/output error, failed to configure device. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="713" column="6" declfile="include/drivers/can.h" declline="713" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga10ed56841a7d2c53ef20bdfa732f9043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int can_set_mode</definition>
        <argsstring>(const struct device *dev, enum can_mode mode)</argsstring>
        <name>can_set_mode</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__can__interface_1ga4e8ab343dc079bfda049496e42e29399" kindref="member">can_mode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Set the CAN controller to the given operation mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Operation mode.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input/output error, failed to configure device. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="735" column="6" declfile="include/drivers/can.h" declline="735" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gae0c862e57610ad80727c767fab690d93" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int can_set_bitrate</definition>
        <argsstring>(const struct device *dev, uint32_t bitrate, uint32_t bitrate_data)</argsstring>
        <name>can_set_bitrate</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>bitrate</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>bitrate_data</declname>
        </param>
        <briefdescription>
<para>Set the bitrate of the CAN controller. </para>
        </briefdescription>
        <detaileddescription>
<para>The sample point is set to the CiA DS 301 recommended value of 87.5%.</para>
<para><simplesect kind="note"><para>The parameter <computeroutput>bitrate_data</computeroutput> is only relevant for CAN-FD. If the controller does not support CAN-FD or if <verbatim>embed:rst:inline :kconfig:option:`CONFIG_CAN_FD_MODE` </verbatim> is not selected, the value of this parameter is ignored.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitrate</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired arbitration phase bitrate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitrate_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired data phase bitrate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>bitrate cannot be met. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input/output error, failed to set bitrate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="761" column="19" bodyfile="include/drivers/can.h" bodystart="761" bodyend="790"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Receiving CAN frames</header>
      <memberdef kind="define" id="group__can__interface_1ga7af0acdfbdad07fc3eba4cbd29bc090b" prot="public" static="no">
        <name>CAN_MSGQ_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>max_frames</defname></param>
        <initializer>	<ref refid="obj__tracking_2src_2main_8c_1a2a8684e092939fd15da55ef2cc19376e" kindref="member">K_MSGQ_DEFINE</ref>(name, sizeof(struct <ref refid="structzcan__frame" kindref="compound">zcan_frame</ref>), max_frames, 4)</initializer>
        <briefdescription>
<para>Statically define and initialize a CAN RX message queue. </para>
        </briefdescription>
        <detaileddescription>
<para>The message queue&apos;s ring buffer contains space for <emphasis>max_frames</emphasis> CAN frames.</para>
<para><simplesect kind="see"><para><ref refid="group__can__interface_1ga2feb41b89c8c172f02fd48fb3f6276de" kindref="member">can_add_rx_filter_msgq()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the message queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_frames</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of CAN frames that can be queued. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="903" column="9" bodyfile="include/drivers/can.h" bodystart="903" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gad3137bf27e64de3a550baf7e66641481" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int can_add_rx_filter</definition>
        <argsstring>(const struct device *dev, can_rx_callback_t callback, void *user_data, const struct zcan_filter *filter)</argsstring>
        <name>can_add_rx_filter</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__can__interface_1gaaa6db2ee486884116a801a797af844ba" kindref="member">can_rx_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <param>
          <type>const struct <ref refid="structzcan__filter" kindref="compound">zcan_filter</ref> *</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
<para>Add a callback function for a given CAN filter. </para>
        </briefdescription>
        <detaileddescription>
<para>Add a callback to CAN identifiers specified by a filter. When a recevied CAN frame matching the filter is received by the CAN controller, the callback function is called in interrupt context.</para>
<para>If a frame matches more than one attached filter, the priority of the match is hardware dependent.</para>
<para>The same callback function can be used for multiple filters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>This function is called by the CAN controller driver whenever a frame matching the filter is received. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to pass to callback function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <emphasis><ref refid="structzcan__filter" kindref="compound">zcan_filter</ref></emphasis> structure defining the filter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>filter_id</parametername>
</parameternamelist>
<parameterdescription>
<para>on success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSPC</parametername>
</parameternamelist>
<parameterdescription>
<para>if there are no free filters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="885" column="19" bodyfile="include/drivers/can.h" bodystart="885" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga2feb41b89c8c172f02fd48fb3f6276de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int can_add_rx_filter_msgq</definition>
        <argsstring>(const struct device *dev, struct k_msgq *msgq, const struct zcan_filter *filter)</argsstring>
        <name>can_add_rx_filter_msgq</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__msgq" kindref="compound">k_msgq</ref> *</type>
          <declname>msgq</declname>
        </param>
        <param>
          <type>const struct <ref refid="structzcan__filter" kindref="compound">zcan_filter</ref> *</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
<para>Wrapper function for adding a message queue for a given filter. </para>
        </briefdescription>
        <detaileddescription>
<para>Wrapper function for <emphasis><ref refid="group__can__interface_1gad3137bf27e64de3a550baf7e66641481" kindref="member">can_add_rx_filter()</ref></emphasis> which puts received CAN frames matching the filter in a message queue instead of calling a callback.</para>
<para>If a frame matches more than one attached filter, the priority of the match is hardware dependent.</para>
<para>The same message queue can be used for multiple filters.</para>
<para><simplesect kind="note"><para>The message queue must be initialized before calling this function and the caller must have appropriate permissions on it.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgq</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the already initialized <emphasis><ref refid="structk__msgq" kindref="compound">k_msgq</ref></emphasis> struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <emphasis><ref refid="structzcan__filter" kindref="compound">zcan_filter</ref></emphasis> structure defining the filter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>filter_id</parametername>
</parameternamelist>
<parameterdescription>
<para>on success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSPC</parametername>
</parameternamelist>
<parameterdescription>
<para>if there are no free filters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="927" column="6" declfile="include/drivers/can.h" declline="927" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga822aa3142ea01582d5cfb8b478fb2847" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void can_remove_rx_filter</definition>
        <argsstring>(const struct device *dev, int filter_id)</argsstring>
        <name>can_remove_rx_filter</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>filter_id</declname>
        </param>
        <briefdescription>
<para>Remove a CAN RX filter. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine removes a CAN RX filter based on the filter ID returned by <emphasis><ref refid="group__can__interface_1gad3137bf27e64de3a550baf7e66641481" kindref="member">can_add_rx_filter()</ref></emphasis> or <emphasis><ref refid="group__can__interface_1ga2feb41b89c8c172f02fd48fb3f6276de" kindref="member">can_add_rx_filter_msgq()</ref></emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Filter ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="939" column="7" declfile="include/drivers/can.h" declline="939" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gaace06471f995959bb2e91f04bb9c4d68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int can_get_max_filters</definition>
        <argsstring>(const struct device *dev, enum can_ide id_type)</argsstring>
        <name>can_get_max_filters</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__can__interface_1ga9a30b6abfaf14193f0c41b1c46d6f50a" kindref="member">can_ide</ref></type>
          <declname>id_type</declname>
        </param>
        <briefdescription>
<para>Get maximum number of RX filters. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the maximum number of concurrent RX filters for the CAN controller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id_type</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN identifier type (standard or extended).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Positive</parametername>
</parameternamelist>
<parameterdescription>
<para>number of maximum concurrent filters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input/output error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If this function is not implemented by the driver. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="960" column="6" declfile="include/drivers/can.h" declline="960" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Linux SocketCAN compatibility</header>
      <description><para>The following structures and functions provide compatibility with the CAN frame and CAN filter formats used by Linux SocketCAN. </para>
</description>
      <memberdef kind="typedef" id="group__can__interface_1gaf1c86d266c4de5b8fb79e12ff38def1f" prot="public" static="no">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>typedef uint32_t canid_t</definition>
        <argsstring></argsstring>
        <name>canid_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN Identifier structure for Linux SocketCAN compatibility.</para>
<para>The fields in this type are:</para>
<para><programlisting filename=".unparsed"><codeline><highlight class="normal">+------+--------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">|<sp/>Bits<sp/>|<sp/>Description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+======+==============================================================+</highlight></codeline>
<codeline><highlight class="normal">|<sp/>0-28<sp/>|<sp/>CAN<sp/>identifier<sp/>(11/29<sp/>bit)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+------+--------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>29<sp/><sp/>|<sp/>Error<sp/>message<sp/>frame<sp/>flag<sp/>(0<sp/>=<sp/>data<sp/>frame,<sp/>1<sp/>=<sp/>error<sp/>message)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">+------+--------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>30<sp/><sp/>|<sp/>Remote<sp/>transmission<sp/>request<sp/>flag<sp/>(1<sp/>=<sp/>RTR<sp/>frame)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+------+--------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>31<sp/><sp/>|<sp/>Frame<sp/>format<sp/>flag<sp/>(0<sp/>=<sp/>standard<sp/>11<sp/>bit,<sp/>1<sp/>=<sp/>extended<sp/>29<sp/>bit)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">+------+--------------------------------------------------------------+</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="1132" column="18" bodyfile="include/drivers/can.h" bodystart="1132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gaf561048ea56449c778ede63b30fe5c6e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_copy_frame_to_zframe</definition>
        <argsstring>(const struct can_frame *frame, struct zcan_frame *zframe)</argsstring>
        <name>can_copy_frame_to_zframe</name>
        <param>
          <type>const struct <ref refid="structcan__frame" kindref="compound">can_frame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type>struct <ref refid="structzcan__frame" kindref="compound">zcan_frame</ref> *</type>
          <declname>zframe</declname>
        </param>
        <briefdescription>
<para>Translate a <emphasis><ref refid="structcan__frame" kindref="compound">can_frame</ref></emphasis> struct to a <emphasis><ref refid="structzcan__frame" kindref="compound">zcan_frame</ref></emphasis> struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structcan__frame" kindref="compound">can_frame</ref> struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zframe</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structzcan__frame" kindref="compound">zcan_frame</ref> struct. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="1172" column="20" bodyfile="include/drivers/can.h" bodystart="1172" bodyend="1180"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gad458a27a19ac09bf23444615b2c8c407" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_copy_zframe_to_frame</definition>
        <argsstring>(const struct zcan_frame *zframe, struct can_frame *frame)</argsstring>
        <name>can_copy_zframe_to_frame</name>
        <param>
          <type>const struct <ref refid="structzcan__frame" kindref="compound">zcan_frame</ref> *</type>
          <declname>zframe</declname>
        </param>
        <param>
          <type>struct <ref refid="structcan__frame" kindref="compound">can_frame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
<para>Translate a <emphasis><ref refid="structzcan__frame" kindref="compound">zcan_frame</ref></emphasis> struct to a <emphasis><ref refid="structcan__frame" kindref="compound">can_frame</ref></emphasis> struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zframe</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structzcan__frame" kindref="compound">zcan_frame</ref> struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structcan__frame" kindref="compound">can_frame</ref> struct. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="1188" column="20" bodyfile="include/drivers/can.h" bodystart="1188" bodyend="1194"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gaf9a168f41ae3bef27e61e99ee8fcde27" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_copy_filter_to_zfilter</definition>
        <argsstring>(const struct can_filter *filter, struct zcan_filter *zfilter)</argsstring>
        <name>can_copy_filter_to_zfilter</name>
        <param>
          <type>const struct <ref refid="structcan__filter" kindref="compound">can_filter</ref> *</type>
          <declname>filter</declname>
        </param>
        <param>
          <type>struct <ref refid="structzcan__filter" kindref="compound">zcan_filter</ref> *</type>
          <declname>zfilter</declname>
        </param>
        <briefdescription>
<para>Translate a <emphasis><ref refid="structcan__filter" kindref="compound">can_filter</ref></emphasis> struct to a <emphasis><ref refid="structzcan__filter" kindref="compound">zcan_filter</ref></emphasis> struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structcan__filter" kindref="compound">can_filter</ref> struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zfilter</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structzcan__filter" kindref="compound">zcan_filter</ref> struct. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="1202" column="20" bodyfile="include/drivers/can.h" bodystart="1202" bodyend="1210"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gae89c9ae16f965d838595866f2ffea2e2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_copy_zfilter_to_filter</definition>
        <argsstring>(const struct zcan_filter *zfilter, struct can_filter *filter)</argsstring>
        <name>can_copy_zfilter_to_filter</name>
        <param>
          <type>const struct <ref refid="structzcan__filter" kindref="compound">zcan_filter</ref> *</type>
          <declname>zfilter</declname>
        </param>
        <param>
          <type>struct <ref refid="structcan__filter" kindref="compound">can_filter</ref> *</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
<para>Translate a <emphasis><ref refid="structzcan__filter" kindref="compound">zcan_filter</ref></emphasis> struct to a <emphasis><ref refid="structcan__filter" kindref="compound">can_filter</ref></emphasis> struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zfilter</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structzcan__filter" kindref="compound">zcan_filter</ref> struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structcan__filter" kindref="compound">can_filter</ref> struct. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="1218" column="20" bodyfile="include/drivers/can.h" bodystart="1218" bodyend="1225"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Transmitting CAN frames</header>
      <memberdef kind="function" id="group__can__interface_1ga1bf5353bf15ffc252726e71ace9f5372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int can_send</definition>
        <argsstring>(const struct device *dev, const struct zcan_frame *frame, k_timeout_t timeout, can_tx_callback_t callback, void *user_data)</argsstring>
        <name>can_send</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structzcan__frame" kindref="compound">zcan_frame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="group__can__interface_1ga3973b4d5f1c8078eba566c8f0e2c01f1" kindref="member">can_tx_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Queue a CAN frame for transmission on the CAN bus. </para>
        </briefdescription>
        <detaileddescription>
<para>Queue a CAN frame for transmission on the CAN bus with optional timeout and completion callback function.</para>
<para>Queued CAN frames are transmitted in order according to the their priority:<itemizedlist>
<listitem><para>The lower the CAN-ID, the higher the priority.</para>
</listitem><listitem><para>Data frames have higher priority than Remote Transmission Request (RTR) frames with identical CAN-IDs.</para>
</listitem><listitem><para>Frames with standard (11-bit) identifiers have higher priority than frames with extended (29-bit) identifiers with identical base IDs (the higher 11 bits of the extended identifier).</para>
</listitem><listitem><para>Transmission order for queued frames with the same priority is hardware dependent.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>If transmitting segmented messages spanning multiple CAN frames with identical CAN-IDs, the sender must ensure to only queue one frame at a time if FIFO order is required.</para>
</simplesect>
By default, the CAN controller will automatically retry transmission in case of lost bus arbitration or missing acknowledge. Some CAN controllers support disabling automatic retransmissions (&quot;one-shot&quot; mode) via a devicetree property.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN frame to transmit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout waiting for a empty TX mailbox or <computeroutput>K_FOREVER</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional callback for when the frame was sent or a transmission error occurred. If <computeroutput>NULL</computeroutput>, this function is blocking until frame is sent. The callback must be <computeroutput>NULL</computeroutput> if called from user mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to pass to callback function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if an invalid parameter was passed to the function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENETDOWN</parametername>
</parameternamelist>
<parameterdescription>
<para>if the CAN controller is in bus-off state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>if CAN bus arbitration was lost (only applicable if automatic retransmissions are disabled). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>if a general transmit error occurred (e.g. missing ACK if automatic retransmissions are disabled). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>on timeout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="843" column="6" declfile="include/drivers/can.h" declline="843" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>CAN bus error reporting and handling</header>
      <memberdef kind="function" id="group__can__interface_1gab98c121578c8349d9dfb41d60f356857" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int can_get_state</definition>
        <argsstring>(const struct device *dev, enum can_state *state, struct can_bus_err_cnt *err_cnt)</argsstring>
        <name>can_get_state</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__can__interface_1gac7ec472c26c564dd7067c49f67c8d2f7" kindref="member">can_state</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>struct <ref refid="structcan__bus__err__cnt" kindref="compound">can_bus_err_cnt</ref> *</type>
          <declname>err_cnt</declname>
        </param>
        <briefdescription>
<para>Get current CAN controller state. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the current state and optionally the error counter values of the CAN controller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">state</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the state destination enum or NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">err_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the err_cnt destination structure or NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input/output error, failed to get state. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="994" column="6" declfile="include/drivers/can.h" declline="994" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gac474e56a50685736a1c25dca277aab5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int can_recover</definition>
        <argsstring>(const struct device *dev, k_timeout_t timeout)</argsstring>
        <name>can_recover</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Recover from bus-off state. </para>
        </briefdescription>
        <detaileddescription>
<para>Recover the CAN controller from bus-off state to error-active state.</para>
<para><simplesect kind="note"><para><verbatim>embed:rst:inline :kconfig:option:`CONFIG_CAN_AUTO_BUS_OFF_RECOVERY` </verbatim> must be deselected for this function to be available.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout for waiting for the recovery or <computeroutput>K_FOREVER</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>on timeout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="1020" column="6" declfile="include/drivers/can.h" declline="1020" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gad322da0dad328abb50de23bef6882d8e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_set_state_change_callback</definition>
        <argsstring>(const struct device *dev, can_state_change_callback_t callback, void *user_data)</argsstring>
        <name>can_set_state_change_callback</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__can__interface_1gab0cdbcc4aed49681cd4cf62b28302190" kindref="member">can_state_change_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Set a callback for CAN controller state change events. </para>
        </briefdescription>
        <detaileddescription>
<para>Set the callback for CAN controller state change events. The callback function will be called in interrupt context.</para>
<para>Only one callback can be registered per controller. Calling this function again overrides any previously registered callback.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to pass to callback function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="1049" column="20" bodyfile="include/drivers/can.h" bodystart="1049" bodyend="1056"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>CAN utility functions</header>
      <memberdef kind="function" id="group__can__interface_1gaa1d866167c0c23f8d5c0c15385589601" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>static uint8_t can_dlc_to_bytes</definition>
        <argsstring>(uint8_t dlc)</argsstring>
        <name>can_dlc_to_bytes</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>dlc</declname>
        </param>
        <briefdescription>
<para>Convert from Data Length Code (DLC) to the number of data bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dlc</parametername>
</parameternamelist>
<parameterdescription>
<para>Data Length Code (DLC).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Number</parametername>
</parameternamelist>
<parameterdescription>
<para>of bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="1073" column="23" bodyfile="include/drivers/can.h" bodystart="1073" bodyend="1079"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga8314716fe2b66d567b3fd377b8ee9dc3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>static uint8_t can_bytes_to_dlc</definition>
        <argsstring>(uint8_t num_bytes)</argsstring>
        <name>can_bytes_to_dlc</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
<para>Convert from number of bytes to Data Length Code (DLC) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>Length Code (DLC). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="1088" column="23" bodyfile="include/drivers/can.h" bodystart="1088" bodyend="1098"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__can__interface_1ga120a37d5ae5064dcbf116e488f733764" prot="public" static="no">
        <name>CAN_STATS_BIT0_ERROR_INC</name>
        <param><defname>dev_</defname></param>
        <initializer>	<ref refid="stats_2stats_8h_1a725e1bf6b2c486de9603954974d6315a" kindref="member">STATS_INC</ref>(Z_CAN_GET_STATS(dev_), bit0_error)</initializer>
        <briefdescription>
<para>Increment the bit0 error counter for a CAN device. </para>
        </briefdescription>
        <detaileddescription>
<para>The bit0 error counter is incremented when the CAN controller is unable to transmit a dominant bit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="454" column="9" bodyfile="include/drivers/can.h" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga678b74039632302efcb5ef80f0e3a90b" prot="public" static="no">
        <name>CAN_STATS_BIT1_ERROR_INC</name>
        <param><defname>dev_</defname></param>
        <initializer>	<ref refid="stats_2stats_8h_1a725e1bf6b2c486de9603954974d6315a" kindref="member">STATS_INC</ref>(Z_CAN_GET_STATS(dev_), bit1_error)</initializer>
        <briefdescription>
<para>Increment the bit1 (recessive) error counter for a CAN device. </para>
        </briefdescription>
        <detaileddescription>
<para>The bit1 error counter is incremented when the CAN controller is unable to transmit a recessive bit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="465" column="9" bodyfile="include/drivers/can.h" bodystart="465" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1gae4146843944b7ffb1c96636e889282f7" prot="public" static="no">
        <name>CAN_STATS_STUFF_ERROR_INC</name>
        <param><defname>dev_</defname></param>
        <initializer>	<ref refid="stats_2stats_8h_1a725e1bf6b2c486de9603954974d6315a" kindref="member">STATS_INC</ref>(Z_CAN_GET_STATS(dev_), stuff_error)</initializer>
        <briefdescription>
<para>Increment the stuffing error counter for a CAN device. </para>
        </briefdescription>
        <detaileddescription>
<para>The stuffing error counter is incremented when the CAN controller detects a bit stuffing error.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="476" column="9" bodyfile="include/drivers/can.h" bodystart="476" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga125ce05d40881476f5f156ad5e28c664" prot="public" static="no">
        <name>CAN_STATS_CRC_ERROR_INC</name>
        <param><defname>dev_</defname></param>
        <initializer>	<ref refid="stats_2stats_8h_1a725e1bf6b2c486de9603954974d6315a" kindref="member">STATS_INC</ref>(Z_CAN_GET_STATS(dev_), crc_error)</initializer>
        <briefdescription>
<para>Increment the CRC error counter for a CAN device. </para>
        </briefdescription>
        <detaileddescription>
<para>The CRC error counter is incremented when the CAN controller detects a frame with an invalid CRC.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="487" column="9" bodyfile="include/drivers/can.h" bodystart="487" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1gac5809b3f5e1a463822e76921cddc9909" prot="public" static="no">
        <name>CAN_STATS_FORM_ERROR_INC</name>
        <param><defname>dev_</defname></param>
        <initializer>	<ref refid="stats_2stats_8h_1a725e1bf6b2c486de9603954974d6315a" kindref="member">STATS_INC</ref>(Z_CAN_GET_STATS(dev_), form_error)</initializer>
        <briefdescription>
<para>Increment the form error counter for a CAN device. </para>
        </briefdescription>
        <detaileddescription>
<para>The form error counter is incremented when the CAN controller detects a fixed-form bit field containing illegal bits.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="498" column="9" bodyfile="include/drivers/can.h" bodystart="498" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga15f7ca18badbbe2fe24be68cacce6171" prot="public" static="no">
        <name>CAN_STATS_ACK_ERROR_INC</name>
        <param><defname>dev_</defname></param>
        <initializer>	<ref refid="stats_2stats_8h_1a725e1bf6b2c486de9603954974d6315a" kindref="member">STATS_INC</ref>(Z_CAN_GET_STATS(dev_), ack_error)</initializer>
        <briefdescription>
<para>Increment the acknowledge error counter for a CAN device. </para>
        </briefdescription>
        <detaileddescription>
<para>The acknowledge error counter is incremented when the CAN controller does not monitor a dominant bit in the ACK slot.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="509" column="9" bodyfile="include/drivers/can.h" bodystart="509" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga6c93ae9a5c48ec78045a6a64cfc0f81b" prot="public" static="no">
        <name>CAN_DEVICE_DT_DEFINE</name>
        <param><defname>node_id</defname></param>
        <param><defname>init_fn</defname></param>
        <param><defname>pm_device</defname></param>
        <param><defname>data_ptr</defname></param>
        <param><defname>cfg_ptr</defname></param>
        <param><defname>level</defname></param>
        <param><defname>prio</defname></param>
        <param><defname>api_ptr</defname></param>
        <param><defname>...</defname></param>
        <initializer>	Z_CAN_DEVICE_STATE_DEFINE(node_id, Z_DEVICE_DT_DEV_NAME(node_id)); \
	Z_CAN_INIT_FN(Z_DEVICE_DT_DEV_NAME(node_id), init_fn)		\
	Z_DEVICE_DEFINE(node_id, Z_DEVICE_DT_DEV_NAME(node_id),		\
			<ref refid="group__device__model_1gad864d7a50ee45285dacd68be1e5a49ce" kindref="member">DEVICE_DT_NAME</ref>(node_id),			\
			&amp;<ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(Z_DEVICE_DT_DEV_NAME(node_id), _init), \
			pm_device,					\
			data_ptr, cfg_ptr, level, prio,			\
			api_ptr,					\
			&amp;(Z_DEVICE_STATE_NAME(Z_DEVICE_DT_DEV_NAME(node_id)).devstate), \
			__VA_ARGS__)</initializer>
        <briefdescription>
<para>Like <ref refid="group__device__model_1gaac590af7705a3223968164406a483548" kindref="member">DEVICE_DT_DEFINE()</ref> with CAN device specifics. </para>
        </briefdescription>
        <detaileddescription>
<para>Defines a device which implements the CAN API. May generate a custom <ref refid="structdevice__state" kindref="compound">device_state</ref> container struct and init_fn wrapper when needed depending on <verbatim>embed:rst:inline :kconfig:option:`CONFIG_CAN_STATS` </verbatim>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The devicetree node identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the init function of the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm_device</parametername>
</parameternamelist>
<parameterdescription>
<para>PM device resources reference (NULL if device does not use PM). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s private data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The address to the structure containing the configuration information for this instance of the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization level. See <ref refid="group__device__model_1ga1e50fdff086356a75b0e91179952cc8d" kindref="member">SYS_INIT()</ref> for details. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority within the selected initialization level. See <ref refid="group__device__model_1ga1e50fdff086356a75b0e91179952cc8d" kindref="member">SYS_INIT()</ref> for details. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>api_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides an initial pointer to the API function struct used by the driver. Can be NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="562" column="9" bodyfile="include/drivers/can.h" bodystart="560" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga20266dc5e962922144e078b85ccb8351" prot="public" static="no">
        <name>CAN_DEVICE_DT_INST_DEFINE</name>
        <param><defname>inst</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="group__can__interface_1ga6c93ae9a5c48ec78045a6a64cfc0f81b" kindref="member">CAN_DEVICE_DT_DEFINE</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), __VA_ARGS__)</initializer>
        <briefdescription>
<para>Like <ref refid="group__can__interface_1ga6c93ae9a5c48ec78045a6a64cfc0f81b" kindref="member">CAN_DEVICE_DT_DEFINE()</ref> for an instance of a DT_DRV_COMPAT compatible. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance number. This is replaced by <computeroutput><ref refid="mmio_8c_1a5d94980d4c538356e9abcf30eb73d1d4" kindref="member">DT_DRV_COMPAT(inst)</ref></computeroutput> in the call to <ref refid="group__can__interface_1ga6c93ae9a5c48ec78045a6a64cfc0f81b" kindref="member">CAN_DEVICE_DT_DEFINE()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Other parameters as expected by <ref refid="group__can__interface_1ga6c93ae9a5c48ec78045a6a64cfc0f81b" kindref="member">CAN_DEVICE_DT_DEFINE()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="599" column="9" bodyfile="include/drivers/can.h" bodystart="599" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__can__interface_1ga4e8ab343dc079bfda049496e42e29399" prot="public" static="no" strong="no">
        <type></type>
        <name>can_mode</name>
        <enumvalue id="group__can__interface_1gga4e8ab343dc079bfda049496e42e29399a9944f5fd8ed24faf280e44e4e3f5219e" prot="public">
          <name>CAN_NORMAL_MODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Normal mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1gga4e8ab343dc079bfda049496e42e29399a2e0dc39460eadc2ea32ecb074fbcf2cd" prot="public">
          <name>CAN_SILENT_MODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Controller is not allowed to send dominant bits. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1gga4e8ab343dc079bfda049496e42e29399a3458b98e050a41c783fa4341a805ff44" prot="public">
          <name>CAN_LOOPBACK_MODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Controller is in loopback mode (receives own frames). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1gga4e8ab343dc079bfda049496e42e29399af686c5f96a736d2499678623bbe5001e" prot="public">
          <name>CAN_SILENT_LOOPBACK_MODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Combination of loopback and silent modes. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Defines the mode of the CAN controller. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="84" column="1" bodyfile="include/drivers/can.h" bodystart="84" bodyend="93"/>
      </memberdef>
      <memberdef kind="enum" id="group__can__interface_1gac7ec472c26c564dd7067c49f67c8d2f7" prot="public" static="no" strong="no">
        <type></type>
        <name>can_state</name>
        <enumvalue id="group__can__interface_1ggac7ec472c26c564dd7067c49f67c8d2f7a82f59a5c7e9b15a5a36a5690ebca78ab" prot="public">
          <name>CAN_ERROR_ACTIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error-active state (RX/TX error count &lt; 96). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1ggac7ec472c26c564dd7067c49f67c8d2f7a52c0f7a5f6f7239264af075db4ee0dca" prot="public">
          <name>CAN_ERROR_WARNING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error-warning state (RX/TX error count &lt; 128). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1ggac7ec472c26c564dd7067c49f67c8d2f7a69f2f1a5bb6e1abe4898069586701ef8" prot="public">
          <name>CAN_ERROR_PASSIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error-passive state (RX/TX error count &lt; 256). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1ggac7ec472c26c564dd7067c49f67c8d2f7ac8cadafe6fe9deff8a983e28190042b1" prot="public">
          <name>CAN_BUS_OFF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bus-off state (RX/TX error count &gt;= 256). </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Defines the state of the CAN bus. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="98" column="1" bodyfile="include/drivers/can.h" bodystart="98" bodyend="107"/>
      </memberdef>
      <memberdef kind="enum" id="group__can__interface_1ga9a30b6abfaf14193f0c41b1c46d6f50a" prot="public" static="no" strong="no">
        <type></type>
        <name>can_ide</name>
        <enumvalue id="group__can__interface_1gga9a30b6abfaf14193f0c41b1c46d6f50aa8c54cc658223f3fe1101eab57307cb7d" prot="public">
          <name>CAN_STANDARD_IDENTIFIER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Standard (11-bit) CAN identifier. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1gga9a30b6abfaf14193f0c41b1c46d6f50aa3088f4e06b83c20398199e48b93bb939" prot="public">
          <name>CAN_EXTENDED_IDENTIFIER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Extended (29-bit) CAN identifier. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Defines if the CAN frame has a standard (11-bit) or extended (29-bit) CAN identifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="113" column="1" bodyfile="include/drivers/can.h" bodystart="113" bodyend="118"/>
      </memberdef>
      <memberdef kind="enum" id="group__can__interface_1ga888b0994e8c3cdfb80f9a638dd148303" prot="public" static="no" strong="no">
        <type></type>
        <name>can_rtr</name>
        <enumvalue id="group__can__interface_1gga888b0994e8c3cdfb80f9a638dd148303a9d88cf6e242528a2caf7d2a28c1040e5" prot="public">
          <name>CAN_DATAFRAME</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data frame. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1gga888b0994e8c3cdfb80f9a638dd148303afcfc7be1a45d2af3826db5041028f69e" prot="public">
          <name>CAN_REMOTEREQUEST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Remote Transmission Request (RTR) frame. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Defines if the CAN frame is a data frame or a Remote Transmission Request (RTR) frame. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="123" column="1" bodyfile="include/drivers/can.h" bodystart="123" bodyend="128"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__can__interface_1ga3973b4d5f1c8078eba566c8f0e2c01f1" prot="public" static="no">
        <type>void(*</type>
        <definition>can_tx_callback_t</definition>
        <argsstring>)(int error, void *user_data)</argsstring>
        <name>can_tx_callback_t</name>
        <briefdescription>
<para>Defines the application callback handler function signature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>Status of the performed send operation. See the list of return values for <emphasis><ref refid="group__can__interface_1ga1bf5353bf15ffc252726e71ace9f5372" kindref="member">can_send()</ref></emphasis> for value descriptions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data provided when the frame was sent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="264" column="9" bodyfile="include/drivers/can.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__can__interface_1gaaa6db2ee486884116a801a797af844ba" prot="public" static="no">
        <type>void(*</type>
        <definition>can_rx_callback_t</definition>
        <argsstring>)(struct zcan_frame *frame, void *user_data)</argsstring>
        <name>can_rx_callback_t</name>
        <briefdescription>
<para>Defines the application callback handler function signature for receiving. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>Received frame. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data provided when the filter was added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="273" column="9" bodyfile="include/drivers/can.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__can__interface_1gab0cdbcc4aed49681cd4cf62b28302190" prot="public" static="no">
        <type>void(*</type>
        <definition>can_state_change_callback_t</definition>
        <argsstring>)(enum can_state state, struct can_bus_err_cnt err_cnt, void *user_data)</argsstring>
        <name>can_state_change_callback_t</name>
        <briefdescription>
<para>Defines the state change callback handler function signature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>State of the CAN controller. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN controller error counter values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data provided the callback was set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="283" column="9" bodyfile="include/drivers/can.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2021<sp/>Vestas<sp/>Wind<sp/>Systems<sp/>A/S</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018<sp/>Alexander<sp/>Wachter</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_DRIVERS_CAN_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_DRIVERS_CAN_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;device.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="string_8h" kindref="compound">string.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="util_8h" kindref="compound">sys/util.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="group__can__interface_1ga4cd8ce34887b90baeeaa6a4aa048b398" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_STD_ID_MASK<sp/>0x7FFU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="group__can__interface_1ga7987c1d4089742f87a7ac611add1a286" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_MAX_STD_ID<sp/><sp/>CAN_STD_ID_MASK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="group__can__interface_1ga15ee71e8abcf51008925585049125986" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_EXT_ID_MASK<sp/>0x1FFFFFFFU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="group__can__interface_1ga0f3572940065f8f6d54099e7a4175f8f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_MAX_EXT_ID<sp/><sp/>CAN_EXT_ID_MASK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="group__can__interface_1gadc209a027ee700faf10461e2417bee50" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_MAX_DLC<sp/><sp/><sp/><sp/><sp/>8U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="group__can__interface_1gad4b7310536c7e3252c2056abe64c0333" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CANFD_MAX_DLC<sp/><sp/><sp/>CONFIG_CANFD_MAX_DLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CONFIG_CANFD_MAX_DLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_MAX_DLEN<sp/><sp/><sp/><sp/>8U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CONFIG_CANFD_MAX_DLC<sp/>&lt;=<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_MAX_DLEN<sp/><sp/><sp/><sp/>CONFIG_CANFD_MAX_DLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>CONFIG_CANFD_MAX_DLC<sp/>&lt;=<sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_MAX_DLEN<sp/><sp/><sp/><sp/>(CONFIG_CANFD_MAX_DLC<sp/>+<sp/>(CONFIG_CANFD_MAX_DLC<sp/>-<sp/>8U)<sp/>*<sp/>4U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>CONFIG_CANFD_MAX_DLC<sp/>==<sp/>13</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_MAX_DLEN<sp/><sp/><sp/><sp/>32U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>CONFIG_CANFD_MAX_DLC<sp/>==<sp/>14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_MAX_DLEN<sp/><sp/><sp/><sp/>48U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>CONFIG_CANFD_MAX_DLC<sp/>==<sp/>15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_MAX_DLEN<sp/><sp/><sp/><sp/>64U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_CANFD_MAX_DLC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="group__can__interface_1ga4e8ab343dc079bfda049496e42e29399" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga4e8ab343dc079bfda049496e42e29399" kindref="member">can_mode</ref><sp/>{</highlight></codeline>
<codeline lineno="86" refid="group__can__interface_1gga4e8ab343dc079bfda049496e42e29399a9944f5fd8ed24faf280e44e4e3f5219e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gga4e8ab343dc079bfda049496e42e29399a9944f5fd8ed24faf280e44e4e3f5219e" kindref="member">CAN_NORMAL_MODE</ref>,</highlight></codeline>
<codeline lineno="88" refid="group__can__interface_1gga4e8ab343dc079bfda049496e42e29399a2e0dc39460eadc2ea32ecb074fbcf2cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gga4e8ab343dc079bfda049496e42e29399a2e0dc39460eadc2ea32ecb074fbcf2cd" kindref="member">CAN_SILENT_MODE</ref>,</highlight></codeline>
<codeline lineno="90" refid="group__can__interface_1gga4e8ab343dc079bfda049496e42e29399a3458b98e050a41c783fa4341a805ff44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gga4e8ab343dc079bfda049496e42e29399a3458b98e050a41c783fa4341a805ff44" kindref="member">CAN_LOOPBACK_MODE</ref>,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gga4e8ab343dc079bfda049496e42e29399af686c5f96a736d2499678623bbe5001e" kindref="member">CAN_SILENT_LOOPBACK_MODE</ref></highlight></codeline>
<codeline lineno="93" refid="group__can__interface_1gga4e8ab343dc079bfda049496e42e29399af686c5f96a736d2499678623bbe5001e" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="group__can__interface_1gac7ec472c26c564dd7067c49f67c8d2f7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gac7ec472c26c564dd7067c49f67c8d2f7" kindref="member">can_state</ref><sp/>{</highlight></codeline>
<codeline lineno="100" refid="group__can__interface_1ggac7ec472c26c564dd7067c49f67c8d2f7a82f59a5c7e9b15a5a36a5690ebca78ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1ggac7ec472c26c564dd7067c49f67c8d2f7a82f59a5c7e9b15a5a36a5690ebca78ab" kindref="member">CAN_ERROR_ACTIVE</ref>,</highlight></codeline>
<codeline lineno="102" refid="group__can__interface_1ggac7ec472c26c564dd7067c49f67c8d2f7a52c0f7a5f6f7239264af075db4ee0dca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1ggac7ec472c26c564dd7067c49f67c8d2f7a52c0f7a5f6f7239264af075db4ee0dca" kindref="member">CAN_ERROR_WARNING</ref>,</highlight></codeline>
<codeline lineno="104" refid="group__can__interface_1ggac7ec472c26c564dd7067c49f67c8d2f7a69f2f1a5bb6e1abe4898069586701ef8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1ggac7ec472c26c564dd7067c49f67c8d2f7a69f2f1a5bb6e1abe4898069586701ef8" kindref="member">CAN_ERROR_PASSIVE</ref>,</highlight></codeline>
<codeline lineno="106" refid="group__can__interface_1ggac7ec472c26c564dd7067c49f67c8d2f7ac8cadafe6fe9deff8a983e28190042b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1ggac7ec472c26c564dd7067c49f67c8d2f7ac8cadafe6fe9deff8a983e28190042b1" kindref="member">CAN_BUS_OFF</ref>,</highlight></codeline>
<codeline lineno="107"><highlight class="normal">};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="group__can__interface_1ga9a30b6abfaf14193f0c41b1c46d6f50a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga9a30b6abfaf14193f0c41b1c46d6f50a" kindref="member">can_ide</ref><sp/>{</highlight></codeline>
<codeline lineno="115" refid="group__can__interface_1gga9a30b6abfaf14193f0c41b1c46d6f50aa8c54cc658223f3fe1101eab57307cb7d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gga9a30b6abfaf14193f0c41b1c46d6f50aa8c54cc658223f3fe1101eab57307cb7d" kindref="member">CAN_STANDARD_IDENTIFIER</ref>,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gga9a30b6abfaf14193f0c41b1c46d6f50aa3088f4e06b83c20398199e48b93bb939" kindref="member">CAN_EXTENDED_IDENTIFIER</ref></highlight></codeline>
<codeline lineno="118" refid="group__can__interface_1gga9a30b6abfaf14193f0c41b1c46d6f50aa3088f4e06b83c20398199e48b93bb939" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="group__can__interface_1ga888b0994e8c3cdfb80f9a638dd148303" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga888b0994e8c3cdfb80f9a638dd148303" kindref="member">can_rtr</ref><sp/>{</highlight></codeline>
<codeline lineno="125" refid="group__can__interface_1gga888b0994e8c3cdfb80f9a638dd148303a9d88cf6e242528a2caf7d2a28c1040e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gga888b0994e8c3cdfb80f9a638dd148303a9d88cf6e242528a2caf7d2a28c1040e5" kindref="member">CAN_DATAFRAME</ref>,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gga888b0994e8c3cdfb80f9a638dd148303afcfc7be1a45d2af3826db5041028f69e" kindref="member">CAN_REMOTEREQUEST</ref></highlight></codeline>
<codeline lineno="128" refid="group__can__interface_1gga888b0994e8c3cdfb80f9a638dd148303afcfc7be1a45d2af3826db5041028f69e" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="structzcan__frame" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structzcan__frame" kindref="compound">zcan_frame</ref><sp/>{</highlight></codeline>
<codeline lineno="135" refid="structzcan__frame_1af326efea16d6ab730f7a751e12061481" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structzcan__frame_1af326efea16d6ab730f7a751e12061481" kindref="member">id</ref><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>29;</highlight></codeline>
<codeline lineno="137" refid="structzcan__frame_1ae6ea39eeee344cbb47d7b0ecb0a76c44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structzcan__frame_1ae6ea39eeee344cbb47d7b0ecb0a76c44" kindref="member">fd</ref><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="139" refid="structzcan__frame_1a8e9f2c868df24c592ebf88080d6bd41e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structzcan__frame_1a8e9f2c868df24c592ebf88080d6bd41e" kindref="member">rtr</ref><sp/><sp/><sp/><sp/><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="141" refid="structzcan__frame_1a64316d4196481a83b6c2f91ad012278c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structzcan__frame_1a64316d4196481a83b6c2f91ad012278c" kindref="member">id_type</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="143" refid="structzcan__frame_1a01b604502c9e700848a172cab3922555" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structzcan__frame_1a01b604502c9e700848a172cab3922555" kindref="member">dlc</ref>;</highlight></codeline>
<codeline lineno="145" refid="structzcan__frame_1abe397683c95ec71f7f19e83eb0ae5d06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structzcan__frame_1abe397683c95ec71f7f19e83eb0ae5d06" kindref="member">brs</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>res<sp/>:<sp/>7;<sp/></highlight><highlight class="comment">/*<sp/>reserved/padding.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_CAN_RX_TIMESTAMP)<sp/>||<sp/>defined(__DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="structzcan__frame_1a8f1e1acf5623c45b7da061dddfa8efac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structzcan__frame_1a8f1e1acf5623c45b7da061dddfa8efac" kindref="member">timestamp</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>res0;<sp/><sp/></highlight><highlight class="comment">/*<sp/>reserved/padding.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>res1;<sp/><sp/></highlight><highlight class="comment">/*<sp/>reserved/padding.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="166" refid="structzcan__frame_1a7cfbef39b467d61f84054950f75c2993" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structzcan__frame_1a7cfbef39b467d61f84054950f75c2993" kindref="member">data</ref>[CAN_MAX_DLEN];</highlight></codeline>
<codeline lineno="167" refid="structzcan__frame_1a05242ce1a960c1ca46562346dcabe27d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structzcan__frame_1a05242ce1a960c1ca46562346dcabe27d" kindref="member">data_32</ref>[<ref refid="group__sys-util_1gaad408461e7ab356650bcd5c83bc0ed39" kindref="member">ceiling_fraction</ref>(CAN_MAX_DLEN,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref>))];</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="169"><highlight class="normal">};</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="structzcan__filter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structzcan__filter" kindref="compound">zcan_filter</ref><sp/>{</highlight></codeline>
<codeline lineno="176" refid="structzcan__filter_1ae4c5433585d0252366ebb007e5970fe7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structzcan__filter_1ae4c5433585d0252366ebb007e5970fe7" kindref="member">id</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>29;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>res0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="181" refid="structzcan__filter_1a368e36f8b6ce814af3a5b2d0332e8e8e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structzcan__filter_1a368e36f8b6ce814af3a5b2d0332e8e8e" kindref="member">rtr</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="183" refid="structzcan__filter_1ad01197a2e69b57a5491a242ad62685ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structzcan__filter_1ad01197a2e69b57a5491a242ad62685ba" kindref="member">id_type</ref><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="187" refid="structzcan__filter_1a185e1f83c4e3039312a1b95676975d68" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structzcan__filter_1a185e1f83c4e3039312a1b95676975d68" kindref="member">id_mask</ref><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>29;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>res1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="195" refid="structzcan__filter_1a6dc87417d9e68995cf5ec11ee1519167" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structzcan__filter_1a6dc87417d9e68995cf5ec11ee1519167" kindref="member">rtr_mask</ref><sp/><sp/><sp/><sp/><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>res2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">};</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="structcan__bus__err__cnt" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcan__bus__err__cnt" kindref="compound">can_bus_err_cnt</ref><sp/>{</highlight></codeline>
<codeline lineno="206" refid="structcan__bus__err__cnt_1a01bb2cb16656d0fd4f99cfbfa1f30e98" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structcan__bus__err__cnt_1a01bb2cb16656d0fd4f99cfbfa1f30e98" kindref="member">tx_err_cnt</ref>;</highlight></codeline>
<codeline lineno="208" refid="structcan__bus__err__cnt_1a6be6ce6b592641ba0dce36fe1cd8902a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structcan__bus__err__cnt_1a6be6ce6b592641ba0dce36fe1cd8902a" kindref="member">rx_err_cnt</ref>;</highlight></codeline>
<codeline lineno="209"><highlight class="normal">};</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="243" refid="structcan__timing" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcan__timing" kindref="compound">can_timing</ref><sp/>{</highlight></codeline>
<codeline lineno="245" refid="structcan__timing_1a5af76a4ee9c741642ec19265a47fceb5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structcan__timing_1a5af76a4ee9c741642ec19265a47fceb5" kindref="member">sjw</ref>;</highlight></codeline>
<codeline lineno="247" refid="structcan__timing_1ac009d40fee9788b663963978498b2ee9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structcan__timing_1ac009d40fee9788b663963978498b2ee9" kindref="member">prop_seg</ref>;</highlight></codeline>
<codeline lineno="249" refid="structcan__timing_1a9941688e79fa4ce01c4b498433319089" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structcan__timing_1a9941688e79fa4ce01c4b498433319089" kindref="member">phase_seg1</ref>;</highlight></codeline>
<codeline lineno="251" refid="structcan__timing_1a6ca0caf618d28a761c3c8859ed3a68d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structcan__timing_1a6ca0caf618d28a761c3c8859ed3a68d6" kindref="member">phase_seg2</ref>;</highlight></codeline>
<codeline lineno="253" refid="structcan__timing_1a74fb8341cbb6d97721c9d0afbc7e1f3a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structcan__timing_1a74fb8341cbb6d97721c9d0afbc7e1f3a" kindref="member">prescaler</ref>;</highlight></codeline>
<codeline lineno="254"><highlight class="normal">};</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="group__can__interface_1ga3973b4d5f1c8078eba566c8f0e2c01f1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__can__interface_1ga3973b4d5f1c8078eba566c8f0e2c01f1" kindref="member">can_tx_callback_t</ref>)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="group__can__interface_1gaaa6db2ee486884116a801a797af844ba" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__can__interface_1gaaa6db2ee486884116a801a797af844ba" kindref="member">can_rx_callback_t</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structzcan__frame" kindref="compound">zcan_frame</ref><sp/>*frame,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="group__can__interface_1gab0cdbcc4aed49681cd4cf62b28302190" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__can__interface_1gab0cdbcc4aed49681cd4cf62b28302190" kindref="member">can_state_change_callback_t</ref>)(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gac7ec472c26c564dd7067c49f67c8d2f7" kindref="member">can_state</ref><sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcan__bus__err__cnt" kindref="compound">can_bus_err_cnt</ref><sp/>err_cnt,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*can_set_timing_t)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcan__timing" kindref="compound">can_timing</ref><sp/>*timing,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcan__timing" kindref="compound">can_timing</ref><sp/>*timing_data);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*can_set_mode_t)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga4e8ab343dc079bfda049496e42e29399" kindref="member">can_mode</ref><sp/>mode);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*can_send_t)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structzcan__frame" kindref="compound">zcan_frame</ref><sp/>*frame,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>,<sp/><ref refid="group__can__interface_1ga3973b4d5f1c8078eba566c8f0e2c01f1" kindref="member">can_tx_callback_t</ref><sp/>callback,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*can_add_rx_filter_t)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gaaa6db2ee486884116a801a797af844ba" kindref="member">can_rx_callback_t</ref><sp/>callback,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structzcan__filter" kindref="compound">zcan_filter</ref><sp/>*filter);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*can_remove_rx_filter_t)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filter_id);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*can_recover_t)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*can_get_state_t)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gac7ec472c26c564dd7067c49f67c8d2f7" kindref="member">can_state</ref><sp/>*<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>,</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcan__bus__err__cnt" kindref="compound">can_bus_err_cnt</ref><sp/>*err_cnt);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void(*can_set_state_change_callback_t)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gab0cdbcc4aed49681cd4cf62b28302190" kindref="member">can_state_change_callback_t</ref><sp/>callback,</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*can_get_core_clock_t)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*rate);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*can_get_max_filters_t)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga9a30b6abfaf14193f0c41b1c46d6f50a" kindref="member">can_ide</ref><sp/>id_type);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal">__subsystem<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_driver_api<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_set_mode_t<sp/>set_mode;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_set_timing_t<sp/>set_timing;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_send_t<sp/><ref refid="posix_2sys_2socket_8h_1ad32c12370c1d09a96775091bbbf3c44d" kindref="member">send</ref>;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_add_rx_filter_t<sp/>add_rx_filter;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_remove_rx_filter_t<sp/>remove_rx_filter;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CONFIG_CAN_AUTO_BUS_OFF_RECOVERY)<sp/>||<sp/>defined(__DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_recover_t<sp/>recover;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_CAN_AUTO_BUS_OFF_RECOVERY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_get_state_t<sp/>get_state;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_set_state_change_callback_t<sp/>set_state_change_callback;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_get_core_clock_t<sp/>get_core_clock;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_get_max_filters_t<sp/>get_max_filters;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Min<sp/>values<sp/>for<sp/>the<sp/>timing<sp/>registers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcan__timing" kindref="compound">can_timing</ref><sp/>timing_min;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Max<sp/>values<sp/>for<sp/>the<sp/>timing<sp/>registers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcan__timing" kindref="compound">can_timing</ref><sp/>timing_max;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_CAN_FD_MODE)<sp/>||<sp/>defined(__DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Min<sp/>values<sp/>for<sp/>the<sp/>timing<sp/>registers<sp/>during<sp/>the<sp/>data<sp/>phase<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcan__timing" kindref="compound">can_timing</ref><sp/>timing_min_data;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Max<sp/>values<sp/>for<sp/>the<sp/>timing<sp/>registers<sp/>during<sp/>the<sp/>data<sp/>phase<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcan__timing" kindref="compound">can_timing</ref><sp/>timing_max_data;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_CAN_FD_MODE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">};</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_CAN_STATS)<sp/>||<sp/>defined(__DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stats_2stats_8h" kindref="compound">stats/stats.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><ref refid="stats_2stats_8h_1ae8e85c3ce2d901f4668d7237b19999fe" kindref="member">STATS_SECT_START</ref>(can)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><ref refid="stats_2stats_8h_1a592329613cc77cfa5dee3e1d3b16dd93" kindref="member">STATS_SECT_ENTRY32</ref>(bit0_error)</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><ref refid="stats_2stats_8h_1a592329613cc77cfa5dee3e1d3b16dd93" kindref="member">STATS_SECT_ENTRY32</ref>(bit1_error)</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><ref refid="stats_2stats_8h_1a592329613cc77cfa5dee3e1d3b16dd93" kindref="member">STATS_SECT_ENTRY32</ref>(stuff_error)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><ref refid="stats_2stats_8h_1a592329613cc77cfa5dee3e1d3b16dd93" kindref="member">STATS_SECT_ENTRY32</ref>(crc_error)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><ref refid="stats_2stats_8h_1a592329613cc77cfa5dee3e1d3b16dd93" kindref="member">STATS_SECT_ENTRY32</ref>(form_error)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><ref refid="stats_2stats_8h_1a592329613cc77cfa5dee3e1d3b16dd93" kindref="member">STATS_SECT_ENTRY32</ref>(ack_error)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><ref refid="stats_2stats_8h_1a4124f8c0a9ffb78d8be608a780676785" kindref="member">STATS_SECT_END</ref>;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><ref refid="stats_2stats_8h_1abd76143ad82eea7aded01af8cb7bc9ae" kindref="member">STATS_NAME_START</ref>(can)</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><ref refid="stats_2stats_8h_1a30648b154e6da64aa39551fac123dd1b" kindref="member">STATS_NAME</ref>(can,<sp/>bit0_error)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><ref refid="stats_2stats_8h_1a30648b154e6da64aa39551fac123dd1b" kindref="member">STATS_NAME</ref>(can,<sp/>bit1_error)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><ref refid="stats_2stats_8h_1a30648b154e6da64aa39551fac123dd1b" kindref="member">STATS_NAME</ref>(can,<sp/>stuff_error)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><ref refid="stats_2stats_8h_1a30648b154e6da64aa39551fac123dd1b" kindref="member">STATS_NAME</ref>(can,<sp/>crc_error)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><ref refid="stats_2stats_8h_1a30648b154e6da64aa39551fac123dd1b" kindref="member">STATS_NAME</ref>(can,<sp/>form_error)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><ref refid="stats_2stats_8h_1a30648b154e6da64aa39551fac123dd1b" kindref="member">STATS_NAME</ref>(can,<sp/>ack_error)</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><ref refid="stats_2stats_8h_1a0de61377bb7c254b68cb39a9b5105e4f" kindref="member">STATS_NAME_END</ref>(can);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="431" refid="structcan__device__state" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcan__device__state" kindref="compound">can_device_state</ref><sp/>{</highlight></codeline>
<codeline lineno="432" refid="structcan__device__state_1a28061ff1193176dd01b7bb9a88f402ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice__state" kindref="compound">device_state</ref><sp/><ref refid="structcan__device__state_1a28061ff1193176dd01b7bb9a88f402ec" kindref="member">devstate</ref>;</highlight></codeline>
<codeline lineno="433" refid="structcan__device__state_1ae05c85eae4f6bee075ffdc4f0ab56f47" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stats_can<sp/><ref refid="structcan__device__state_1ae05c85eae4f6bee075ffdc4f0ab56f47" kindref="member">stats</ref>;</highlight></codeline>
<codeline lineno="434"><highlight class="normal">};</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_CAN_GET_STATS(dev_)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="442"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONTAINER_OF(dev_-&gt;state,<sp/>struct<sp/>can_device_state,<sp/>devstate)-&gt;stats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="454" refid="group__can__interface_1ga120a37d5ae5064dcbf116e488f733764" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_STATS_BIT0_ERROR_INC(dev_)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="455"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STATS_INC(Z_CAN_GET_STATS(dev_),<sp/>bit0_error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="465" refid="group__can__interface_1ga678b74039632302efcb5ef80f0e3a90b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_STATS_BIT1_ERROR_INC(dev_)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="466"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STATS_INC(Z_CAN_GET_STATS(dev_),<sp/>bit1_error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="group__can__interface_1gae4146843944b7ffb1c96636e889282f7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_STATS_STUFF_ERROR_INC(dev_)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="477"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STATS_INC(Z_CAN_GET_STATS(dev_),<sp/>stuff_error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="487" refid="group__can__interface_1ga125ce05d40881476f5f156ad5e28c664" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_STATS_CRC_ERROR_INC(dev_)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="488"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STATS_INC(Z_CAN_GET_STATS(dev_),<sp/>crc_error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="498" refid="group__can__interface_1gac5809b3f5e1a463822e76921cddc9909" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_STATS_FORM_ERROR_INC(dev_)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="499"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STATS_INC(Z_CAN_GET_STATS(dev_),<sp/>form_error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="509" refid="group__can__interface_1ga15f7ca18badbbe2fe24be68cacce6171" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_STATS_ACK_ERROR_INC(dev_)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="510"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STATS_INC(Z_CAN_GET_STATS(dev_),<sp/>ack_error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_CAN_DEVICE_STATE_DEFINE(node_id,<sp/>dev_name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="518"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>struct<sp/>can_device_state<sp/>Z_DEVICE_STATE_NAME(dev_name)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="519"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__((__section__(&quot;.z_devstate&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_CAN_INIT_FN(dev_name,<sp/>init_fn)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="528"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>int<sp/>UTIL_CAT(dev_name,<sp/>_init)(const<sp/>struct<sp/>device<sp/>*dev)<sp/>\</highlight></codeline>
<codeline lineno="529"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="530"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>can_device_state<sp/>*state<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="531"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONTAINER_OF(dev-&gt;state,<sp/>struct<sp/>can_device_state,<sp/>devstate);<sp/>\</highlight></codeline>
<codeline lineno="532"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats_init(&amp;state-&gt;stats.s_hdr,<sp/>STATS_SIZE_32,<sp/>6,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="533"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STATS_NAME_INIT_PARMS(can));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="534"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats_register(dev-&gt;name,<sp/>&amp;(state-&gt;stats.s_hdr));<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="535"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>init_fn(dev);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="536"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="560" refid="group__can__interface_1ga6c93ae9a5c48ec78045a6a64cfc0f81b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_DEVICE_DT_DEFINE(node_id,<sp/>init_fn,<sp/>pm_device,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="561"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_ptr,<sp/>cfg_ptr,<sp/>level,<sp/>prio,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="562"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>api_ptr,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="563"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_CAN_DEVICE_STATE_DEFINE(node_id,<sp/>Z_DEVICE_DT_DEV_NAME(node_id));<sp/>\</highlight></codeline>
<codeline lineno="564"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_CAN_INIT_FN(Z_DEVICE_DT_DEV_NAME(node_id),<sp/>init_fn)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="565"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_DEVICE_DEFINE(node_id,<sp/>Z_DEVICE_DT_DEV_NAME(node_id),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="566"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEVICE_DT_NAME(node_id),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="567"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;UTIL_CAT(Z_DEVICE_DT_DEV_NAME(node_id),<sp/>_init),<sp/>\</highlight></codeline>
<codeline lineno="568"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_device,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="569"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_ptr,<sp/>cfg_ptr,<sp/>level,<sp/>prio,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="570"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>api_ptr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="571"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(Z_DEVICE_STATE_NAME(Z_DEVICE_DT_DEV_NAME(node_id)).devstate),<sp/>\</highlight></codeline>
<codeline lineno="572"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_CAN_STATS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_STATS_BIT0_ERROR_INC(dev_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_STATS_BIT1_ERROR_INC(dev_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_STATS_STUFF_ERROR_INC(dev_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_STATS_CRC_ERROR_INC(dev_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_STATS_FORM_ERROR_INC(dev_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_STATS_ACK_ERROR_INC(dev_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_DEVICE_DT_DEFINE(node_id,<sp/>init_fn,<sp/>pm_device,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="584"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_ptr,<sp/>cfg_ptr,<sp/>level,<sp/>prio,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="585"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>api_ptr,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="586"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEVICE_DT_DEFINE(node_id,<sp/>init_fn,<sp/>pm_device,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="587"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_ptr,<sp/>cfg_ptr,<sp/>level,<sp/>prio,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="588"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>api_ptr,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_CAN_STATS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="599" refid="group__can__interface_1ga20266dc5e962922144e078b85ccb8351" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_DEVICE_DT_INST_DEFINE(inst,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="600"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_DEVICE_DT_DEFINE(DT_DRV_INST(inst),<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="618" refid="group__can__interface_1ga4af6d0d9ab72b195909f511ac65cb8fa" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga4af6d0d9ab72b195909f511ac65cb8fa" kindref="member">can_get_core_clock</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*rate);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_can_get_core_clock(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*rate)</highlight></codeline>
<codeline lineno="621"><highlight class="normal">{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_driver_api<sp/>*api<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;get_core_clock(dev,<sp/>rate);</highlight></codeline>
<codeline lineno="625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="647" refid="group__can__interface_1gac27fe64142603f0d32d422594356b2d7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gac27fe64142603f0d32d422594356b2d7" kindref="member">can_calc_timing</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcan__timing" kindref="compound">can_timing</ref><sp/>*res,</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>bitrate,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>sample_pnt);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_CAN_FD_MODE)<sp/>||<sp/>defined(__DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669" refid="group__can__interface_1ga358cd73ed59c2099f4b2c6ceb397ca11" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga358cd73ed59c2099f4b2c6ceb397ca11" kindref="member">can_calc_timing_data</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcan__timing" kindref="compound">can_timing</ref><sp/>*res,</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>bitrate,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>sample_pnt);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_CAN_FD_MODE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="689" refid="group__can__interface_1ga7ee7a3296995c09c7f35f54029ed26cd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga7ee7a3296995c09c7f35f54029ed26cd" kindref="member">can_calc_prescaler</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcan__timing" kindref="compound">can_timing</ref><sp/>*timing,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>bitrate);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="695" refid="group__can__interface_1ga3f7eefd33eb0cb074e5d742c5097554a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_SJW_NO_CHANGE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="713" refid="group__can__interface_1gae8d117c765b9e0cd1d08e7d63e6ce47b" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gae8d117c765b9e0cd1d08e7d63e6ce47b" kindref="member">can_set_timing</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcan__timing" kindref="compound">can_timing</ref><sp/>*timing,</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcan__timing" kindref="compound">can_timing</ref><sp/>*timing_data);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_can_set_timing(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcan__timing" kindref="compound">can_timing</ref><sp/>*timing,</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcan__timing" kindref="compound">can_timing</ref><sp/>*timing_data)</highlight></codeline>
<codeline lineno="720"><highlight class="normal">{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_driver_api<sp/>*api<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;set_timing(dev,<sp/>timing,<sp/>timing_data);</highlight></codeline>
<codeline lineno="724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="735" refid="group__can__interface_1ga10ed56841a7d2c53ef20bdfa732f9043" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga10ed56841a7d2c53ef20bdfa732f9043" kindref="member">can_set_mode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga4e8ab343dc079bfda049496e42e29399" kindref="member">can_mode</ref><sp/>mode);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_can_set_mode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga4e8ab343dc079bfda049496e42e29399" kindref="member">can_mode</ref><sp/>mode)</highlight></codeline>
<codeline lineno="738"><highlight class="normal">{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_driver_api<sp/>*api<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;set_mode(dev,<sp/>mode);</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="761" refid="group__can__interface_1gae0c862e57610ad80727c767fab690d93" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gae0c862e57610ad80727c767fab690d93" kindref="member">can_set_bitrate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>bitrate,</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>bitrate_data)</highlight></codeline>
<codeline lineno="764"><highlight class="normal">{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcan__timing" kindref="compound">can_timing</ref><sp/>timing;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_CAN_FD_MODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcan__timing" kindref="compound">can_timing</ref><sp/>timing_data;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__can__interface_1gac27fe64142603f0d32d422594356b2d7" kindref="member">can_calc_timing</ref>(dev,<sp/>&amp;timing,<sp/>bitrate,<sp/>875);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1ga2d1678d5a7cc8ce499643f3b8957def4" kindref="member">EINVAL</ref>;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.<ref refid="structcan__timing_1a5af76a4ee9c741642ec19265a47fceb5" kindref="member">sjw</ref><sp/>=<sp/><ref refid="group__can__interface_1ga3f7eefd33eb0cb074e5d742c5097554a" kindref="member">CAN_SJW_NO_CHANGE</ref>;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_CAN_FD_MODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__can__interface_1ga358cd73ed59c2099f4b2c6ceb397ca11" kindref="member">can_calc_timing_data</ref>(dev,<sp/>&amp;timing_data,<sp/>bitrate_data,<sp/>875);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1ga2d1678d5a7cc8ce499643f3b8957def4" kindref="member">EINVAL</ref>;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing_data.<ref refid="structcan__timing_1a5af76a4ee9c741642ec19265a47fceb5" kindref="member">sjw</ref><sp/>=<sp/><ref refid="group__can__interface_1ga3f7eefd33eb0cb074e5d742c5097554a" kindref="member">CAN_SJW_NO_CHANGE</ref>;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gae8d117c765b9e0cd1d08e7d63e6ce47b" kindref="member">can_set_timing</ref>(dev,<sp/>&amp;timing,<sp/>&amp;timing_data);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_CAN_FD_MODE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gae8d117c765b9e0cd1d08e7d63e6ce47b" kindref="member">can_set_timing</ref>(dev,<sp/>&amp;timing,<sp/>NULL);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!CONFIG_CAN_FD_MODE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="843" refid="group__can__interface_1ga1bf5353bf15ffc252726e71ace9f5372" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga1bf5353bf15ffc252726e71ace9f5372" kindref="member">can_send</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structzcan__frame" kindref="compound">zcan_frame</ref><sp/>*frame,</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>,<sp/><ref refid="group__can__interface_1ga3973b4d5f1c8078eba566c8f0e2c01f1" kindref="member">can_tx_callback_t</ref><sp/>callback,</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_can_send(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structzcan__frame" kindref="compound">zcan_frame</ref><sp/>*frame,</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>,<sp/><ref refid="group__can__interface_1ga3973b4d5f1c8078eba566c8f0e2c01f1" kindref="member">can_tx_callback_t</ref><sp/>callback,</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>)</highlight></codeline>
<codeline lineno="850"><highlight class="normal">{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_driver_api<sp/>*api<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;send(dev,<sp/>frame,<sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>,<sp/>callback,<sp/><ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="885" refid="group__can__interface_1gad3137bf27e64de3a550baf7e66641481" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gad3137bf27e64de3a550baf7e66641481" kindref="member">can_add_rx_filter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="group__can__interface_1gaaa6db2ee486884116a801a797af844ba" kindref="member">can_rx_callback_t</ref><sp/>callback,</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structzcan__filter" kindref="compound">zcan_filter</ref><sp/>*filter)</highlight></codeline>
<codeline lineno="887"><highlight class="normal">{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_driver_api<sp/>*api<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;add_rx_filter(dev,<sp/>callback,<sp/><ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>,<sp/>filter);</highlight></codeline>
<codeline lineno="891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="903" refid="group__can__interface_1ga7af0acdfbdad07fc3eba4cbd29bc090b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_MSGQ_DEFINE(name,<sp/>max_frames)<sp/>\</highlight></codeline>
<codeline lineno="904"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_MSGQ_DEFINE(name,<sp/>sizeof(struct<sp/>zcan_frame),<sp/>max_frames,<sp/>4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="927" refid="group__can__interface_1ga2feb41b89c8c172f02fd48fb3f6276de" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga2feb41b89c8c172f02fd48fb3f6276de" kindref="member">can_add_rx_filter_msgq</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__msgq" kindref="compound">k_msgq</ref><sp/>*<ref refid="msgq_2msgq__api_2src_2main_8c_1a5c4ebc803e1cc8bb3827444dc64e2c47" kindref="member">msgq</ref>,</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structzcan__filter" kindref="compound">zcan_filter</ref><sp/>*filter);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="939" refid="group__can__interface_1ga822aa3142ea01582d5cfb8b478fb2847" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga822aa3142ea01582d5cfb8b478fb2847" kindref="member">can_remove_rx_filter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filter_id);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>z_impl_can_remove_rx_filter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filter_id)</highlight></codeline>
<codeline lineno="942"><highlight class="normal">{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_driver_api<sp/>*api<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;remove_rx_filter(dev,<sp/>filter_id);</highlight></codeline>
<codeline lineno="946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="960" refid="group__can__interface_1gaace06471f995959bb2e91f04bb9c4d68" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gaace06471f995959bb2e91f04bb9c4d68" kindref="member">can_get_max_filters</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga9a30b6abfaf14193f0c41b1c46d6f50a" kindref="member">can_ide</ref><sp/>id_type);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_can_get_max_filters(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga9a30b6abfaf14193f0c41b1c46d6f50a" kindref="member">can_ide</ref><sp/>id_type)</highlight></codeline>
<codeline lineno="963"><highlight class="normal">{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_driver_api<sp/>*api<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(api-&gt;get_max_filters<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1ga43785b9969e0bd1af532dbde06c5540b" kindref="member">ENOSYS</ref>;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;get_max_filters(dev,<sp/>id_type);</highlight></codeline>
<codeline lineno="971"><highlight class="normal">}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="994" refid="group__can__interface_1gab98c121578c8349d9dfb41d60f356857" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gab98c121578c8349d9dfb41d60f356857" kindref="member">can_get_state</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gac7ec472c26c564dd7067c49f67c8d2f7" kindref="member">can_state</ref><sp/>*<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>,</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcan__bus__err__cnt" kindref="compound">can_bus_err_cnt</ref><sp/>*err_cnt);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_can_get_state(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gac7ec472c26c564dd7067c49f67c8d2f7" kindref="member">can_state</ref><sp/>*<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>,</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcan__bus__err__cnt" kindref="compound">can_bus_err_cnt</ref><sp/>*err_cnt)</highlight></codeline>
<codeline lineno="999"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_driver_api<sp/>*api<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;get_state(dev,<sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>,<sp/>err_cnt);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CONFIG_CAN_AUTO_BUS_OFF_RECOVERY)<sp/>||<sp/>defined(__DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020" refid="group__can__interface_1gac474e56a50685736a1c25dca277aab5e" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gac474e56a50685736a1c25dca277aab5e" kindref="member">can_recover</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_can_recover(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>)</highlight></codeline>
<codeline lineno="1023"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_driver_api<sp/>*api<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;recover(dev,<sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_CAN_AUTO_BUS_OFF_RECOVERY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>implementation<sp/>prevents<sp/>inking<sp/>errors<sp/>for<sp/>auto<sp/>recovery<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_can_recover(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>)</highlight></codeline>
<codeline lineno="1031"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!CONFIG_CAN_AUTO_BUS_OFF_RECOVERY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049" refid="group__can__interface_1gad322da0dad328abb50de23bef6882d8e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gad322da0dad328abb50de23bef6882d8e" kindref="member">can_set_state_change_callback</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gab0cdbcc4aed49681cd4cf62b28302190" kindref="member">can_state_change_callback_t</ref><sp/>callback,</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>)</highlight></codeline>
<codeline lineno="1052"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_driver_api<sp/>*api<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>api-&gt;set_state_change_callback(dev,<sp/>callback,<sp/><ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073" refid="group__can__interface_1gaa1d866167c0c23f8d5c0c15385589601" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="group__can__interface_1gaa1d866167c0c23f8d5c0c15385589601" kindref="member">can_dlc_to_bytes</ref>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>dlc)</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>dlc_table[]<sp/>=<sp/>{0,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>12,</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>16,<sp/>20,<sp/>24,<sp/>32,<sp/>48,<sp/>64};</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dlc<sp/>&gt;<sp/>0x0F<sp/>?<sp/>64<sp/>:<sp/>dlc_table[dlc];</highlight></codeline>
<codeline lineno="1079"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088" refid="group__can__interface_1ga8314716fe2b66d567b3fd377b8ee9dc3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="group__can__interface_1ga8314716fe2b66d567b3fd377b8ee9dc3" kindref="member">can_bytes_to_dlc</ref>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>num_bytes)</highlight></codeline>
<codeline lineno="1089"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_bytes<sp/>&lt;=<sp/>8<sp/><sp/>?<sp/>num_bytes<sp/>:</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_bytes<sp/>&lt;=<sp/>12<sp/>?<sp/>9<sp/>:</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_bytes<sp/>&lt;=<sp/>16<sp/>?<sp/>10<sp/>:</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_bytes<sp/>&lt;=<sp/>20<sp/>?<sp/>11<sp/>:</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_bytes<sp/>&lt;=<sp/>24<sp/>?<sp/>12<sp/>:</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_bytes<sp/>&lt;=<sp/>32<sp/>?<sp/>13<sp/>:</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_bytes<sp/>&lt;=<sp/>48<sp/>?<sp/>14<sp/>:</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>15;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132" refid="group__can__interface_1gaf1c86d266c4de5b8fb79e12ff38def1f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__can__interface_1gaf1c86d266c4de5b8fb79e12ff38def1f" kindref="member">canid_t</ref>;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137" refid="structcan__frame" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcan__frame" kindref="compound">can_frame</ref><sp/>{</highlight></codeline>
<codeline lineno="1139" refid="structcan__frame_1ac6aeb5fbc99596a37fe1519f3aa8410a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gaf1c86d266c4de5b8fb79e12ff38def1f" kindref="member">canid_t</ref><sp/><ref refid="structcan__frame_1ac6aeb5fbc99596a37fe1519f3aa8410a" kindref="member">can_id</ref>;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142" refid="structcan__frame_1aa055f09fd81b299201618396b7dc9314" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structcan__frame_1aa055f09fd81b299201618396b7dc9314" kindref="member">can_dlc</ref>;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>pad;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>padding.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>res0;<sp/><sp/></highlight><highlight class="comment">/*<sp/>reserved/padding.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>res1;<sp/><sp/></highlight><highlight class="comment">/*<sp/>reserved/padding.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151" refid="structcan__frame_1ac4b43443b2a338d35f0e1d3ef8355960" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structcan__frame_1ac4b43443b2a338d35f0e1d3ef8355960" kindref="member">data</ref>[CAN_MAX_DLEN];</highlight></codeline>
<codeline lineno="1152"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159" refid="structcan__filter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcan__filter" kindref="compound">can_filter</ref><sp/>{</highlight></codeline>
<codeline lineno="1161" refid="structcan__filter_1a5fccaff73b647ddc50fb712f936f0b33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gaf1c86d266c4de5b8fb79e12ff38def1f" kindref="member">canid_t</ref><sp/><ref refid="structcan__filter_1a5fccaff73b647ddc50fb712f936f0b33" kindref="member">can_id</ref>;</highlight></codeline>
<codeline lineno="1163" refid="structcan__filter_1a072a474e675c07a4d36bf9c940e8c571" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gaf1c86d266c4de5b8fb79e12ff38def1f" kindref="member">canid_t</ref><sp/><ref refid="structcan__filter_1a072a474e675c07a4d36bf9c940e8c571" kindref="member">can_mask</ref>;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172" refid="group__can__interface_1gaf561048ea56449c778ede63b30fe5c6e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gaf561048ea56449c778ede63b30fe5c6e" kindref="member">can_copy_frame_to_zframe</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcan__frame" kindref="compound">can_frame</ref><sp/>*frame,</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structzcan__frame" kindref="compound">zcan_frame</ref><sp/>*zframe)</highlight></codeline>
<codeline lineno="1174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zframe-&gt;<ref refid="structzcan__frame_1a64316d4196481a83b6c2f91ad012278c" kindref="member">id_type</ref><sp/>=<sp/>(frame-&gt;<ref refid="structcan__frame_1ac6aeb5fbc99596a37fe1519f3aa8410a" kindref="member">can_id</ref><sp/>&amp;<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(31))<sp/>&gt;&gt;<sp/>31;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zframe-&gt;<ref refid="structzcan__frame_1a8e9f2c868df24c592ebf88080d6bd41e" kindref="member">rtr</ref><sp/>=<sp/>(frame-&gt;<ref refid="structcan__frame_1ac6aeb5fbc99596a37fe1519f3aa8410a" kindref="member">can_id</ref><sp/>&amp;<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(30))<sp/>&gt;&gt;<sp/>30;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zframe-&gt;<ref refid="structzcan__frame_1af326efea16d6ab730f7a751e12061481" kindref="member">id</ref><sp/>=<sp/>frame-&gt;<ref refid="structcan__frame_1ac6aeb5fbc99596a37fe1519f3aa8410a" kindref="member">can_id</ref><sp/>&amp;<sp/><ref refid="dt-bindings_2adc_2adc_8h_1a3c12c6d36ad0aa481a3436923d21f4f8" kindref="member">BIT_MASK</ref>(29);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zframe-&gt;<ref refid="structzcan__frame_1a01b604502c9e700848a172cab3922555" kindref="member">dlc</ref><sp/>=<sp/>frame-&gt;<ref refid="structcan__frame_1aa055f09fd81b299201618396b7dc9314" kindref="member">can_dlc</ref>;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string_8h_1af0f01bffcd16daa9143f6014d10a25ad" kindref="member">memcpy</ref>(zframe-&gt;<ref refid="structzcan__frame_1a7cfbef39b467d61f84054950f75c2993" kindref="member">data</ref>,<sp/>frame-&gt;<ref refid="structcan__frame_1ac4b43443b2a338d35f0e1d3ef8355960" kindref="member">data</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(zframe-&gt;<ref refid="structzcan__frame_1a7cfbef39b467d61f84054950f75c2993" kindref="member">data</ref>));</highlight></codeline>
<codeline lineno="1180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188" refid="group__can__interface_1gad458a27a19ac09bf23444615b2c8c407" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gad458a27a19ac09bf23444615b2c8c407" kindref="member">can_copy_zframe_to_frame</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structzcan__frame" kindref="compound">zcan_frame</ref><sp/>*zframe,</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcan__frame" kindref="compound">can_frame</ref><sp/>*frame)</highlight></codeline>
<codeline lineno="1190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame-&gt;<ref refid="structcan__frame_1ac6aeb5fbc99596a37fe1519f3aa8410a" kindref="member">can_id</ref><sp/>=<sp/>(zframe-&gt;<ref refid="structzcan__frame_1a64316d4196481a83b6c2f91ad012278c" kindref="member">id_type</ref><sp/>&lt;&lt;<sp/>31)<sp/>|<sp/>(zframe-&gt;<ref refid="structzcan__frame_1a8e9f2c868df24c592ebf88080d6bd41e" kindref="member">rtr</ref><sp/>&lt;&lt;<sp/>30)<sp/>|<sp/>zframe-&gt;<ref refid="structzcan__frame_1af326efea16d6ab730f7a751e12061481" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame-&gt;<ref refid="structcan__frame_1aa055f09fd81b299201618396b7dc9314" kindref="member">can_dlc</ref><sp/>=<sp/>zframe-&gt;<ref refid="structzcan__frame_1a01b604502c9e700848a172cab3922555" kindref="member">dlc</ref>;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string_8h_1af0f01bffcd16daa9143f6014d10a25ad" kindref="member">memcpy</ref>(frame-&gt;<ref refid="structcan__frame_1ac4b43443b2a338d35f0e1d3ef8355960" kindref="member">data</ref>,<sp/>zframe-&gt;<ref refid="structzcan__frame_1a7cfbef39b467d61f84054950f75c2993" kindref="member">data</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(frame-&gt;<ref refid="structcan__frame_1ac4b43443b2a338d35f0e1d3ef8355960" kindref="member">data</ref>));</highlight></codeline>
<codeline lineno="1194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202" refid="group__can__interface_1gaf9a168f41ae3bef27e61e99ee8fcde27" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gaf9a168f41ae3bef27e61e99ee8fcde27" kindref="member">can_copy_filter_to_zfilter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcan__filter" kindref="compound">can_filter</ref><sp/>*filter,</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structzcan__filter" kindref="compound">zcan_filter</ref><sp/>*zfilter)</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zfilter-&gt;<ref refid="structzcan__filter_1ad01197a2e69b57a5491a242ad62685ba" kindref="member">id_type</ref><sp/>=<sp/>(filter-&gt;<ref refid="structcan__filter_1a5fccaff73b647ddc50fb712f936f0b33" kindref="member">can_id</ref><sp/>&amp;<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(31))<sp/>&gt;&gt;<sp/>31;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zfilter-&gt;<ref refid="structzcan__filter_1a368e36f8b6ce814af3a5b2d0332e8e8e" kindref="member">rtr</ref><sp/>=<sp/>(filter-&gt;<ref refid="structcan__filter_1a5fccaff73b647ddc50fb712f936f0b33" kindref="member">can_id</ref><sp/>&amp;<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(30))<sp/>&gt;&gt;<sp/>30;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zfilter-&gt;<ref refid="structzcan__filter_1ae4c5433585d0252366ebb007e5970fe7" kindref="member">id</ref><sp/>=<sp/>filter-&gt;<ref refid="structcan__filter_1a5fccaff73b647ddc50fb712f936f0b33" kindref="member">can_id</ref><sp/>&amp;<sp/><ref refid="dt-bindings_2adc_2adc_8h_1a3c12c6d36ad0aa481a3436923d21f4f8" kindref="member">BIT_MASK</ref>(29);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zfilter-&gt;<ref refid="structzcan__filter_1a6dc87417d9e68995cf5ec11ee1519167" kindref="member">rtr_mask</ref><sp/>=<sp/>(filter-&gt;<ref refid="structcan__filter_1a072a474e675c07a4d36bf9c940e8c571" kindref="member">can_mask</ref><sp/>&amp;<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(30))<sp/>&gt;&gt;<sp/>30;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zfilter-&gt;<ref refid="structzcan__filter_1a185e1f83c4e3039312a1b95676975d68" kindref="member">id_mask</ref><sp/>=<sp/>filter-&gt;<ref refid="structcan__filter_1a072a474e675c07a4d36bf9c940e8c571" kindref="member">can_mask</ref><sp/>&amp;<sp/><ref refid="dt-bindings_2adc_2adc_8h_1a3c12c6d36ad0aa481a3436923d21f4f8" kindref="member">BIT_MASK</ref>(29);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218" refid="group__can__interface_1gae89c9ae16f965d838595866f2ffea2e2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gae89c9ae16f965d838595866f2ffea2e2" kindref="member">can_copy_zfilter_to_filter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structzcan__filter" kindref="compound">zcan_filter</ref><sp/>*zfilter,</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcan__filter" kindref="compound">can_filter</ref><sp/>*filter)</highlight></codeline>
<codeline lineno="1220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filter-&gt;<ref refid="structcan__filter_1a5fccaff73b647ddc50fb712f936f0b33" kindref="member">can_id</ref><sp/>=<sp/>(zfilter-&gt;<ref refid="structzcan__filter_1ad01197a2e69b57a5491a242ad62685ba" kindref="member">id_type</ref><sp/>&lt;&lt;<sp/>31)<sp/>|</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(zfilter-&gt;<ref refid="structzcan__filter_1a368e36f8b6ce814af3a5b2d0332e8e8e" kindref="member">rtr</ref><sp/>&lt;&lt;<sp/>30)<sp/>|<sp/>zfilter-&gt;<ref refid="structzcan__filter_1ae4c5433585d0252366ebb007e5970fe7" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filter-&gt;<ref refid="structcan__filter_1a072a474e675c07a4d36bf9c940e8c571" kindref="member">can_mask</ref><sp/>=<sp/>(zfilter-&gt;<ref refid="structzcan__filter_1a6dc87417d9e68995cf5ec11ee1519167" kindref="member">rtr_mask</ref><sp/>&lt;&lt;<sp/>30)<sp/>|</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(zfilter-&gt;<ref refid="structzcan__filter_1ad01197a2e69b57a5491a242ad62685ba" kindref="member">id_type</ref><sp/>&lt;&lt;<sp/>31)<sp/>|<sp/>zfilter-&gt;<ref refid="structzcan__filter_1a185e1f83c4e3039312a1b95676975d68" kindref="member">id_mask</ref>;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;syscalls/can.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_DRIVERS_CAN_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/drivers/can.h"/>
  </compounddef>
</doxygen>
