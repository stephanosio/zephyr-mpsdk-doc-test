<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structztest__suite__node" kind="struct" language="C++" prot="public">
    <compoundname>ztest_suite_node</compoundname>
    <includes refid="ztest__test__deprecated_8h" local="no">ztest_test_deprecated.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structztest__suite__node_1ad28a3d7f4ac80a2aee55c95385426f23" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char * ztest_suite_node::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The name of the test suite. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_deprecated.h" line="50" column="12" bodyfile="subsys/testsuite/ztest/include/ztest_test_deprecated.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structztest__suite__node_1a4caff08d7b8fe0a8be383bcb61c36941" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structunit__test" kindref="compound">unit_test</ref> *</type>
        <definition>struct unit_test* ztest_suite_node::suite</definition>
        <argsstring></argsstring>
        <name>suite</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to the test suite. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_deprecated.h" line="52" column="16" bodyfile="subsys/testsuite/ztest/include/ztest_test_deprecated.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structztest__suite__node_1abd125d188f1f2b43efd4e93a334bf648" prot="public" static="no" mutable="no">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref>(*</type>
        <definition>bool(* ztest_suite_node::predicate)(const void *state)</definition>
        <argsstring>)(const void *state)</argsstring>
        <name>predicate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An optional predicate function to determine if the test should run. If NULL, then the test will only run once on the first attempt.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>The current state of the test application. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the suite should be run; false to skip. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_deprecated.h" line="60" column="1" bodyfile="subsys/testsuite/ztest/include/ztest_test_deprecated.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structztest__suite__node_1a5f5c9722ac32f6fb0ef49e84c40b2e80" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structztest__suite__stats" kindref="compound">ztest_suite_stats</ref></type>
        <definition>struct ztest_suite_stats ztest_suite_node::stats</definition>
        <argsstring></argsstring>
        <name>stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stats </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_deprecated.h" line="62" column="24" bodyfile="subsys/testsuite/ztest/include/ztest_test_deprecated.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structztest__suite__node_1a1e951156ee38e11a00e536d18dec60aa" prot="public" static="no" mutable="no">
        <type>void *(*</type>
        <definition>void *(* ztest_suite_node::setup) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>setup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setup function to run before running this suite</para>
<para><simplesect kind="return"><para>Pointer to the data structure that will be used throughout this test suite </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="58" column="1" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structztest__suite__node_1a62a762724fb81ed04f77841d0837ea97" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* ztest_suite_node::before) (void *data)</definition>
        <argsstring>)(void *data)</argsstring>
        <name>before</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to run before each test in this suite</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The test suite&apos;s data returned from <ref refid="structztest__suite__node_1a1e951156ee38e11a00e536d18dec60aa" kindref="member">setup()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="64" column="1" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structztest__suite__node_1aa9e753a97c1ebd10e40a9d4b654c9b6d" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* ztest_suite_node::after) (void *data)</definition>
        <argsstring>)(void *data)</argsstring>
        <name>after</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to run after each test in this suite</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The test suite&apos;s data returned from <ref refid="structztest__suite__node_1a1e951156ee38e11a00e536d18dec60aa" kindref="member">setup()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="70" column="1" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structztest__suite__node_1a816d1095f551dfcff518543ae1ef7894" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* ztest_suite_node::teardown) (void *data)</definition>
        <argsstring>)(void *data)</argsstring>
        <name>teardown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Teardown function to run after running this suite</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The test suite&apos;s data returned from <ref refid="structztest__suite__node_1a1e951156ee38e11a00e536d18dec60aa" kindref="member">setup()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="76" column="1" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A single node of test suite. Each node should be added to a single linker section which will allow <ref refid="ztest__test__deprecated_8h_1a22616bfcdfec54ef4e8bda897dd84936" kindref="member">ztest_run_registered_test_suites()</ref> to iterate over the various nodes.</para>
<para>A single node of test suite. Each node should be added to a single linker section which will allow <ref refid="ztest__test__new_8h_1abd0177fd931d390c1e3f6dbdcaf85605" kindref="member">ztest_run_test_suites()</ref> to iterate over the various nodes. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>unit_test</label>
        <link refid="structunit__test"/>
      </node>
      <node id="1">
        <label>ztest_suite_node</label>
        <link refid="structztest__suite__node"/>
        <childnode refid="2" relation="usage">
          <edgelabel>suite</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>stats</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>ztest_suite_stats</label>
        <link refid="structztest__suite__stats"/>
      </node>
    </collaborationgraph>
    <location file="subsys/testsuite/ztest/include/ztest_test_deprecated.h" line="48" column="1" bodyfile="subsys/testsuite/ztest/include/ztest_test_deprecated.h" bodystart="48" bodyend="63"/>
    <listofallmembers>
      <member refid="structztest__suite__node_1aa9e753a97c1ebd10e40a9d4b654c9b6d" prot="public" virt="non-virtual"><scope>ztest_suite_node</scope><name>after</name></member>
      <member refid="structztest__suite__node_1a62a762724fb81ed04f77841d0837ea97" prot="public" virt="non-virtual"><scope>ztest_suite_node</scope><name>before</name></member>
      <member refid="structztest__suite__node_1ad28a3d7f4ac80a2aee55c95385426f23" prot="public" virt="non-virtual"><scope>ztest_suite_node</scope><name>name</name></member>
      <member refid="structztest__suite__node_1abd125d188f1f2b43efd4e93a334bf648" prot="public" virt="non-virtual"><scope>ztest_suite_node</scope><name>predicate</name></member>
      <member refid="structztest__suite__node_1a1e951156ee38e11a00e536d18dec60aa" prot="public" virt="non-virtual"><scope>ztest_suite_node</scope><name>setup</name></member>
      <member refid="structztest__suite__node_1a5f5c9722ac32f6fb0ef49e84c40b2e80" prot="public" virt="non-virtual"><scope>ztest_suite_node</scope><name>stats</name></member>
      <member refid="structztest__suite__node_1a4caff08d7b8fe0a8be383bcb61c36941" prot="public" virt="non-virtual"><scope>ztest_suite_node</scope><name>suite</name></member>
      <member refid="structztest__suite__node_1a816d1095f551dfcff518543ae1ef7894" prot="public" virt="non-virtual"><scope>ztest_suite_node</scope><name>teardown</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
