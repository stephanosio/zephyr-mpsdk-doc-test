<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structbt__ots__cb" kind="struct" language="C++" prot="public">
    <compoundname>bt_ots_cb</compoundname>
    <includes refid="ots_8h" local="no">ots.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structbt__ots__cb_1a0c95b2bc382474be3c1ae849936a8206" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_ots_cb::obj_created) (struct bt_ots *ots, struct bt_conn *conn, uint64_t id, const struct bt_ots_obj_add_param *add_param, struct bt_ots_obj_created_desc *created_desc)</definition>
        <argsstring>)(struct bt_ots *ots, struct bt_conn *conn, uint64_t id, const struct bt_ots_obj_add_param *add_param, struct bt_ots_obj_created_desc *created_desc)</argsstring>
        <name>obj_created</name>
        <briefdescription>
<para>Object created callback. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback is called whenever a new object is created. Application can reject this request by returning an error when it does not have necessary resources to hold this new object. This callback is also triggered when the server creates a new object with <ref refid="group__bt__ots_1gabf59844edd0ffd434acd94bad9a7b52c" kindref="member">bt_ots_obj_add()</ref> API.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ots</parametername>
</parameternamelist>
<parameterdescription>
<para>OTS instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that is requesting object creation or NULL if object is created by <ref refid="group__bt__ots_1gabf59844edd0ffd434acd94bad9a7b52c" kindref="member">bt_ots_obj_add()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Object ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>add_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Object creation requested parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>created_desc</parametername>
</parameternamelist>
<parameterdescription>
<para>Created object descriptor that shall be filled by the receiver of this callback.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
<simplesect kind="return"><para>-ENOTSUP if object type is not supported </para>
</simplesect>
<simplesect kind="return"><para>-ENOMEM if no available space for new object. </para>
</simplesect>
<simplesect kind="return"><para>-EINVAL if an invalid parameter is provided </para>
</simplesect>
<simplesect kind="return"><para>other negative values are treated as a generic operation failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/services/ots.h" line="540" column="1" bodyfile="include/bluetooth/services/ots.h" bodystart="540" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__ots__cb_1a2fd78b43691e83c1faa86c1748ab2359" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_ots_cb::obj_deleted) (struct bt_ots *ots, struct bt_conn *conn, uint64_t id)</definition>
        <argsstring>)(struct bt_ots *ots, struct bt_conn *conn, uint64_t id)</argsstring>
        <name>obj_deleted</name>
        <briefdescription>
<para>Object deleted callback. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback is called whenever an object is deleted. It is also triggered when the server deletes an object with <ref refid="group__bt__ots_1ga872ba5a73fa4e617b9d48e7361af74c7" kindref="member">bt_ots_obj_delete()</ref> API.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ots</parametername>
</parameternamelist>
<parameterdescription>
<para>OTS instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that deleted the object or NULL if this request came from the server. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Object ID.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>When</parametername>
</parameternamelist>
<parameterdescription>
<para>an error is indicated by using a negative value, the object delete procedure is aborted and a corresponding failed status is returned to the client. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success. </para>
</simplesect>
<simplesect kind="return"><para>-EBUSY if the object is locked. This is generally not expected to be returned by the application as the OTS layer tracks object accesses. An object locked status is returned to the client. </para>
</simplesect>
<simplesect kind="return"><para>Other negative values in case of error. A generic operation failed status is returned to the client. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/services/ots.h" line="565" column="1" bodyfile="include/bluetooth/services/ots.h" bodystart="565" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__ots__cb_1ae8602aef0fd001d6768dc20c8873742d" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_ots_cb::obj_selected) (struct bt_ots *ots, struct bt_conn *conn, uint64_t id)</definition>
        <argsstring>)(struct bt_ots *ots, struct bt_conn *conn, uint64_t id)</argsstring>
        <name>obj_selected</name>
        <briefdescription>
<para>Object selected callback. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback is called on successful object selection.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ots</parametername>
</parameternamelist>
<parameterdescription>
<para>OTS instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that selected new object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Object ID. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/services/ots.h" line="576" column="1" bodyfile="include/bluetooth/services/ots.h" bodystart="576" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__ots__cb_1ab67ca0032b8b2fd9b8fbe6c117c186dd" prot="public" static="no" mutable="no">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref>(*</type>
        <definition>ssize_t(* bt_ots_cb::obj_read) (struct bt_ots *ots, struct bt_conn *conn, uint64_t id, void **data, size_t len, off_t offset)</definition>
        <argsstring>)(struct bt_ots *ots, struct bt_conn *conn, uint64_t id, void **data, size_t len, off_t offset)</argsstring>
        <name>obj_read</name>
        <briefdescription>
<para>Object read callback. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback is called multiple times during the Object read operation. OTS module will keep requesting successive Object fragments from the application until the read operation is completed. The end of read operation is indicated by NULL data parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ots</parametername>
</parameternamelist>
<parameterdescription>
<para>OTS instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that read object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Object ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>In: NULL once the read operations is completed. Out: Next chunk of data to be sent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Remaining length requested by the client. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Object data offset.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Data length to be sent via data parameter. This value shall be smaller or equal to the len parameter. </para>
</simplesect>
<simplesect kind="return"><para>Negative value in case of an error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/services/ots.h" line="599" column="1" bodyfile="include/bluetooth/services/ots.h" bodystart="599" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__ots__cb_1ae31da190c9c6bee086e4d7f8fcd6fbb5" prot="public" static="no" mutable="no">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref>(*</type>
        <definition>ssize_t(* bt_ots_cb::obj_write) (struct bt_ots *ots, struct bt_conn *conn, uint64_t id, const void *data, size_t len, off_t offset, size_t rem)</definition>
        <argsstring>)(struct bt_ots *ots, struct bt_conn *conn, uint64_t id, const void *data, size_t len, off_t offset, size_t rem)</argsstring>
        <name>obj_write</name>
        <briefdescription>
<para>Object write callback. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback is called multiple times during the Object write operation. OTS module will keep providing successive Object fragments to the application until the write operation is completed. The offset and length of each write fragment is validated by the OTS module to be within the allocated size of the object. The remaining length indicates data length remaining to be written and will decrease each write iteration until it reaches 0 in the last write fragment.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ots</parametername>
</parameternamelist>
<parameterdescription>
<para>OTS instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that wrote object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Object ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Next chunk of data to be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the current chunk of data in the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Object data offset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rem</parametername>
</parameternamelist>
<parameterdescription>
<para>Remaining length in the write operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes written in case of success, if the number of bytes written does not match len, -EIO is returned to the L2CAP layer. </para>
</simplesect>
<simplesect kind="return"><para>A negative value in case of an error. </para>
</simplesect>
<simplesect kind="return"><para>-EINPROGRESS has a special meaning and is unsupported at the moment. It should not be returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/services/ots.h" line="629" column="1" bodyfile="include/bluetooth/services/ots.h" bodystart="629" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__ots__cb_1a070929082fd31c4af609ff34e59a9cc7" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_ots_cb::obj_name_written) (struct bt_ots *ots, struct bt_conn *conn, uint64_t id, const char *name)</definition>
        <argsstring>)(struct bt_ots *ots, struct bt_conn *conn, uint64_t id, const char *name)</argsstring>
        <name>obj_name_written</name>
        <briefdescription>
<para>Object name written callback. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback is called when the object name is written. This is a notification to the application that the object name has been updated by the OTS service implementation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ots</parametername>
</parameternamelist>
<parameterdescription>
<para>OTS instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that wrote object name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Object ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Object name. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/services/ots.h" line="644" column="1" bodyfile="include/bluetooth/services/ots.h" bodystart="644" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>OTS callback structure. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/bluetooth/services/ots.h" line="517" column="1" bodyfile="include/bluetooth/services/ots.h" bodystart="517" bodyend="646"/>
    <listofallmembers>
      <member refid="structbt__ots__cb_1a0c95b2bc382474be3c1ae849936a8206" prot="public" virt="non-virtual"><scope>bt_ots_cb</scope><name>obj_created</name></member>
      <member refid="structbt__ots__cb_1a2fd78b43691e83c1faa86c1748ab2359" prot="public" virt="non-virtual"><scope>bt_ots_cb</scope><name>obj_deleted</name></member>
      <member refid="structbt__ots__cb_1a070929082fd31c4af609ff34e59a9cc7" prot="public" virt="non-virtual"><scope>bt_ots_cb</scope><name>obj_name_written</name></member>
      <member refid="structbt__ots__cb_1ab67ca0032b8b2fd9b8fbe6c117c186dd" prot="public" virt="non-virtual"><scope>bt_ots_cb</scope><name>obj_read</name></member>
      <member refid="structbt__ots__cb_1ae8602aef0fd001d6768dc20c8873742d" prot="public" virt="non-virtual"><scope>bt_ots_cb</scope><name>obj_selected</name></member>
      <member refid="structbt__ots__cb_1ae31da190c9c6bee086e4d7f8fcd6fbb5" prot="public" virt="non-virtual"><scope>bt_ots_cb</scope><name>obj_write</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
