<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__mqtt__socket" kind="group">
    <compoundname>mqtt_socket</compoundname>
    <title>MQTT Client library</title>
    <innerclass refid="structmqtt__utf8" prot="public">mqtt_utf8</innerclass>
    <innerclass refid="structmqtt__binstr" prot="public">mqtt_binstr</innerclass>
    <innerclass refid="structmqtt__topic" prot="public">mqtt_topic</innerclass>
    <innerclass refid="structmqtt__publish__message" prot="public">mqtt_publish_message</innerclass>
    <innerclass refid="structmqtt__connack__param" prot="public">mqtt_connack_param</innerclass>
    <innerclass refid="structmqtt__puback__param" prot="public">mqtt_puback_param</innerclass>
    <innerclass refid="structmqtt__pubrec__param" prot="public">mqtt_pubrec_param</innerclass>
    <innerclass refid="structmqtt__pubrel__param" prot="public">mqtt_pubrel_param</innerclass>
    <innerclass refid="structmqtt__pubcomp__param" prot="public">mqtt_pubcomp_param</innerclass>
    <innerclass refid="structmqtt__suback__param" prot="public">mqtt_suback_param</innerclass>
    <innerclass refid="structmqtt__unsuback__param" prot="public">mqtt_unsuback_param</innerclass>
    <innerclass refid="structmqtt__publish__param" prot="public">mqtt_publish_param</innerclass>
    <innerclass refid="structmqtt__subscription__list" prot="public">mqtt_subscription_list</innerclass>
    <innerclass refid="unionmqtt__evt__param" prot="public">mqtt_evt_param</innerclass>
    <innerclass refid="structmqtt__evt" prot="public">mqtt_evt</innerclass>
    <innerclass refid="structmqtt__sec__config" prot="public">mqtt_sec_config</innerclass>
    <innerclass refid="structmqtt__transport" prot="public">mqtt_transport</innerclass>
    <innerclass refid="structmqtt__internal" prot="public">mqtt_internal</innerclass>
    <innerclass refid="structmqtt__client" prot="public">mqtt_client</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__mqtt__socket_1ga0071fe013b9920711456ef51cc3e6d91" prot="public" static="no" strong="no">
        <type></type>
        <name>mqtt_evt_type</name>
        <enumvalue id="group__mqtt__socket_1gga0071fe013b9920711456ef51cc3e6d91ab6e626b5a1eda76b32053ccbb4b7b5f3" prot="public">
          <name>MQTT_EVT_CONNACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Acknowledgment of connection request. Event result accompanying the event indicates whether the connection failed or succeeded. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__mqtt__socket_1gga0071fe013b9920711456ef51cc3e6d91a8de64478f7ae463d7844fc2e786ce032" prot="public">
          <name>MQTT_EVT_DISCONNECT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Disconnection Event. MQTT Client Reference is no longer valid once this event is received for the client. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__mqtt__socket_1gga0071fe013b9920711456ef51cc3e6d91aa893a345e05e796cfd28392c1c4d8cf9" prot="public">
          <name>MQTT_EVT_PUBLISH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Publish event received when message is published on a topic client is subscribed to.</para>
<para><simplesect kind="note"><para>PUBLISH event structure only contains payload size, the payload data parameter should be ignored. Payload content has to be read manually with <ref refid="group__mqtt__socket_1ga3559cdd6093d75c6fe6792ec2a453172" kindref="member">mqtt_read_publish_payload</ref> function. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__mqtt__socket_1gga0071fe013b9920711456ef51cc3e6d91a2f25d5d4ca704ab63439d4706d3587de" prot="public">
          <name>MQTT_EVT_PUBACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Acknowledgment for published message with QoS 1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__mqtt__socket_1gga0071fe013b9920711456ef51cc3e6d91a1d5f6ba2524f935dd9625d85638eda87" prot="public">
          <name>MQTT_EVT_PUBREC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reception confirmation for published message with QoS 2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__mqtt__socket_1gga0071fe013b9920711456ef51cc3e6d91ab35ebaf4dcc6698471eb16a41c8252a2" prot="public">
          <name>MQTT_EVT_PUBREL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Release of published message with QoS 2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__mqtt__socket_1gga0071fe013b9920711456ef51cc3e6d91afdba5e48987b4355f445d35b4dc056e8" prot="public">
          <name>MQTT_EVT_PUBCOMP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Confirmation to a publish release message with QoS 2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__mqtt__socket_1gga0071fe013b9920711456ef51cc3e6d91a67caa558ae7975548b3c4e1c1de5f8fb" prot="public">
          <name>MQTT_EVT_SUBACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Acknowledgment to a subscribe request. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__mqtt__socket_1gga0071fe013b9920711456ef51cc3e6d91aa5c333ddf366e44f932ec5545ed75bb2" prot="public">
          <name>MQTT_EVT_UNSUBACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Acknowledgment to a unsubscribe request. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__mqtt__socket_1gga0071fe013b9920711456ef51cc3e6d91a52842872177b26e5e0e45a3c66fdb0b5" prot="public">
          <name>MQTT_EVT_PINGRESP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Ping Response from server. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MQTT Asynchronous Events notified to the application from the module through the callback registered by the application. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="42" column="1" bodyfile="include/net/mqtt.h" bodystart="42" bodyend="82"/>
      </memberdef>
      <memberdef kind="enum" id="group__mqtt__socket_1ga90d152a4b0986e9a07a12c7c56f5e2a0" prot="public" static="no" strong="no">
        <type></type>
        <name>mqtt_version</name>
        <enumvalue id="group__mqtt__socket_1gga90d152a4b0986e9a07a12c7c56f5e2a0ac93057183f274a064e118af6b4d681e7" prot="public">
          <name>MQTT_VERSION_3_1_0</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Protocol level for 3.1.0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__mqtt__socket_1gga90d152a4b0986e9a07a12c7c56f5e2a0ad2926cb14db1fcfb95a47f45d2f5b08e" prot="public">
          <name>MQTT_VERSION_3_1_1</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Protocol level for 3.1.1. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MQTT version protocol level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="85" column="1" bodyfile="include/net/mqtt.h" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="enum" id="group__mqtt__socket_1ga396015e492b0fee8da37c7168d9cdb33" prot="public" static="no" strong="no">
        <type></type>
        <name>mqtt_qos</name>
        <enumvalue id="group__mqtt__socket_1gga396015e492b0fee8da37c7168d9cdb33a2ea1051887beb30d7c1fd61b5e153f6e" prot="public">
          <name>MQTT_QOS_0_AT_MOST_ONCE</name>
          <initializer>= 0x00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Lowest Quality of Service, no acknowledgment needed for published message. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__mqtt__socket_1gga396015e492b0fee8da37c7168d9cdb33a732d9d294b41bd472ef221c8dff0731d" prot="public">
          <name>MQTT_QOS_1_AT_LEAST_ONCE</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Medium Quality of Service, if acknowledgment expected for published message, duplicate messages permitted. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__mqtt__socket_1gga396015e492b0fee8da37c7168d9cdb33a9012ddca1943a824454ac14a85bcf117" prot="public">
          <name>MQTT_QOS_2_EXACTLY_ONCE</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Highest Quality of Service, acknowledgment expected and message shall be published only once. Message not published to interested parties unless client issues a PUBREL. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MQTT Quality of Service types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="91" column="1" bodyfile="include/net/mqtt.h" bodystart="91" bodyend="107"/>
      </memberdef>
      <memberdef kind="enum" id="group__mqtt__socket_1gaa17b38ed9c7e65f3e01ad906b24bb618" prot="public" static="no" strong="no">
        <type></type>
        <name>mqtt_conn_return_code</name>
        <enumvalue id="group__mqtt__socket_1ggaa17b38ed9c7e65f3e01ad906b24bb618a2fdd911a8978b8df2254766c1e3fd050" prot="public">
          <name>MQTT_CONNECTION_ACCEPTED</name>
          <initializer>= 0x00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Connection accepted. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__mqtt__socket_1ggaa17b38ed9c7e65f3e01ad906b24bb618a9195e642b0b9e594d96aff84f0696744" prot="public">
          <name>MQTT_UNACCEPTABLE_PROTOCOL_VERSION</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The Server does not support the level of the MQTT protocol requested by the Client. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__mqtt__socket_1ggaa17b38ed9c7e65f3e01ad906b24bb618aa662f46a044e31ae26397adffee82141" prot="public">
          <name>MQTT_IDENTIFIER_REJECTED</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The Client identifier is correct UTF-8 but not allowed by the Server. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__mqtt__socket_1ggaa17b38ed9c7e65f3e01ad906b24bb618afe234e7084078871a567359819458df3" prot="public">
          <name>MQTT_SERVER_UNAVAILABLE</name>
          <initializer>= 0x03</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The Network Connection has been made but the MQTT service is unavailable. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__mqtt__socket_1ggaa17b38ed9c7e65f3e01ad906b24bb618aa12d243cef12e3e7b1f4e245f64a1134" prot="public">
          <name>MQTT_BAD_USER_NAME_OR_PASSWORD</name>
          <initializer>= 0x04</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The data in the user name or password is malformed. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__mqtt__socket_1ggaa17b38ed9c7e65f3e01ad906b24bb618a4d101dcf5a101d90ae26ba8fe54a27eb" prot="public">
          <name>MQTT_NOT_AUTHORIZED</name>
          <initializer>= 0x05</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The Client is not authorized to connect. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MQTT CONNACK return codes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="110" column="1" bodyfile="include/net/mqtt.h" bodystart="110" bodyend="134"/>
      </memberdef>
      <memberdef kind="enum" id="group__mqtt__socket_1gaca1e61c8b14b75544e253cea355274a8" prot="public" static="no" strong="no">
        <type></type>
        <name>mqtt_suback_return_code</name>
        <enumvalue id="group__mqtt__socket_1ggaca1e61c8b14b75544e253cea355274a8a835fdffd58e7ad800d549c9dfce1ce01" prot="public">
          <name>MQTT_SUBACK_SUCCESS_QoS_0</name>
          <initializer>= 0x00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Subscription with QoS 0 succeeded. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__mqtt__socket_1ggaca1e61c8b14b75544e253cea355274a8afd0c8b7b9c39b3e242f33f7603b3ca9c" prot="public">
          <name>MQTT_SUBACK_SUCCESS_QoS_1</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Subscription with QoS 1 succeeded. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__mqtt__socket_1ggaca1e61c8b14b75544e253cea355274a8ae8702eb6a2944444abd9b2f6c1fb2e1b" prot="public">
          <name>MQTT_SUBACK_SUCCESS_QoS_2</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Subscription with QoS 2 succeeded. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__mqtt__socket_1ggaca1e61c8b14b75544e253cea355274a8a08b9651ef43ea219f29125fcb43952f7" prot="public">
          <name>MQTT_SUBACK_FAILURE</name>
          <initializer>= 0x80</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Subscription for a topic failed. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MQTT SUBACK return codes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="137" column="1" bodyfile="include/net/mqtt.h" bodystart="137" bodyend="149"/>
      </memberdef>
      <memberdef kind="enum" id="group__mqtt__socket_1gaffc2c3078004cf8d24935be086ad63b4" prot="public" static="no" strong="no">
        <type></type>
        <name>mqtt_transport_type</name>
        <enumvalue id="group__mqtt__socket_1ggaffc2c3078004cf8d24935be086ad63b4a981f7e2ca25c5e478bf658750e26972a" prot="public">
          <name>MQTT_TRANSPORT_NON_SECURE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Use non secure TCP transport for MQTT connection. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__mqtt__socket_1ggaffc2c3078004cf8d24935be086ad63b4a61056a250c98f3d29ccf5cdbdda3d3df" prot="public">
          <name>MQTT_TRANSPORT_NUM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shall not be used as a transport type. Indicator of maximum transport types possible. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MQTT transport type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="363" column="1" bodyfile="include/net/mqtt.h" bodystart="363" bodyend="389"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__mqtt__socket_1gabdf01ededb62ceb4c1608a64cb718a8c" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* mqtt_evt_cb_t) (struct mqtt_client *client, const struct mqtt_evt *evt)</definition>
        <argsstring>)(struct mqtt_client *client, const struct mqtt_evt *evt)</argsstring>
        <name>mqtt_evt_cb_t</name>
        <briefdescription>
<para>Asynchronous event notification callback registered by the application. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifies the client for which the event is notified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">evt</parametername>
</parameternamelist>
<parameterdescription>
<para>Event description along with result and associated parameters (if any). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="331" column="9" bodyfile="include/net/mqtt.h" bodystart="331" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__mqtt__socket_1gad1376509ae7c946c840d103d8b59e9a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mqtt_client_init</definition>
        <argsstring>(struct mqtt_client *client)</argsstring>
        <name>mqtt_client_init</name>
        <param>
          <type>struct <ref refid="structmqtt__client" kindref="compound">mqtt_client</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
<para>Initializes the client instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client</parametername>
</parameternamelist>
<parameterdescription>
<para>Client instance for which the procedure is requested. Shall not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Shall be called to initialize client structure, before setting any client parameters and before connecting to broker. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="551" column="6" declfile="include/net/mqtt.h" declline="551" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mqtt__socket_1gad936f28553cb2e771a843512b0a315fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mqtt_connect</definition>
        <argsstring>(struct mqtt_client *client)</argsstring>
        <name>mqtt_connect</name>
        <param>
          <type>struct <ref refid="structmqtt__client" kindref="compound">mqtt_client</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
<para>API to request new MQTT client connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client</parametername>
</parameternamelist>
<parameterdescription>
<para>Client instance for which the procedure is requested. Shall not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This memory is assumed to be resident until mqtt_disconnect is called. </para>
</simplesect>
<simplesect kind="note"><para>Any subsequent changes to parameters like broker address, user name, device id, etc. have no effect once MQTT connection is established.</para>
</simplesect>
<simplesect kind="return"><para>0 or a negative error code (<ref refid="errno_8h" kindref="compound">errno.h</ref>) indicating reason of failure.</para>
</simplesect>
<simplesect kind="note"><para>Default protocol revision used for connection request is 3.1.1. Please set client.protocol_version = MQTT_VERSION_3_1_0 to use protocol 3.1.0. </para>
</simplesect>
<simplesect kind="note"><para>Please modify <verbatim>embed:rst:inline :kconfig:`CONFIG_MQTT_KEEPALIVE` </verbatim> time to override default of 1 minute. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="589" column="5" declfile="include/net/mqtt.h" declline="589" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mqtt__socket_1ga57745efa1bf6fbdf7eb1b3f01623e4c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mqtt_publish</definition>
        <argsstring>(struct mqtt_client *client, const struct mqtt_publish_param *param)</argsstring>
        <name>mqtt_publish</name>
        <param>
          <type>struct <ref refid="structmqtt__client" kindref="compound">mqtt_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const struct <ref refid="structmqtt__publish__param" kindref="compound">mqtt_publish_param</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>API to publish messages on topics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client</parametername>
</parameternamelist>
<parameterdescription>
<para>Client instance for which the procedure is requested. Shall not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">param</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameters to be used for the publish message. Shall not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 or a negative error code (<ref refid="errno_8h" kindref="compound">errno.h</ref>) indicating reason of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="601" column="5" declfile="include/net/mqtt.h" declline="601" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mqtt__socket_1gae9069fceec2c018e64cc6beb16aa055c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mqtt_publish_qos1_ack</definition>
        <argsstring>(struct mqtt_client *client, const struct mqtt_puback_param *param)</argsstring>
        <name>mqtt_publish_qos1_ack</name>
        <param>
          <type>struct <ref refid="structmqtt__client" kindref="compound">mqtt_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const struct <ref refid="structmqtt__puback__param" kindref="compound">mqtt_puback_param</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>API used by client to send acknowledgment on receiving QoS1 publish message. Should be called on reception of <ref refid="group__mqtt__socket_1gga0071fe013b9920711456ef51cc3e6d91aa893a345e05e796cfd28392c1c4d8cf9" kindref="member">MQTT_EVT_PUBLISH</ref> with QoS level <ref refid="group__mqtt__socket_1gga396015e492b0fee8da37c7168d9cdb33a732d9d294b41bd472ef221c8dff0731d" kindref="member">MQTT_QOS_1_AT_LEAST_ONCE</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client</parametername>
</parameternamelist>
<parameterdescription>
<para>Client instance for which the procedure is requested. Shall not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">param</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifies message being acknowledged.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 or a negative error code (<ref refid="errno_8h" kindref="compound">errno.h</ref>) indicating reason of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="615" column="5" declfile="include/net/mqtt.h" declline="615" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mqtt__socket_1gacbe41b83d9c0676d0d4cf01dd91765eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mqtt_publish_qos2_receive</definition>
        <argsstring>(struct mqtt_client *client, const struct mqtt_pubrec_param *param)</argsstring>
        <name>mqtt_publish_qos2_receive</name>
        <param>
          <type>struct <ref refid="structmqtt__client" kindref="compound">mqtt_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const struct <ref refid="structmqtt__pubrec__param" kindref="compound">mqtt_pubrec_param</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>API used by client to send acknowledgment on receiving QoS2 publish message. Should be called on reception of <ref refid="group__mqtt__socket_1gga0071fe013b9920711456ef51cc3e6d91aa893a345e05e796cfd28392c1c4d8cf9" kindref="member">MQTT_EVT_PUBLISH</ref> with QoS level <ref refid="group__mqtt__socket_1gga396015e492b0fee8da37c7168d9cdb33a9012ddca1943a824454ac14a85bcf117" kindref="member">MQTT_QOS_2_EXACTLY_ONCE</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifies client instance for which the procedure is requested. Shall not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">param</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifies message being acknowledged.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 or a negative error code (<ref refid="errno_8h" kindref="compound">errno.h</ref>) indicating reason of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="629" column="5" declfile="include/net/mqtt.h" declline="629" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mqtt__socket_1ga6c952ed014f78774096bfb6099794803" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mqtt_publish_qos2_release</definition>
        <argsstring>(struct mqtt_client *client, const struct mqtt_pubrel_param *param)</argsstring>
        <name>mqtt_publish_qos2_release</name>
        <param>
          <type>struct <ref refid="structmqtt__client" kindref="compound">mqtt_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const struct <ref refid="structmqtt__pubrel__param" kindref="compound">mqtt_pubrel_param</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>API used by client to request release of QoS2 publish message. Should be called on reception of <ref refid="group__mqtt__socket_1gga0071fe013b9920711456ef51cc3e6d91a1d5f6ba2524f935dd9625d85638eda87" kindref="member">MQTT_EVT_PUBREC</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client</parametername>
</parameternamelist>
<parameterdescription>
<para>Client instance for which the procedure is requested. Shall not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">param</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifies message being released.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 or a negative error code (<ref refid="errno_8h" kindref="compound">errno.h</ref>) indicating reason of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="642" column="5" declfile="include/net/mqtt.h" declline="642" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mqtt__socket_1ga2b17999e845d613f5b0b20015b8204f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mqtt_publish_qos2_complete</definition>
        <argsstring>(struct mqtt_client *client, const struct mqtt_pubcomp_param *param)</argsstring>
        <name>mqtt_publish_qos2_complete</name>
        <param>
          <type>struct <ref refid="structmqtt__client" kindref="compound">mqtt_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const struct <ref refid="structmqtt__pubcomp__param" kindref="compound">mqtt_pubcomp_param</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>API used by client to send acknowledgment on receiving QoS2 publish release message. Should be called on reception of <ref refid="group__mqtt__socket_1gga0071fe013b9920711456ef51cc3e6d91ab35ebaf4dcc6698471eb16a41c8252a2" kindref="member">MQTT_EVT_PUBREL</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifies client instance for which the procedure is requested. Shall not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">param</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifies message being completed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 or a negative error code (<ref refid="errno_8h" kindref="compound">errno.h</ref>) indicating reason of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="656" column="5" declfile="include/net/mqtt.h" declline="656" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mqtt__socket_1ga40d226b891b8f62f2c486bbb11ce9678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mqtt_subscribe</definition>
        <argsstring>(struct mqtt_client *client, const struct mqtt_subscription_list *param)</argsstring>
        <name>mqtt_subscribe</name>
        <param>
          <type>struct <ref refid="structmqtt__client" kindref="compound">mqtt_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const struct <ref refid="structmqtt__subscription__list" kindref="compound">mqtt_subscription_list</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>API to request subscription of one or more topics on the connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifies client instance for which the procedure is requested. Shall not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">param</parametername>
</parameternamelist>
<parameterdescription>
<para>Subscription parameters. Shall not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 or a negative error code (<ref refid="errno_8h" kindref="compound">errno.h</ref>) indicating reason of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="668" column="5" declfile="include/net/mqtt.h" declline="668" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mqtt__socket_1ga4ff43a198e93e332b5553a4d0b59261d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mqtt_unsubscribe</definition>
        <argsstring>(struct mqtt_client *client, const struct mqtt_subscription_list *param)</argsstring>
        <name>mqtt_unsubscribe</name>
        <param>
          <type>struct <ref refid="structmqtt__client" kindref="compound">mqtt_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const struct <ref refid="structmqtt__subscription__list" kindref="compound">mqtt_subscription_list</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>API to request unsubscription of one or more topics on the connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifies client instance for which the procedure is requested. Shall not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">param</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameters describing topics being unsubscribed from. Shall not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>QoS included in topic description is unused in this API.</para>
</simplesect>
<simplesect kind="return"><para>0 or a negative error code (<ref refid="errno_8h" kindref="compound">errno.h</ref>) indicating reason of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="683" column="5" declfile="include/net/mqtt.h" declline="683" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mqtt__socket_1gad1d549d37b69a61e1bf8d9d213e02ca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mqtt_ping</definition>
        <argsstring>(struct mqtt_client *client)</argsstring>
        <name>mqtt_ping</name>
        <param>
          <type>struct <ref refid="structmqtt__client" kindref="compound">mqtt_client</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
<para>API to send MQTT ping. The use of this API is optional, as the library handles the connection keep-alive on it&apos;s own, see <ref refid="group__mqtt__socket_1ga8b87710d01076c8e51b1a75634168269" kindref="member">mqtt_live</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifies client instance for which procedure is requested.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 or a negative error code (<ref refid="errno_8h" kindref="compound">errno.h</ref>) indicating reason of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="695" column="5" declfile="include/net/mqtt.h" declline="695" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mqtt__socket_1gad5e01a1b60c393adb0f7f34c1a90e6ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mqtt_disconnect</definition>
        <argsstring>(struct mqtt_client *client)</argsstring>
        <name>mqtt_disconnect</name>
        <param>
          <type>struct <ref refid="structmqtt__client" kindref="compound">mqtt_client</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
<para>API to disconnect MQTT connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifies client instance for which procedure is requested.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 or a negative error code (<ref refid="errno_8h" kindref="compound">errno.h</ref>) indicating reason of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="705" column="5" declfile="include/net/mqtt.h" declline="705" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mqtt__socket_1gafb2df41fad7c318f9fe75919919139bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mqtt_abort</definition>
        <argsstring>(struct mqtt_client *client)</argsstring>
        <name>mqtt_abort</name>
        <param>
          <type>struct <ref refid="structmqtt__client" kindref="compound">mqtt_client</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
<para>API to abort MQTT connection. This will close the corresponding transport without closing the connection gracefully at the MQTT level (with disconnect message). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifies client instance for which procedure is requested.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 or a negative error code (<ref refid="errno_8h" kindref="compound">errno.h</ref>) indicating reason of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="717" column="5" declfile="include/net/mqtt.h" declline="717" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mqtt__socket_1ga8b87710d01076c8e51b1a75634168269" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mqtt_live</definition>
        <argsstring>(struct mqtt_client *client)</argsstring>
        <name>mqtt_live</name>
        <param>
          <type>struct <ref refid="structmqtt__client" kindref="compound">mqtt_client</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
<para>This API should be called periodically for the client to be able to keep the connection alive by sending Ping Requests if need be. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client</parametername>
</parameternamelist>
<parameterdescription>
<para>Client instance for which the procedure is requested. Shall not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Application shall ensure that the periodicity of calling this function makes it possible to respect the Keep Alive time agreed with the broker on connection. <ref refid="group__mqtt__socket_1gad936f28553cb2e771a843512b0a315fa" kindref="member">mqtt_connect</ref> for details on Keep Alive time.</para>
</simplesect>
<simplesect kind="return"><para>0 or a negative error code (<ref refid="errno_8h" kindref="compound">errno.h</ref>) indicating reason of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="733" column="5" declfile="include/net/mqtt.h" declline="733" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mqtt__socket_1gaa16bf7b0597ad00c4a3943235579e86b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mqtt_keepalive_time_left</definition>
        <argsstring>(const struct mqtt_client *client)</argsstring>
        <name>mqtt_keepalive_time_left</name>
        <param>
          <type>const struct <ref refid="structmqtt__client" kindref="compound">mqtt_client</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
<para>Helper function to determine when next keep alive message should be sent. Can be used for instance as a source for <computeroutput>poll</computeroutput> timeout. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client</parametername>
</parameternamelist>
<parameterdescription>
<para>Client instance for which the procedure is requested.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Time in milliseconds until next keep alive message is expected to be sent. Function will return -1 if keep alive messages are not enabled. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="745" column="5" declfile="include/net/mqtt.h" declline="745" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mqtt__socket_1ga2dbc3c158d63a6f57b362be94c22660a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mqtt_input</definition>
        <argsstring>(struct mqtt_client *client)</argsstring>
        <name>mqtt_input</name>
        <param>
          <type>struct <ref refid="structmqtt__client" kindref="compound">mqtt_client</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
<para>Receive an incoming MQTT packet. The registered callback will be called with the packet content. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>In case of PUBLISH message, the payload has to be read separately with <ref refid="group__mqtt__socket_1ga3559cdd6093d75c6fe6792ec2a453172" kindref="member">mqtt_read_publish_payload</ref> function. The size of the payload to read is provided in the publish event structure.</para>
</simplesect>
<simplesect kind="note"><para>This is a non-blocking call.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client</parametername>
</parameternamelist>
<parameterdescription>
<para>Client instance for which the procedure is requested. Shall not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 or a negative error code (<ref refid="errno_8h" kindref="compound">errno.h</ref>) indicating reason of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="762" column="5" declfile="include/net/mqtt.h" declline="762" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mqtt__socket_1ga3559cdd6093d75c6fe6792ec2a453172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mqtt_read_publish_payload</definition>
        <argsstring>(struct mqtt_client *client, void *buffer, size_t length)</argsstring>
        <name>mqtt_read_publish_payload</name>
        <param>
          <type>struct <ref refid="structmqtt__client" kindref="compound">mqtt_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Read the payload of the received PUBLISH message. This function should be called within the MQTT event handler, when MQTT PUBLISH message is notified. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is a non-blocking call.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client</parametername>
</parameternamelist>
<parameterdescription>
<para>Client instance for which the procedure is requested. Shall not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer where payload should be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the buffer, in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes read or a negative error code (<ref refid="errno_8h" kindref="compound">errno.h</ref>) indicating reason of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="779" column="5" declfile="include/net/mqtt.h" declline="779" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mqtt__socket_1ga05213aceaa9e9cbbfaa9bab7a78b3d25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mqtt_read_publish_payload_blocking</definition>
        <argsstring>(struct mqtt_client *client, void *buffer, size_t length)</argsstring>
        <name>mqtt_read_publish_payload_blocking</name>
        <param>
          <type>struct <ref refid="structmqtt__client" kindref="compound">mqtt_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Blocking version of <ref refid="group__mqtt__socket_1ga3559cdd6093d75c6fe6792ec2a453172" kindref="member">mqtt_read_publish_payload</ref> function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client</parametername>
</parameternamelist>
<parameterdescription>
<para>Client instance for which the procedure is requested. Shall not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer where payload should be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the buffer, in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes read or a negative error code (<ref refid="errno_8h" kindref="compound">errno.h</ref>) indicating reason of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="793" column="5" declfile="include/net/mqtt.h" declline="793" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mqtt__socket_1ga31823965ec34a253793b40b50e800417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mqtt_readall_publish_payload</definition>
        <argsstring>(struct mqtt_client *client, uint8_t *buffer, size_t length)</argsstring>
        <name>mqtt_readall_publish_payload</name>
        <param>
          <type>struct <ref refid="structmqtt__client" kindref="compound">mqtt_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Blocking version of <ref refid="group__mqtt__socket_1ga3559cdd6093d75c6fe6792ec2a453172" kindref="member">mqtt_read_publish_payload</ref> function which runs until the required number of bytes are read. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">client</parametername>
</parameternamelist>
<parameterdescription>
<para>Client instance for which the procedure is requested. Shall not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer where payload should be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, otherwise a negative error code (<ref refid="errno_8h" kindref="compound">errno.h</ref>) indicating reason of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="808" column="5" declfile="include/net/mqtt.h" declline="808" declcolumn="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__mqtt__socket_1gaeaa4fcf581c7d6be755f9a053a3b488c" prot="public" static="no">
        <name>MQTT_UTF8_LITERAL</name>
        <param><defname>literal</defname></param>
        <initializer>	((struct <ref refid="structmqtt__utf8" kindref="compound">mqtt_utf8</ref>) {literal, sizeof(literal) - 1})</initializer>
        <briefdescription>
<para>Initialize UTF-8 encoded string from C literal string. </para>
        </briefdescription>
        <detaileddescription>
<para>Use it as follows:</para>
<para>struct <ref refid="structmqtt__utf8" kindref="compound">mqtt_utf8</ref> password = MQTT_UTF8_LITERAL(&quot;my_pass&quot;);</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">literal</parametername>
</parameternamelist>
<parameterdescription>
<para>Literal string from which to generate <ref refid="structmqtt__utf8" kindref="compound">mqtt_utf8</ref> object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/mqtt.h" line="166" column="9" bodyfile="include/net/mqtt.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>MQTT Client Implementation. </para>
    </briefdescription>
    <detaileddescription>
<para>MQTT Client&apos;s Application interface is defined in this header.</para>
<para><simplesect kind="note"><para>The implementation assumes TCP module is enabled.</para>
</simplesect>
<simplesect kind="note"><para>By default the implementation uses MQTT version 3.1.1. </para>
</simplesect>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
