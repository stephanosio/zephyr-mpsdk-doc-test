<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__pwm__interface" kind="group">
    <compoundname>pwm_interface</compoundname>
    <title>PWM Interface</title>
    <innerclass refid="structpwm__driver__api" prot="public">pwm_driver_api</innerclass>
      <sectiondef kind="user-defined">
      <header>PWM capture configuration flags</header>
      <memberdef kind="define" id="group__pwm__interface_1ga5b4b41ccdf8810a77f71c2155a521f44" prot="public" static="no">
        <name>PWM_CAPTURE_TYPE_PERIOD</name>
        <initializer>(1U &lt;&lt; PWM_CAPTURE_TYPE_SHIFT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PWM pin capture captures period. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="48" column="9" bodyfile="include/drivers/pwm.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pwm__interface_1gab883b83cc5418555a437ce128f32ab01" prot="public" static="no">
        <name>PWM_CAPTURE_TYPE_PULSE</name>
        <initializer>(2U &lt;&lt; PWM_CAPTURE_TYPE_SHIFT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PWM pin capture captures pulse width. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="51" column="9" bodyfile="include/drivers/pwm.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pwm__interface_1ga76175b0c2d5187ded5bbd314dc798bd5" prot="public" static="no">
        <name>PWM_CAPTURE_TYPE_BOTH</name>
        <initializer>					 (<ref refid="group__pwm__interface_1ga5b4b41ccdf8810a77f71c2155a521f44" kindref="member">PWM_CAPTURE_TYPE_PERIOD</ref> | \
					 <ref refid="group__pwm__interface_1gab883b83cc5418555a437ce128f32ab01" kindref="member">PWM_CAPTURE_TYPE_PULSE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PWM pin capture captures both period and pulse width. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="54" column="9" bodyfile="include/drivers/pwm.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pwm__interface_1gad59fe75340facda843cad06993cf1814" prot="public" static="no">
        <name>PWM_CAPTURE_MODE_SINGLE</name>
        <initializer>(0U &lt;&lt; PWM_CAPTURE_MODE_SHIFT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PWM pin capture captures a single period/pulse width. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="58" column="9" bodyfile="include/drivers/pwm.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pwm__interface_1gabe9bbff9832b4fa40faa057fad8fdaa9" prot="public" static="no">
        <name>PWM_CAPTURE_MODE_CONTINUOUS</name>
        <initializer>(1U &lt;&lt; PWM_CAPTURE_MODE_SHIFT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PWM pin capture captures period/pulse width continuously. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="61" column="9" bodyfile="include/drivers/pwm.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__pwm__interface_1ga0ec21c2ce60e82a13af9c73d2b41bbc4" prot="public" static="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>typedef uint8_t pwm_flags_t</definition>
        <argsstring></argsstring>
        <name>pwm_flags_t</name>
        <briefdescription>
<para>Provides a type to hold PWM configuration flags. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="68" column="17" bodyfile="include/drivers/pwm.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__pwm__interface_1gad9b8285dfbc3f2929bb72dae1e0eef49" prot="public" static="no">
        <type>int(*</type>
        <definition>pwm_pin_set_t</definition>
        <argsstring>)(const struct device *dev, uint32_t pwm, uint32_t period_cycles, uint32_t pulse_cycles, pwm_flags_t flags)</argsstring>
        <name>pwm_pin_set_t</name>
        <briefdescription>
<para>Callback API upon setting the pin See <emphasis><ref refid="group__pwm__interface_1ga995e6730452722f20e73a144624b4b3a" kindref="member">pwm_pin_set_cycles()</ref></emphasis> for argument description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="75" column="9" bodyfile="include/drivers/pwm.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__pwm__interface_1gac261cfe5f92997aa4640744c511b5f91" prot="public" static="no">
        <type>void(*</type>
        <definition>pwm_capture_callback_handler_t</definition>
        <argsstring>)(const struct device *dev, uint32_t pwm, uint32_t period_cycles, uint32_t pulse_cycles, int status, void *user_data)</argsstring>
        <name>pwm_capture_callback_handler_t</name>
        <briefdescription>
<para>PWM capture callback handler function signature. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The callback handler will be called in interrupt context.</para>
</simplesect>
<simplesect kind="note"><para><verbatim>embed:rst:inline :kconfig:`CONFIG_PWM_CAPTURE` </verbatim> must be selected to enable PWM capture support.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwm</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM pin.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period_cycles</parametername>
</parameternamelist>
<parameterdescription>
<para>Captured PWM period width (in clock cycles). HW specific. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pulse_cycles</parametername>
</parameternamelist>
<parameterdescription>
<para>Captured PWM pulse width (in clock cycles). HW specific. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status for the PWM capture (0 if no error, negative errno otherwise. See <emphasis><ref refid="group__pwm__interface_1ga1c87879e7cc0cdce1158ffb6f08f73a8" kindref="member">pwm_pin_capture_cycles()</ref></emphasis> return value descriptions for details). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data passed to <emphasis><ref refid="group__pwm__interface_1ga720cffa0a0e985d0dd78c3df6ff1d32a" kindref="member">pwm_pin_configure_capture()</ref></emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="99" column="9" bodyfile="include/drivers/pwm.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__pwm__interface_1gae5234da7a7c049d28aa931996c72e5e0" prot="public" static="no">
        <type>int(*</type>
        <definition>pwm_pin_configure_capture_t</definition>
        <argsstring>)(const struct device *dev, uint32_t pwm, pwm_flags_t flags, pwm_capture_callback_handler_t cb, void *user_data)</argsstring>
        <name>pwm_pin_configure_capture_t</name>
        <briefdescription>
<para>Callback API upon configuring PWM pin capture See <emphasis><ref refid="group__pwm__interface_1ga720cffa0a0e985d0dd78c3df6ff1d32a" kindref="member">pwm_pin_configure_capture()</ref></emphasis> for argument description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="111" column="9" bodyfile="include/drivers/pwm.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__pwm__interface_1ga96ff6068c154e45cac3ce3b70b8a73d7" prot="public" static="no">
        <type>int(*</type>
        <definition>pwm_pin_enable_capture_t</definition>
        <argsstring>)(const struct device *dev, uint32_t pwm)</argsstring>
        <name>pwm_pin_enable_capture_t</name>
        <briefdescription>
<para>Callback API upon enabling PWM pin capture See <emphasis><ref refid="group__pwm__interface_1gab4e0e3555692d1c8d9b3389685b398da" kindref="member">pwm_pin_enable_capture()</ref></emphasis> for argument description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="121" column="9" bodyfile="include/drivers/pwm.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__pwm__interface_1gaf911306c8a94c2945c84a4d70ea187b3" prot="public" static="no">
        <type>int(*</type>
        <definition>pwm_pin_disable_capture_t</definition>
        <argsstring>)(const struct device *dev, uint32_t pwm)</argsstring>
        <name>pwm_pin_disable_capture_t</name>
        <briefdescription>
<para>Callback API upon disabling PWM pin capture See <emphasis><ref refid="group__pwm__interface_1gad9f1705c343a6c915ceffa79aef7c809" kindref="member">pwm_pin_disable_capture()</ref></emphasis> for argument description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="129" column="9" bodyfile="include/drivers/pwm.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__pwm__interface_1ga6788c2f8d28d22b985209f400c6c80d7" prot="public" static="no">
        <type>int(*</type>
        <definition>pwm_get_cycles_per_sec_t</definition>
        <argsstring>)(const struct device *dev, uint32_t pwm, uint64_t *cycles)</argsstring>
        <name>pwm_get_cycles_per_sec_t</name>
        <briefdescription>
<para>Callback API upon getting cycles per second See <emphasis><ref refid="group__pwm__interface_1ga05a7cc76a04acb4c1a147fa97296aace" kindref="member">pwm_get_cycles_per_sec()</ref></emphasis> for argument description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="137" column="9" bodyfile="include/drivers/pwm.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__pwm__interface_1ga995e6730452722f20e73a144624b4b3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pwm_pin_set_cycles</definition>
        <argsstring>(const struct device *dev, uint32_t pwm, uint32_t period, uint32_t pulse, pwm_flags_t flags)</argsstring>
        <name>pwm_pin_set_cycles</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>pwm</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>pulse</declname>
        </param>
        <param>
          <type><ref refid="group__pwm__interface_1ga0ec21c2ce60e82a13af9c73d2b41bbc4" kindref="member">pwm_flags_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Set the period and pulse width for a single PWM output. </para>
        </briefdescription>
        <detaileddescription>
<para>The PWM period and pulse width will synchronously be set to the new values without glitches in the PWM signal, but the call will not block for the change to take effect.</para>
<para><simplesect kind="note"><para>Not all PWM controllers support synchronous, glitch-free updates of the PWM period and pulse width. Depending on the hardware, changing the PWM period and/or pulse width may cause a glitch in the generated PWM signal.</para>
</simplesect>
<simplesect kind="note"><para>Some multi-channel PWM controllers share the PWM period across all channels. Depending on the hardware, changing the PWM period for one channel may affect the PWM period for the other channels of the same PWM controller.</para>
</simplesect>
Passing 0 as <computeroutput>pulse</computeroutput> will cause the pin to be driven to a constant inactive level. Passing a non-zero <computeroutput>pulse</computeroutput> equal to <computeroutput>period</computeroutput> will cause the pin to be driven to a constant active level.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwm</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM pin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>Period (in clock cycle) set to the PWM. HW specific. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pulse</parametername>
</parameternamelist>
<parameterdescription>
<para>Pulse width (in clock cycle) set to the PWM. HW specific. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags for pin configuration (polarity).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Negative</parametername>
</parameternamelist>
<parameterdescription>
<para>errno code if failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="181" column="6" declfile="include/drivers/pwm.h" declline="181" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__pwm__interface_1ga720cffa0a0e985d0dd78c3df6ff1d32a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pwm_pin_configure_capture</definition>
        <argsstring>(const struct device *dev, uint32_t pwm, pwm_flags_t flags, pwm_capture_callback_handler_t cb, void *user_data)</argsstring>
        <name>pwm_pin_configure_capture</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>pwm</declname>
        </param>
        <param>
          <type><ref refid="group__pwm__interface_1ga0ec21c2ce60e82a13af9c73d2b41bbc4" kindref="member">pwm_flags_t</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="group__pwm__interface_1gac261cfe5f92997aa4640744c511b5f91" kindref="member">pwm_capture_callback_handler_t</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Configure PWM period/pulse width capture for a single PWM input. </para>
        </briefdescription>
        <detaileddescription>
<para>After configuring PWM capture using this function, the capture can be enabled/disabled using <emphasis><ref refid="group__pwm__interface_1gab4e0e3555692d1c8d9b3389685b398da" kindref="member">pwm_pin_enable_capture()</ref></emphasis> and <emphasis><ref refid="group__pwm__interface_1gad9f1705c343a6c915ceffa79aef7c809" kindref="member">pwm_pin_disable_capture()</ref></emphasis>.</para>
<para><simplesect kind="note"><para>This API function cannot be invoked from user space due to the use of a function callback. In user space, one of the simpler API functions (<emphasis><ref refid="group__pwm__interface_1ga1c87879e7cc0cdce1158ffb6f08f73a8" kindref="member">pwm_pin_capture_cycles()</ref></emphasis>, <emphasis><ref refid="group__pwm__interface_1gabe808fdbb4e315194eb08f9bf35f121b" kindref="member">pwm_pin_capture_usec()</ref></emphasis>, or <emphasis><ref refid="group__pwm__interface_1ga2a3699e1841d977621519d502aba73ae" kindref="member">pwm_pin_capture_nsec()</ref></emphasis>) can be used instead.</para>
</simplesect>
<simplesect kind="note"><para><verbatim>embed:rst:inline :kconfig:`CONFIG_PWM_CAPTURE` </verbatim> must be selected for this function to be available.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwm</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM pin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM capture flags </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Application callback handler function to be called upon capture </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to pass to the application callback handler function</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if invalid function parameters were given </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>if PWM capture is not supported or the given flags are not supported </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>if IO error occurred while configuring </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>if PWM capture is already in progress </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="224" column="19" bodyfile="include/drivers/pwm.h" bodystart="224" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="group__pwm__interface_1gab4e0e3555692d1c8d9b3389685b398da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pwm_pin_enable_capture</definition>
        <argsstring>(const struct device *dev, uint32_t pwm)</argsstring>
        <name>pwm_pin_enable_capture</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>pwm</declname>
        </param>
        <briefdescription>
<para>Enable PWM period/pulse width capture for a single PWM input. </para>
        </briefdescription>
        <detaileddescription>
<para>The PWM pin must be configured using <emphasis><ref refid="group__pwm__interface_1ga720cffa0a0e985d0dd78c3df6ff1d32a" kindref="member">pwm_pin_configure_capture()</ref></emphasis> prior to calling this function.</para>
<para><simplesect kind="note"><para><verbatim>embed:rst:inline :kconfig:`CONFIG_PWM_CAPTURE` </verbatim> must be selected for this function to be available.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwm</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM pin.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if invalid function parameters were given </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>if PWM capture is not supported </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>if IO error occurred while enabling PWM capture </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>if PWM capture is already in progress </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="258" column="6" declfile="include/drivers/pwm.h" declline="258" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__pwm__interface_1gad9f1705c343a6c915ceffa79aef7c809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pwm_pin_disable_capture</definition>
        <argsstring>(const struct device *dev, uint32_t pwm)</argsstring>
        <name>pwm_pin_disable_capture</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>pwm</declname>
        </param>
        <briefdescription>
<para>Disable PWM period/pulse width capture for a single PWM input. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><verbatim>embed:rst:inline :kconfig:`CONFIG_PWM_CAPTURE` </verbatim> must be selected for this function to be available.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwm</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM pin.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if invalid function parameters were given </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>if PWM capture is not supported </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>if IO error occurred while disabling PWM capture </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="289" column="6" declfile="include/drivers/pwm.h" declline="289" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__pwm__interface_1ga1c87879e7cc0cdce1158ffb6f08f73a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pwm_pin_capture_cycles</definition>
        <argsstring>(const struct device *dev, uint32_t pwm, pwm_flags_t flags, uint32_t *period, uint32_t *pulse, k_timeout_t timeout)</argsstring>
        <name>pwm_pin_capture_cycles</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>pwm</declname>
        </param>
        <param>
          <type><ref refid="group__pwm__interface_1ga0ec21c2ce60e82a13af9c73d2b41bbc4" kindref="member">pwm_flags_t</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>pulse</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Capture a single PWM period/pulse width in clock cycles for a single PWM input. </para>
        </briefdescription>
        <detaileddescription>
<para>This API function wraps calls to <emphasis><ref refid="group__pwm__interface_1ga720cffa0a0e985d0dd78c3df6ff1d32a" kindref="member">pwm_pin_configure_capture()</ref></emphasis>, <emphasis><ref refid="group__pwm__interface_1gab4e0e3555692d1c8d9b3389685b398da" kindref="member">pwm_pin_enable_capture()</ref></emphasis>, and <emphasis><ref refid="group__pwm__interface_1gad9f1705c343a6c915ceffa79aef7c809" kindref="member">pwm_pin_disable_capture()</ref></emphasis> and passes the capture result to the caller. The function is blocking until either the PWM capture is completed or a timeout occurs.</para>
<para><simplesect kind="note"><para><verbatim>embed:rst:inline :kconfig:`CONFIG_PWM_CAPTURE` </verbatim> must be selected for this function to be available.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwm</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM pin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM capture flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory to store the captured PWM period width (in clock cycles). HW specific. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pulse</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory to store the captured PWM pulse width (in clock cycles). HW specific. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period for the capture to complete.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM capture already in progress. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>IO error while capturing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ERANGE</parametername>
</parameternamelist>
<parameterdescription>
<para>If result is too large. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="332" column="6" declfile="include/drivers/pwm.h" declline="332" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__pwm__interface_1ga05a7cc76a04acb4c1a147fa97296aace" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pwm_get_cycles_per_sec</definition>
        <argsstring>(const struct device *dev, uint32_t pwm, uint64_t *cycles)</argsstring>
        <name>pwm_get_cycles_per_sec</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>pwm</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref> *</type>
          <declname>cycles</declname>
        </param>
        <briefdescription>
<para>Get the clock rate (cycles per second) for a single PWM output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwm</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM pin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cycles</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory to store clock rate (cycles per sec). HW specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Negative</parametername>
</parameternamelist>
<parameterdescription>
<para>errno code if failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="349" column="6" declfile="include/drivers/pwm.h" declline="349" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__pwm__interface_1ga9093ab1d479d484cf50004f41a22252e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pwm_pin_set_usec</definition>
        <argsstring>(const struct device *dev, uint32_t pwm, uint32_t period, uint32_t pulse, pwm_flags_t flags)</argsstring>
        <name>pwm_pin_set_usec</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>pwm</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>pulse</declname>
        </param>
        <param>
          <type><ref refid="group__pwm__interface_1ga0ec21c2ce60e82a13af9c73d2b41bbc4" kindref="member">pwm_flags_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Set the period and pulse width for a single PWM output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwm</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM pin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>Period (in microseconds) set to the PWM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pulse</parametername>
</parameternamelist>
<parameterdescription>
<para>Pulse width (in microseconds) set to the PWM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags for pin configuration (polarity).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Negative</parametername>
</parameternamelist>
<parameterdescription>
<para>errno code if failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="374" column="19" bodyfile="include/drivers/pwm.h" bodystart="374" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="group__pwm__interface_1gaf850959028f1fa79047188e137d11ad9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pwm_pin_set_nsec</definition>
        <argsstring>(const struct device *dev, uint32_t pwm, uint32_t period, uint32_t pulse, pwm_flags_t flags)</argsstring>
        <name>pwm_pin_set_nsec</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>pwm</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>pulse</declname>
        </param>
        <param>
          <type><ref refid="group__pwm__interface_1ga0ec21c2ce60e82a13af9c73d2b41bbc4" kindref="member">pwm_flags_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Set the period and pulse width for a single PWM output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwm</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM pin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>Period (in nanoseconds) set to the PWM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pulse</parametername>
</parameternamelist>
<parameterdescription>
<para>Pulse width (in nanoseconds) set to the PWM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags for pin configuration (polarity).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Negative</parametername>
</parameternamelist>
<parameterdescription>
<para>errno code if failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="410" column="19" bodyfile="include/drivers/pwm.h" bodystart="410" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="group__pwm__interface_1gace629ef3f488b247c1223c00f024f606" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pwm_pin_cycles_to_usec</definition>
        <argsstring>(const struct device *dev, uint32_t pwm, uint32_t cycles, uint64_t *usec)</argsstring>
        <name>pwm_pin_cycles_to_usec</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>pwm</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>cycles</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref> *</type>
          <declname>usec</declname>
        </param>
        <briefdescription>
<para>Convert from PWM cycles to microseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwm</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM pin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cycles</parametername>
</parameternamelist>
<parameterdescription>
<para>Cycles to be converted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>usec</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory to store calculated usec.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>If cycles per second cannot be determined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ERANGE</parametername>
</parameternamelist>
<parameterdescription>
<para>If result is too large. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="446" column="19" bodyfile="include/drivers/pwm.h" bodystart="446" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="group__pwm__interface_1ga309dc05dcda01648052eabcb3b550a0b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pwm_pin_cycles_to_nsec</definition>
        <argsstring>(const struct device *dev, uint32_t pwm, uint32_t cycles, uint64_t *nsec)</argsstring>
        <name>pwm_pin_cycles_to_nsec</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>pwm</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>cycles</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref> *</type>
          <declname>nsec</declname>
        </param>
        <briefdescription>
<para>Convert from PWM cycles to nanoseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwm</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM pin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cycles</parametername>
</parameternamelist>
<parameterdescription>
<para>Cycles to be converted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nsec</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory to store the calculated nsec.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>If cycles per second cannot be determined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ERANGE</parametername>
</parameternamelist>
<parameterdescription>
<para>If result is too large. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="477" column="19" bodyfile="include/drivers/pwm.h" bodystart="477" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="group__pwm__interface_1gabe808fdbb4e315194eb08f9bf35f121b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pwm_pin_capture_usec</definition>
        <argsstring>(const struct device *dev, uint32_t pwm, pwm_flags_t flags, uint64_t *period, uint64_t *pulse, k_timeout_t timeout)</argsstring>
        <name>pwm_pin_capture_usec</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>pwm</declname>
        </param>
        <param>
          <type><ref refid="group__pwm__interface_1ga0ec21c2ce60e82a13af9c73d2b41bbc4" kindref="member">pwm_flags_t</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref> *</type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref> *</type>
          <declname>pulse</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Capture a single PWM period/pulse width in microseconds for a single PWM input. </para>
        </briefdescription>
        <detaileddescription>
<para>This API function wraps calls to <emphasis><ref refid="group__pwm__interface_1ga1c87879e7cc0cdce1158ffb6f08f73a8" kindref="member">pwm_pin_capture_cycles()</ref></emphasis> and <emphasis><ref refid="group__pwm__interface_1gace629ef3f488b247c1223c00f024f606" kindref="member">pwm_pin_cycles_to_usec()</ref></emphasis> and passes the capture result to the caller. The function is blocking until either the PWM capture is completed or a timeout occurs.</para>
<para><simplesect kind="note"><para><verbatim>embed:rst:inline :kconfig:`CONFIG_PWM_CAPTURE` </verbatim> must be selected for this function to be available.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwm</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM pin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM capture flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory to store the captured PWM period width (in usec). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pulse</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory to store the captured PWM pulse width (in usec). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period for the capture to complete.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM capture already in progress. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>IO error while capturing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ERANGE</parametername>
</parameternamelist>
<parameterdescription>
<para>If result is too large. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="523" column="19" bodyfile="include/drivers/pwm.h" bodystart="523" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="group__pwm__interface_1ga2a3699e1841d977621519d502aba73ae" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pwm_pin_capture_nsec</definition>
        <argsstring>(const struct device *dev, uint32_t pwm, pwm_flags_t flags, uint64_t *period, uint64_t *pulse, k_timeout_t timeout)</argsstring>
        <name>pwm_pin_capture_nsec</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>pwm</declname>
        </param>
        <param>
          <type><ref refid="group__pwm__interface_1ga0ec21c2ce60e82a13af9c73d2b41bbc4" kindref="member">pwm_flags_t</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref> *</type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref> *</type>
          <declname>pulse</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Capture a single PWM period/pulse width in nanoseconds for a single PWM input. </para>
        </briefdescription>
        <detaileddescription>
<para>This API function wraps calls to <emphasis><ref refid="group__pwm__interface_1ga1c87879e7cc0cdce1158ffb6f08f73a8" kindref="member">pwm_pin_capture_cycles()</ref></emphasis> and <emphasis><ref refid="group__pwm__interface_1ga309dc05dcda01648052eabcb3b550a0b" kindref="member">pwm_pin_cycles_to_nsec()</ref></emphasis> and passes the capture result to the caller. The function is blocking until either the PWM capture is completed or a timeout occurs.</para>
<para><simplesect kind="note"><para><verbatim>embed:rst:inline :kconfig:`CONFIG_PWM_CAPTURE` </verbatim> must be selected for this function to be available.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwm</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM pin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM capture flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory to store the captured PWM period width (in nsec). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pulse</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory to store the captured PWM pulse width (in nsec). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period for the capture to complete.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM capture already in progress. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>IO error while capturing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ERANGE</parametername>
</parameternamelist>
<parameterdescription>
<para>If result is too large. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pwm.h" line="579" column="19" bodyfile="include/drivers/pwm.h" bodystart="579" bodyend="606"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>PWM Interface. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
