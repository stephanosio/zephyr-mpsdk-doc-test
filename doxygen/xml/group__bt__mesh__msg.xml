<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__bt__mesh__msg" kind="group">
    <compoundname>bt_mesh_msg</compoundname>
    <title>Message</title>
    <innerclass refid="structbt__mesh__msg__ctx" prot="public">bt_mesh_msg_ctx</innerclass>
    <innerclass refid="structbt__mesh__msg__ack__ctx" prot="public">bt_mesh_msg_ack_ctx</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__bt__mesh__msg_1gaa26850aebc9bfc97d1dafb66ba02021c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_mesh_model_msg_init</definition>
        <argsstring>(struct net_buf_simple *msg, uint32_t opcode)</argsstring>
        <name>bt_mesh_model_msg_init</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>opcode</declname>
        </param>
        <briefdescription>
<para>Initialize a model message. </para>
        </briefdescription>
        <detaileddescription>
<para>Clears the message buffer contents, and encodes the given opcode. The message buffer will be ready for filling in payload data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Message buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opcode</parametername>
</parameternamelist>
<parameterdescription>
<para>Opcode to encode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/msg.h" line="112" column="6" declfile="include/bluetooth/mesh/msg.h" declline="112" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__msg_1gadd25e335133fe29f234243a39f4d7626" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void bt_mesh_msg_ack_ctx_init</definition>
        <argsstring>(struct bt_mesh_msg_ack_ctx *ack)</argsstring>
        <name>bt_mesh_msg_ack_ctx_init</name>
        <param>
          <type>struct <ref refid="structbt__mesh__msg__ack__ctx" kindref="compound">bt_mesh_msg_ack_ctx</ref> *</type>
          <declname>ack</declname>
        </param>
        <briefdescription>
<para>Initialize an acknowledged message context. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes semaphore used for synchronization between <ref refid="group__bt__mesh__msg_1ga83561f4d003c6c3c2b91a6afd180d1fd" kindref="member">bt_mesh_msg_ack_ctx_wait</ref> and <ref refid="group__bt__mesh__msg_1ga2b054f7dc01daeef067cd3d819a7c42c" kindref="member">bt_mesh_msg_ack_ctx_rx</ref> calls. Call this function before using <ref refid="structbt__mesh__msg__ack__ctx" kindref="compound">bt_mesh_msg_ack_ctx</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ack</parametername>
</parameternamelist>
<parameterdescription>
<para>Acknowledged message context to initialize. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/msg.h" line="131" column="20" bodyfile="include/bluetooth/mesh/msg.h" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__msg_1ga86d3803bde26f496b7de3fa348a04525" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void bt_mesh_msg_ack_ctx_reset</definition>
        <argsstring>(struct bt_mesh_msg_ack_ctx *ack)</argsstring>
        <name>bt_mesh_msg_ack_ctx_reset</name>
        <param>
          <type>struct <ref refid="structbt__mesh__msg__ack__ctx" kindref="compound">bt_mesh_msg_ack_ctx</ref> *</type>
          <declname>ack</declname>
        </param>
        <briefdescription>
<para>Reset the synchronization semaphore in an acknowledged message context. </para>
        </briefdescription>
        <detaileddescription>
<para>This function aborts call to <ref refid="group__bt__mesh__msg_1ga83561f4d003c6c3c2b91a6afd180d1fd" kindref="member">bt_mesh_msg_ack_ctx_wait</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ack</parametername>
</parameternamelist>
<parameterdescription>
<para>Acknowledged message context to be reset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/msg.h" line="142" column="20" bodyfile="include/bluetooth/mesh/msg.h" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__msg_1ga3da92606640cdba69a676c2a03c72311" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_mesh_msg_ack_ctx_clear</definition>
        <argsstring>(struct bt_mesh_msg_ack_ctx *ack)</argsstring>
        <name>bt_mesh_msg_ack_ctx_clear</name>
        <param>
          <type>struct <ref refid="structbt__mesh__msg__ack__ctx" kindref="compound">bt_mesh_msg_ack_ctx</ref> *</type>
          <declname>ack</declname>
        </param>
        <briefdescription>
<para>Clear parameters of an acknowledged message context. </para>
        </briefdescription>
        <detaileddescription>
<para>This function clears the opcode, remote address and user data set by <ref refid="group__bt__mesh__msg_1ga1bb34a904103933140e2159cb53d49f5" kindref="member">bt_mesh_msg_ack_ctx_prepare</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ack</parametername>
</parameternamelist>
<parameterdescription>
<para>Acknowledged message context to be cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/msg.h" line="154" column="6" declfile="include/bluetooth/mesh/msg.h" declline="154" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__msg_1ga1bb34a904103933140e2159cb53d49f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_msg_ack_ctx_prepare</definition>
        <argsstring>(struct bt_mesh_msg_ack_ctx *ack, uint32_t op, uint16_t dst, void *user_data)</argsstring>
        <name>bt_mesh_msg_ack_ctx_prepare</name>
        <param>
          <type>struct <ref refid="structbt__mesh__msg__ack__ctx" kindref="compound">bt_mesh_msg_ack_ctx</ref> *</type>
          <declname>ack</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>dst</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Prepare an acknowledged message context for the incoming message to wait. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the opcode, remote address of the incoming message and stores the user data. Use this function before calling <ref refid="group__bt__mesh__msg_1ga83561f4d003c6c3c2b91a6afd180d1fd" kindref="member">bt_mesh_msg_ack_ctx_wait</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ack</parametername>
</parameternamelist>
<parameterdescription>
<para>Acknowledged message context to prepare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The message OpCode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination address of the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data for the acknowledged message context.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/msg.h" line="168" column="5" declfile="include/bluetooth/mesh/msg.h" declline="168" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__msg_1ga974ba5d7df597a21945b75ac5919debd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool bt_mesh_msg_ack_ctx_busy</definition>
        <argsstring>(struct bt_mesh_msg_ack_ctx *ack)</argsstring>
        <name>bt_mesh_msg_ack_ctx_busy</name>
        <param>
          <type>struct <ref refid="structbt__mesh__msg__ack__ctx" kindref="compound">bt_mesh_msg_ack_ctx</ref> *</type>
          <declname>ack</declname>
        </param>
        <briefdescription>
<para>Check if the acknowledged message context is initialized with an opcode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ack</parametername>
</parameternamelist>
<parameterdescription>
<para>Acknowledged message context.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the acknowledged message context is initialized with an opcode, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/msg.h" line="178" column="20" bodyfile="include/bluetooth/mesh/msg.h" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__msg_1ga83561f4d003c6c3c2b91a6afd180d1fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_msg_ack_ctx_wait</definition>
        <argsstring>(struct bt_mesh_msg_ack_ctx *ack, k_timeout_t timeout)</argsstring>
        <name>bt_mesh_msg_ack_ctx_wait</name>
        <param>
          <type>struct <ref refid="structbt__mesh__msg__ack__ctx" kindref="compound">bt_mesh_msg_ack_ctx</ref> *</type>
          <declname>ack</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Wait for a message acknowledge. </para>
        </briefdescription>
        <detaileddescription>
<para>This function blocks execution until <ref refid="group__bt__mesh__msg_1ga2b054f7dc01daeef067cd3d819a7c42c" kindref="member">bt_mesh_msg_ack_ctx_rx</ref> is called or by timeout.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ack</parametername>
</parameternamelist>
<parameterdescription>
<para>Acknowledged message context of the message to wait for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Wait timeout.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/msg.h" line="192" column="5" declfile="include/bluetooth/mesh/msg.h" declline="192" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__msg_1ga2b054f7dc01daeef067cd3d819a7c42c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void bt_mesh_msg_ack_ctx_rx</definition>
        <argsstring>(struct bt_mesh_msg_ack_ctx *ack)</argsstring>
        <name>bt_mesh_msg_ack_ctx_rx</name>
        <param>
          <type>struct <ref refid="structbt__mesh__msg__ack__ctx" kindref="compound">bt_mesh_msg_ack_ctx</ref> *</type>
          <declname>ack</declname>
        </param>
        <briefdescription>
<para>Mark a message as acknowledged. </para>
        </briefdescription>
        <detaileddescription>
<para>This function unblocks call to <ref refid="group__bt__mesh__msg_1ga83561f4d003c6c3c2b91a6afd180d1fd" kindref="member">bt_mesh_msg_ack_ctx_wait</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ack</parametername>
</parameternamelist>
<parameterdescription>
<para>Context of a message to be acknowledged. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/msg.h" line="200" column="20" bodyfile="include/bluetooth/mesh/msg.h" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__msg_1gae10c4229cabf7774684c99154d4ed8ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool bt_mesh_msg_ack_ctx_match</definition>
        <argsstring>(const struct bt_mesh_msg_ack_ctx *ack, uint32_t op, uint16_t addr, void **user_data)</argsstring>
        <name>bt_mesh_msg_ack_ctx_match</name>
        <param>
          <type>const struct <ref refid="structbt__mesh__msg__ack__ctx" kindref="compound">bt_mesh_msg_ack_ctx</ref> *</type>
          <declname>ack</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Check if an opcode and address of a message matches the expected one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ack</parametername>
</parameternamelist>
<parameterdescription>
<para>Acknowledged message context to be checked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>OpCode of the incoming message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Source address of the incoming message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>If not NULL, returns a user data stored in the acknowledged message context by <ref refid="group__bt__mesh__msg_1ga1bb34a904103933140e2159cb53d49f5" kindref="member">bt_mesh_msg_ack_ctx_prepare</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the incoming message matches the expected one, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/msg.h" line="215" column="6" declfile="include/bluetooth/mesh/msg.h" declline="215" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__bt__mesh__msg_1ga658d38a7be18355f6ecd5f7fb4dcabed" prot="public" static="no">
        <name>BT_MESH_MIC_SHORT</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Length of a short Mesh MIC. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/msg.h" line="28" column="9" bodyfile="include/bluetooth/mesh/msg.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__mesh__msg_1ga6e8fc0bb4ed35870c0f1652c18a8117d" prot="public" static="no">
        <name>BT_MESH_MIC_LONG</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Length of a long Mesh MIC. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/msg.h" line="30" column="9" bodyfile="include/bluetooth/mesh/msg.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__mesh__msg_1gad0b5f56cc9741fcd5dadf157c5e62701" prot="public" static="no">
        <name>BT_MESH_MODEL_OP_LEN</name>
        <param><defname>_op</defname></param>
        <initializer>((_op) &lt;= 0xff ? 1 : (_op) &lt;= 0xffff ? 2 : 3)</initializer>
        <briefdescription>
<para>Helper to determine the length of an opcode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Opcode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/msg.h" line="38" column="9" bodyfile="include/bluetooth/mesh/msg.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__mesh__msg_1ga5352d6fa05808722eba8a76e2446eddb" prot="public" static="no">
        <name>BT_MESH_MODEL_BUF_LEN</name>
        <param><defname>_op</defname></param>
        <param><defname>_payload_len</defname></param>
        <initializer>	(<ref refid="group__bt__mesh__msg_1gad0b5f56cc9741fcd5dadf157c5e62701" kindref="member">BT_MESH_MODEL_OP_LEN</ref>(_op) + (_payload_len) + <ref refid="group__bt__mesh__msg_1ga658d38a7be18355f6ecd5f7fb4dcabed" kindref="member">BT_MESH_MIC_SHORT</ref>)</initializer>
        <briefdescription>
<para>Helper for model message buffer length. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the length of a Mesh model message buffer, including the opcode length and a short MIC.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Opcode of the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_payload_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the model payload. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/msg.h" line="50" column="9" bodyfile="include/bluetooth/mesh/msg.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__mesh__msg_1gabb16a024db39706af46ad86e2b04b00d" prot="public" static="no">
        <name>BT_MESH_MODEL_BUF_LEN_LONG_MIC</name>
        <param><defname>_op</defname></param>
        <param><defname>_payload_len</defname></param>
        <initializer>	(<ref refid="group__bt__mesh__msg_1gad0b5f56cc9741fcd5dadf157c5e62701" kindref="member">BT_MESH_MODEL_OP_LEN</ref>(_op) + (_payload_len) + <ref refid="group__bt__mesh__msg_1ga6e8fc0bb4ed35870c0f1652c18a8117d" kindref="member">BT_MESH_MIC_LONG</ref>)</initializer>
        <briefdescription>
<para>Helper for model message buffer length. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the length of a Mesh model message buffer, including the opcode length and a long MIC.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Opcode of the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_payload_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the model payload. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/msg.h" line="63" column="9" bodyfile="include/bluetooth/mesh/msg.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__mesh__msg_1ga6a61ace773e331d82860b343d51f62e7" prot="public" static="no">
        <name>BT_MESH_MODEL_BUF_DEFINE</name>
        <param><defname>_buf</defname></param>
        <param><defname>_op</defname></param>
        <param><defname>_payload_len</defname></param>
        <initializer>	<ref refid="group__net__buf_1gaf85aa0b705bb4fbe2630191fde802501" kindref="member">NET_BUF_SIMPLE_DEFINE</ref>(_buf, <ref refid="group__bt__mesh__msg_1ga5352d6fa05808722eba8a76e2446eddb" kindref="member">BT_MESH_MODEL_BUF_LEN</ref>(_op, (_payload_len)))</initializer>
        <briefdescription>
<para>Define a Mesh model message buffer using <ref refid="group__net__buf_1gaf85aa0b705bb4fbe2630191fde802501" kindref="member">NET_BUF_SIMPLE_DEFINE</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Opcode of the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_payload_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the model message payload. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/msg.h" line="74" column="9" bodyfile="include/bluetooth/mesh/msg.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Message. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
