<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structbt__mesh__model__cb" kind="struct" language="C++" prot="public">
    <compoundname>bt_mesh_model_cb</compoundname>
    <includes refid="access_8h" local="no">access.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structbt__mesh__model__cb_1a67bbaa624f4e7143ff571702e8e34485" prot="public" static="no" mutable="no">
        <type>int(*const</type>
        <definition>int(*const bt_mesh_model_cb::settings_set) (struct bt_mesh_model *model, const char *name, size_t len_rd, settings_read_cb read_cb, void *cb_arg)</definition>
        <argsstring>)(struct bt_mesh_model *model, const char *name, size_t len_rd, settings_read_cb read_cb, void *cb_arg)</argsstring>
        <name>settings_set</name>
        <briefdescription>
<para>Set value handler of user data tied to the model. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structsettings__handler_1a70aa25bf3b53898ab22906e9949963a4" kindref="member">settings_handler::h_set</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Model to set the persistent data of. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name/key of the settings item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_rd</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the data found in the backend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Function provided to read the data from the backend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments for the read function provided by the backend.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, error otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/access.h" line="477" column="1" bodyfile="include/bluetooth/mesh/access.h" bodystart="477" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__model__cb_1ad1e00f4bea8bff6ee02f3369c1be7ccd" prot="public" static="no" mutable="no">
        <type>int(*const</type>
        <definition>int(*const bt_mesh_model_cb::start) (struct bt_mesh_model *model)</definition>
        <argsstring>)(struct bt_mesh_model *model)</argsstring>
        <name>start</name>
        <briefdescription>
<para>Callback called when the mesh is started. </para>
        </briefdescription>
        <detaileddescription>
<para>This handler gets called after the node has been provisioned, or after all mesh data has been loaded from persistent storage.</para>
<para>When this callback fires, the mesh model may start its behavior, and all Access APIs are ready for use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Model this callback belongs to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, error otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/access.h" line="493" column="1" bodyfile="include/bluetooth/mesh/access.h" bodystart="493" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__model__cb_1ae99444cf9250b91087995a98d942e53b" prot="public" static="no" mutable="no">
        <type>int(*const</type>
        <definition>int(*const bt_mesh_model_cb::init) (struct bt_mesh_model *model)</definition>
        <argsstring>)(struct bt_mesh_model *model)</argsstring>
        <name>init</name>
        <briefdescription>
<para>Model init callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Called on every model instance during mesh initialization.</para>
<para>If any of the model init callbacks return an error, the Mesh subsystem initialization will be aborted, and the error will be returned to the caller of <ref refid="group__bt__mesh_1ga521def6f74467a9bd3f2757c6aabd405" kindref="member">bt_mesh_init</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Model to be initialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, error otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/access.h" line="507" column="1" bodyfile="include/bluetooth/mesh/access.h" bodystart="507" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__model__cb_1a6d288cfab5b7a3d49a8a982256a0452a" prot="public" static="no" mutable="no">
        <type>void(*const</type>
        <definition>void(*const bt_mesh_model_cb::reset) (struct bt_mesh_model *model)</definition>
        <argsstring>)(struct bt_mesh_model *model)</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Model reset callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Called when the mesh node is reset. All model data is deleted on reset, and the model should clear its state.</para>
<para><simplesect kind="note"><para>If the model stores any persistent data, this needs to be erased manually.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Model this callback belongs to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/access.h" line="519" column="1" bodyfile="include/bluetooth/mesh/access.h" bodystart="519" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Model callback functions. </para>
    </detaileddescription>
    <location file="include/bluetooth/mesh/access.h" line="463" column="1" bodyfile="include/bluetooth/mesh/access.h" bodystart="463" bodyend="520"/>
    <listofallmembers>
      <member refid="structbt__mesh__model__cb_1ae99444cf9250b91087995a98d942e53b" prot="public" virt="non-virtual"><scope>bt_mesh_model_cb</scope><name>init</name></member>
      <member refid="structbt__mesh__model__cb_1a6d288cfab5b7a3d49a8a982256a0452a" prot="public" virt="non-virtual"><scope>bt_mesh_model_cb</scope><name>reset</name></member>
      <member refid="structbt__mesh__model__cb_1a67bbaa624f4e7143ff571702e8e34485" prot="public" virt="non-virtual"><scope>bt_mesh_model_cb</scope><name>settings_set</name></member>
      <member refid="structbt__mesh__model__cb_1ad1e00f4bea8bff6ee02f3369c1be7ccd" prot="public" virt="non-virtual"><scope>bt_mesh_model_cb</scope><name>start</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
