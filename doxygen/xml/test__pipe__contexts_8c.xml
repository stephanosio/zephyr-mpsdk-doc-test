<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="test__pipe__contexts_8c" kind="file" language="C++">
    <compoundname>test_pipe_contexts.c</compoundname>
    <includes refid="ztest_8h" local="no">ztest.h</includes>
    <incdepgraph>
      <node id="17">
        <label>app_memory/app_memdomain.h</label>
        <link refid="app__memdomain_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>app_memory/mem_domain.h</label>
        <link refid="mem__domain_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>arch/arch_inlines.h</label>
        <link refid="arch__inlines_8h"/>
      </node>
      <node id="66">
        <label>arch/cpu.h</label>
        <link refid="include_2arch_2cpu_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>arch/structs.h</label>
        <link refid="structs_8h"/>
      </node>
      <node id="65">
        <label>arch/syscall.h</label>
        <link refid="arch_2syscall_8h"/>
      </node>
      <node id="29">
        <label>devicetree.h</label>
        <link refid="devicetree_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>devicetree/clocks.h</label>
        <link refid="clocks_8h"/>
      </node>
      <node id="36">
        <label>devicetree/dma.h</label>
        <link refid="devicetree_2dma_8h"/>
      </node>
      <node id="38">
        <label>devicetree/fixed-partitions.h</label>
        <link refid="fixed-partitions_8h"/>
      </node>
      <node id="34">
        <label>devicetree/gpio.h</label>
        <link refid="devicetree_2gpio_8h"/>
      </node>
      <node id="32">
        <label>devicetree/io-channels.h</label>
        <link refid="io-channels_8h"/>
      </node>
      <node id="40">
        <label>devicetree/ordinals.h</label>
        <link refid="ordinals_8h"/>
      </node>
      <node id="41">
        <label>devicetree/pinctrl.h</label>
        <link refid="devicetree_2pinctrl_8h"/>
      </node>
      <node id="37">
        <label>devicetree/pwms.h</label>
        <link refid="pwms_8h"/>
      </node>
      <node id="35">
        <label>devicetree/spi.h</label>
        <link refid="devicetree_2spi_8h"/>
      </node>
      <node id="39">
        <label>devicetree/zephyr.h</label>
        <link refid="devicetree_2zephyr_8h"/>
      </node>
      <node id="75">
        <label>fatal.h</label>
        <link refid="fatal_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>init.h</label>
        <link refid="init_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>irq_offload.h</label>
        <link refid="irq__offload_8h"/>
      </node>
      <node id="45">
        <label>kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>kernel/mempool_heap.h</label>
        <link refid="mempool__heap_8h"/>
      </node>
      <node id="51">
        <label>kernel/sched_priq.h</label>
        <link refid="sched__priq_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>kernel/stats.h</label>
        <link refid="kernel_2stats_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>kernel/thread.h</label>
        <link refid="kernel_2thread_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>kernel/thread_stack.h</label>
        <link refid="kernel_2thread__stack_8h"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>kernel_includes.h</label>
        <link refid="kernel__includes_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>kernel_structs.h</label>
        <link refid="kernel__structs_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>kernel_version.h</label>
        <link refid="kernel__version_8h"/>
      </node>
      <node id="28">
        <label>linker/devicetree_reserved.h</label>
        <link refid="devicetree__reserved_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>linker/linker-defs.h</label>
        <link refid="linker-defs_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>linker/section_tags.h</label>
        <link refid="section__tags_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>linker/sections.h</label>
        <link refid="sections_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>sys/arch_interface.h</label>
        <link refid="arch__interface_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="42">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>sys/kobject.h</label>
        <link refid="include_2sys_2kobject_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>sys/rb.h</label>
        <link refid="rb_8h"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>sys/sflist.h</label>
        <link refid="sflist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>sys/sys_heap.h</label>
        <link refid="sys__heap_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>sys/time_units.h</label>
        <link refid="time__units_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="23">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>sys_clock.h</label>
        <link refid="include_2sys__clock_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>timing/types.h</label>
        <link refid="include_2timing_2types_8h"/>
      </node>
      <node id="4">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="19">
        <label>toolchain/common.h</label>
        <link refid="common_8h"/>
      </node>
      <node id="86">
        <label>tracing/tracing.h</label>
        <link refid="tracing_2tracing_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>tracing/tracing_macros.h</label>
        <link refid="tracing__macros_8h"/>
      </node>
      <node id="87">
        <label>tracking.h</label>
        <link refid="tracking_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="13">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="8">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="11">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>offsets.h</label>
        <link refid="offsets_8h"/>
      </node>
      <node id="64">
        <label>syscall_list.h</label>
        <link refid="syscall__list_8h"/>
      </node>
      <node id="88">
        <label>syscalls/kernel.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kernel_8h"/>
      </node>
      <node id="81">
        <label>syscalls/kobject.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kobject_8h"/>
      </node>
      <node id="2">
        <label>ztest.h</label>
        <link refid="ztest_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ztest_assert.h</label>
        <link refid="ztest__assert_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ztest_mock.h</label>
        <link refid="ztest__mock_8h"/>
      </node>
      <node id="15">
        <label>ztest_test.h</label>
        <link refid="ztest__test_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>ztest_test_deprecated.h</label>
        <link refid="ztest__test__deprecated_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c</label>
        <link refid="test__pipe__contexts_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>alloca.h</label>
      </node>
      <node id="68">
        <label>arch/cpu.h</label>
      </node>
      <node id="31">
        <label>devicetree_fixups.h</label>
      </node>
      <node id="30">
        <label>devicetree_unfixed.h</label>
      </node>
      <node id="43">
        <label>kernel.h</label>
      </node>
      <node id="6">
        <label>stdarg.h</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="84">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="89">
        <label>syscalls/ztest_test.h</label>
      </node>
      <node id="90">
        <label>tc_util.h</label>
      </node>
      <node id="9">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structmem__block" prot="public">mem_block</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="test__pipe__contexts_8c_1a6423a880df59733d2d9b509c7718d3a9" prot="public" static="no">
        <name>STACK_SIZE</name>
        <initializer>(1024 + CONFIG_TEST_EXTRA_STACK_SIZE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="9" column="9" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__pipe__contexts_8c_1adec5a32ee1bee16e07eb10b6dc612e62" prot="public" static="no">
        <name>PIPE_LEN</name>
        <initializer>(4 * 16)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="10" column="9" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__pipe__contexts_8c_1acf314f3ef4d55d09a4679e73a930070b" prot="public" static="no">
        <name>BYTES_TO_WRITE</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="11" column="9" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__pipe__contexts_8c_1a41e9ced92689f94ffc427d5e2e658382" prot="public" static="no">
        <name>BYTES_TO_READ</name>
        <initializer><ref refid="test__pipe__contexts_8c_1acf314f3ef4d55d09a4679e73a930070b" kindref="member">BYTES_TO_WRITE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="12" column="9" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__pipe__contexts_8c_1a11d818f14508b076eda0cfe98640b7ae" prot="public" static="no">
        <name>SZ</name>
        <initializer>128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="39" column="10" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="test__pipe__contexts_8c_1a5337edf3b057c982a0fb434cc75e9506" prot="public" static="yes" mutable="no">
        <type><ref refid="group__ztest__test_1ga2c7d0aa85e7f320d582395c5ded90133" kindref="member">ZTEST_DMEM</ref> <ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> char</type>
        <definition>ZTEST_DMEM unsigned char data[]</definition>
        <argsstring>[]</argsstring>
        <name>data</name>
        <initializer>=
&quot;abcd1234$%^&amp;PIPEefgh5678!/?*EPIPijkl9012[]&lt;&gt;PEPImnop3456{}()IPEP&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="16" column="34" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__pipe__contexts_8c_1a231b43b16f0bc4c086a0a7c43429baed" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref> <ref refid="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref></type>
        <definition>struct k_pipe pipe pipe1</definition>
        <argsstring></argsstring>
        <name>pipe1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="26" column="13" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__pipe__contexts_8c_1aa15baae19d44279cac3d8bf47c9e707f" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref></type>
        <definition>struct k_thread tdata</definition>
        <argsstring></argsstring>
        <name>tdata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="31" column="15" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__pipe__contexts_8c_1a82c3f4a9aaaf6ca8f1ca77cc6666f892" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref></type>
        <definition>struct k_thread tdata1</definition>
        <argsstring></argsstring>
        <name>tdata1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="32" column="15" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__pipe__contexts_8c_1a0254f78e372a9cb818cac949ef36f349" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref></type>
        <definition>struct k_thread tdata2</definition>
        <argsstring></argsstring>
        <name>tdata2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="33" column="15" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__pipe__contexts_8c_1a85ed04016874a8fd10a35371733f39e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_HEAP_DEFINE</definition>
        <argsstring>(mpool,(4 *16) *1)</argsstring>
        <name>K_HEAP_DEFINE</name>
        <param>
          <type>mpool</type>
        </param>
        <param>
          <type>(4 *16) *</type>
          <declname>1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="14" column="1" declfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" declline="14" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1a4fafdec23615ba609e3ca39261ce2529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_PIPE_DEFINE</definition>
        <argsstring>(kpipe,(4 *16), 4)</argsstring>
        <name>K_PIPE_DEFINE</name>
        <param>
          <type>kpipe</type>
        </param>
        <param>
          <type>(4 *16)</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TESTPOINT: init via K_PIPE_DEFINE </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="21" column="1" declfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" declline="21" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1ac65f4513a52408406dff68b3b2683dbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_PIPE_DEFINE</definition>
        <argsstring>(khalfpipe,((4 *16)/2), 4)</argsstring>
        <name>K_PIPE_DEFINE</name>
        <param>
          <type>khalfpipe</type>
        </param>
        <param>
          <type>((4 *16)/2)</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="22" column="1" declfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" declline="22" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1a00221ddc7f4b74afd22f58b7722239be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_PIPE_DEFINE</definition>
        <argsstring>(kpipe1,(4 *16), 4)</argsstring>
        <name>K_PIPE_DEFINE</name>
        <param>
          <type>kpipe1</type>
        </param>
        <param>
          <type>(4 *16)</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="23" column="1" declfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" declline="23" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1a15503a25eed533e5e1cef38c39c57d30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_PIPE_DEFINE</definition>
        <argsstring>(pipe_test_alloc,(4 *16), 4)</argsstring>
        <name>K_PIPE_DEFINE</name>
        <param>
          <type>pipe_test_alloc</type>
        </param>
        <param>
          <type>(4 *16)</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="24" column="1" declfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" declline="24" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1a5e1a4ecee4ba00b778b09fc3b009371e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_PIPE_DEFINE</definition>
        <argsstring>(ksmallpipe, 10, 2)</argsstring>
        <name>K_PIPE_DEFINE</name>
        <param>
          <type>ksmallpipe</type>
        </param>
        <param>
          <type>10</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="25" column="1" declfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" declline="25" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1ab7dce840d558d127ea17c9985198fbdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_THREAD_STACK_DEFINE</definition>
        <argsstring>(tstack,(1024+CONFIG_TEST_EXTRA_STACK_SIZE))</argsstring>
        <name>K_THREAD_STACK_DEFINE</name>
        <param>
          <type><ref refid="pipe_2pipe__api_2src_2main_8c_1a8b6a52348bfbfba409bf38688d31b8a8" kindref="member">tstack</ref></type>
        </param>
        <param>
          <type>(1024+CONFIG_TEST_EXTRA_STACK_SIZE)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="28" column="1" declfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" declline="28" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1a0f35d3173bdc273bec002b037bcf9c33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_THREAD_STACK_DEFINE</definition>
        <argsstring>(tstack1,(1024+CONFIG_TEST_EXTRA_STACK_SIZE))</argsstring>
        <name>K_THREAD_STACK_DEFINE</name>
        <param>
          <type>tstack1</type>
        </param>
        <param>
          <type>(1024+CONFIG_TEST_EXTRA_STACK_SIZE)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="29" column="1" declfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" declline="29" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1a5b7d08958447112d61a962e37bab3529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_THREAD_STACK_DEFINE</definition>
        <argsstring>(tstack2,(1024+CONFIG_TEST_EXTRA_STACK_SIZE))</argsstring>
        <name>K_THREAD_STACK_DEFINE</name>
        <param>
          <type>tstack2</type>
        </param>
        <param>
          <type>(1024+CONFIG_TEST_EXTRA_STACK_SIZE)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="30" column="1" declfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" declline="30" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1a030a72f0a9fff067287392f04245bf59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_SEM_DEFINE</definition>
        <argsstring>(end_sema, 0, 1)</argsstring>
        <name>K_SEM_DEFINE</name>
        <param>
          <type><ref refid="stack_2stack_2src_2main_8c_1a37d12066b90b5226eb1895e59f5908e8" kindref="member">end_sema</ref></type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="34" column="1" declfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" declline="34" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1ae78744ededa89ec6f8ec5e99180c714f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_HEAP_DEFINE</definition>
        <argsstring>(test_pool, 128 *4)</argsstring>
        <name>K_HEAP_DEFINE</name>
        <param>
          <type><ref refid="test__queue_8h_1a4dc595a0cb08f33192e6b5519acd86b8" kindref="member">test_pool</ref></type>
        </param>
        <param>
          <type>128 *</type>
          <declname>4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="41" column="1" declfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" declline="41" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1a244ca213b5c71f4b27aa9cf08adc1766" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tpipe_put</definition>
        <argsstring>(struct k_pipe *ppipe, k_timeout_t timeout)</argsstring>
        <name>tpipe_put</name>
        <param>
          <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref> *</type>
          <declname>ppipe</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: pipe put</para>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="47" column="13" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="47" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1a685c8de9141836e952d39114eb895e40" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tpipe_get</definition>
        <argsstring>(struct k_pipe *ppipe, k_timeout_t timeout)</argsstring>
        <name>tpipe_get</name>
        <param>
          <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref> *</type>
          <declname>ppipe</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: pipe get</para>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="61" column="13" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="61" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1a757b88d684794c799892d1a4c28fd86f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tThread_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>tThread_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="80" column="13" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="80" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1aa765d02c5531ee8ff39cdefa0232b1da" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tpipe_thread_thread</definition>
        <argsstring>(struct k_pipe *ppipe)</argsstring>
        <name>tpipe_thread_thread</name>
        <param>
          <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref> *</type>
          <declname>ppipe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: thread-thread data passing via pipe</para>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="89" column="13" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="89" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1a82443a8d984b67022825315267c2d568" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tpipe_kthread_to_kthread</definition>
        <argsstring>(struct k_pipe *ppipe)</argsstring>
        <name>tpipe_kthread_to_kthread</name>
        <param>
          <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref> *</type>
          <declname>ppipe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: thread-thread data passing via pipe</para>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="107" column="13" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="107" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1ad7034703f0f4702a98f1efb05a9e5c95" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tpipe_put_no_wait</definition>
        <argsstring>(struct k_pipe *ppipe)</argsstring>
        <name>tpipe_put_no_wait</name>
        <param>
          <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref> *</type>
          <declname>ppipe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: pipe put</para>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="124" column="13" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="124" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1ab734c815c8aeb8375791363d76f869c9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tpipe_put_small_size</definition>
        <argsstring>(struct k_pipe *ppipe, k_timeout_t timeout)</argsstring>
        <name>tpipe_put_small_size</name>
        <param>
          <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref> *</type>
          <declname>ppipe</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: pipe put</para>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="138" column="13" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="138" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1a18a00044336bc95b401862200e8af8d1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tpipe_get_small_size</definition>
        <argsstring>(struct k_pipe *ppipe, k_timeout_t timeout)</argsstring>
        <name>tpipe_get_small_size</name>
        <param>
          <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref> *</type>
          <declname>ppipe</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: pipe get</para>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="151" column="13" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="151" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1a1c93fcc70ede3cc79f965540c0ab8b59" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tpipe_get_large_size</definition>
        <argsstring>(struct k_pipe *ppipe, k_timeout_t timeout)</argsstring>
        <name>tpipe_get_large_size</name>
        <param>
          <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref> *</type>
          <declname>ppipe</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: pipe get</para>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="166" column="13" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="166" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1a3c1459b4f3485658ed43ede808a6562a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_alloc</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_alloc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test Initialization and buffer allocation of pipe, with various parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1ga32a902a5d12ca54b17c2b58783214613" kindref="member">k_pipe_alloc_init()</ref>, <ref refid="group__pipe__apis_1gaad0ab1b97b537da408031e4bcbe04f36" kindref="member">k_pipe_cleanup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="187" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="187" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1af35a83b97b2ac84ca57ad3de92349315" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void thread_for_get_forever</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>thread_for_get_forever</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="204" column="13" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="204" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1aed174ac0280d983e4ab670a566eb0efa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_cleanup</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_cleanup</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: test if a dynamically allocated buffer can be freed</para>
<para>TESTPOINT: nothing to do with <ref refid="group__pipe__apis_1gaad0ab1b97b537da408031e4bcbe04f36" kindref="member">k_pipe_cleanup()</ref> for static buffer in pipe</para>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="209" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="209" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="test__pipe__contexts_8c_1a612737c5da9ece42b7145f41ef631e81" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void thread_handler</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>thread_handler</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="237" column="13" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="237" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga9f5f0800ee4c3148844d97f0341d48ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_thread2thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_thread2thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test pipe data passing between threads. </para>
        </briefdescription>
        <detaileddescription>
<para>Test Objective:<itemizedlist>
<listitem><para>Verify data passing with &quot;pipe put/get&quot; APIs between threads</para>
</listitem></itemizedlist>
</para>
<para>Testing techniques:<itemizedlist>
<listitem><para>function and block box testing,Interface testing, Dynamic analysis and testing.</para>
</listitem></itemizedlist>
</para>
<para>Prerequisite Conditions:<itemizedlist>
<listitem><para>CONFIG_TEST_USERSPACE.</para>
</listitem></itemizedlist>
</para>
<para>Input Specifications:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para>Test Procedure:<orderedlist>
<listitem><para>Initialize a pipe, which is defined at run time.</para>
</listitem><listitem><para>Create a thread (A).</para>
</listitem><listitem><para>In A thread, check if it can get data, which is sent by main thread via the pipe.</para>
</listitem><listitem><para>In A thread, send data to main thread via the pipe.</para>
</listitem><listitem><para>In main thread, send data to A thread via the pipe.</para>
</listitem><listitem><para>In main thread, check if it can get data, which is sent by A thread.</para>
</listitem><listitem><para>Do the same testing with a pipe, which is defined at compile time</para>
</listitem></orderedlist>
</para>
<para>Expected Test Result:<itemizedlist>
<listitem><para>Data can be sent/received between threads.</para>
</listitem></itemizedlist>
</para>
<para>Pass/Fail Criteria:<itemizedlist>
<listitem><para>Successful if check points in test procedure are all passed, otherwise failure.</para>
</listitem></itemizedlist>
</para>
<para>Assumptions and Constraints:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1gae9e807fb63bb7186b87015664f2c762d" kindref="member">k_pipe_init()</ref>, <ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put()</ref>, <ref refid="group__pipe__apis_1gac2256aa00c59e78199be9bdefd61aa52" kindref="member">K_PIPE_DEFINE(x)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: test k_pipe_init pipe</para>
<para>TESTPOINT: test K_PIPE_DEFINE pipe</para>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="292" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="292" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1gaec0aabe27966e4f4d9a4bc90f37fe5c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_user_thread2thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_user_thread2thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test data passing using pipes between user threads. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1gae9e807fb63bb7186b87015664f2c762d" kindref="member">k_pipe_init()</ref>, <ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put()</ref>, <ref refid="group__pipe__apis_1gac2256aa00c59e78199be9bdefd61aa52" kindref="member">K_PIPE_DEFINE(x)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: test k_object_alloc pipe</para>
<para>TESTPOINT: test k_pipe_alloc_init</para>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="307" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="307" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1gae4866a237984d4318f25f13bc5b82633" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_resource_pool_auto_free</definition>
        <argsstring>(void)</argsstring>
        <name>test_resource_pool_auto_free</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test resource pool free. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__heap__apis_1ga22b83564e50ae6177388dfe63e32a512" kindref="member">k_heap_alloc()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="326" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="326" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1gaf26e9597b960fd21b1e9fbd2528d7216" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tThread_half_pipe_put</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>tThread_half_pipe_put</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="336" column="13" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="336" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1gaed747dff67cae5af75b2d186a9194d57" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tThread_half_pipe_get</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>tThread_half_pipe_get</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="341" column="13" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="341" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1gaf2e86fbca58a7ae664fb4f528711ee15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_half_pipe_put_get</definition>
        <argsstring>(void)</argsstring>
        <name>test_half_pipe_put_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test put/get with smaller pipe buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put()</ref>, <ref refid="group__pipe__apis_1gada9aaf9a336d98a95441212f4223e9ef" kindref="member">k_pipe_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: thread-thread data passing via pipe</para>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="350" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="350" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1gafc65cf58e8bcde78fc688d4ed20e84bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_get_put</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_get_put</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: thread-thread data passing via pipe</para>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="381" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="381" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga74fe0df1db9ec493e97f407c241ad315" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_get_large</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_get_large</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: thread-thread data passing via pipe</para>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="412" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="412" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1gafc62de28e1f1996d1961ef09a62da6d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_reader_wait</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_reader_wait</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test pending reader in pipe. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put()</ref>, <ref refid="group__pipe__apis_1gada9aaf9a336d98a95441212f4223e9ef" kindref="member">k_pipe_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: test k_pipe_block_put with semaphore</para>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="438" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="438" bodyend="448"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ztest_8h" kindref="compound">ztest.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STACK_SIZE<sp/><sp/><sp/><sp/><sp/><sp/>(1024<sp/>+<sp/>CONFIG_TEST_EXTRA_STACK_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PIPE_LEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(4<sp/>*<sp/>16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BYTES_TO_WRITE<sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BYTES_TO_READ<sp/>BYTES_TO_WRITE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><ref refid="test__pipe__contexts_8c_1a85ed04016874a8fd10a35371733f39e7" kindref="member">K_HEAP_DEFINE</ref>(mpool,<sp/><ref refid="test__pipe__contexts_8c_1adec5a32ee1bee16e07eb10b6dc612e62" kindref="member">PIPE_LEN</ref><sp/>*<sp/>1);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__ztest__test__deprecated_1ga2c7d0aa85e7f320d582395c5ded90133" kindref="member">ZTEST_DMEM</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__aligned(4)<sp/><ref refid="test__pipe__contexts_8c_1a5337edf3b057c982a0fb434cc75e9506" kindref="member">data</ref>[]<sp/>=</highlight></codeline>
<codeline lineno="17"><highlight class="normal">&quot;abcd1234$%^&amp;PIPEefgh5678!/?*EPIPijkl9012[]&lt;&gt;PEPImnop3456{}()IPEP</highlight><highlight class="stringliteral">&quot;;</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral">BUILD_ASSERT(sizeof(data)<sp/>&gt;=<sp/>PIPE_LEN);</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral">K_PIPE_DEFINE(kpipe,<sp/>PIPE_LEN,<sp/>4);</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral">K_PIPE_DEFINE(khalfpipe,<sp/>(PIPE_LEN<sp/>/<sp/>2),<sp/>4);</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral">K_PIPE_DEFINE(kpipe1,<sp/>PIPE_LEN,<sp/>4);</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral">K_PIPE_DEFINE(pipe_test_alloc,<sp/>PIPE_LEN,<sp/>4);</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral">K_PIPE_DEFINE(ksmallpipe,<sp/>10,<sp/>2);</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral">struct<sp/>k_pipe<sp/>pipe,<sp/>pipe1;</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral">K_THREAD_STACK_DEFINE(tstack,<sp/>STACK_SIZE);</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral">K_THREAD_STACK_DEFINE(tstack1,<sp/>STACK_SIZE);</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral">K_THREAD_STACK_DEFINE(tstack2,<sp/>STACK_SIZE);</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral">struct<sp/>k_thread<sp/>tdata;</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral">struct<sp/>k_thread<sp/>tdata1;</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral">struct<sp/>k_thread<sp/>tdata2;</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral">K_SEM_DEFINE(end_sema,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral">#ifdef<sp/>CONFIG_64BIT</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral">#define<sp/>SZ<sp/>256</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral">#else</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral">#define<sp/>SZ<sp/>128</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral">#endif</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral">K_HEAP_DEFINE(test_pool,<sp/>SZ<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="43" refid="structmem__block" refkind="compound"><highlight class="stringliteral">struct<sp/>mem_block<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>*data;</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral">static<sp/>void<sp/>tpipe_put(struct<sp/>k_pipe<sp/>*ppipe,<sp/>k_timeout_t<sp/>timeout)</highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>to_wt,<sp/>wt_byte<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>PIPE_LEN;<sp/>i<sp/>+=<sp/>wt_byte)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_wt<sp/>=<sp/>(PIPE_LEN<sp/>-<sp/>i)<sp/>&gt;=<sp/>BYTES_TO_WRITE<sp/>?</highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BYTES_TO_WRITE<sp/>:<sp/>(PIPE_LEN<sp/>-<sp/>i);</highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_false(k_pipe_put(ppipe,<sp/>&amp;data[i],<sp/>to_wt,</highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;wt_byte,<sp/>1,<sp/>timeout),<sp/>NULL);</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_true(wt_byte<sp/>==<sp/>to_wt<sp/>||<sp/>wt_byte<sp/>==<sp/>1,<sp/>NULL);</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral">static<sp/>void<sp/>tpipe_get(struct<sp/>k_pipe<sp/>*ppipe,<sp/>k_timeout_t<sp/>timeout)</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>char<sp/>rx_data[PIPE_LEN];</highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>to_rd,<sp/>rd_byte<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*get<sp/>pipe<sp/>data<sp/>from<sp/>&quot;</highlight><highlight class="normal">pipe_put</highlight><highlight class="stringliteral">&quot;*/</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>PIPE_LEN;<sp/>i<sp/>+=<sp/>rd_byte)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_rd<sp/>=<sp/>(PIPE_LEN<sp/>-<sp/>i)<sp/>&gt;=<sp/>BYTES_TO_READ<sp/>?</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BYTES_TO_READ<sp/>:<sp/>(PIPE_LEN<sp/>-<sp/>i);</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_false(k_pipe_get(ppipe,<sp/>&amp;rx_data[i],<sp/>to_rd,</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;rd_byte,<sp/>1,<sp/>timeout),<sp/>NULL);</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_true(rd_byte<sp/>==<sp/>to_rd<sp/>||<sp/>rd_byte<sp/>==<sp/>1,<sp/>NULL);</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>PIPE_LEN;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_equal(rx_data[i],<sp/>data[i],<sp/>NULL);</highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral">static<sp/>void<sp/>tThread_entry(void<sp/>*p1,<sp/>void<sp/>*p2,<sp/>void<sp/>*p3)</highlight></codeline>
<codeline lineno="81"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tpipe_get((struct<sp/>k_pipe<sp/>*)p1,<sp/>K_FOREVER);</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_sem_give(&amp;end_sema);</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tpipe_put((struct<sp/>k_pipe<sp/>*)p1,<sp/>K_NO_WAIT);</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_sem_give(&amp;end_sema);</highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral">static<sp/>void<sp/>tpipe_thread_thread(struct<sp/>k_pipe<sp/>*ppipe)</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_tid_t<sp/>tid<sp/>=<sp/>k_thread_create(&amp;tdata,<sp/>tstack,<sp/>STACK_SIZE,</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tThread_entry,<sp/>ppipe,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_PRIO_PREEMPT(0),</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_INHERIT_PERMS<sp/>|<sp/>K_USER,<sp/>K_NO_WAIT);</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tpipe_put(ppipe,<sp/>K_NO_WAIT);</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_sem_take(&amp;end_sema,<sp/>K_FOREVER);</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_sem_take(&amp;end_sema,<sp/>K_FOREVER);</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tpipe_get(ppipe,<sp/>K_FOREVER);</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>clear<sp/>the<sp/>spawned<sp/>thread<sp/>avoid<sp/>side<sp/>effect<sp/>*/</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_thread_abort(tid);</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral">static<sp/>void<sp/>tpipe_kthread_to_kthread(struct<sp/>k_pipe<sp/>*ppipe)</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_tid_t<sp/>tid<sp/>=<sp/>k_thread_create(&amp;tdata,<sp/>tstack,<sp/>STACK_SIZE,</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tThread_entry,<sp/>ppipe,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_PRIO_PREEMPT(0),<sp/>0,<sp/>K_NO_WAIT);</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tpipe_put(ppipe,<sp/>K_NO_WAIT);</highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_sem_take(&amp;end_sema,<sp/>K_FOREVER);</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_sem_take(&amp;end_sema,<sp/>K_FOREVER);</highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tpipe_get(ppipe,<sp/>K_FOREVER);</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>clear<sp/>the<sp/>spawned<sp/>thread<sp/>avoid<sp/>side<sp/>effect<sp/>*/</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_thread_abort(tid);</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral">static<sp/>void<sp/>tpipe_put_no_wait(struct<sp/>k_pipe<sp/>*ppipe)</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>to_wt,<sp/>wt_byte<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>PIPE_LEN;<sp/>i<sp/>+=<sp/>wt_byte)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_wt<sp/>=<sp/>(PIPE_LEN<sp/>-<sp/>i)<sp/>&gt;=<sp/>BYTES_TO_WRITE<sp/>?</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BYTES_TO_WRITE<sp/>:<sp/>(PIPE_LEN<sp/>-<sp/>i);</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_false(k_pipe_put(ppipe,<sp/>&amp;data[i],<sp/>to_wt,</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;wt_byte,<sp/>1,<sp/>K_NO_WAIT),<sp/>NULL);</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_true(wt_byte<sp/>==<sp/>to_wt<sp/>||<sp/>wt_byte<sp/>==<sp/>1,<sp/>NULL);</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral">static<sp/>void<sp/>tpipe_put_small_size(struct<sp/>k_pipe<sp/>*ppipe,<sp/>k_timeout_t<sp/>timeout)</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>to_wt,<sp/>wt_byte<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>PIPE_LEN;<sp/>i<sp/>+=<sp/>wt_byte)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_wt<sp/>=<sp/>15;</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_false(k_pipe_put(ppipe,<sp/>&amp;data[i],<sp/>to_wt,<sp/>&amp;wt_byte,</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/>timeout)<sp/>!=<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral">static<sp/>void<sp/>tpipe_get_small_size(struct<sp/>k_pipe<sp/>*ppipe,<sp/>k_timeout_t<sp/>timeout)</highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>char<sp/>rx_data[PIPE_LEN];</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>to_rd,<sp/>rd_byte<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*get<sp/>pipe<sp/>data<sp/>from<sp/>&quot;</highlight><highlight class="normal">pipe_put</highlight><highlight class="stringliteral">&quot;*/</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>PIPE_LEN;<sp/>i<sp/>+=<sp/>rd_byte)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_rd<sp/>=<sp/>15;</highlight></codeline>
<codeline lineno="160"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_false(k_pipe_get(ppipe,<sp/>&amp;rx_data[i],<sp/>to_rd,</highlight></codeline>
<codeline lineno="161"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;rd_byte,<sp/>1,<sp/>timeout),<sp/>NULL);</highlight></codeline>
<codeline lineno="162"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="164"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="165"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="166"><highlight class="stringliteral">static<sp/>void<sp/>tpipe_get_large_size(struct<sp/>k_pipe<sp/>*ppipe,<sp/>k_timeout_t<sp/>timeout)</highlight></codeline>
<codeline lineno="167"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>char<sp/>rx_data[PIPE_LEN];</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>to_rd,<sp/>rd_byte<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*get<sp/>pipe<sp/>data<sp/>from<sp/>&quot;</highlight><highlight class="normal">pipe_put</highlight><highlight class="stringliteral">&quot;*/</highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>PIPE_LEN;<sp/>i<sp/>+=<sp/>rd_byte)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_rd<sp/>=<sp/>(PIPE_LEN<sp/>-<sp/>i)<sp/>&gt;=<sp/>128<sp/>?</highlight></codeline>
<codeline lineno="175"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>128<sp/>:<sp/>(PIPE_LEN<sp/>-<sp/>i);</highlight></codeline>
<codeline lineno="176"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_false(k_pipe_get(ppipe,<sp/>&amp;rx_data[i],<sp/>to_rd,</highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;rd_byte,<sp/>1,<sp/>timeout),<sp/>NULL);</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="180"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="181"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral">void<sp/>test_pipe_alloc(void)</highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>ret;</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_false(k_pipe_alloc_init(&amp;pipe_test_alloc,<sp/>PIPE_LEN),<sp/>NULL);</highlight></codeline>
<codeline lineno="192"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="193"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tpipe_kthread_to_kthread(&amp;pipe_test_alloc);</highlight></codeline>
<codeline lineno="194"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_pipe_cleanup(&amp;pipe_test_alloc);</highlight></codeline>
<codeline lineno="195"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="196"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_false(k_pipe_alloc_init(&amp;pipe_test_alloc,<sp/>0),<sp/>NULL);</highlight></codeline>
<codeline lineno="197"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_pipe_cleanup(&amp;pipe_test_alloc);</highlight></codeline>
<codeline lineno="198"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="199"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>k_pipe_alloc_init(&amp;pipe_test_alloc,<sp/>2048);</highlight></codeline>
<codeline lineno="200"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_true(ret<sp/>==<sp/>-ENOMEM,</highlight></codeline>
<codeline lineno="201"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">resource<sp/>pool<sp/>max<sp/><ref refid="test__threads__cancel__abort_8c_1ad9dc995b581e61d5b3a7f92a0a600526" kindref="member">block</ref><sp/>size<sp/>is<sp/>not<sp/>smaller<sp/>then<sp/>requested<sp/><ref refid="group__kernel__mbox__api_1gab659fc0dee01e6639b8b6108addbd046" kindref="member">buffer</ref></highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="202"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="203"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="204"><highlight class="stringliteral">static<sp/>void<sp/>thread_for_get_forever(void<sp/>*p1,<sp/>void<sp/>*p2,<sp/>void<sp/>*p3)</highlight></codeline>
<codeline lineno="205"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="206"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tpipe_get((struct<sp/>k_pipe<sp/>*)p1,<sp/>K_FOREVER);</highlight></codeline>
<codeline lineno="207"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="208"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="209"><highlight class="stringliteral">void<sp/>test_pipe_cleanup(void)</highlight></codeline>
<codeline lineno="210"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>ret;</highlight></codeline>
<codeline lineno="212"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="213"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_false(k_pipe_alloc_init(&amp;pipe_test_alloc,<sp/>PIPE_LEN),<sp/>NULL);</highlight></codeline>
<codeline lineno="214"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="216"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>k_pipe_cleanup(&amp;pipe_test_alloc);</highlight></codeline>
<codeline lineno="217"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_true((ret<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(pipe_test_alloc.buffer<sp/>==<sp/>NULL),</highlight></codeline>
<codeline lineno="218"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">Failed<sp/>to<sp/><ref refid="stdlib_8h_1afbedc913aa4651b3c3b4b3aecd9b4711" kindref="member">free</ref><sp/><ref refid="group__kernel__mbox__api_1gab659fc0dee01e6639b8b6108addbd046" kindref="member">buffer</ref><sp/>with<sp/><ref refid="group__pipe__apis_1gaad0ab1b97b537da408031e4bcbe04f36" kindref="member">k_pipe_cleanup</ref>().</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="219"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="221"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>k_pipe_cleanup(&amp;kpipe);</highlight></codeline>
<codeline lineno="222"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_true((ret<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(kpipe.buffer<sp/>!=<sp/>NULL),</highlight></codeline>
<codeline lineno="223"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">Static<sp/><ref refid="group__kernel__mbox__api_1gab659fc0dee01e6639b8b6108addbd046" kindref="member">buffer</ref><sp/>should<sp/>not<sp/>be<sp/>freed.</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="225"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_false(k_pipe_alloc_init(&amp;pipe_test_alloc,<sp/>PIPE_LEN),<sp/>NULL);</highlight></codeline>
<codeline lineno="226"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="227"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_tid_t<sp/>tid<sp/>=<sp/>k_thread_create(&amp;tdata,<sp/>tstack,<sp/>STACK_SIZE,</highlight></codeline>
<codeline lineno="228"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_for_get_forever,<sp/>&amp;pipe_test_alloc,<sp/>NULL,</highlight></codeline>
<codeline lineno="229"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>K_PRIO_PREEMPT(0),<sp/>0,<sp/>K_NO_WAIT);</highlight></codeline>
<codeline lineno="230"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_sleep(K_MSEC(100));</highlight></codeline>
<codeline lineno="231"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="232"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>k_pipe_cleanup(&amp;pipe_test_alloc);</highlight></codeline>
<codeline lineno="233"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_true(ret<sp/>==<sp/>-EAGAIN,<sp/>&quot;</highlight><highlight class="normal">k_pipe_cleanup()<sp/>should<sp/>not<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>with<sp/>0.</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="234"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_thread_abort(tid);</highlight></codeline>
<codeline lineno="235"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="236"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="237"><highlight class="stringliteral">static<sp/>void<sp/>thread_handler(void<sp/>*p1,<sp/>void<sp/>*p2,<sp/>void<sp/>*p3)</highlight></codeline>
<codeline lineno="238"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="239"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tpipe_put_no_wait((struct<sp/>k_pipe<sp/>*)p1);</highlight></codeline>
<codeline lineno="240"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_sem_give(&amp;end_sema);</highlight></codeline>
<codeline lineno="241"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="242"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="292"><highlight class="stringliteral">void<sp/>test_pipe_thread2thread(void)</highlight></codeline>
<codeline lineno="293"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="295"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_pipe_init(&amp;pipe,<sp/>data,<sp/>PIPE_LEN);</highlight></codeline>
<codeline lineno="296"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tpipe_thread_thread(&amp;pipe);</highlight></codeline>
<codeline lineno="297"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="299"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tpipe_thread_thread(&amp;kpipe);</highlight></codeline>
<codeline lineno="300"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="301"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="302"><highlight class="stringliteral">#ifdef<sp/>CONFIG_USERSPACE</highlight></codeline>
<codeline lineno="307"><highlight class="stringliteral">void<sp/>test_pipe_user_thread2thread(void)</highlight></codeline>
<codeline lineno="308"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="310"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>k_pipe<sp/>*p<sp/>=<sp/>k_object_alloc(K_OBJ_PIPE);</highlight></codeline>
<codeline lineno="311"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="312"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_true(p<sp/>!=<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="313"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="315"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_false(k_pipe_alloc_init(p,<sp/>PIPE_LEN),<sp/>NULL);</highlight></codeline>
<codeline lineno="316"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tpipe_thread_thread(p);</highlight></codeline>
<codeline lineno="317"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="318"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="319"><highlight class="stringliteral">#endif</highlight></codeline>
<codeline lineno="320"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="325"><highlight class="stringliteral">#ifdef<sp/>CONFIG_USERSPACE</highlight></codeline>
<codeline lineno="326"><highlight class="stringliteral">void<sp/>test_resource_pool_auto_free(void)</highlight></codeline>
<codeline lineno="327"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="328"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>Pool<sp/>has<sp/>2<sp/>blocks,<sp/>both<sp/>should<sp/>succeed<sp/>if<sp/>kernel<sp/>object<sp/>and<sp/>pipe</highlight></codeline>
<codeline lineno="329"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>buffer<sp/>are<sp/>auto-freed<sp/>when<sp/>the<sp/>allocating<sp/>threads<sp/>exit</highlight></codeline>
<codeline lineno="330"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline lineno="331"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_true(k_heap_alloc(&amp;test_pool,<sp/>64,<sp/>K_NO_WAIT)<sp/>!=<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="332"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_true(k_heap_alloc(&amp;test_pool,<sp/>64,<sp/>K_NO_WAIT)<sp/>!=<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="333"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="334"><highlight class="stringliteral">#endif</highlight></codeline>
<codeline lineno="335"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="336"><highlight class="stringliteral">static<sp/>void<sp/>tThread_half_pipe_put(void<sp/>*p1,<sp/>void<sp/>*p2,<sp/>void<sp/>*p3)</highlight></codeline>
<codeline lineno="337"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="338"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tpipe_put((struct<sp/>k_pipe<sp/>*)p1,<sp/>K_FOREVER);</highlight></codeline>
<codeline lineno="339"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="340"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="341"><highlight class="stringliteral">static<sp/>void<sp/>tThread_half_pipe_get(void<sp/>*p1,<sp/>void<sp/>*p2,<sp/>void<sp/>*p3)</highlight></codeline>
<codeline lineno="342"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="343"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tpipe_get((struct<sp/>k_pipe<sp/>*)p1,<sp/>K_FOREVER);</highlight></codeline>
<codeline lineno="344"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="345"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="350"><highlight class="stringliteral">void<sp/>test_half_pipe_put_get(void)</highlight></codeline>
<codeline lineno="351"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="352"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>char<sp/>rx_data[PIPE_LEN];</highlight></codeline>
<codeline lineno="353"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>rd_byte<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="354"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>ret;</highlight></codeline>
<codeline lineno="355"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="356"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>TESTPOINT:<sp/>min_xfer<sp/>&gt;<sp/>bytes_to_read<sp/>*/</highlight></codeline>
<codeline lineno="357"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>k_pipe_put(&amp;kpipe,<sp/>&amp;rx_data[0],<sp/>1,<sp/>&amp;rd_byte,<sp/>24,<sp/>K_NO_WAIT);</highlight></codeline>
<codeline lineno="358"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_true(ret<sp/>==<sp/>-EINVAL,<sp/>NULL);</highlight></codeline>
<codeline lineno="359"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>k_pipe_put(&amp;kpipe,<sp/>&amp;rx_data[0],<sp/>24,<sp/>NULL,<sp/>1,<sp/>K_NO_WAIT);</highlight></codeline>
<codeline lineno="360"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_true(ret<sp/>==<sp/>-EINVAL,<sp/>NULL);</highlight></codeline>
<codeline lineno="361"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="363"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_tid_t<sp/>tid1<sp/>=<sp/>k_thread_create(&amp;tdata1,<sp/>tstack1,<sp/>STACK_SIZE,</highlight></codeline>
<codeline lineno="364"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tThread_half_pipe_get,<sp/>&amp;khalfpipe,</highlight></codeline>
<codeline lineno="365"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>K_PRIO_PREEMPT(0),</highlight></codeline>
<codeline lineno="366"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_INHERIT_PERMS<sp/>|<sp/>K_USER,<sp/>K_NO_WAIT);</highlight></codeline>
<codeline lineno="367"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="368"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_tid_t<sp/>tid2<sp/>=<sp/>k_thread_create(&amp;tdata2,<sp/>tstack2,<sp/>STACK_SIZE,</highlight></codeline>
<codeline lineno="369"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tThread_half_pipe_get,<sp/>&amp;khalfpipe,</highlight></codeline>
<codeline lineno="370"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>K_PRIO_PREEMPT(0),</highlight></codeline>
<codeline lineno="371"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_INHERIT_PERMS<sp/>|<sp/>K_USER,<sp/>K_NO_WAIT);</highlight></codeline>
<codeline lineno="372"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="373"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_sleep(K_MSEC(100));</highlight></codeline>
<codeline lineno="374"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tpipe_put_small_size(&amp;khalfpipe,<sp/>K_NO_WAIT);</highlight></codeline>
<codeline lineno="375"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="376"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>clear<sp/>the<sp/>spawned<sp/>thread<sp/>avoid<sp/>side<sp/>effect<sp/>*/</highlight></codeline>
<codeline lineno="377"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_thread_abort(tid1);</highlight></codeline>
<codeline lineno="378"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_thread_abort(tid2);</highlight></codeline>
<codeline lineno="379"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="380"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="381"><highlight class="stringliteral">void<sp/>test_pipe_get_put(void)</highlight></codeline>
<codeline lineno="382"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="383"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>char<sp/>rx_data[PIPE_LEN];</highlight></codeline>
<codeline lineno="384"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>rd_byte<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="385"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>ret;</highlight></codeline>
<codeline lineno="386"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="387"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>TESTPOINT:<sp/>min_xfer<sp/>&gt;<sp/>bytes_to_read<sp/>*/</highlight></codeline>
<codeline lineno="388"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>k_pipe_get(&amp;kpipe,<sp/>&amp;rx_data[0],<sp/>1,<sp/>&amp;rd_byte,<sp/>24,<sp/>K_NO_WAIT);</highlight></codeline>
<codeline lineno="389"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_true(ret<sp/>==<sp/>-EINVAL,<sp/>NULL);</highlight></codeline>
<codeline lineno="390"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>k_pipe_get(&amp;kpipe,<sp/>&amp;rx_data[0],<sp/>24,<sp/>NULL,<sp/>1,<sp/>K_NO_WAIT);</highlight></codeline>
<codeline lineno="391"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_true(ret<sp/>==<sp/>-EINVAL,<sp/>NULL);</highlight></codeline>
<codeline lineno="392"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="394"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_tid_t<sp/>tid1<sp/>=<sp/>k_thread_create(&amp;tdata1,<sp/>tstack1,<sp/>STACK_SIZE,</highlight></codeline>
<codeline lineno="395"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tThread_half_pipe_put,<sp/>&amp;khalfpipe,</highlight></codeline>
<codeline lineno="396"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>K_PRIO_PREEMPT(0),</highlight></codeline>
<codeline lineno="397"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_INHERIT_PERMS<sp/>|<sp/>K_USER,<sp/>K_NO_WAIT);</highlight></codeline>
<codeline lineno="398"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="399"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_tid_t<sp/>tid2<sp/>=<sp/>k_thread_create(&amp;tdata2,<sp/>tstack2,<sp/>STACK_SIZE,</highlight></codeline>
<codeline lineno="400"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tThread_half_pipe_put,<sp/>&amp;khalfpipe,</highlight></codeline>
<codeline lineno="401"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>K_PRIO_PREEMPT(0),</highlight></codeline>
<codeline lineno="402"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_INHERIT_PERMS<sp/>|<sp/>K_USER,<sp/>K_NO_WAIT);</highlight></codeline>
<codeline lineno="403"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="404"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_sleep(K_MSEC(100));</highlight></codeline>
<codeline lineno="405"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tpipe_get_small_size(&amp;khalfpipe,<sp/>K_NO_WAIT);</highlight></codeline>
<codeline lineno="406"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="407"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>clear<sp/>the<sp/>spawned<sp/>thread<sp/>avoid<sp/>side<sp/>effect<sp/>*/</highlight></codeline>
<codeline lineno="408"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_thread_abort(tid1);</highlight></codeline>
<codeline lineno="409"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_thread_abort(tid2);</highlight></codeline>
<codeline lineno="410"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="411"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="412"><highlight class="stringliteral">void<sp/>test_pipe_get_large(void)</highlight></codeline>
<codeline lineno="413"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="415"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_tid_t<sp/>tid1<sp/>=<sp/>k_thread_create(&amp;tdata1,<sp/>tstack1,<sp/>STACK_SIZE,</highlight></codeline>
<codeline lineno="416"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tThread_half_pipe_put,<sp/>&amp;khalfpipe,</highlight></codeline>
<codeline lineno="417"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>K_PRIO_PREEMPT(0),</highlight></codeline>
<codeline lineno="418"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_INHERIT_PERMS<sp/>|<sp/>K_USER,<sp/>K_NO_WAIT);</highlight></codeline>
<codeline lineno="419"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="420"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_tid_t<sp/>tid2<sp/>=<sp/>k_thread_create(&amp;tdata2,<sp/>tstack2,<sp/>STACK_SIZE,</highlight></codeline>
<codeline lineno="421"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tThread_half_pipe_put,<sp/>&amp;khalfpipe,</highlight></codeline>
<codeline lineno="422"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>K_PRIO_PREEMPT(0),</highlight></codeline>
<codeline lineno="423"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_INHERIT_PERMS<sp/>|<sp/>K_USER,<sp/>K_NO_WAIT);</highlight></codeline>
<codeline lineno="424"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="425"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_sleep(K_MSEC(100));</highlight></codeline>
<codeline lineno="426"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tpipe_get_large_size(&amp;khalfpipe,<sp/>K_NO_WAIT);</highlight></codeline>
<codeline lineno="427"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="428"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>clear<sp/>the<sp/>spawned<sp/>thread<sp/>avoid<sp/>side<sp/>effect<sp/>*/</highlight></codeline>
<codeline lineno="429"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_thread_abort(tid1);</highlight></codeline>
<codeline lineno="430"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_thread_abort(tid2);</highlight></codeline>
<codeline lineno="431"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="432"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="433"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="438"><highlight class="stringliteral">void<sp/>test_pipe_reader_wait(void)</highlight></codeline>
<codeline lineno="439"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="441"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_tid_t<sp/>tid<sp/>=<sp/>k_thread_create(&amp;tdata,<sp/>tstack,<sp/>STACK_SIZE,</highlight></codeline>
<codeline lineno="442"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_handler,<sp/>&amp;kpipe1,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="443"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_PRIO_PREEMPT(0),<sp/>0,<sp/>K_NO_WAIT);</highlight></codeline>
<codeline lineno="444"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="445"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tpipe_get(&amp;kpipe1,<sp/>K_FOREVER);</highlight></codeline>
<codeline lineno="446"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_sem_take(&amp;end_sema,<sp/>K_FOREVER);</highlight></codeline>
<codeline lineno="447"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_thread_abort(tid);</highlight></codeline>
<codeline lineno="448"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="449"><highlight class="stringliteral"></highlight></codeline>
    </programlisting>
    <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c"/>
  </compounddef>
</doxygen>
