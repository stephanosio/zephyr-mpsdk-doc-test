<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__OpenThread" kind="group">
    <compoundname>OpenThread</compoundname>
    <title>l2 layer</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__OpenThread_1gad097b10683a67500744763fab9028450" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void openthread_set_state_changed_cb</definition>
        <argsstring>(otStateChangedCallback cb)</argsstring>
        <name>openthread_set_state_changed_cb</name>
        <param>
          <type>otStateChangedCallback</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Sets function which will be called when certain configuration or state changes within OpenThread. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>function to call in callback procedure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/openthread.h" line="82" column="6" declfile="include/net/openthread.h" declline="82" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__OpenThread_1ga9499c4c69a0094f0b7ef803ac05fb19a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
        <definition>k_tid_t openthread_thread_id_get</definition>
        <argsstring>(void)</argsstring>
        <name>openthread_thread_id_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get OpenThread thread identification. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/openthread.h" line="87" column="9" declfile="include/net/openthread.h" declline="87" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__OpenThread_1gad975528c91de66cd1054f3584bfcc957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct openthread_context *</type>
        <definition>struct openthread_context * openthread_get_default_context</definition>
        <argsstring>(void)</argsstring>
        <name>openthread_get_default_context</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get pointer to default OpenThread context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>!NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>On success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>On failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/openthread.h" line="95" column="25" declfile="include/net/openthread.h" declline="95" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__OpenThread_1ga517a538fa32afac8ca8968ada2cea89d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct otInstance *</type>
        <definition>struct otInstance * openthread_get_default_instance</definition>
        <argsstring>(void)</argsstring>
        <name>openthread_get_default_instance</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get pointer to default OpenThread instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>!NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>On success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>On failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/openthread.h" line="103" column="17" declfile="include/net/openthread.h" declline="103" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__OpenThread_1ga4674b60779f2fd0adaa9c96afb840265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int openthread_start</definition>
        <argsstring>(struct openthread_context *ot_context)</argsstring>
        <name>openthread_start</name>
        <param>
          <type>struct openthread_context *</type>
          <declname>ot_context</declname>
        </param>
        <briefdescription>
<para>Starts the OpenThread network. </para>
        </briefdescription>
        <detaileddescription>
<para>Depends on active settings: it uses stored network configuration, start joining procedure or uses default network configuration. Additionally when the device is MTD, it sets the SED mode to properly attach the network.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ot_context</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/openthread.h" line="114" column="5" declfile="include/net/openthread.h" declline="114" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__OpenThread_1ga1f702bb5768795bce5561efe457b1028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void openthread_api_mutex_lock</definition>
        <argsstring>(struct openthread_context *ot_context)</argsstring>
        <name>openthread_api_mutex_lock</name>
        <param>
          <type>struct openthread_context *</type>
          <declname>ot_context</declname>
        </param>
        <briefdescription>
<para>Lock internal mutex before accessing OT API. </para>
        </briefdescription>
        <detaileddescription>
<para>OpenThread API is not thread-safe, therefore before accessing any API function, it&apos;s needed to lock the internal mutex, to prevent the OpenThread thread from prempting the API call.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ot_context</parametername>
</parameternamelist>
<parameterdescription>
<para>Context to lock. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/openthread.h" line="125" column="6" declfile="include/net/openthread.h" declline="125" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__OpenThread_1ga05c5792a8d2ceaf93336f62760c74862" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int openthread_api_mutex_try_lock</definition>
        <argsstring>(struct openthread_context *ot_context)</argsstring>
        <name>openthread_api_mutex_try_lock</name>
        <param>
          <type>struct openthread_context *</type>
          <declname>ot_context</declname>
        </param>
        <briefdescription>
<para>Try to lock internal mutex before accessing OT API. </para>
        </briefdescription>
        <detaileddescription>
<para>This function behaves like <ref refid="group__OpenThread_1ga1f702bb5768795bce5561efe457b1028" kindref="member">openthread_api_mutex_lock()</ref> provided that the internal mutex is unlocked. Otherwise, it exists immediately and returns a negative value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ot_context</parametername>
</parameternamelist>
<parameterdescription>
<para>Context to lock. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>On success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>On failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/openthread.h" line="138" column="5" declfile="include/net/openthread.h" declline="138" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__OpenThread_1ga0c3cb86690f2b1b714ad655b7df23bf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void openthread_api_mutex_unlock</definition>
        <argsstring>(struct openthread_context *ot_context)</argsstring>
        <name>openthread_api_mutex_unlock</name>
        <param>
          <type>struct openthread_context *</type>
          <declname>ot_context</declname>
        </param>
        <briefdescription>
<para>Unlock internal mutex after accessing OT API. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ot_context</parametername>
</parameternamelist>
<parameterdescription>
<para>Context to unlock. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/openthread.h" line="145" column="6" declfile="include/net/openthread.h" declline="145" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__OpenThread_1ga586e2bad8582a747d79ed517eb820c7a" prot="public" static="no">
        <name>OPENTHREAD_L2_CTX_TYPE</name>
        <initializer>struct openthread_context</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/openthread.h" line="147" column="9" bodyfile="include/net/openthread.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>OpenThread l2 stack api. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
