<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structbt__iso__chan__ops" kind="struct" language="C++" prot="public">
    <compoundname>bt_iso_chan_ops</compoundname>
    <includes refid="iso_8h" local="no">iso.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structbt__iso__chan__ops_1a6b0e51770158da7b728e1084a8e44504" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_iso_chan_ops::connected) (struct bt_iso_chan *chan)</definition>
        <argsstring>)(struct bt_iso_chan *chan)</argsstring>
        <name>connected</name>
        <briefdescription>
<para>Channel connected callback. </para>
        </briefdescription>
        <detaileddescription>
<para>If this callback is provided it will be called whenever the connection completes.</para>
<para>For a peripheral, the QoS values (see <ref refid="structbt__iso__chan__io__qos" kindref="compound">bt_iso_chan_io_qos</ref>) are set when this is called. The peripheral does not have any information about the RTN though.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel that has been connected </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/iso.h" line="418" column="1" bodyfile="include/bluetooth/iso.h" bodystart="418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__iso__chan__ops_1a2069849352019362e5dc7d68f835f359" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_iso_chan_ops::disconnected) (struct bt_iso_chan *chan, uint8_t reason)</definition>
        <argsstring>)(struct bt_iso_chan *chan, uint8_t reason)</argsstring>
        <name>disconnected</name>
        <briefdescription>
<para>Channel disconnected callback. </para>
        </briefdescription>
        <detaileddescription>
<para>If this callback is provided it will be called whenever the channel is disconnected, including when a connection gets rejected.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel that has been Disconnected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>BT_HCI_ERR_* reason for the disconnection. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/iso.h" line="429" column="1" bodyfile="include/bluetooth/iso.h" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__iso__chan__ops_1a7bf9fe04f42bacd59f623aa28a3b0665" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *(*</type>
        <definition>struct net_buf *(* bt_iso_chan_ops::alloc_buf) (struct bt_iso_chan *chan)</definition>
        <argsstring>)(struct bt_iso_chan *chan)</argsstring>
        <name>alloc_buf</name>
        <briefdescription>
<para>Channel alloc_buf callback. </para>
        </briefdescription>
        <detaileddescription>
<para>If this callback is provided the channel will use it to allocate buffers to store incoming data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel requesting a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Allocated buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/iso.h" line="429" column="1" bodyfile="include/bluetooth/iso.h" bodystart="440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__iso__chan__ops_1a6d5d9423fff83f8f337f97b3fc018f39" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_iso_chan_ops::recv) (struct bt_iso_chan *chan, const struct bt_iso_recv_info *info, struct net_buf *buf)</definition>
        <argsstring>)(struct bt_iso_chan *chan, const struct bt_iso_recv_info *info, struct net_buf *buf)</argsstring>
        <name>recv</name>
        <briefdescription>
<para>Channel recv callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel receiving data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing incoming data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the metadata for the buffer. The lifetime of the pointer is linked to the lifetime of the <ref refid="structnet__buf" kindref="compound">net_buf</ref>. Metadata such as sequence number and timestamp can be provided by the bluetooth controller. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/iso.h" line="451" column="1" bodyfile="include/bluetooth/iso.h" bodystart="451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__iso__chan__ops_1a048954070628229b8aacd373de1fb236" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_iso_chan_ops::sent) (struct bt_iso_chan *chan)</definition>
        <argsstring>)(struct bt_iso_chan *chan)</argsstring>
        <name>sent</name>
        <briefdescription>
<para>Channel sent callback. </para>
        </briefdescription>
        <detaileddescription>
<para>If this callback is provided it will be called whenever a SDU has been completely sent.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel which has sent data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/iso.h" line="461" column="1" bodyfile="include/bluetooth/iso.h" bodystart="461" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>ISO Channel operations structure. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="3">
        <label>_snode</label>
      </node>
      <node id="1">
        <label>bt_iso_chan_ops</label>
        <link refid="structbt__iso__chan__ops"/>
        <childnode refid="2" relation="usage">
          <edgelabel>alloc_buf</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>net_buf</label>
        <link refid="structnet__buf"/>
        <childnode refid="3" relation="usage">
          <edgelabel>node</edgelabel>
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>frags</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>b</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>net_buf_simple</label>
        <link refid="structnet__buf__simple"/>
      </node>
    </collaborationgraph>
    <location file="include/bluetooth/iso.h" line="406" column="1" bodyfile="include/bluetooth/iso.h" bodystart="406" bodyend="462"/>
    <listofallmembers>
      <member refid="structbt__iso__chan__ops_1a7bf9fe04f42bacd59f623aa28a3b0665" prot="public" virt="non-virtual"><scope>bt_iso_chan_ops</scope><name>alloc_buf</name></member>
      <member refid="structbt__iso__chan__ops_1a6b0e51770158da7b728e1084a8e44504" prot="public" virt="non-virtual"><scope>bt_iso_chan_ops</scope><name>connected</name></member>
      <member refid="structbt__iso__chan__ops_1a2069849352019362e5dc7d68f835f359" prot="public" virt="non-virtual"><scope>bt_iso_chan_ops</scope><name>disconnected</name></member>
      <member refid="structbt__iso__chan__ops_1a6d5d9423fff83f8f337f97b3fc018f39" prot="public" virt="non-virtual"><scope>bt_iso_chan_ops</scope><name>recv</name></member>
      <member refid="structbt__iso__chan__ops_1a048954070628229b8aacd373de1fb236" prot="public" virt="non-virtual"><scope>bt_iso_chan_ops</scope><name>sent</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
