<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__iterable__section__apis" kind="group">
    <compoundname>iterable_section_apis</compoundname>
    <title>Iterable Sections APIs</title>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__iterable__section__apis_1gaa83030f309052399a7d1f61c56a0c901" prot="public" static="no">
        <name>ITERABLE_SECTION_ROM</name>
        <param><defname>struct_type</defname></param>
        <param><defname>subalign</defname></param>
        <initializer>	<ref refid="linker-tool-mwdt_8h_1a784c696b95848c5f070e257a50fbe23a" kindref="member">SECTION_PROLOGUE</ref>(struct_type##_area,,<ref refid="linker-tool-mwdt_8h_1aeec277ba79a2ce60397be71ac2efbe33" kindref="member">SUBALIGN</ref>(subalign)) \
	{ \
		Z_LINK_ITERABLE(struct_type); \
	} <ref refid="linker-tool-mwdt_8h_1a0cf8819559a7d33944b47130f478e116" kindref="member">GROUP_ROM_LINK_IN</ref>(RAMABLE_REGION, ROMABLE_REGION)</initializer>
        <briefdescription>
<para>Define a read-only iterable section output. </para>
        </briefdescription>
        <detaileddescription>
<para>Define an output section which will set up an iterable area of equally-sized data structures. For use with <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE()</ref>. Input sections will be sorted by name, per ld&apos;s SORT_BY_NAME.</para>
<para>This macro should be used for read-only data.</para>
<para>Note that this keeps the symbols in the image even though they are not being directly referenced. Use this when symbols are indirectly referenced by iterating through the section. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linker/linker-defs.h" line="75" column="9" bodyfile="include/linker/linker-defs.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__iterable__section__apis_1gaeecef08064fc4329ba5049f198cbb757" prot="public" static="no">
        <name>ITERABLE_SECTION_ROM_GC_ALLOWED</name>
        <param><defname>struct_type</defname></param>
        <param><defname>subalign</defname></param>
        <initializer>	<ref refid="linker-tool-mwdt_8h_1a784c696b95848c5f070e257a50fbe23a" kindref="member">SECTION_PROLOGUE</ref>(struct_type##_area,,<ref refid="linker-tool-mwdt_8h_1aeec277ba79a2ce60397be71ac2efbe33" kindref="member">SUBALIGN</ref>(subalign)) \
	{ \
		Z_LINK_ITERABLE_GC_ALLOWED(struct_type); \
	} <ref refid="linker-tool-mwdt_8h_1a9250789b7dcbb7afd371010fb3a6031d" kindref="member">GROUP_LINK_IN</ref>(ROMABLE_REGION)</initializer>
        <briefdescription>
<para>Define a garbage collectable read-only iterable section output. </para>
        </briefdescription>
        <detaileddescription>
<para>Define an output section which will set up an iterable area of equally-sized data structures. For use with <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE()</ref>. Input sections will be sorted by name, per ld&apos;s SORT_BY_NAME.</para>
<para>This macro should be used for read-only data.</para>
<para>Note that the symbols within the section can be garbage collected. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linker/linker-defs.h" line="96" column="9" bodyfile="include/linker/linker-defs.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__iterable__section__apis_1ga50d995ef13e80eb36cfc8556e39056d0" prot="public" static="no">
        <name>ITERABLE_SECTION_RAM</name>
        <param><defname>struct_type</defname></param>
        <param><defname>subalign</defname></param>
        <initializer>	<ref refid="linker-tool-mwdt_8h_1a0d8981d3817b2563846735c90d50240c" kindref="member">SECTION_DATA_PROLOGUE</ref>(struct_type##_area,,<ref refid="linker-tool-mwdt_8h_1aeec277ba79a2ce60397be71ac2efbe33" kindref="member">SUBALIGN</ref>(subalign)) \
	{ \
		Z_LINK_ITERABLE(struct_type); \
	} <ref refid="linker-tool-mwdt_8h_1a639d450cbafa51e8937d90df449b797f" kindref="member">GROUP_DATA_LINK_IN</ref>(RAMABLE_REGION, ROMABLE_REGION)</initializer>
        <briefdescription>
<para>Define a read-write iterable section output. </para>
        </briefdescription>
        <detaileddescription>
<para>Define an output section which will set up an iterable area of equally-sized data structures. For use with <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE()</ref>. Input sections will be sorted by name, per ld&apos;s SORT_BY_NAME.</para>
<para>This macro should be used for read-write data that is modified at runtime.</para>
<para>Note that this keeps the symbols in the image even though they are not being directly referenced. Use this when symbols are indirectly referenced by iterating through the section. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linker/linker-defs.h" line="119" column="9" bodyfile="include/linker/linker-defs.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__iterable__section__apis_1gae9ffbe8beed14a543d170e96c39851e5" prot="public" static="no">
        <name>ITERABLE_SECTION_RAM_GC_ALLOWED</name>
        <param><defname>struct_type</defname></param>
        <param><defname>subalign</defname></param>
        <initializer>	<ref refid="linker-tool-mwdt_8h_1a0d8981d3817b2563846735c90d50240c" kindref="member">SECTION_DATA_PROLOGUE</ref>(struct_type##_area,,<ref refid="linker-tool-mwdt_8h_1aeec277ba79a2ce60397be71ac2efbe33" kindref="member">SUBALIGN</ref>(subalign)) \
	{ \
		Z_LINK_ITERABLE_GC_ALLOWED(struct_type); \
	} <ref refid="linker-tool-mwdt_8h_1a639d450cbafa51e8937d90df449b797f" kindref="member">GROUP_DATA_LINK_IN</ref>(RAMABLE_REGION, ROMABLE_REGION)</initializer>
        <briefdescription>
<para>Define a garbage collectable read-write iterable section output. </para>
        </briefdescription>
        <detaileddescription>
<para>Define an output section which will set up an iterable area of equally-sized data structures. For use with <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE()</ref>. Input sections will be sorted by name, per ld&apos;s SORT_BY_NAME.</para>
<para>This macro should be used for read-write data that is modified at runtime.</para>
<para>Note that the symbols within the section can be garbage collected. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linker/linker-defs.h" line="140" column="9" bodyfile="include/linker/linker-defs.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" prot="public" static="no">
        <name>STRUCT_SECTION_ITERABLE</name>
        <param><defname>struct_type</defname></param>
        <param><defname>name</defname></param>
        <initializer>	Z_DECL_ALIGN(struct struct_type) name \
	__in_section(_##struct_type, static, name) __used</initializer>
        <briefdescription>
<para>Defines a new iterable section. </para>
        </briefdescription>
        <detaileddescription>
<para>Convenience helper combining __in_section() and Z_DECL_ALIGN(). The section name is the struct type prepended with an underscore. The subsection is &quot;static&quot; and the subsubsection is the variable name.</para>
<para>In the linker script, create output sections for these using <ref refid="group__iterable__section__apis_1gaa83030f309052399a7d1f61c56a0c901" kindref="member">ITERABLE_SECTION_ROM()</ref> or <ref refid="group__iterable__section__apis_1ga50d995ef13e80eb36cfc8556e39056d0" kindref="member">ITERABLE_SECTION_RAM()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/toolchain/common.h" line="210" column="9" bodyfile="include/toolchain/common.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__iterable__section__apis_1ga66939b955ea98a204119a6d6c5661cca" prot="public" static="no">
        <name>STRUCT_SECTION_ITERABLE_ALTERNATE</name>
        <param><defname>out_type</defname></param>
        <param><defname>struct_type</defname></param>
        <param><defname>name</defname></param>
        <initializer>	Z_DECL_ALIGN(struct struct_type) name \
	__in_section(_##out_type, static, name) __used</initializer>
        <briefdescription>
<para>Defines an alternate data type iterable section. </para>
        </briefdescription>
        <detaileddescription>
<para>Special variant of <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE()</ref>, for placing alternate data types within the iterable section of a specific data type. The data type sizes and semantics must be equivalent! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/toolchain/common.h" line="226" column="9" bodyfile="include/toolchain/common.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__iterable__section__apis_1gad723296f2650c25dd278e8586bfaf0ab" prot="public" static="no">
        <name>STRUCT_SECTION_FOREACH</name>
        <param><defname>struct_type</defname></param>
        <param><defname>iterator</defname></param>
        <initializer>	extern struct struct_type _CONCAT(_##struct_type, _list_start)[]; \
	extern struct struct_type _CONCAT(_##struct_type, _list_end)[]; \
	for (struct struct_type *iterator = \
			_CONCAT(_##struct_type, _list_start); \
	     ({ __ASSERT(iterator &lt;= _CONCAT(_##struct_type, _list_end), \
			 &quot;unexpected list end location&quot;); \
		iterator &lt; _CONCAT(_##struct_type, _list_end); }); \
	     iterator++)</initializer>
        <briefdescription>
<para>Iterate over a specified iterable section. </para>
        </briefdescription>
        <detaileddescription>
<para>Iterator for structure instances gathered by <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE()</ref>. The linker must provide a _&lt;struct_type&gt;_list_start symbol and a _&lt;struct_type&gt;_list_end symbol to mark the start and the end of the list of struct objects to iterate over. This is normally done using <ref refid="group__iterable__section__apis_1gaa83030f309052399a7d1f61c56a0c901" kindref="member">ITERABLE_SECTION_ROM()</ref> or <ref refid="group__iterable__section__apis_1ga50d995ef13e80eb36cfc8556e39056d0" kindref="member">ITERABLE_SECTION_RAM()</ref> in the linker script. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/toolchain/common.h" line="244" column="9" bodyfile="include/toolchain/common.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Iterable Sections APIs. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
