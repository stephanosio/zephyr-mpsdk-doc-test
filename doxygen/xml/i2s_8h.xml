<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="i2s_8h" kind="file" language="C++">
    <compoundname>i2s.h</compoundname>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes local="no">device.h</includes>
    <includes local="no">syscalls/i2s.h</includes>
    <includedby refid="codec_8h" local="no">include/audio/codec.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/drivers/i2s.h</label>
        <link refid="i2s_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="5">
        <label>device.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="6">
        <label>syscalls/i2s.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/audio/codec.h</label>
        <link refid="codec_8h"/>
      </node>
      <node id="1">
        <label>include/drivers/i2s.h</label>
        <link refid="i2s_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structi2s__config" prot="public">i2s_config</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__i2s__interface_1gaa3f67c47874141782fbb7ec5a671b566" prot="public" static="no">
        <name>I2S_FMT_DATA_FORMAT_SHIFT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Data Format bit field position. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="41" column="9" bodyfile="include/drivers/i2s.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1gaf3eb0116133dd3a041d9a80cb3397263" prot="public" static="no">
        <name>I2S_FMT_DATA_FORMAT_MASK</name>
        <initializer>(0x7 &lt;&lt; <ref refid="group__i2s__interface_1gaa3f67c47874141782fbb7ec5a671b566" kindref="member">I2S_FMT_DATA_FORMAT_SHIFT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Data Format bit field mask. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="43" column="9" bodyfile="include/drivers/i2s.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1gaa1adc5e3b722e89f20f258b0fd53a2c5" prot="public" static="no">
        <name>I2S_FMT_DATA_FORMAT_I2S</name>
        <initializer>(0 &lt;&lt; <ref refid="group__i2s__interface_1gaa3f67c47874141782fbb7ec5a671b566" kindref="member">I2S_FMT_DATA_FORMAT_SHIFT</ref>)</initializer>
        <briefdescription>
<para>Standard I2S Data Format. </para>
        </briefdescription>
        <detaileddescription>
<para>Serial data is transmitted in two&apos;s complement with the MSB first. Both Word Select (WS) and Serial Data (SD) signals are sampled on the rising edge of the clock signal (SCK). The MSB is always sent one clock period after the WS changes. Left channel data are sent first indicated by WS = 0, followed by right channel data indicated by WS = 1. <verbatim>   -. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-.
SCK &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;
   -.                               .-------------------------------.
WS  &apos;-------------------------------&apos;                               &apos;----
   -.---.---.---.---.---.---.---.---.---.---.---.---.---.---.---.---.---.
SD  |   |MSB|   |...|   |LSB| x |...| x |MSB|   |...|   |LSB| x |...| x |
   -&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;
        | Left channel                  | Right channel                 |
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="62" column="9" bodyfile="include/drivers/i2s.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1ga70c7a19078a6f72e078b9c0488018b11" prot="public" static="no">
        <name>I2S_FMT_DATA_FORMAT_PCM_SHORT</name>
        <initializer>(1 &lt;&lt; <ref refid="group__i2s__interface_1gaa3f67c47874141782fbb7ec5a671b566" kindref="member">I2S_FMT_DATA_FORMAT_SHIFT</ref>)</initializer>
        <briefdescription>
<para>PCM Short Frame Sync Data Format. </para>
        </briefdescription>
        <detaileddescription>
<para>Serial data is transmitted in two&apos;s complement with the MSB first. Both Word Select (WS) and Serial Data (SD) signals are sampled on the falling edge of the clock signal (SCK). The falling edge of the frame sync signal (WS) indicates the start of the PCM word. The frame sync is one clock cycle long. An arbitrary number of data words can be sent in one frame. <verbatim>     .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-.
SCK -&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-
     .---.                                                       .---.
WS  -&apos;   &apos;-                                                     -&apos;   &apos;-
    -.---.---.---.---.---.---.---.---.---.---.---.---.---.---.---.---.---
SD   |   |MSB|   |...|   |LSB|MSB|   |...|   |LSB|MSB|   |...|   |LSB|
    -&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---
         | Word 1            | Word 2            | Word 3  |  Word n |
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="81" column="9" bodyfile="include/drivers/i2s.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1ga7032b1894faded14a174593a3f10ca3c" prot="public" static="no">
        <name>I2S_FMT_DATA_FORMAT_PCM_LONG</name>
        <initializer>(2 &lt;&lt; <ref refid="group__i2s__interface_1gaa3f67c47874141782fbb7ec5a671b566" kindref="member">I2S_FMT_DATA_FORMAT_SHIFT</ref>)</initializer>
        <briefdescription>
<para>PCM Long Frame Sync Data Format. </para>
        </briefdescription>
        <detaileddescription>
<para>Serial data is transmitted in two&apos;s complement with the MSB first. Both Word Select (WS) and Serial Data (SD) signals are sampled on the falling edge of the clock signal (SCK). The rising edge of the frame sync signal (WS) indicates the start of the PCM word. The frame sync has an arbitrary length, however it has to fall before the start of the next frame. An arbitrary number of data words can be sent in one frame. <verbatim>     .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-.
SCK -&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-
         .--- ---.    ---.        ---.                               .---
WS      -&apos;       &apos;-      &apos;-          &apos;-                             -&apos;
    -.---.---.---.---.---.---.---.---.---.---.---.---.---.---.---.---.---
SD   |   |MSB|   |...|   |LSB|MSB|   |...|   |LSB|MSB|   |...|   |LSB|
    -&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---
         | Word 1            | Word 2            | Word 3  |  Word n |
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="101" column="9" bodyfile="include/drivers/i2s.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1gaabc5e62ed922b8c5834ed40c6af78022" prot="public" static="no">
        <name>I2S_FMT_DATA_FORMAT_LEFT_JUSTIFIED</name>
        <initializer>(3 &lt;&lt; <ref refid="group__i2s__interface_1gaa3f67c47874141782fbb7ec5a671b566" kindref="member">I2S_FMT_DATA_FORMAT_SHIFT</ref>)</initializer>
        <briefdescription>
<para>Left Justified Data Format. </para>
        </briefdescription>
        <detaileddescription>
<para>Serial data is transmitted in two&apos;s complement with the MSB first. Both Word Select (WS) and Serial Data (SD) signals are sampled on the rising edge of the clock signal (SCK). The bits within the data word are left justified such that the MSB is always sent in the clock period following the WS transition. Left channel data are sent first indicated by WS = 1, followed by right channel data indicated by WS = 0. <verbatim>     .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-.
SCK -&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-
       .-------------------------------.                               .-
WS  ---&apos;                               &apos;-------------------------------&apos;
    ---.---.---.---.---.---.---.---.---.---.---.---.---.---.---.---.---.-
SD     |MSB|   |...|   |LSB| x |...| x |MSB|   |...|   |LSB| x |...| x |
    ---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;-
       | Left channel                  | Right channel                 |
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="122" column="9" bodyfile="include/drivers/i2s.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1ga8ad25375c2f7344b2959bed2eec4be72" prot="public" static="no">
        <name>I2S_FMT_DATA_FORMAT_RIGHT_JUSTIFIED</name>
        <initializer>(4 &lt;&lt; <ref refid="group__i2s__interface_1gaa3f67c47874141782fbb7ec5a671b566" kindref="member">I2S_FMT_DATA_FORMAT_SHIFT</ref>)</initializer>
        <briefdescription>
<para>Right Justified Data Format. </para>
        </briefdescription>
        <detaileddescription>
<para>Serial data is transmitted in two&apos;s complement with the MSB first. Both Word Select (WS) and Serial Data (SD) signals are sampled on the rising edge of the clock signal (SCK). The bits within the data word are right justified such that the LSB is always sent in the clock period preceding the WS transition. Left channel data are sent first indicated by WS = 1, followed by right channel data indicated by WS = 0. <verbatim>     .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-. .-.
SCK -&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-&apos; &apos;-
       .-------------------------------.                               .-
WS  ---&apos;                               &apos;-------------------------------&apos;
    ---.---.---.---.---.---.---.---.---.---.---.---.---.---.---.---.---.-
SD     | x |...| x |MSB|   |...|   |LSB| x |...| x |MSB|   |...|   |LSB|
    ---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;---&apos;-
       | Left channel                  | Right channel                 |
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="143" column="9" bodyfile="include/drivers/i2s.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1ga6a6c18e170333a56086f5bcf96e552a1" prot="public" static="no">
        <name>I2S_FMT_DATA_ORDER_MSB</name>
        <initializer>(0 &lt;&lt; 3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send MSB first </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="146" column="9" bodyfile="include/drivers/i2s.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1gacc2d0662903b2300b0e1009a8223ed7d" prot="public" static="no">
        <name>I2S_FMT_DATA_ORDER_LSB</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send LSB first </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="148" column="9" bodyfile="include/drivers/i2s.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1ga052fa04f51ab96d90cdaf0d35f19a166" prot="public" static="no">
        <name>I2S_FMT_DATA_ORDER_INV</name>
        <initializer><ref refid="group__i2s__interface_1gacc2d0662903b2300b0e1009a8223ed7d" kindref="member">I2S_FMT_DATA_ORDER_LSB</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invert bit ordering, send LSB first </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="150" column="9" bodyfile="include/drivers/i2s.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1ga713fe1eb042953a315d1cb606a28d5ca" prot="public" static="no">
        <name>I2S_FMT_CLK_FORMAT_SHIFT</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Data Format bit field position. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="153" column="9" bodyfile="include/drivers/i2s.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1ga16e4b44cf7f4b2d11bbd2d50522d086d" prot="public" static="no">
        <name>I2S_FMT_CLK_FORMAT_MASK</name>
        <initializer>(0x3 &lt;&lt; <ref refid="group__i2s__interface_1ga713fe1eb042953a315d1cb606a28d5ca" kindref="member">I2S_FMT_CLK_FORMAT_SHIFT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Data Format bit field mask. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="155" column="9" bodyfile="include/drivers/i2s.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1ga1bbc3f0600b406691ce016bf7bf96a5f" prot="public" static="no">
        <name>I2S_FMT_BIT_CLK_INV</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invert bit clock </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="158" column="9" bodyfile="include/drivers/i2s.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1ga1cd356cbe68f622d0b3f5aee027d1f57" prot="public" static="no">
        <name>I2S_FMT_FRAME_CLK_INV</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invert frame clock </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="160" column="9" bodyfile="include/drivers/i2s.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1gad555437f250801cbc8970cd02d7b7cde" prot="public" static="no">
        <name>I2S_FMT_CLK_NF_NB</name>
        <initializer>(0 &lt;&lt; <ref refid="group__i2s__interface_1ga713fe1eb042953a315d1cb606a28d5ca" kindref="member">I2S_FMT_CLK_FORMAT_SHIFT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>NF represents &quot;Normal Frame&quot; whereas IF represents &quot;Inverted Frame&quot; NB represents &quot;Normal Bit Clk&quot; whereas IB represents &quot;Inverted Bit clk&quot; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="165" column="9" bodyfile="include/drivers/i2s.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1ga85714d803548509c6b41c2579b7f2a7f" prot="public" static="no">
        <name>I2S_FMT_CLK_NF_IB</name>
        <initializer>(1 &lt;&lt; <ref refid="group__i2s__interface_1ga713fe1eb042953a315d1cb606a28d5ca" kindref="member">I2S_FMT_CLK_FORMAT_SHIFT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="166" column="9" bodyfile="include/drivers/i2s.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1ga5686ac4f8e3327d36f3f1293168330cd" prot="public" static="no">
        <name>I2S_FMT_CLK_IF_NB</name>
        <initializer>(2 &lt;&lt; <ref refid="group__i2s__interface_1ga713fe1eb042953a315d1cb606a28d5ca" kindref="member">I2S_FMT_CLK_FORMAT_SHIFT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="167" column="9" bodyfile="include/drivers/i2s.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1gaaaf186e3265d2fea6c8dc43a8030272c" prot="public" static="no">
        <name>I2S_FMT_CLK_IF_IB</name>
        <initializer>(3 &lt;&lt; <ref refid="group__i2s__interface_1ga713fe1eb042953a315d1cb606a28d5ca" kindref="member">I2S_FMT_CLK_FORMAT_SHIFT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="168" column="9" bodyfile="include/drivers/i2s.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1ga039e7e244f7f1452dcd197c0a689d6e6" prot="public" static="no">
        <name>I2S_OPT_BIT_CLK_CONT</name>
        <initializer>(0 &lt;&lt; 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run bit clock continuously </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="173" column="9" bodyfile="include/drivers/i2s.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1ga4a68f73ee794684f68a02066ce1d632c" prot="public" static="no">
        <name>I2S_OPT_BIT_CLK_GATED</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run bit clock when sending data only </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="175" column="9" bodyfile="include/drivers/i2s.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1ga54aaaa7f0403e4f03574ffcc6141a67f" prot="public" static="no">
        <name>I2S_OPT_BIT_CLK_MASTER</name>
        <initializer>(0 &lt;&lt; 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I2S driver is bit clock master </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="177" column="9" bodyfile="include/drivers/i2s.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1gaa76784ed4a645cb751b2c683bfa4be40" prot="public" static="no">
        <name>I2S_OPT_BIT_CLK_SLAVE</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I2S driver is bit clock slave </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="179" column="9" bodyfile="include/drivers/i2s.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1gaedfc35128aae5058a17ef5601bdc73d2" prot="public" static="no">
        <name>I2S_OPT_FRAME_CLK_MASTER</name>
        <initializer>(0 &lt;&lt; 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I2S driver is frame clock master </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="181" column="9" bodyfile="include/drivers/i2s.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1ga138640dfb430fe0565840078a7b23ace" prot="public" static="no">
        <name>I2S_OPT_FRAME_CLK_SLAVE</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I2S driver is frame clock slave </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="183" column="9" bodyfile="include/drivers/i2s.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1ga093ed00a6081da8b4d958f80744fa09f" prot="public" static="no">
        <name>I2S_OPT_LOOPBACK</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(7)</initializer>
        <briefdescription>
<para>Loop back mode. </para>
        </briefdescription>
        <detaileddescription>
<para>In loop back mode RX input will be connected internally to TX output. This is used primarily for testing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="190" column="9" bodyfile="include/drivers/i2s.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2s__interface_1gadcb20e201a0fef1fe10f4cf916ff4b72" prot="public" static="no">
        <name>I2S_OPT_PINGPONG</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(6)</initializer>
        <briefdescription>
<para>Ping pong mode. </para>
        </briefdescription>
        <detaileddescription>
<para>In ping pong mode TX output will keep alternating between a ping buffer and a pong buffer. This is normally used in audio streams when one buffer is being populated while the other is being played (DMAed) and vice versa. So, in this mode, 2 sets of buffers fixed in size are used. Static Arrays are used to achieve this and hence they are never freed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="200" column="9" bodyfile="include/drivers/i2s.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__i2s__interface_1ga975a0f0901cadc789075078aa79f723f" prot="public" static="no" strong="no">
        <type></type>
        <name>i2s_dir</name>
        <enumvalue id="group__i2s__interface_1gga975a0f0901cadc789075078aa79f723fac9f71d312c5d5ad7ef64af4217091aca" prot="public">
          <name>I2S_DIR_RX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Receive data </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__i2s__interface_1gga975a0f0901cadc789075078aa79f723fab005c2cfee6206c2b5b596638e6c8443" prot="public">
          <name>I2S_DIR_TX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Transmit data </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__i2s__interface_1gga975a0f0901cadc789075078aa79f723fa3cca349476d0dbe214111b9ef5d8b272" prot="public">
          <name>I2S_DIR_BOTH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Both receive and transmit data </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>I2C Direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="205" column="1" bodyfile="include/drivers/i2s.h" bodystart="205" bodyend="212"/>
      </memberdef>
      <memberdef kind="enum" id="group__i2s__interface_1ga975d09fe35ddf7942968155b62abc531" prot="public" static="no" strong="no">
        <type></type>
        <name>i2s_state</name>
        <enumvalue id="group__i2s__interface_1gga975d09fe35ddf7942968155b62abc531a7151755b31bbb614e7b668141a7ef43a" prot="public">
          <name>I2S_STATE_NOT_READY</name>
          <briefdescription>
<para>The interface is not ready. </para>
          </briefdescription>
          <detaileddescription>
<para><verbatim>   The interface was initialized but is not yet ready to receive /
   transmit data. Call i2s_configure() to configure interface and change
   its state to READY.
</verbatim> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__i2s__interface_1gga975d09fe35ddf7942968155b62abc531af6babeef999bfb034ea55366e9c59b13" prot="public">
          <name>I2S_STATE_READY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The interface is ready to receive / transmit data. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__i2s__interface_1gga975d09fe35ddf7942968155b62abc531aa3d21ba793efa7d8f557774e8b330a42" prot="public">
          <name>I2S_STATE_RUNNING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The interface is receiving / transmitting data. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__i2s__interface_1gga975d09fe35ddf7942968155b62abc531a972fd7e9da207b36e07731b996620a33" prot="public">
          <name>I2S_STATE_STOPPING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The interface is draining its transmit queue. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__i2s__interface_1gga975d09fe35ddf7942968155b62abc531a68c0a46589ae00045900a8f79675641a" prot="public">
          <name>I2S_STATE_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>TX buffer underrun or RX buffer overrun has occurred. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interface state </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="215" column="1" bodyfile="include/drivers/i2s.h" bodystart="215" bodyend="231"/>
      </memberdef>
      <memberdef kind="enum" id="group__i2s__interface_1gac994676a89f1ea676475712a84003de6" prot="public" static="no" strong="no">
        <type></type>
        <name>i2s_trigger_cmd</name>
        <enumvalue id="group__i2s__interface_1ggac994676a89f1ea676475712a84003de6a6f4cacef6ee84256e6223a4bab3bc3ac" prot="public">
          <name>I2S_TRIGGER_START</name>
          <briefdescription>
<para>Start the transmission / reception of data. </para>
          </briefdescription>
          <detaileddescription>
<para><verbatim>   If I2S_DIR_TX is set some data has to be queued for transmission by
   the i2s_write() function. This trigger can be used in READY state
   only and changes the interface state to RUNNING.
</verbatim> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__i2s__interface_1ggac994676a89f1ea676475712a84003de6a37caf001d6ee6a263f3487f27952688b" prot="public">
          <name>I2S_TRIGGER_STOP</name>
          <briefdescription>
<para>Stop the transmission / reception of data. </para>
          </briefdescription>
          <detaileddescription>
<para><verbatim>   Stop the transmission / reception of data at the end of the current
   memory block. This trigger can be used in RUNNING state only and at
   first changes the interface state to STOPPING. When the current TX /
   RX block is transmitted / received the state is changed to READY.
   Subsequent START trigger will resume transmission / reception where
   it stopped.
</verbatim> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__i2s__interface_1ggac994676a89f1ea676475712a84003de6a7bdbdf37c5a6481faa1866be323bb9de" prot="public">
          <name>I2S_TRIGGER_DRAIN</name>
          <briefdescription>
<para>Empty the transmit queue. </para>
          </briefdescription>
          <detaileddescription>
<para><verbatim>   Send all data in the transmit queue and stop the transmission.
   If the trigger is applied to the RX queue it has the same effect as
   I2S_TRIGGER_STOP. This trigger can be used in RUNNING state only and
   at first changes the interface state to STOPPING. When all TX blocks
   are transmitted the state is changed to READY.
</verbatim> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__i2s__interface_1ggac994676a89f1ea676475712a84003de6ae8155a4d72875bd885dc987765d7628d" prot="public">
          <name>I2S_TRIGGER_DROP</name>
          <briefdescription>
<para>Discard the transmit / receive queue. </para>
          </briefdescription>
          <detaileddescription>
<para><verbatim>   Stop the transmission / reception immediately and discard the
   contents of the respective queue. This trigger can be used in any
   state other than NOT_READY and changes the interface state to READY.
</verbatim> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__i2s__interface_1ggac994676a89f1ea676475712a84003de6a61943bd287840e33bffd74bbc4a59e88" prot="public">
          <name>I2S_TRIGGER_PREPARE</name>
          <briefdescription>
<para>Prepare the queues after underrun/overrun error has occurred. </para>
          </briefdescription>
          <detaileddescription>
<para><verbatim>   This trigger can be used in ERROR state only and changes the
   interface state to READY.
</verbatim> </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigger command </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="234" column="1" bodyfile="include/drivers/i2s.h" bodystart="234" bodyend="274"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__i2s__interface_1ga0939a3ba04a233d9d637fba8a42b0bbb" prot="public" static="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>typedef uint8_t i2s_fmt_t</definition>
        <argsstring></argsstring>
        <name>i2s_fmt_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="38" column="17" bodyfile="include/drivers/i2s.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__i2s__interface_1gad0ca475f9bf5edeecc7de65b4f56c119" prot="public" static="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>typedef uint8_t i2s_opt_t</definition>
        <argsstring></argsstring>
        <name>i2s_opt_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="170" column="17" bodyfile="include/drivers/i2s.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__i2s__interface_1ga299003d72146c127f88d7c12c08889cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2s_configure</definition>
        <argsstring>(const struct device *dev, enum i2s_dir dir, const struct i2s_config *cfg)</argsstring>
        <name>i2s_configure</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__i2s__interface_1ga975a0f0901cadc789075078aa79f723f" kindref="member">i2s_dir</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const struct <ref refid="structi2s__config" kindref="compound">i2s_config</ref> *</type>
          <declname>cfg</declname>
        </param>
        <briefdescription>
<para>Configure operation of a host I2S controller. </para>
        </briefdescription>
        <detaileddescription>
<para>The dir parameter specifies if Transmit (TX) or Receive (RX) direction will be configured by data provided via cfg parameter.</para>
<para>The function can be called in NOT_READY or READY state only. If executed successfully the function will change the interface state to READY.</para>
<para>If the function is called with the parameter cfg-&gt;frame_clk_freq set to 0 the interface state will be changed to NOT_READY.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream direction: RX, TX, or both, as defined by I2S_DIR_*. The I2S_DIR_BOTH value may not be supported by some drivers. For those, the RX and TX streams need to be configured separately. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure containing configuration parameters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>I2S_DIR_BOTH value is not supported. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="353" column="6" declfile="include/drivers/i2s.h" declline="353" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__i2s__interface_1gacf4d51fcfd07573582858cd50a76785d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const struct <ref refid="structi2s__config" kindref="compound">i2s_config</ref> *</type>
        <definition>static const struct i2s_config * i2s_config_get</definition>
        <argsstring>(const struct device *dev, enum i2s_dir dir)</argsstring>
        <name>i2s_config_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__i2s__interface_1ga975a0f0901cadc789075078aa79f723f" kindref="member">i2s_dir</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Fetch configuration information of a host I2S controller. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream direction: RX or TX as defined by I2S_DIR_* </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>to the structure containing configuration parameters, or NULL if un-configured </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="374" column="37" bodyfile="include/drivers/i2s.h" bodystart="374" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="group__i2s__interface_1ga7f23b7959280e1c4075a4305c3edd655" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2s_read</definition>
        <argsstring>(const struct device *dev, void **mem_block, size_t *size)</argsstring>
        <name>i2s_read</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>mem_block</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read data from the RX queue. </para>
        </briefdescription>
        <detaileddescription>
<para>Data received by the I2S interface is stored in the RX queue consisting of memory blocks preallocated by this function from rx_mem_slab (as defined by i2s_configure). Ownership of the RX memory block is passed on to the user application which has to release it.</para>
<para>The data is read in chunks equal to the size of the memory block. If the interface is in READY state the number of bytes read can be smaller.</para>
<para>If there is no data in the RX queue the function will block waiting for the next RX memory block to fill in. This operation can timeout as defined by i2s_configure. If the timeout value is set to K_NO_WAIT the function is non-blocking.</para>
<para>Reading from the RX queue is possible in any state other than NOT_READY. If the interface is in the ERROR state it is still possible to read all the valid data stored in RX queue. Afterwards the function will return -EIO error.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="structmem__block" kindref="compound">mem_block</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RX memory block containing received data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the variable storing the number of bytes read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>The interface is in NOT_READY or ERROR state and there are no more data blocks in the RX queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned without waiting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="414" column="19" bodyfile="include/drivers/i2s.h" bodystart="414" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="group__i2s__interface_1ga5c8ca0bf6b394170ffbe031de8e37c28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2s_buf_read</definition>
        <argsstring>(const struct device *dev, void *buf, size_t *size)</argsstring>
        <name>i2s_buf_read</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read data from the RX queue into a provided buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Data received by the I2S interface is stored in the RX queue consisting of memory blocks preallocated by this function from rx_mem_slab (as defined by i2s_configure). Calling this function removes one block from the queue which is copied into the provided buffer and then freed.</para>
<para>The provided buffer must be large enough to contain a full memory block of data, which is parameterized for the channel via <ref refid="group__i2s__interface_1ga299003d72146c127f88d7c12c08889cc" kindref="member">i2s_configure()</ref>.</para>
<para>This function is otherwise equivalent to <ref refid="group__i2s__interface_1ga7f23b7959280e1c4075a4305c3edd655" kindref="member">i2s_read()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer for read data, which must be at least the as large as the configured memory block size for the RX channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the variable storing the number of bytes read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>The interface is in NOT_READY or ERROR state and there are no more data blocks in the RX queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned without waiting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="447" column="6" declfile="include/drivers/i2s.h" declline="447" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__i2s__interface_1ga01edf23acc6c16bbaf718dab8061a7a0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2s_write</definition>
        <argsstring>(const struct device *dev, void *mem_block, size_t size)</argsstring>
        <name>i2s_write</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>mem_block</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Write data to the TX queue. </para>
        </briefdescription>
        <detaileddescription>
<para>Data to be sent by the I2S interface is stored first in the TX queue. TX queue consists of memory blocks preallocated by the user from tx_mem_slab (as defined by i2s_configure). This function takes ownership of the memory block and will release it when all data are transmitted.</para>
<para>If there are no free slots in the TX queue the function will block waiting for the next TX memory block to be send and removed from the queue. This operation can timeout as defined by i2s_configure. If the timeout value is set to K_NO_WAIT the function is non-blocking.</para>
<para>Writing to the TX queue is only possible if the interface is in READY or RUNNING state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="structmem__block" kindref="compound">mem_block</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the TX memory block containing data to be sent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write. This value has to be equal or smaller than the size of the memory block.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>The interface is not in READY or RUNNING state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned without waiting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="475" column="19" bodyfile="include/drivers/i2s.h" bodystart="475" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="group__i2s__interface_1ga98cbfe351a8dd5db361f4667959d0b58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2s_buf_write</definition>
        <argsstring>(const struct device *dev, void *buf, size_t size)</argsstring>
        <name>i2s_buf_write</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Write data to the TX queue from a provided buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function acquires a memory block from the I2S channel TX queue and copies the provided data buffer into it. It is otherwise equivalent to <ref refid="group__i2s__interface_1ga01edf23acc6c16bbaf718dab8061a7a0" kindref="member">i2s_write()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a buffer containing the data to transmit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write. This value has to be equal or smaller than the size of the channel&apos;s TX memory block configuration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>The interface is not in READY or RUNNING state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned without waiting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>No memory in TX slab queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Size parameter larger than TX queue memory block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="503" column="6" declfile="include/drivers/i2s.h" declline="503" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__i2s__interface_1gaaa153e6c325f8f34f2fd5d550e4d3297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2s_trigger</definition>
        <argsstring>(const struct device *dev, enum i2s_dir dir, enum i2s_trigger_cmd cmd)</argsstring>
        <name>i2s_trigger</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__i2s__interface_1ga975a0f0901cadc789075078aa79f723f" kindref="member">i2s_dir</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>enum <ref refid="group__i2s__interface_1gac994676a89f1ea676475712a84003de6" kindref="member">i2s_trigger_cmd</ref></type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
<para>Send a trigger command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream direction: RX, TX, or both, as defined by I2S_DIR_*. The I2S_DIR_BOTH value may not be supported by some drivers. For those, triggering need to be done separately for the RX and TX streams. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Trigger command.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>The trigger cannot be executed in the current state or a DMA channel cannot be allocated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>RX/TX memory block not available. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>I2S_DIR_BOTH value is not supported. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2s.h" line="522" column="6" declfile="include/drivers/i2s.h" declline="522" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Public APIs for the I2S (Inter-IC Sound) bus drivers. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017<sp/>Piotr<sp/>Mienkowski</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_DRIVERS_I2S_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_DRIVERS_I2S_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;device.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>The<sp/>following<sp/>#defines<sp/>are<sp/>used<sp/>to<sp/>configure<sp/>the<sp/>I2S<sp/>controller.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="group__i2s__interface_1ga0939a3ba04a233d9d637fba8a42b0bbb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="group__i2s__interface_1ga0939a3ba04a233d9d637fba8a42b0bbb" kindref="member">i2s_fmt_t</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="group__i2s__interface_1gaa3f67c47874141782fbb7ec5a671b566" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_FMT_DATA_FORMAT_SHIFT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="group__i2s__interface_1gaf3eb0116133dd3a041d9a80cb3397263" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_FMT_DATA_FORMAT_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x7<sp/>&lt;&lt;<sp/>I2S_FMT_DATA_FORMAT_SHIFT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="group__i2s__interface_1gaa1adc5e3b722e89f20f258b0fd53a2c5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_FMT_DATA_FORMAT_I2S<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0<sp/>&lt;&lt;<sp/>I2S_FMT_DATA_FORMAT_SHIFT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="group__i2s__interface_1ga70c7a19078a6f72e078b9c0488018b11" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_FMT_DATA_FORMAT_PCM_SHORT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>I2S_FMT_DATA_FORMAT_SHIFT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="group__i2s__interface_1ga7032b1894faded14a174593a3f10ca3c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_FMT_DATA_FORMAT_PCM_LONG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(2<sp/>&lt;&lt;<sp/>I2S_FMT_DATA_FORMAT_SHIFT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="group__i2s__interface_1gaabc5e62ed922b8c5834ed40c6af78022" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_FMT_DATA_FORMAT_LEFT_JUSTIFIED<sp/><sp/>(3<sp/>&lt;&lt;<sp/>I2S_FMT_DATA_FORMAT_SHIFT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="group__i2s__interface_1ga8ad25375c2f7344b2959bed2eec4be72" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_FMT_DATA_FORMAT_RIGHT_JUSTIFIED<sp/>(4<sp/>&lt;&lt;<sp/>I2S_FMT_DATA_FORMAT_SHIFT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="group__i2s__interface_1ga6a6c18e170333a56086f5bcf96e552a1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_FMT_DATA_ORDER_MSB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0<sp/>&lt;&lt;<sp/>3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="group__i2s__interface_1gacc2d0662903b2300b0e1009a8223ed7d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_FMT_DATA_ORDER_LSB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="group__i2s__interface_1ga052fa04f51ab96d90cdaf0d35f19a166" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_FMT_DATA_ORDER_INV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2S_FMT_DATA_ORDER_LSB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="group__i2s__interface_1ga713fe1eb042953a315d1cb606a28d5ca" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_FMT_CLK_FORMAT_SHIFT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="group__i2s__interface_1ga16e4b44cf7f4b2d11bbd2d50522d086d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_FMT_CLK_FORMAT_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x3<sp/>&lt;&lt;<sp/>I2S_FMT_CLK_FORMAT_SHIFT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="group__i2s__interface_1ga1bbc3f0600b406691ce016bf7bf96a5f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_FMT_BIT_CLK_INV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="group__i2s__interface_1ga1cd356cbe68f622d0b3f5aee027d1f57" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_FMT_FRAME_CLK_INV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="group__i2s__interface_1gad555437f250801cbc8970cd02d7b7cde" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_FMT_CLK_NF_NB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0<sp/>&lt;&lt;<sp/>I2S_FMT_CLK_FORMAT_SHIFT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="group__i2s__interface_1ga85714d803548509c6b41c2579b7f2a7f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_FMT_CLK_NF_IB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>I2S_FMT_CLK_FORMAT_SHIFT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="group__i2s__interface_1ga5686ac4f8e3327d36f3f1293168330cd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_FMT_CLK_IF_NB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(2<sp/>&lt;&lt;<sp/>I2S_FMT_CLK_FORMAT_SHIFT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="group__i2s__interface_1gaaaf186e3265d2fea6c8dc43a8030272c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_FMT_CLK_IF_IB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(3<sp/>&lt;&lt;<sp/>I2S_FMT_CLK_FORMAT_SHIFT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="group__i2s__interface_1gad0ca475f9bf5edeecc7de65b4f56c119" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="group__i2s__interface_1gad0ca475f9bf5edeecc7de65b4f56c119" kindref="member">i2s_opt_t</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="group__i2s__interface_1ga039e7e244f7f1452dcd197c0a689d6e6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_OPT_BIT_CLK_CONT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0<sp/>&lt;&lt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="group__i2s__interface_1ga4a68f73ee794684f68a02066ce1d632c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_OPT_BIT_CLK_GATED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="group__i2s__interface_1ga54aaaa7f0403e4f03574ffcc6141a67f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_OPT_BIT_CLK_MASTER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0<sp/>&lt;&lt;<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="group__i2s__interface_1gaa76784ed4a645cb751b2c683bfa4be40" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_OPT_BIT_CLK_SLAVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="group__i2s__interface_1gaedfc35128aae5058a17ef5601bdc73d2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_OPT_FRAME_CLK_MASTER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0<sp/>&lt;&lt;<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="group__i2s__interface_1ga138640dfb430fe0565840078a7b23ace" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_OPT_FRAME_CLK_SLAVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="group__i2s__interface_1ga093ed00a6081da8b4d958f80744fa09f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_OPT_LOOPBACK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="group__i2s__interface_1gadcb20e201a0fef1fe10f4cf916ff4b72" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2S_OPT_PINGPONG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="group__i2s__interface_1ga975a0f0901cadc789075078aa79f723f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__i2s__interface_1ga975a0f0901cadc789075078aa79f723f" kindref="member">i2s_dir</ref><sp/>{</highlight></codeline>
<codeline lineno="207" refid="group__i2s__interface_1gga975a0f0901cadc789075078aa79f723fac9f71d312c5d5ad7ef64af4217091aca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2s__interface_1gga975a0f0901cadc789075078aa79f723fac9f71d312c5d5ad7ef64af4217091aca" kindref="member">I2S_DIR_RX</ref>,</highlight></codeline>
<codeline lineno="209" refid="group__i2s__interface_1gga975a0f0901cadc789075078aa79f723fab005c2cfee6206c2b5b596638e6c8443" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2s__interface_1gga975a0f0901cadc789075078aa79f723fab005c2cfee6206c2b5b596638e6c8443" kindref="member">I2S_DIR_TX</ref>,</highlight></codeline>
<codeline lineno="211" refid="group__i2s__interface_1gga975a0f0901cadc789075078aa79f723fa3cca349476d0dbe214111b9ef5d8b272" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2s__interface_1gga975a0f0901cadc789075078aa79f723fa3cca349476d0dbe214111b9ef5d8b272" kindref="member">I2S_DIR_BOTH</ref>,</highlight></codeline>
<codeline lineno="212"><highlight class="normal">};</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="group__i2s__interface_1ga975d09fe35ddf7942968155b62abc531" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__i2s__interface_1ga975d09fe35ddf7942968155b62abc531" kindref="member">i2s_state</ref><sp/>{</highlight></codeline>
<codeline lineno="222" refid="group__i2s__interface_1gga975d09fe35ddf7942968155b62abc531a7151755b31bbb614e7b668141a7ef43a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2s__interface_1gga975d09fe35ddf7942968155b62abc531a7151755b31bbb614e7b668141a7ef43a" kindref="member">I2S_STATE_NOT_READY</ref>,</highlight></codeline>
<codeline lineno="224" refid="group__i2s__interface_1gga975d09fe35ddf7942968155b62abc531af6babeef999bfb034ea55366e9c59b13" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2s__interface_1gga975d09fe35ddf7942968155b62abc531af6babeef999bfb034ea55366e9c59b13" kindref="member">I2S_STATE_READY</ref>,</highlight></codeline>
<codeline lineno="226" refid="group__i2s__interface_1gga975d09fe35ddf7942968155b62abc531aa3d21ba793efa7d8f557774e8b330a42" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2s__interface_1gga975d09fe35ddf7942968155b62abc531aa3d21ba793efa7d8f557774e8b330a42" kindref="member">I2S_STATE_RUNNING</ref>,</highlight></codeline>
<codeline lineno="228" refid="group__i2s__interface_1gga975d09fe35ddf7942968155b62abc531a972fd7e9da207b36e07731b996620a33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2s__interface_1gga975d09fe35ddf7942968155b62abc531a972fd7e9da207b36e07731b996620a33" kindref="member">I2S_STATE_STOPPING</ref>,</highlight></codeline>
<codeline lineno="230" refid="group__i2s__interface_1gga975d09fe35ddf7942968155b62abc531a68c0a46589ae00045900a8f79675641a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2s__interface_1gga975d09fe35ddf7942968155b62abc531a68c0a46589ae00045900a8f79675641a" kindref="member">I2S_STATE_ERROR</ref>,</highlight></codeline>
<codeline lineno="231"><highlight class="normal">};</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="group__i2s__interface_1gac994676a89f1ea676475712a84003de6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__i2s__interface_1gac994676a89f1ea676475712a84003de6" kindref="member">i2s_trigger_cmd</ref><sp/>{</highlight></codeline>
<codeline lineno="241" refid="group__i2s__interface_1ggac994676a89f1ea676475712a84003de6a6f4cacef6ee84256e6223a4bab3bc3ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2s__interface_1ggac994676a89f1ea676475712a84003de6a6f4cacef6ee84256e6223a4bab3bc3ac" kindref="member">I2S_TRIGGER_START</ref>,</highlight></codeline>
<codeline lineno="251" refid="group__i2s__interface_1ggac994676a89f1ea676475712a84003de6a37caf001d6ee6a263f3487f27952688b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2s__interface_1ggac994676a89f1ea676475712a84003de6a37caf001d6ee6a263f3487f27952688b" kindref="member">I2S_TRIGGER_STOP</ref>,</highlight></codeline>
<codeline lineno="260" refid="group__i2s__interface_1ggac994676a89f1ea676475712a84003de6a7bdbdf37c5a6481faa1866be323bb9de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2s__interface_1ggac994676a89f1ea676475712a84003de6a7bdbdf37c5a6481faa1866be323bb9de" kindref="member">I2S_TRIGGER_DRAIN</ref>,</highlight></codeline>
<codeline lineno="267" refid="group__i2s__interface_1ggac994676a89f1ea676475712a84003de6ae8155a4d72875bd885dc987765d7628d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2s__interface_1ggac994676a89f1ea676475712a84003de6ae8155a4d72875bd885dc987765d7628d" kindref="member">I2S_TRIGGER_DROP</ref>,</highlight></codeline>
<codeline lineno="273" refid="group__i2s__interface_1ggac994676a89f1ea676475712a84003de6a61943bd287840e33bffd74bbc4a59e88" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2s__interface_1ggac994676a89f1ea676475712a84003de6a61943bd287840e33bffd74bbc4a59e88" kindref="member">I2S_TRIGGER_PREPARE</ref>,</highlight></codeline>
<codeline lineno="274"><highlight class="normal">};</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="structi2s__config" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2s__config" kindref="compound">i2s_config</ref><sp/>{</highlight></codeline>
<codeline lineno="302" refid="structi2s__config_1a5a38a75f0b4a3356ed85495fb45d0cd2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structi2s__config_1a5a38a75f0b4a3356ed85495fb45d0cd2" kindref="member">word_size</ref>;</highlight></codeline>
<codeline lineno="303" refid="structi2s__config_1acd9ff8b9a0e79e95a8deb19df145478d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structi2s__config_1acd9ff8b9a0e79e95a8deb19df145478d" kindref="member">channels</ref>;</highlight></codeline>
<codeline lineno="304" refid="structi2s__config_1a9ab2e8fa330473be99ce0713aec60daf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2s__interface_1ga0939a3ba04a233d9d637fba8a42b0bbb" kindref="member">i2s_fmt_t</ref><sp/><ref refid="structi2s__config_1a9ab2e8fa330473be99ce0713aec60daf" kindref="member">format</ref>;</highlight></codeline>
<codeline lineno="305" refid="structi2s__config_1a56a9caaf8133ced8e47e3699e322fdab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2s__interface_1gad0ca475f9bf5edeecc7de65b4f56c119" kindref="member">i2s_opt_t</ref><sp/><ref refid="structi2s__config_1a56a9caaf8133ced8e47e3699e322fdab" kindref="member">options</ref>;</highlight></codeline>
<codeline lineno="306" refid="structi2s__config_1ab5b0556fcd113c6c645e265af4846b45" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structi2s__config_1ab5b0556fcd113c6c645e265af4846b45" kindref="member">frame_clk_freq</ref>;</highlight></codeline>
<codeline lineno="307" refid="structi2s__config_1a11991601fa180ead06a23b90a58136ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_mem_slab<sp/>*<ref refid="structi2s__config_1a11991601fa180ead06a23b90a58136ff" kindref="member">mem_slab</ref>;</highlight></codeline>
<codeline lineno="308" refid="structi2s__config_1a62f504e954fc42c343d142513bbaf4ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structi2s__config_1a62f504e954fc42c343d142513bbaf4ef" kindref="member">block_size</ref>;</highlight></codeline>
<codeline lineno="309" refid="structi2s__config_1a9bf6c6cb96cc9c3acd8efc3fad0cbca9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/><ref refid="structi2s__config_1a9bf6c6cb96cc9c3acd8efc3fad0cbca9" kindref="member">timeout</ref>;</highlight></codeline>
<codeline lineno="310"><highlight class="normal">};</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal">__subsystem<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2s_driver_api<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*configure)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__i2s__interface_1ga975a0f0901cadc789075078aa79f723f" kindref="member">i2s_dir</ref><sp/>dir,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2s__config" kindref="compound">i2s_config</ref><sp/>*cfg);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2s__config" kindref="compound">i2s_config</ref><sp/>*(*config_get)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__i2s__interface_1ga975a0f0901cadc789075078aa79f723f" kindref="member">i2s_dir</ref><sp/>dir);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*read)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<ref refid="structmem__block" kindref="compound">mem_block</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*size);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*write)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structmem__block" kindref="compound">mem_block</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*trigger)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__i2s__interface_1ga975a0f0901cadc789075078aa79f723f" kindref="member">i2s_dir</ref><sp/>dir,</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__i2s__interface_1gac994676a89f1ea676475712a84003de6" kindref="member">i2s_trigger_cmd</ref><sp/><ref refid="group__ft8xx__reference__api_1gacde1ca3945cbe6c828f65051c5c3a615" kindref="member">cmd</ref>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal">};</highlight></codeline>
<codeline lineno="353" refid="group__i2s__interface_1ga299003d72146c127f88d7c12c08889cc" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2s__interface_1ga299003d72146c127f88d7c12c08889cc" kindref="member">i2s_configure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__i2s__interface_1ga975a0f0901cadc789075078aa79f723f" kindref="member">i2s_dir</ref><sp/>dir,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structi2s__config" kindref="compound">i2s_config</ref><sp/>*cfg);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_i2s_configure(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__i2s__interface_1ga975a0f0901cadc789075078aa79f723f" kindref="member">i2s_dir</ref><sp/>dir,</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structi2s__config" kindref="compound">i2s_config</ref><sp/>*cfg)</highlight></codeline>
<codeline lineno="359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2s_driver_api<sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2s_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;configure(dev,<sp/>dir,<sp/>cfg);</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="374" refid="group__i2s__interface_1gacf4d51fcfd07573582858cd50a76785d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structi2s__config" kindref="compound">i2s_config</ref><sp/>*<ref refid="group__i2s__interface_1gacf4d51fcfd07573582858cd50a76785d" kindref="member">i2s_config_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__i2s__interface_1ga975a0f0901cadc789075078aa79f723f" kindref="member">i2s_dir</ref><sp/>dir)</highlight></codeline>
<codeline lineno="376"><highlight class="normal">{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2s_driver_api<sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2s_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;config_get(dev,<sp/>dir);</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="414" refid="group__i2s__interface_1ga7f23b7959280e1c4075a4305c3edd655" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2s__interface_1ga7f23b7959280e1c4075a4305c3edd655" kindref="member">i2s_read</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<ref refid="structmem__block" kindref="compound">mem_block</ref>,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*size)</highlight></codeline>
<codeline lineno="416"><highlight class="normal">{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2s_driver_api<sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2s_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;read(dev,<sp/><ref refid="structmem__block" kindref="compound">mem_block</ref>,<sp/>size);</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="447" refid="group__i2s__interface_1ga5c8ca0bf6b394170ffbe031de8e37c28" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2s__interface_1ga5c8ca0bf6b394170ffbe031de8e37c28" kindref="member">i2s_buf_read</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*size);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="475" refid="group__i2s__interface_1ga01edf23acc6c16bbaf718dab8061a7a0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2s__interface_1ga01edf23acc6c16bbaf718dab8061a7a0" kindref="member">i2s_write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structmem__block" kindref="compound">mem_block</ref>,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2s_driver_api<sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2s_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;write(dev,<sp/><ref refid="structmem__block" kindref="compound">mem_block</ref>,<sp/>size);</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="503" refid="group__i2s__interface_1ga98cbfe351a8dd5db361f4667959d0b58" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2s__interface_1ga98cbfe351a8dd5db361f4667959d0b58" kindref="member">i2s_buf_write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="522" refid="group__i2s__interface_1gaaa153e6c325f8f34f2fd5d550e4d3297" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__i2s__interface_1gaaa153e6c325f8f34f2fd5d550e4d3297" kindref="member">i2s_trigger</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__i2s__interface_1ga975a0f0901cadc789075078aa79f723f" kindref="member">i2s_dir</ref><sp/>dir,</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__i2s__interface_1gac994676a89f1ea676475712a84003de6" kindref="member">i2s_trigger_cmd</ref><sp/><ref refid="group__ft8xx__reference__api_1gacde1ca3945cbe6c828f65051c5c3a615" kindref="member">cmd</ref>);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_i2s_trigger(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__i2s__interface_1ga975a0f0901cadc789075078aa79f723f" kindref="member">i2s_dir</ref><sp/>dir,</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__i2s__interface_1gac994676a89f1ea676475712a84003de6" kindref="member">i2s_trigger_cmd</ref><sp/><ref refid="group__ft8xx__reference__api_1gacde1ca3945cbe6c828f65051c5c3a615" kindref="member">cmd</ref>)</highlight></codeline>
<codeline lineno="528"><highlight class="normal">{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2s_driver_api<sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">i2s_driver_api<sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;trigger(dev,<sp/>dir,<sp/><ref refid="group__ft8xx__reference__api_1gacde1ca3945cbe6c828f65051c5c3a615" kindref="member">cmd</ref>);</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;syscalls/i2s.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_DRIVERS_I2S_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/drivers/i2s.h"/>
  </compounddef>
</doxygen>
