<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__bt__addr" kind="group">
    <compoundname>bt_addr</compoundname>
    <title>Device Address</title>
    <innerclass refid="structbt__addr__t" prot="public">bt_addr_t</innerclass>
    <innerclass refid="structbt__addr__le__t" prot="public">bt_addr_le_t</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__bt__addr_1ga41ff9419098728f037c3e97d29c30ba9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int bt_addr_cmp</definition>
        <argsstring>(const bt_addr_t *a, const bt_addr_t *b)</argsstring>
        <name>bt_addr_cmp</name>
        <param>
          <type>const <ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Compare Bluetooth device addresses. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First Bluetooth device address to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second Bluetooth device address to compare</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>negative value if <emphasis>a</emphasis> &lt; <emphasis>b</emphasis>, 0 if <emphasis>a</emphasis> == <emphasis>b</emphasis>, else positive </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="71" column="19" bodyfile="include/bluetooth/addr.h" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__addr_1ga588d392f51372ff2951c3ff39da22f12" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int bt_addr_le_cmp</definition>
        <argsstring>(const bt_addr_le_t *a, const bt_addr_le_t *b)</argsstring>
        <name>bt_addr_le_cmp</name>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Compare Bluetooth LE device addresses. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First Bluetooth LE device address to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second Bluetooth LE device address to compare</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>negative value if <emphasis>a</emphasis> &lt; <emphasis>b</emphasis>, 0 if <emphasis>a</emphasis> == <emphasis>b</emphasis>, else positive </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="83" column="19" bodyfile="include/bluetooth/addr.h" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__addr_1ga5a8284cf34d0835d725dab31d710ea4c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void bt_addr_copy</definition>
        <argsstring>(bt_addr_t *dst, const bt_addr_t *src)</argsstring>
        <name>bt_addr_copy</name>
        <param>
          <type><ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy Bluetooth device address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Bluetooth device address destination buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Bluetooth device address source buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="93" column="20" bodyfile="include/bluetooth/addr.h" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__addr_1gac6c9b20f17936efaa082fe63aedc2138" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void bt_addr_le_copy</definition>
        <argsstring>(bt_addr_le_t *dst, const bt_addr_le_t *src)</argsstring>
        <name>bt_addr_le_copy</name>
        <param>
          <type><ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy Bluetooth LE device address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Bluetooth LE device address destination buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Bluetooth LE device address source buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="103" column="20" bodyfile="include/bluetooth/addr.h" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__addr_1gaf2d38888131c9e8bdbc820b415c14082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_addr_le_create_nrpa</definition>
        <argsstring>(bt_addr_le_t *addr)</argsstring>
        <name>bt_addr_le_create_nrpa</name>
        <param>
          <type><ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Create a Bluetooth LE random non-resolvable private address. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="124" column="5" declfile="include/bluetooth/addr.h" declline="124" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__addr_1gad1b43f2f0ab58ec2c5ceaaa0d2cbc444" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_addr_le_create_static</definition>
        <argsstring>(bt_addr_le_t *addr)</argsstring>
        <name>bt_addr_le_create_static</name>
        <param>
          <type><ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Create a Bluetooth LE random static address. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="127" column="5" declfile="include/bluetooth/addr.h" declline="127" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__addr_1ga42bcee6b5aadde7ccdbe243df25043bc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool bt_addr_le_is_rpa</definition>
        <argsstring>(const bt_addr_le_t *addr)</argsstring>
        <name>bt_addr_le_is_rpa</name>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if a Bluetooth LE address is a random private resolvable address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Bluetooth LE device address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if address is a random private resolvable address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="136" column="20" bodyfile="include/bluetooth/addr.h" bodystart="136" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__addr_1ga7a6acc7a9267ae2645aeee38e553b8b3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool bt_addr_le_is_identity</definition>
        <argsstring>(const bt_addr_le_t *addr)</argsstring>
        <name>bt_addr_le_is_identity</name>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if a Bluetooth LE address is valid identity address. </para>
        </briefdescription>
        <detaileddescription>
<para>Valid Bluetooth LE identity addresses are either public address or random static address.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Bluetooth LE device address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if address is a valid identity address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="154" column="20" bodyfile="include/bluetooth/addr.h" bodystart="154" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__addr_1ga151bdd0ada8635acfebd60f0e203cde2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int bt_addr_to_str</definition>
        <argsstring>(const bt_addr_t *addr, char *str, size_t len)</argsstring>
        <name>bt_addr_to_str</name>
        <param>
          <type>const <ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Converts binary Bluetooth address to string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of buffer containing binary Bluetooth address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of user buffer with enough room to store formatted string containing binary address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data to be copied to user string buffer. Refer to BT_ADDR_STR_LEN about recommended value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of successfully formatted bytes from binary address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="193" column="19" bodyfile="include/bluetooth/addr.h" bodystart="193" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__addr_1ga74a644cd3de081a353a281d80b32b91e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int bt_addr_le_to_str</definition>
        <argsstring>(const bt_addr_le_t *addr, char *str, size_t len)</argsstring>
        <name>bt_addr_le_to_str</name>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Converts binary LE Bluetooth address to string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of buffer containing binary LE Bluetooth address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of user buffer with enough room to store formatted string containing binary LE address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data to be copied to user string buffer. Refer to BT_ADDR_LE_STR_LEN about recommended value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of successfully formatted bytes from binary address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="210" column="19" bodyfile="include/bluetooth/addr.h" bodystart="210" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__addr_1gad93410d0161ca84939f4bf983da29c14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_addr_from_str</definition>
        <argsstring>(const char *str, bt_addr_t *addr)</argsstring>
        <name>bt_addr_from_str</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Convert Bluetooth address from string to binary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string representation of a Bluetooth address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of buffer to store the Bluetooth address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="245" column="5" declfile="include/bluetooth/addr.h" declline="245" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__addr_1ga2539a1ac8774587fb75702aac66f8e19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_addr_le_from_str</definition>
        <argsstring>(const char *str, const char *type, bt_addr_le_t *addr)</argsstring>
        <name>bt_addr_le_from_str</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Convert LE Bluetooth address from string to binary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string representation of an LE Bluetooth address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>The string representation of the LE Bluetooth address type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of buffer to store the LE Bluetooth address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="256" column="5" declfile="include/bluetooth/addr.h" declline="256" declcolumn="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__bt__addr_1ga1717d2b4e61b28637be8a5f78685a3c4" prot="public" static="no">
        <name>BT_ADDR_LE_PUBLIC</name>
        <initializer>0x00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="28" column="9" bodyfile="include/bluetooth/addr.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1ga6e81e967527b5418ee6cbc6d72c5aef9" prot="public" static="no">
        <name>BT_ADDR_LE_RANDOM</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="29" column="9" bodyfile="include/bluetooth/addr.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1ga1fd60d5eb4c8a6d8f4df06eaba85fb96" prot="public" static="no">
        <name>BT_ADDR_LE_PUBLIC_ID</name>
        <initializer>0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="30" column="9" bodyfile="include/bluetooth/addr.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1gafdf2572991427d95bb44d1a5ee2ad85a" prot="public" static="no">
        <name>BT_ADDR_LE_RANDOM_ID</name>
        <initializer>0x03</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="31" column="9" bodyfile="include/bluetooth/addr.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1gad02c40564a140300efda28ecb15674be" prot="public" static="no">
        <name>BT_ADDR_LE_UNRESOLVED</name>
        <initializer>				      0xFE /* Resolvable Private Address
				      * (Controller unable to resolve)
				      */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="34" column="9" bodyfile="include/bluetooth/addr.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1gab2ddd85c5972a53da0aee3974edc0258" prot="public" static="no">
        <name>BT_ADDR_LE_ANONYMOUS</name>
        <initializer>				      0xFF /* No address provided
				      * (anonymous advertisement)
				      */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="37" column="9" bodyfile="include/bluetooth/addr.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1ga6b6f56325b5136d2719f02eecc780d49" prot="public" static="no">
        <name>BT_ADDR_SIZE</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Length in bytes of a standard Bluetooth address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="40" column="9" bodyfile="include/bluetooth/addr.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1ga2656b9a936bf8cb9f1cc86668fca6108" prot="public" static="no">
        <name>BT_ADDR_LE_SIZE</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Length in bytes of an LE Bluetooth address. Not packed, so no sizeof() </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="49" column="9" bodyfile="include/bluetooth/addr.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1ga40ddc9769e38b7537bbb4e8002de592a" prot="public" static="no">
        <name>BT_ADDR_ANY</name>
        <initializer>((<ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref>[]) { { { 0, 0, 0, 0, 0, 0 } } })</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bluetooth device &quot;any&quot; address, not a valid address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="58" column="9" bodyfile="include/bluetooth/addr.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1gacb24d83ded350176fc96dfc0f5dde6be" prot="public" static="no">
        <name>BT_ADDR_NONE</name>
        <initializer>			 ((<ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref>[]) { { \
			 { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bluetooth device &quot;none&quot; address, not a valid address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="60" column="9" bodyfile="include/bluetooth/addr.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1ga17e9efacd50c682b2f709c217e920d48" prot="public" static="no">
        <name>BT_ADDR_LE_ANY</name>
        <initializer>((<ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref>[]) { { 0, { { 0, 0, 0, 0, 0, 0 } } } })</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bluetooth LE device &quot;any&quot; address, not a valid address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="63" column="9" bodyfile="include/bluetooth/addr.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1gadfcc0281e453cba990b623631c26f80b" prot="public" static="no">
        <name>BT_ADDR_LE_NONE</name>
        <initializer>			 ((<ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref>[]) { { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } } })</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bluetooth LE device &quot;none&quot; address, not a valid address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="65" column="9" bodyfile="include/bluetooth/addr.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1ga32abc1a2e827542efea5b9cb05a57fbc" prot="public" static="no">
        <name>BT_ADDR_IS_RPA</name>
        <param><defname>a</defname></param>
        <initializer>(((a)-&gt;val[5] &amp; 0xc0) == 0x40)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if a Bluetooth LE random address is resolvable private address. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="113" column="9" bodyfile="include/bluetooth/addr.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1gaa8745bff73c42a693cb76e42755b2bf9" prot="public" static="no">
        <name>BT_ADDR_IS_NRPA</name>
        <param><defname>a</defname></param>
        <initializer>(((a)-&gt;val[5] &amp; 0xc0) == 0x00)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if a Bluetooth LE random address is a non-resolvable private address. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="116" column="9" bodyfile="include/bluetooth/addr.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1ga0cb3aa4d48cf41d8485b570ef0e7447a" prot="public" static="no">
        <name>BT_ADDR_IS_STATIC</name>
        <param><defname>a</defname></param>
        <initializer>(((a)-&gt;val[5] &amp; 0xc0) == 0xc0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if a Bluetooth LE random address is a static address. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="118" column="9" bodyfile="include/bluetooth/addr.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1ga52a0bd596e726dff39b247dfbc58406d" prot="public" static="no">
        <name>BT_ADDR_SET_RPA</name>
        <param><defname>a</defname></param>
        <initializer>((a)-&gt;val[5] = (((a)-&gt;val[5] &amp; 0x3f) | 0x40))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a Bluetooth LE random address as a resolvable private address. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="121" column="9" bodyfile="include/bluetooth/addr.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1ga6b23035316e9bdd071e10ecc803fcdbc" prot="public" static="no">
        <name>BT_ADDR_SET_NRPA</name>
        <param><defname>a</defname></param>
        <initializer>((a)-&gt;val[5] &amp;= 0x3f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a Bluetooth LE random address as a non-resolvable private address. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="123" column="9" bodyfile="include/bluetooth/addr.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1gaa6261bf0b96099b58f0a0c3674ce5713" prot="public" static="no">
        <name>BT_ADDR_SET_STATIC</name>
        <param><defname>a</defname></param>
        <initializer>((a)-&gt;val[5] |= 0xc0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a Bluetooth LE random address as a static address. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="125" column="9" bodyfile="include/bluetooth/addr.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1ga8097c3b80a5647b0b951d29aa30a397d" prot="public" static="no">
        <name>BT_ADDR_STR_LEN</name>
        <initializer>18</initializer>
        <briefdescription>
<para>Recommended length of user string buffer for Bluetooth address. </para>
        </briefdescription>
        <detaileddescription>
<para>The recommended length guarantee the output of address conversion will not lose valuable information about address being processed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="175" column="9" bodyfile="include/bluetooth/addr.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1gae0df0067c55eb4388625bb62f3d7e235" prot="public" static="no">
        <name>BT_ADDR_LE_STR_LEN</name>
        <initializer>30</initializer>
        <briefdescription>
<para>Recommended length of user string buffer for Bluetooth LE address. </para>
        </briefdescription>
        <detaileddescription>
<para>The recommended length guarantee the output of address conversion will not lose valuable information about address being processed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="185" column="9" bodyfile="include/bluetooth/addr.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Bluetooth device address definitions and utilities. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
