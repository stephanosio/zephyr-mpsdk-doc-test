<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__usermode__apis" kind="group">
    <compoundname>usermode_apis</compoundname>
    <title>User Mode APIs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__usermode__apis_1ga94087bedf96fe2a2bea437d3d585ca22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_object_access_grant</definition>
        <argsstring>(const void *object, struct k_thread *thread)</argsstring>
        <name>k_object_access_grant</name>
        <param>
          <type>const void *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref> *</type>
          <declname>thread</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Grant a thread access to a kernel object</para>
<para>The thread will be granted access to the object if the caller is from supervisor mode, or the caller is from user mode AND has permissions on both the object and the thread whose access is being granted.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of kernel object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread to grant access to the object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/kobject.h" line="148" column="7" declfile="include/sys/kobject.h" declline="148" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__usermode__apis_1gab70fe65497da1347cc4b7bf7ca2daf22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_object_access_revoke</definition>
        <argsstring>(const void *object, struct k_thread *thread)</argsstring>
        <name>k_object_access_revoke</name>
        <param>
          <type>const void *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref> *</type>
          <declname>thread</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Revoke a thread&apos;s access to a kernel object</para>
<para>The thread will lose access to the object if the caller is from supervisor mode, or the caller is from user mode AND has permissions on both the object and the thread whose access is being revoked.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of kernel object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread to remove access to the object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/kobject.h" line="161" column="6" declfile="include/sys/kobject.h" declline="161" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__usermode__apis_1ga3cb1a024c0178918def2dd0186e565b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_object_release</definition>
        <argsstring>(const void *object)</argsstring>
        <name>k_object_release</name>
        <param>
          <type>const void *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Release an object. </para>
        </briefdescription>
        <detaileddescription>
<para>Allows user threads to drop their own permission on an object Their permissions are automatically cleared when a thread terminates.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to be released </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/kobject.h" line="172" column="7" declfile="include/sys/kobject.h" declline="172" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__usermode__apis_1gababc731e98a6378323c0d633b2abaa6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_object_access_all_grant</definition>
        <argsstring>(const void *object)</argsstring>
        <name>k_object_access_all_grant</name>
        <param>
          <type>const void *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Grant all present and future threads access to an object</para>
<para>If the caller is from supervisor mode, or the caller is from user mode and have sufficient permissions on the object, then that object will have permissions granted to it for <emphasis>all</emphasis> current and future threads running in the system, effectively becoming a public kernel object.</para>
<para>Use of this API should be avoided on systems that are running untrusted code as it is possible for such code to derive the addresses of kernel objects and perform unwanted operations on them.</para>
<para>It is not possible to revoke permissions on public objects; once public, any thread may use it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of kernel object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/kobject.h" line="191" column="6" declfile="include/sys/kobject.h" declline="191" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__usermode__apis_1gaf66c8cbe6e0a387551c5bebb6634bde2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void k_object_free</definition>
        <argsstring>(void *obj)</argsstring>
        <name>k_object_free</name>
        <param>
          <type>void *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Free an object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/kobject.h" line="344" column="20" bodyfile="include/sys/kobject.h" bodystart="344" bodyend="347"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__usermode__apis_1ga6a2dae4c6dc6959d8785ff1924b1b424" prot="public" static="no">
        <name>K_THREAD_ACCESS_GRANT</name>
        <param><defname>name_</defname></param>
        <param><defname>...</defname></param>
        <initializer>	static void * const _CONCAT(_object_list_, name_)[] = \
		{ __VA_ARGS__, NULL }; \
	static const <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(z_object_assignment, \
					_CONCAT(_object_access_, name_)) = \
			{ (&amp;_k_thread_obj_ ## name_), \
			  (_CONCAT(_object_list_, name_)) }</initializer>
        <briefdescription>
<para>Grant a static thread access to a list of kernel objects. </para>
        </briefdescription>
        <detaileddescription>
<para>For threads declared with <ref refid="group__thread__apis_1gab3ced58648ca35788a40676e8478ecd2" kindref="member">K_THREAD_DEFINE()</ref>, grant the thread access to a set of kernel objects. These objects do not need to be in an initialized state. The permissions will be granted when the threads are initialized in the early boot sequence.</para>
<para>All arguments beyond the first must be pointers to kernel objects.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name_</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the thread, as passed to <ref refid="group__thread__apis_1gab3ced58648ca35788a40676e8478ecd2" kindref="member">K_THREAD_DEFINE()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/kobject.h" line="110" column="9" bodyfile="include/sys/kobject.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__usermode__apis_1ga1418482d67c7964855570fd0ac79628d" prot="public" static="no">
        <name>K_OBJ_FLAG_INITIALIZED</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Object initialized </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/kobject.h" line="119" column="9" bodyfile="include/sys/kobject.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__usermode__apis_1ga8892f9343266ec24abf25e29f3f6bc9b" prot="public" static="no">
        <name>K_OBJ_FLAG_PUBLIC</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Object is Public </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/kobject.h" line="121" column="9" bodyfile="include/sys/kobject.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__usermode__apis_1ga1bf7c8c1d5fe0a7358dd70c4663a5a7a" prot="public" static="no">
        <name>K_OBJ_FLAG_ALLOC</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Object allocated </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/kobject.h" line="123" column="9" bodyfile="include/sys/kobject.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__usermode__apis_1ga82d3a7242074db70130415201d3d0fd6" prot="public" static="no">
        <name>K_OBJ_FLAG_DRIVER</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Driver Object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/kobject.h" line="125" column="9" bodyfile="include/sys/kobject.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
