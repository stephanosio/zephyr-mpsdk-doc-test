<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__spi__emul__interface" kind="group">
    <compoundname>spi_emul_interface</compoundname>
    <title>SPI Emulation Interface</title>
    <innerclass refid="structspi__emul" prot="public">spi_emul</innerclass>
    <innerclass refid="structspi__emul__api" prot="public">spi_emul_api</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__spi__emul__interface_1ga3c861d3e9943184e70202051cf3d227a" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* spi_emul_io_t) (struct spi_emul *emul, const struct spi_config *config, const struct spi_buf_set *tx_bufs, const struct spi_buf_set *rx_bufs)</definition>
        <argsstring>)(struct spi_emul *emul, const struct spi_config *config, const struct spi_buf_set *tx_bufs, const struct spi_buf_set *rx_bufs)</argsstring>
        <name>spi_emul_io_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Passes SPI messages to the emulator. The emulator updates the data with what was read back.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>emul</parametername>
</parameternamelist>
<parameterdescription>
<para>Emulator instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a valid <ref refid="structspi__config" kindref="compound">spi_config</ref> structure instance. Pointer-comparison may be used to detect changes from previous operations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tx_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer array where data to be sent originates from, or NULL if none. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer array where data to be read will be written to, or NULL if none.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi_emul.h" line="64" column="9" bodyfile="include/drivers/spi_emul.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__spi__emul__interface_1ga8b3e1068687e31722ef8ef8c3aa8ca03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int spi_emul_register</definition>
        <argsstring>(const struct device *dev, const char *name, struct spi_emul *emul)</argsstring>
        <name>spi_emul_register</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>struct <ref refid="structspi__emul" kindref="compound">spi_emul</ref> *</type>
          <declname>emul</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register an emulated device on the controller</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device that will use the emulator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>User-friendly name for this emulator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emul</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI emulator to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 indicating success (always) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi_emul.h" line="77" column="5" declfile="include/drivers/spi_emul.h" declline="77" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__emul__interface_1ga8b872edd18ec2911618919cc68229362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t spi_emul_get_config</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>spi_emul_get_config</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Back door to allow an emulator to retrieve the host configuration.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI device associated with the emulator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Bit-packed 32-bit value containing the device&apos;s runtime configuration </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/spi_emul.h" line="91" column="10" declfile="include/drivers/spi_emul.h" declline="91" declcolumn="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>SPI Emulation Interface. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
