<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="intc__esp32_8h" kind="file" language="C++">
    <compoundname>intc_esp32.h</compoundname>
    <includes refid="stdint_8h" local="no">stdint.h</includes>
    <includes refid="stdbool_8h" local="no">stdbool.h</includes>
    <incdepgraph>
      <node id="1">
        <label>include/drivers/interrupt_controller/intc_esp32.h</label>
        <link refid="intc__esp32_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="2">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
    </incdepgraph>
    <innerclass refid="structshared__vector__desc__t" prot="public">shared_vector_desc_t</innerclass>
    <innerclass refid="structvector__desc__t" prot="public">vector_desc_t</innerclass>
    <innerclass refid="structintr__handle__data__t" prot="public">intr_handle_data_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="intc__esp32_8h_1a1bc4233beade6702b76413dd4ee6497f" prot="public" static="no">
        <name>ESP_INTC_INTS_NUM</name>
        <initializer>(32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="14" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intc__esp32_8h_1ab1ef5952bffcb1811d4f831b98ecf42a" prot="public" static="no">
        <name>ESP_INTR_FLAG_LEVEL1</name>
        <initializer>(1&lt;&lt;1)	/* Accept a Level 1 int vector, lowest priority */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="23" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intc__esp32_8h_1a8e4478d65d49a4f17fb77599764239e2" prot="public" static="no">
        <name>ESP_INTR_FLAG_LEVEL2</name>
        <initializer>(1&lt;&lt;2)	/* Accept a Level 2 int vector */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="24" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intc__esp32_8h_1a88ed1ea08351b07086a6e73a0487b0d8" prot="public" static="no">
        <name>ESP_INTR_FLAG_LEVEL3</name>
        <initializer>(1&lt;&lt;3)	/* Accept a Level 3 int vector */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="25" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intc__esp32_8h_1abb43226aa7d32763f17ee6a56090b322" prot="public" static="no">
        <name>ESP_INTR_FLAG_LEVEL4</name>
        <initializer>(1&lt;&lt;4)	/* Accept a Level 4 int vector */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="26" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intc__esp32_8h_1a44a1013070e7d9a06e8f08ed3f2cbca9" prot="public" static="no">
        <name>ESP_INTR_FLAG_LEVEL5</name>
        <initializer>(1&lt;&lt;5)	/* Accept a Level 5 int vector */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="27" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intc__esp32_8h_1a8defb5130273462e32ed399dece67024" prot="public" static="no">
        <name>ESP_INTR_FLAG_LEVEL6</name>
        <initializer>(1&lt;&lt;6)	/* Accept a Level 6 int vector */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="28" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intc__esp32_8h_1a9e57c700cf362161d807657571280abe" prot="public" static="no">
        <name>ESP_INTR_FLAG_NMI</name>
        <initializer>(1&lt;&lt;7)	/* Accept a Level 7 int vector, highest priority */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="29" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intc__esp32_8h_1afc7bfcea2e621d81336ea6dd23310363" prot="public" static="no">
        <name>ESP_INTR_FLAG_SHARED</name>
        <initializer>(1&lt;&lt;8)	/* Interrupt can be shared between ISRs */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="30" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intc__esp32_8h_1a0ab957dd5055fe20725624db223f9535" prot="public" static="no">
        <name>ESP_INTR_FLAG_EDGE</name>
        <initializer>(1&lt;&lt;9)	/* Edge-triggered interrupt */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="31" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intc__esp32_8h_1a3fb8d6fa8b5e33b3503e86917bc8367b" prot="public" static="no">
        <name>ESP_INTR_FLAG_IRAM</name>
        <initializer>(1&lt;&lt;10)	/* ISR can be called if cache is disabled */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="32" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intc__esp32_8h_1a76d024609ecd48dc17b586b91e779b88" prot="public" static="no">
        <name>ESP_INTR_FLAG_INTRDISABLED</name>
        <initializer>(1&lt;&lt;11)	/* Return with this interrupt disabled */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="33" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intc__esp32_8h_1a9b0bc1a2b5cc22b499e041742ae1b17b" prot="public" static="no">
        <name>ESP_INTR_FLAG_LOWMED</name>
        <initializer>(<ref refid="intc__esp32c3_8h_1ab1ef5952bffcb1811d4f831b98ecf42a" kindref="member">ESP_INTR_FLAG_LEVEL1</ref>|<ref refid="intc__esp32_8h_1a8e4478d65d49a4f17fb77599764239e2" kindref="member">ESP_INTR_FLAG_LEVEL2</ref>|<ref refid="intc__esp32_8h_1a88ed1ea08351b07086a6e73a0487b0d8" kindref="member">ESP_INTR_FLAG_LEVEL3</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="36" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intc__esp32_8h_1a63b4eee1d70d2e9cb1dc0ecb41f40aa4" prot="public" static="no">
        <name>ESP_INTR_FLAG_HIGH</name>
        <initializer>				 (<ref refid="intc__esp32_8h_1abb43226aa7d32763f17ee6a56090b322" kindref="member">ESP_INTR_FLAG_LEVEL4</ref>|<ref refid="intc__esp32_8h_1a44a1013070e7d9a06e8f08ed3f2cbca9" kindref="member">ESP_INTR_FLAG_LEVEL5</ref>|<ref refid="intc__esp32_8h_1a8defb5130273462e32ed399dece67024" kindref="member">ESP_INTR_FLAG_LEVEL6</ref>| \
				 <ref refid="intc__esp32_8h_1a9e57c700cf362161d807657571280abe" kindref="member">ESP_INTR_FLAG_NMI</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="39" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intc__esp32_8h_1a610949ce2bf8d7adae528f816acc5725" prot="public" static="no">
        <name>ESP_INTR_FLAG_LEVELMASK</name>
        <initializer>				 (<ref refid="intc__esp32c3_8h_1ab1ef5952bffcb1811d4f831b98ecf42a" kindref="member">ESP_INTR_FLAG_LEVEL1</ref>|<ref refid="intc__esp32_8h_1a8e4478d65d49a4f17fb77599764239e2" kindref="member">ESP_INTR_FLAG_LEVEL2</ref>|<ref refid="intc__esp32_8h_1a88ed1ea08351b07086a6e73a0487b0d8" kindref="member">ESP_INTR_FLAG_LEVEL3</ref>| \
				 <ref refid="intc__esp32_8h_1abb43226aa7d32763f17ee6a56090b322" kindref="member">ESP_INTR_FLAG_LEVEL4</ref>|<ref refid="intc__esp32_8h_1a44a1013070e7d9a06e8f08ed3f2cbca9" kindref="member">ESP_INTR_FLAG_LEVEL5</ref>|<ref refid="intc__esp32_8h_1a8defb5130273462e32ed399dece67024" kindref="member">ESP_INTR_FLAG_LEVEL6</ref>| \
				 <ref refid="intc__esp32_8h_1a9e57c700cf362161d807657571280abe" kindref="member">ESP_INTR_FLAG_NMI</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="43" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intc__esp32_8h_1a2ff354dc48600b4dcbce4569c5d15bc1" prot="public" static="no">
        <name>ETS_INTERNAL_TIMER0_INTR_SOURCE</name>
        <initializer>-1 /* Xtensa <ref refid="test__sched__timeslice__and__lock_8c_1a4ced20aea8a1e880c43f684a920b85da" kindref="member">timer</ref> 0 interrupt source */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="53" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intc__esp32_8h_1ad28849af2335d2c6d9e07949f8ea953d" prot="public" static="no">
        <name>ETS_INTERNAL_TIMER1_INTR_SOURCE</name>
        <initializer>-2 /* Xtensa <ref refid="test__sched__timeslice__and__lock_8c_1a4ced20aea8a1e880c43f684a920b85da" kindref="member">timer</ref> 1 interrupt source */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="54" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intc__esp32_8h_1ad94487ae3c0ae2b9e4bccad6ce26d761" prot="public" static="no">
        <name>ETS_INTERNAL_TIMER2_INTR_SOURCE</name>
        <initializer>-3 /* Xtensa <ref refid="test__sched__timeslice__and__lock_8c_1a4ced20aea8a1e880c43f684a920b85da" kindref="member">timer</ref> 2 interrupt source */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="55" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intc__esp32_8h_1a7cd02abe5015f1be30d77e1be15bd448" prot="public" static="no">
        <name>ETS_INTERNAL_SW0_INTR_SOURCE</name>
        <initializer>-4 /* Software int source 1 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="56" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intc__esp32_8h_1aa81d606c0199b91aba7633270ca314e6" prot="public" static="no">
        <name>ETS_INTERNAL_SW1_INTR_SOURCE</name>
        <initializer>-5 /* Software int source 2 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="57" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intc__esp32_8h_1a6cac8d828d3ec24b9bb58fe0cb3d59fc" prot="public" static="no">
        <name>ETS_INTERNAL_PROFILING_INTR_SOURCE</name>
        <initializer>-6 /* Int source for profiling */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="58" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="intc__esp32_8h_1a637aa0db4839d3e945e74c56e82218f2" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* intr_handler_t) (void *arg)</definition>
        <argsstring>)(void *arg)</argsstring>
        <name>intr_handler_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="61" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="intc__esp32_8h_1aede8e7c90fd3138cf165a0eea1c920fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void esp_intr_initialize</definition>
        <argsstring>(void)</argsstring>
        <name>esp_intr_initialize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initializes interrupt table to its defaults. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="92" column="6" declfile="include/drivers/interrupt_controller/intc_esp32.h" declline="92" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="intc__esp32_8h_1aafc6d38bb52a59bd024809efcb3b64f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esp_intr_mark_shared</definition>
        <argsstring>(int intno, int cpu, bool is_in_iram)</argsstring>
        <name>esp_intr_mark_shared</name>
        <param>
          <type>int</type>
          <declname>intno</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>is_in_iram</declname>
        </param>
        <briefdescription>
<para>Mark an interrupt as a shared interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para>This will mark a certain interrupt on the specified CPU as an interrupt that can be used to hook shared interrupt handlers to.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>intno</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of the interrupt (0-31) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cpu</parametername>
</parameternamelist>
<parameterdescription>
<para>CPU on which the interrupt should be marked as shared (0 or 1) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_in_iram</parametername>
</parameternamelist>
<parameterdescription>
<para>Shared interrupt is for handlers that reside in IRAM and the int can be left enabled while the flash cache is disabled.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-EINVAL if cpu or intno is invalid 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="109" column="5" declfile="include/drivers/interrupt_controller/intc_esp32.h" declline="109" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="intc__esp32_8h_1aa6eef593f8a838adec4d258346b087d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esp_intr_reserve</definition>
        <argsstring>(int intno, int cpu)</argsstring>
        <name>esp_intr_reserve</name>
        <param>
          <type>int</type>
          <declname>intno</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Reserve an interrupt to be used outside of this framework. </para>
        </briefdescription>
        <detaileddescription>
<para>This will mark a certain interrupt on the specified CPU as reserved, not to be allocated for any reason.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>intno</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of the interrupt (0-31) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cpu</parametername>
</parameternamelist>
<parameterdescription>
<para>CPU on which the interrupt should be marked as shared (0 or 1)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-EINVAL if cpu or intno is invalid 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="123" column="5" declfile="include/drivers/interrupt_controller/intc_esp32.h" declline="123" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="intc__esp32_8h_1a480a4405ea151074f2ce4ffbab1265ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esp_intr_alloc</definition>
        <argsstring>(int source, int flags, intr_handler_t handler, void *arg, struct intr_handle_data_t **ret_handle)</argsstring>
        <name>esp_intr_alloc</name>
        <param>
          <type>int</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="intc__esp32_8h_1a637aa0db4839d3e945e74c56e82218f2" kindref="member">intr_handler_t</ref></type>
          <declname>handler</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>struct <ref refid="structintr__handle__data__t" kindref="compound">intr_handle_data_t</ref> **</type>
          <declname>ret_handle</declname>
        </param>
        <briefdescription>
<para>Allocate an interrupt with the given parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This finds an interrupt that matches the restrictions as given in the flags parameter, maps the given interrupt source to it and hooks up the given interrupt handler (with optional argument) as well. If needed, it can return a handle for the interrupt as well.</para>
<para>The interrupt will always be allocated on the core that runs this function.</para>
<para>If ESP_INTR_FLAG_IRAM flag is used, and handler address is not in IRAM or RTC_FAST_MEM, then ESP_ERR_INVALID_ARG is returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The interrupt source. One of the *_INTR_SOURCE interrupt mux sources, as defined in <ref refid="esp-xtensa-intmux_8h" kindref="compound">esp-xtensa-intmux.h</ref>, or one of the internal ETS_INTERNAL_*_INTR_SOURCE sources as defined in this header. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>An ORred mask of the ESP_INTR_FLAG_* defines. These restrict the choice of interrupts that this routine can choose from. If this value is 0, it will default to allocating a non-shared interrupt of level 1, 2 or 3. If this is ESP_INTR_FLAG_SHARED, it will allocate a shared interrupt of level 1. Setting ESP_INTR_FLAG_INTRDISABLED will return from this function with the interrupt disabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>The interrupt handler. Must be NULL when an interrupt of level &gt;3 is requested, because these types of interrupts aren&apos;t C-callable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional argument for passed to the interrupt handler </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ret_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a struct <ref refid="structintr__handle__data__t" kindref="compound">intr_handle_data_t</ref> pointer to store a handle that can later be used to request details or free the interrupt. Can be NULL if no handle is required.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-EINVAL if the combination of arguments is invalid. -ENODEV No free interrupt found with the specified flags 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="158" column="5" declfile="include/drivers/interrupt_controller/intc_esp32.h" declline="158" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="intc__esp32_8h_1a8659159ab9a4fea92d989068bb6d6f7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esp_intr_alloc_intrstatus</definition>
        <argsstring>(int source, int flags, uint32_t intrstatusreg, uint32_t intrstatusmask, intr_handler_t handler, void *arg, struct intr_handle_data_t **ret_handle)</argsstring>
        <name>esp_intr_alloc_intrstatus</name>
        <param>
          <type>int</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>intrstatusreg</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>intrstatusmask</declname>
        </param>
        <param>
          <type><ref refid="intc__esp32_8h_1a637aa0db4839d3e945e74c56e82218f2" kindref="member">intr_handler_t</ref></type>
          <declname>handler</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>struct <ref refid="structintr__handle__data__t" kindref="compound">intr_handle_data_t</ref> **</type>
          <declname>ret_handle</declname>
        </param>
        <briefdescription>
<para>Allocate an interrupt with the given parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This essentially does the same as esp_intr_alloc, but allows specifying a register and mask combo. For shared interrupts, the handler is only called if a read from the specified register, ANDed with the mask, returns non-zero. By passing an interrupt status register address and a fitting mask, this can be used to accelerate interrupt handling in the case a shared interrupt is triggered; by checking the interrupt statuses first, the code can decide which ISRs can be skipped</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The interrupt source. One of the *_INTR_SOURCE interrupt mux sources, as defined in <ref refid="esp-xtensa-intmux_8h" kindref="compound">esp-xtensa-intmux.h</ref>, or one of the internal ETS_INTERNAL_*_INTR_SOURCE sources as defined in this header. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>An ORred mask of the ESP_INTR_FLAG_* defines. These restrict the choice of interrupts that this routine can choose from. If this value is 0, it will default to allocating a non-shared interrupt of level 1, 2 or 3. If this is ESP_INTR_FLAG_SHARED, it will allocate a shared interrupt of level 1. Setting ESP_INTR_FLAG_INTRDISABLED will return from this function with the interrupt disabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intrstatusreg</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of an interrupt status register </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intrstatusmask</parametername>
</parameternamelist>
<parameterdescription>
<para>A mask. If a read of address intrstatusreg has any of the bits that are 1 in the mask set, the ISR will be called. If not, it will be skipped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>The interrupt handler. Must be NULL when an interrupt of level &gt;3 is requested, because these types of interrupts aren&apos;t C-callable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional argument for passed to the interrupt handler </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ret_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a struct <ref refid="structintr__handle__data__t" kindref="compound">intr_handle_data_t</ref> pointer to store a handle that can later be used to request details or free the interrupt. Can be NULL if no handle is required.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-EINVAL if the combination of arguments is invalid. -ENODEV No free interrupt found with the specified flags 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="200" column="5" declfile="include/drivers/interrupt_controller/intc_esp32.h" declline="200" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="intc__esp32_8h_1a90993df0cbd038640609df8c3e1957d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esp_intr_free</definition>
        <argsstring>(struct intr_handle_data_t *handle)</argsstring>
        <name>esp_intr_free</name>
        <param>
          <type>struct <ref refid="structintr__handle__data__t" kindref="compound">intr_handle_data_t</ref> *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Disable and free an interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para>Use an interrupt handle to disable the interrupt and release the resources associated with it. If the current core is not the core that registered this interrupt, this routine will be assigned to the core that allocated this interrupt, blocking and waiting until the resource is successfully released.</para>
<para><simplesect kind="note"><para>When the handler shares its source with other handlers, the interrupt status bits it&apos;s responsible for should be managed properly before freeing it. See <computeroutput>esp_intr_disable</computeroutput> for more details. Please do not call this function in <computeroutput>esp_ipc_call_blocking</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle, as obtained by esp_intr_alloc or esp_intr_alloc_intrstatus</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-EINVAL the handle is NULL 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="227" column="5" declfile="include/drivers/interrupt_controller/intc_esp32.h" declline="227" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="intc__esp32_8h_1a6c399aafeab8bff0a49bc2b127445e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esp_intr_get_cpu</definition>
        <argsstring>(struct intr_handle_data_t *handle)</argsstring>
        <name>esp_intr_get_cpu</name>
        <param>
          <type>struct <ref refid="structintr__handle__data__t" kindref="compound">intr_handle_data_t</ref> *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Get CPU number an interrupt is tied to. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle, as obtained by esp_intr_alloc or esp_intr_alloc_intrstatus</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The core number where the interrupt is allocated </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="237" column="5" declfile="include/drivers/interrupt_controller/intc_esp32.h" declline="237" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="intc__esp32_8h_1a5261fac231a9d1428b4131da33f1ef90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esp_intr_get_intno</definition>
        <argsstring>(struct intr_handle_data_t *handle)</argsstring>
        <name>esp_intr_get_intno</name>
        <param>
          <type>struct <ref refid="structintr__handle__data__t" kindref="compound">intr_handle_data_t</ref> *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Get the allocated interrupt for a certain handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle, as obtained by esp_intr_alloc or esp_intr_alloc_intrstatus</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The interrupt number </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="246" column="5" declfile="include/drivers/interrupt_controller/intc_esp32.h" declline="246" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="intc__esp32_8h_1a3ee7a7cc9ed4f7bb6e0fa65ac7e77ba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esp_intr_disable</definition>
        <argsstring>(struct intr_handle_data_t *handle)</argsstring>
        <name>esp_intr_disable</name>
        <param>
          <type>struct <ref refid="structintr__handle__data__t" kindref="compound">intr_handle_data_t</ref> *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Disable the interrupt associated with the handle. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><orderedlist>
<listitem><para>For local interrupts (ESP_INTERNAL_* sources), this function has to be called on the CPU the interrupt is allocated on. Other interrupts have no such restriction.</para>
</listitem><listitem><para>When several handlers sharing a same interrupt source, interrupt status bits, which are handled in the handler to be disabled, should be masked before the disabling, or handled in other enabled interrupts properly. Miss of interrupt status handling will cause infinite interrupt calls and finally system crash.</para>
</listitem></orderedlist>
</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle, as obtained by esp_intr_alloc or esp_intr_alloc_intrstatus</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-EINVAL if the combination of arguments is invalid. 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="264" column="5" declfile="include/drivers/interrupt_controller/intc_esp32.h" declline="264" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="intc__esp32_8h_1a3a9ed282687252cd3a8e5c18284257ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esp_intr_enable</definition>
        <argsstring>(struct intr_handle_data_t *handle)</argsstring>
        <name>esp_intr_enable</name>
        <param>
          <type>struct <ref refid="structintr__handle__data__t" kindref="compound">intr_handle_data_t</ref> *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Enable the interrupt associated with the handle. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>For local interrupts (ESP_INTERNAL_* sources), this function has to be called on the CPU the interrupt is allocated on. Other interrupts have no such restriction.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle, as obtained by esp_intr_alloc or esp_intr_alloc_intrstatus</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-EINVAL if the combination of arguments is invalid. 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="277" column="5" declfile="include/drivers/interrupt_controller/intc_esp32.h" declline="277" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="intc__esp32_8h_1af1417d7a4a9faba280ac4e17c9ee60ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esp_intr_set_in_iram</definition>
        <argsstring>(struct intr_handle_data_t *handle, bool is_in_iram)</argsstring>
        <name>esp_intr_set_in_iram</name>
        <param>
          <type>struct <ref refid="structintr__handle__data__t" kindref="compound">intr_handle_data_t</ref> *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>is_in_iram</declname>
        </param>
        <briefdescription>
<para>Set the &quot;in IRAM&quot; status of the handler. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Does not work on shared interrupts.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle, as obtained by esp_intr_alloc or esp_intr_alloc_intrstatus </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_in_iram</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the handler associated with this handle resides in IRAM. Handlers residing in IRAM can be called when cache is disabled.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-EINVAL if the combination of arguments is invalid. 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="291" column="5" declfile="include/drivers/interrupt_controller/intc_esp32.h" declline="291" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="intc__esp32_8h_1a63263dc3bf78c25b514f739e6381ee64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void esp_intr_noniram_disable</definition>
        <argsstring>(void)</argsstring>
        <name>esp_intr_noniram_disable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Disable interrupts that aren&apos;t specifically marked as running from IRAM. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="296" column="6" declfile="include/drivers/interrupt_controller/intc_esp32.h" declline="296" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="intc__esp32_8h_1a917f8af7f0c6af92dfbd1f7689c39cae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void esp_intr_noniram_enable</definition>
        <argsstring>(void)</argsstring>
        <name>esp_intr_noniram_enable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Re-enable interrupts disabled by esp_intr_noniram_disable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32.h" line="302" column="6" declfile="include/drivers/interrupt_controller/intc_esp32.h" declline="302" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2021<sp/>Espressif<sp/>Systems<sp/>(Shanghai)<sp/>Co.,<sp/>Ltd.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_DRIVERS_ESP_INTR_ALLOC_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_DRIVERS_ESP_INTR_ALLOC_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdint_8h" kindref="compound">stdint.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdbool_8h" kindref="compound">stdbool.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>possible<sp/>interrupts<sp/>per<sp/>core<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="intc__esp32_8h_1a1bc4233beade6702b76413dd4ee6497f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_INTC_INTS_NUM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>Interrupt<sp/>allocation<sp/>flags<sp/>-<sp/>These<sp/>flags<sp/>can<sp/>be<sp/>used<sp/>to<sp/>specify</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>which<sp/>interrupt<sp/>qualities<sp/>the<sp/>code<sp/>calling<sp/>esp_intr_alloc*<sp/>needs.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Keep<sp/>the<sp/>LEVELx<sp/>values<sp/>as<sp/>they<sp/>are<sp/>here;<sp/>they<sp/>match<sp/>up<sp/>with<sp/>(1&lt;&lt;level)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="intc__esp32_8h_1ab1ef5952bffcb1811d4f831b98ecf42a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_INTR_FLAG_LEVEL1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;1)<sp/><sp/></highlight><highlight class="comment">/*<sp/>Accept<sp/>a<sp/>Level<sp/>1<sp/>int<sp/>vector,<sp/>lowest<sp/>priority<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="intc__esp32_8h_1a8e4478d65d49a4f17fb77599764239e2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_INTR_FLAG_LEVEL2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;2)<sp/><sp/></highlight><highlight class="comment">/*<sp/>Accept<sp/>a<sp/>Level<sp/>2<sp/>int<sp/>vector<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="intc__esp32_8h_1a88ed1ea08351b07086a6e73a0487b0d8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_INTR_FLAG_LEVEL3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;3)<sp/><sp/></highlight><highlight class="comment">/*<sp/>Accept<sp/>a<sp/>Level<sp/>3<sp/>int<sp/>vector<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="intc__esp32_8h_1abb43226aa7d32763f17ee6a56090b322" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_INTR_FLAG_LEVEL4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;4)<sp/><sp/></highlight><highlight class="comment">/*<sp/>Accept<sp/>a<sp/>Level<sp/>4<sp/>int<sp/>vector<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="intc__esp32_8h_1a44a1013070e7d9a06e8f08ed3f2cbca9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_INTR_FLAG_LEVEL5<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;5)<sp/><sp/></highlight><highlight class="comment">/*<sp/>Accept<sp/>a<sp/>Level<sp/>5<sp/>int<sp/>vector<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="intc__esp32_8h_1a8defb5130273462e32ed399dece67024" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_INTR_FLAG_LEVEL6<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;6)<sp/><sp/></highlight><highlight class="comment">/*<sp/>Accept<sp/>a<sp/>Level<sp/>6<sp/>int<sp/>vector<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="intc__esp32_8h_1a9e57c700cf362161d807657571280abe" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_INTR_FLAG_NMI<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;7)<sp/><sp/></highlight><highlight class="comment">/*<sp/>Accept<sp/>a<sp/>Level<sp/>7<sp/>int<sp/>vector,<sp/>highest<sp/>priority<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="intc__esp32_8h_1afc7bfcea2e621d81336ea6dd23310363" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_INTR_FLAG_SHARED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;8)<sp/><sp/></highlight><highlight class="comment">/*<sp/>Interrupt<sp/>can<sp/>be<sp/>shared<sp/>between<sp/>ISRs<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="intc__esp32_8h_1a0ab957dd5055fe20725624db223f9535" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_INTR_FLAG_EDGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;9)<sp/><sp/></highlight><highlight class="comment">/*<sp/>Edge-triggered<sp/>interrupt<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="intc__esp32_8h_1a3fb8d6fa8b5e33b3503e86917bc8367b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_INTR_FLAG_IRAM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;10)<sp/></highlight><highlight class="comment">/*<sp/>ISR<sp/>can<sp/>be<sp/>called<sp/>if<sp/>cache<sp/>is<sp/>disabled<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="intc__esp32_8h_1a76d024609ecd48dc17b586b91e779b88" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_INTR_FLAG_INTRDISABLED<sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;11)<sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>with<sp/>this<sp/>interrupt<sp/>disabled<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Low<sp/>and<sp/>medium<sp/>prio<sp/>interrupts.<sp/>These<sp/>can<sp/>be<sp/>handled<sp/>in<sp/>C.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="intc__esp32_8h_1a9b0bc1a2b5cc22b499e041742ae1b17b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_INTR_FLAG_LOWMED<sp/><sp/><sp/><sp/>(ESP_INTR_FLAG_LEVEL1|ESP_INTR_FLAG_LEVEL2|ESP_INTR_FLAG_LEVEL3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>High<sp/>level<sp/>interrupts.<sp/>Need<sp/>to<sp/>be<sp/>handled<sp/>in<sp/>assembly.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="intc__esp32_8h_1a63b4eee1d70d2e9cb1dc0ecb41f40aa4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_INTR_FLAG_HIGH<sp/><sp/><sp/><sp/><sp/><sp/>(ESP_INTR_FLAG_LEVEL4|ESP_INTR_FLAG_LEVEL5|ESP_INTR_FLAG_LEVEL6|<sp/>\</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_INTR_FLAG_NMI)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Mask<sp/>for<sp/>all<sp/>level<sp/>flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="intc__esp32_8h_1a610949ce2bf8d7adae528f816acc5725" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_INTR_FLAG_LEVELMASK<sp/>(ESP_INTR_FLAG_LEVEL1|ESP_INTR_FLAG_LEVEL2|ESP_INTR_FLAG_LEVEL3|<sp/>\</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_INTR_FLAG_LEVEL4|ESP_INTR_FLAG_LEVEL5|ESP_INTR_FLAG_LEVEL6|<sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_INTR_FLAG_NMI)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>The<sp/>esp_intr_alloc*<sp/>functions<sp/>can<sp/>allocate<sp/>an<sp/>int<sp/>for<sp/>all<sp/>*_INTR_SOURCE<sp/>int<sp/>sources<sp/>that</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>are<sp/>routed<sp/>through<sp/>the<sp/>interrupt<sp/>mux.<sp/>Apart<sp/>from<sp/>these<sp/>sources,<sp/>each<sp/>core<sp/>also<sp/>has<sp/>some<sp/>internal</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>sources<sp/>that<sp/>do<sp/>not<sp/>pass<sp/>through<sp/>the<sp/>interrupt<sp/>mux.<sp/>To<sp/>allocate<sp/>an<sp/>interrupt<sp/>for<sp/>these<sp/>sources,</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>pass<sp/>these<sp/>pseudo-sources<sp/>to<sp/>the<sp/>functions.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="intc__esp32_8h_1a2ff354dc48600b4dcbce4569c5d15bc1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ETS_INTERNAL_TIMER0_INTR_SOURCE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1<sp/></highlight><highlight class="comment">/*<sp/>Xtensa<sp/>timer<sp/>0<sp/>interrupt<sp/>source<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="intc__esp32_8h_1ad28849af2335d2c6d9e07949f8ea953d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ETS_INTERNAL_TIMER1_INTR_SOURCE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-2<sp/></highlight><highlight class="comment">/*<sp/>Xtensa<sp/>timer<sp/>1<sp/>interrupt<sp/>source<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="intc__esp32_8h_1ad94487ae3c0ae2b9e4bccad6ce26d761" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ETS_INTERNAL_TIMER2_INTR_SOURCE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-3<sp/></highlight><highlight class="comment">/*<sp/>Xtensa<sp/>timer<sp/>2<sp/>interrupt<sp/>source<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="intc__esp32_8h_1a7cd02abe5015f1be30d77e1be15bd448" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ETS_INTERNAL_SW0_INTR_SOURCE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-4<sp/></highlight><highlight class="comment">/*<sp/>Software<sp/>int<sp/>source<sp/>1<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="intc__esp32_8h_1aa81d606c0199b91aba7633270ca314e6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ETS_INTERNAL_SW1_INTR_SOURCE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-5<sp/></highlight><highlight class="comment">/*<sp/>Software<sp/>int<sp/>source<sp/>2<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="intc__esp32_8h_1a6cac8d828d3ec24b9bb58fe0cb3d59fc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ETS_INTERNAL_PROFILING_INTR_SOURCE<sp/><sp/><sp/><sp/><sp/><sp/>-6<sp/></highlight><highlight class="comment">/*<sp/>Int<sp/>source<sp/>for<sp/>profiling<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>prototype<sp/>for<sp/>interrupt<sp/>handler<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="intc__esp32_8h_1a637aa0db4839d3e945e74c56e82218f2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="intc__esp32_8h_1a637aa0db4839d3e945e74c56e82218f2" kindref="member">intr_handler_t</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="structshared__vector__desc__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshared__vector__desc__t" kindref="compound">shared_vector_desc_t</ref><sp/>{</highlight></codeline>
<codeline lineno="64" refid="structshared__vector__desc__t_1a36afb23eff0489280549ac96fea0ee41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structshared__vector__desc__t_1a36afb23eff0489280549ac96fea0ee41" kindref="member">disabled</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="65" refid="structshared__vector__desc__t_1af868d1b2bf579938907ef07f5b15d517" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structshared__vector__desc__t_1af868d1b2bf579938907ef07f5b15d517" kindref="member">source</ref><sp/>:<sp/>8;</highlight></codeline>
<codeline lineno="66" refid="structshared__vector__desc__t_1acb593daeddd30515742759a73fc7838f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*<ref refid="structshared__vector__desc__t_1acb593daeddd30515742759a73fc7838f" kindref="member">statusreg</ref>;</highlight></codeline>
<codeline lineno="67" refid="structshared__vector__desc__t_1a9078649e1b33c0ad3ee624789fda95cb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structshared__vector__desc__t_1a9078649e1b33c0ad3ee624789fda95cb" kindref="member">statusmask</ref>;</highlight></codeline>
<codeline lineno="68" refid="structshared__vector__desc__t_1aa438daab7ce59980b664824142be8f84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="intc__esp32_8h_1a637aa0db4839d3e945e74c56e82218f2" kindref="member">intr_handler_t</ref><sp/><ref refid="structshared__vector__desc__t_1aa438daab7ce59980b664824142be8f84" kindref="member">isr</ref>;</highlight></codeline>
<codeline lineno="69" refid="structshared__vector__desc__t_1a4ab5f28adbb5115ca6a37a3ab6c5328e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structshared__vector__desc__t_1a4ab5f28adbb5115ca6a37a3ab6c5328e" kindref="member">arg</ref>;</highlight></codeline>
<codeline lineno="70" refid="structshared__vector__desc__t_1aee24289457fcde842c2b557bce5cd605" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshared__vector__desc__t" kindref="compound">shared_vector_desc_t</ref><sp/>*<ref refid="structshared__vector__desc__t_1aee24289457fcde842c2b557bce5cd605" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">};</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Pack<sp/>using<sp/>bitfields<sp/>for<sp/>better<sp/>memory<sp/>use<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="structvector__desc__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvector__desc__t" kindref="compound">vector_desc_t</ref><sp/>{</highlight></codeline>
<codeline lineno="75" refid="structvector__desc__t_1a08740a5225fef571398bbd91a42fc970" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structvector__desc__t_1a08740a5225fef571398bbd91a42fc970" kindref="member">flags</ref><sp/>:<sp/>16;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>OR<sp/>of<sp/>VECDESC_FLAG_*<sp/>defines<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="structvector__desc__t_1a853c50cd06725b9502fa14af262d76b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structvector__desc__t_1a853c50cd06725b9502fa14af262d76b9" kindref="member">cpu</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="77" refid="structvector__desc__t_1a74e81e89da2ca79df99911d0599e5f77" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structvector__desc__t_1a74e81e89da2ca79df99911d0599e5f77" kindref="member">intno</ref><sp/>:<sp/>5;</highlight></codeline>
<codeline lineno="78" refid="structvector__desc__t_1a8adcec0946b8790de75af65a6ae03ccc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structvector__desc__t_1a8adcec0946b8790de75af65a6ae03ccc" kindref="member">source</ref><sp/>:<sp/>8;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Int<sp/>mux<sp/>flags,<sp/>used<sp/>when<sp/>not<sp/>shared<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="structvector__desc__t_1a9934f0a683b6f2145ce35a395a65b967" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshared__vector__desc__t" kindref="compound">shared_vector_desc_t</ref><sp/>*<ref refid="structvector__desc__t_1a9934f0a683b6f2145ce35a395a65b967" kindref="member">shared_vec_info</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>used<sp/>when<sp/>VECDESC_FL_SHARED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="structvector__desc__t_1a4b3b6db584511e25407e187d4dbf6ac8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvector__desc__t" kindref="compound">vector_desc_t</ref><sp/>*<ref refid="structvector__desc__t_1a4b3b6db584511e25407e187d4dbf6ac8" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="structintr__handle__data__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structintr__handle__data__t" kindref="compound">intr_handle_data_t</ref><sp/>{</highlight></codeline>
<codeline lineno="85" refid="structintr__handle__data__t_1a54ce22a2f0818180fbe25d0e9edf2036" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvector__desc__t" kindref="compound">vector_desc_t</ref><sp/>*<ref refid="structintr__handle__data__t_1a54ce22a2f0818180fbe25d0e9edf2036" kindref="member">vector_desc</ref>;</highlight></codeline>
<codeline lineno="86" refid="structintr__handle__data__t_1a86785e459328fac2f0758d588159bf3e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshared__vector__desc__t" kindref="compound">shared_vector_desc_t</ref><sp/>*<ref refid="structintr__handle__data__t_1a86785e459328fac2f0758d588159bf3e" kindref="member">shared_vector_desc</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="intc__esp32_8h_1aede8e7c90fd3138cf165a0eea1c920fe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="intc__esp32_8h_1aede8e7c90fd3138cf165a0eea1c920fe" kindref="member">esp_intr_initialize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="intc__esp32_8h_1aafc6d38bb52a59bd024809efcb3b64f0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="intc__esp32_8h_1aafc6d38bb52a59bd024809efcb3b64f0" kindref="member">esp_intr_mark_shared</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>intno,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_in_iram);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="intc__esp32_8h_1aa6eef593f8a838adec4d258346b087d0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="intc__esp32_8h_1aa6eef593f8a838adec4d258346b087d0" kindref="member">esp_intr_reserve</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>intno,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="intc__esp32_8h_1a480a4405ea151074f2ce4ffbab1265ea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="intc__esp32_8h_1a480a4405ea151074f2ce4ffbab1265ea" kindref="member">esp_intr_alloc</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structshared__vector__desc__t_1af868d1b2bf579938907ef07f5b15d517" kindref="member">source</ref>,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="intc__esp32_8h_1a637aa0db4839d3e945e74c56e82218f2" kindref="member">intr_handler_t</ref><sp/><ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structshared__vector__desc__t_1a4ab5f28adbb5115ca6a37a3ab6c5328e" kindref="member">arg</ref>,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structintr__handle__data__t" kindref="compound">intr_handle_data_t</ref><sp/>**ret_handle);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="intc__esp32_8h_1a8659159ab9a4fea92d989068bb6d6f7b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="intc__esp32_8h_1a8659159ab9a4fea92d989068bb6d6f7b" kindref="member">esp_intr_alloc_intrstatus</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structshared__vector__desc__t_1af868d1b2bf579938907ef07f5b15d517" kindref="member">source</ref>,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>intrstatusreg,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>intrstatusmask,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="intc__esp32_8h_1a637aa0db4839d3e945e74c56e82218f2" kindref="member">intr_handler_t</ref><sp/><ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structshared__vector__desc__t_1a4ab5f28adbb5115ca6a37a3ab6c5328e" kindref="member">arg</ref>,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structintr__handle__data__t" kindref="compound">intr_handle_data_t</ref><sp/>**ret_handle);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="intc__esp32_8h_1a90993df0cbd038640609df8c3e1957d3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="intc__esp32_8h_1a90993df0cbd038640609df8c3e1957d3" kindref="member">esp_intr_free</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structintr__handle__data__t" kindref="compound">intr_handle_data_t</ref><sp/>*handle);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="intc__esp32_8h_1a6c399aafeab8bff0a49bc2b127445e10" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="intc__esp32_8h_1a6c399aafeab8bff0a49bc2b127445e10" kindref="member">esp_intr_get_cpu</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structintr__handle__data__t" kindref="compound">intr_handle_data_t</ref><sp/>*handle);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="246" refid="intc__esp32_8h_1a5261fac231a9d1428b4131da33f1ef90" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="intc__esp32_8h_1a5261fac231a9d1428b4131da33f1ef90" kindref="member">esp_intr_get_intno</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structintr__handle__data__t" kindref="compound">intr_handle_data_t</ref><sp/>*handle);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="intc__esp32_8h_1a3ee7a7cc9ed4f7bb6e0fa65ac7e77ba6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="intc__esp32_8h_1a3ee7a7cc9ed4f7bb6e0fa65ac7e77ba6" kindref="member">esp_intr_disable</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structintr__handle__data__t" kindref="compound">intr_handle_data_t</ref><sp/>*handle);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="intc__esp32_8h_1a3a9ed282687252cd3a8e5c18284257ff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="intc__esp32_8h_1a3a9ed282687252cd3a8e5c18284257ff" kindref="member">esp_intr_enable</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structintr__handle__data__t" kindref="compound">intr_handle_data_t</ref><sp/>*handle);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="intc__esp32_8h_1af1417d7a4a9faba280ac4e17c9ee60ab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="intc__esp32_8h_1af1417d7a4a9faba280ac4e17c9ee60ab" kindref="member">esp_intr_set_in_iram</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structintr__handle__data__t" kindref="compound">intr_handle_data_t</ref><sp/>*handle,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_in_iram);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="296" refid="intc__esp32_8h_1a63263dc3bf78c25b514f739e6381ee64" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="intc__esp32_8h_1a63263dc3bf78c25b514f739e6381ee64" kindref="member">esp_intr_noniram_disable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="intc__esp32_8h_1a917f8af7f0c6af92dfbd1f7689c39cae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="intc__esp32_8h_1a917f8af7f0c6af92dfbd1f7689c39cae" kindref="member">esp_intr_noniram_enable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="include/drivers/interrupt_controller/intc_esp32.h"/>
  </compounddef>
</doxygen>
