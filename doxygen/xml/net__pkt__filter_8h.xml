<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="net__pkt__filter_8h" kind="file" language="C++">
    <compoundname>net_pkt_filter.h</compoundname>
    <includes refid="limits_8h" local="no">limits.h</includes>
    <includes refid="stdbool_8h" local="no">stdbool.h</includes>
    <includes refid="slist_8h" local="no">sys/slist.h</includes>
    <includes refid="net__core_8h" local="no">net/net_core.h</includes>
    <includes refid="ethernet_8h" local="no">net/ethernet.h</includes>
    <incdepgraph>
      <node id="16">
        <label>logging/log.h</label>
        <link refid="log_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>logging/log_core.h</label>
        <link refid="include_2logging_2log__core_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>logging/log_instance.h</label>
        <link refid="log__instance_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>logging/log_msg.h</label>
        <link refid="log__msg_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>logging/log_msg2.h</label>
        <link refid="include_2logging_2log__msg2_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>net/buf.h</label>
        <link refid="net_2buf_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>net/capture.h</label>
        <link refid="capture_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>net/ethernet.h</label>
        <link refid="ethernet_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>net/ethernet_vlan.h</label>
        <link refid="ethernet__vlan_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>net/hostname.h</label>
        <link refid="hostname_8h"/>
      </node>
      <node id="58">
        <label>net/net_context.h</label>
        <link refid="net__context_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>net/net_core.h</label>
        <link refid="net__core_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>net/net_event.h</label>
        <link refid="net__event_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>net/net_if.h</label>
        <link refid="net__if_8h"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>net/net_ip.h</label>
        <link refid="net__ip_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>net/net_l2.h</label>
        <link refid="net__l2_8h"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>net/net_linkaddr.h</label>
        <link refid="net__linkaddr_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>net/net_mgmt.h</label>
        <link refid="net__mgmt_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>net/net_pkt.h</label>
        <link refid="net__pkt_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/net/net_pkt_filter.h</label>
        <link refid="net__pkt__filter_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>net/net_stats.h</label>
        <link refid="net__stats_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>net/net_timeout.h</label>
        <link refid="net__timeout_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>net/ptp_time.h</label>
        <link refid="ptp__time_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="43">
        <label>sys/byteorder.h</label>
        <link refid="byteorder_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>sys/cbprintf.h</label>
        <link refid="cbprintf_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>sys/cbprintf_cxx.h</label>
        <link refid="cbprintf__cxx_8h"/>
      </node>
      <node id="27">
        <label>sys/cbprintf_internal.h</label>
        <link refid="cbprintf__internal_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>sys/mpsc_packet.h</label>
        <link refid="mpsc__packet_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="8">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="11">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="3">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="12">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="26">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>syscalls/log_core.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2log__core_8h"/>
      </node>
      <node id="33">
        <label>syscalls/log_msg2.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2log__msg2_8h"/>
      </node>
      <node id="32">
        <label>alloca.h</label>
      </node>
      <node id="50">
        <label>device.h</label>
      </node>
      <node id="39">
        <label>kernel.h</label>
      </node>
      <node id="25">
        <label>stdarg.h</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="34">
        <label>syscall.h</label>
      </node>
      <node id="30">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="61">
        <label>syscalls/ethernet.h</label>
      </node>
      <node id="57">
        <label>syscalls/net_if.h</label>
      </node>
      <node id="45">
        <label>syscalls/net_ip.h</label>
      </node>
      <node id="48">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnpf__test" prot="public">npf_test</innerclass>
    <innerclass refid="structnpf__rule" prot="public">npf_rule</innerclass>
    <innerclass refid="structnpf__rule__list" prot="public">npf_rule_list</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__net__pkt__filter_1ga4d3592647f81cd44a84ded4fff8edcf5" prot="public" static="no">
        <name>npf_insert_send_rule</name>
        <param><defname>rule</defname></param>
        <initializer><ref refid="group__net__pkt__filter_1ga3b2a85558b6756e76760d9a40c780e28" kindref="member">npf_insert_rule</ref>(&amp;<ref refid="group__net__pkt__filter_1ga8017a041d3168c76e39bdfac011b9315" kindref="member">npf_send_rules</ref>, rule)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="105" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__pkt__filter_1ga3f6ecadc4842b61731984968ab4c6b89" prot="public" static="no">
        <name>npf_insert_recv_rule</name>
        <param><defname>rule</defname></param>
        <initializer><ref refid="group__net__pkt__filter_1ga3b2a85558b6756e76760d9a40c780e28" kindref="member">npf_insert_rule</ref>(&amp;<ref refid="group__net__pkt__filter_1ga9714529658625e906264a46ad1a9be6f" kindref="member">npf_recv_rules</ref>, rule)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="106" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__pkt__filter_1ga8cd06cba4360c1b56709e59ff06dbeb3" prot="public" static="no">
        <name>npf_append_send_rule</name>
        <param><defname>rule</defname></param>
        <initializer><ref refid="group__net__pkt__filter_1gadfa956e4af3c45460846fc22f863e697" kindref="member">npf_append_rule</ref>(&amp;<ref refid="group__net__pkt__filter_1ga8017a041d3168c76e39bdfac011b9315" kindref="member">npf_send_rules</ref>, rule)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="107" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__pkt__filter_1ga263c7ee6e3c860353b5720c613690b0a" prot="public" static="no">
        <name>npf_append_recv_rule</name>
        <param><defname>rule</defname></param>
        <initializer><ref refid="group__net__pkt__filter_1gadfa956e4af3c45460846fc22f863e697" kindref="member">npf_append_rule</ref>(&amp;<ref refid="group__net__pkt__filter_1ga9714529658625e906264a46ad1a9be6f" kindref="member">npf_recv_rules</ref>, rule)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="108" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__pkt__filter_1ga43f03a0ce73d6dee52f43fd3577aa240" prot="public" static="no">
        <name>npf_remove_send_rule</name>
        <param><defname>rule</defname></param>
        <initializer><ref refid="group__net__pkt__filter_1ga4d7426db901debff35e1de5805e06c71" kindref="member">npf_remove_rule</ref>(&amp;<ref refid="group__net__pkt__filter_1ga8017a041d3168c76e39bdfac011b9315" kindref="member">npf_send_rules</ref>, rule)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="109" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__pkt__filter_1gae78cb092522564303a665d1a5d3596b9" prot="public" static="no">
        <name>npf_remove_recv_rule</name>
        <param><defname>rule</defname></param>
        <initializer><ref refid="group__net__pkt__filter_1ga4d7426db901debff35e1de5805e06c71" kindref="member">npf_remove_rule</ref>(&amp;<ref refid="group__net__pkt__filter_1ga9714529658625e906264a46ad1a9be6f" kindref="member">npf_recv_rules</ref>, rule)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="110" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__pkt__filter_1gaea48284508ee244bce6d78b29bc2f471" prot="public" static="no">
        <name>npf_remove_all_send_rules</name>
        <param></param>
        <initializer><ref refid="group__net__pkt__filter_1ga54916eb4943e4b47cd31eb23827d0dd5" kindref="member">npf_remove_all_rules</ref>(&amp;<ref refid="group__net__pkt__filter_1ga8017a041d3168c76e39bdfac011b9315" kindref="member">npf_send_rules</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="111" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__pkt__filter_1gac08801a6e8bd14bfd6eeaf2f28a1ed1a" prot="public" static="no">
        <name>npf_remove_all_recv_rules</name>
        <param></param>
        <initializer><ref refid="group__net__pkt__filter_1ga54916eb4943e4b47cd31eb23827d0dd5" kindref="member">npf_remove_all_rules</ref>(&amp;<ref refid="group__net__pkt__filter_1ga9714529658625e906264a46ad1a9be6f" kindref="member">npf_recv_rules</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="112" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__pkt__filter_1ga2f45093d5ad164d5c51a8996f7f04d32" prot="public" static="no">
        <name>NPF_RULE</name>
        <param><defname>_name</defname></param>
        <param><defname>_result</defname></param>
        <param><defname>...</defname></param>
        <initializer>	struct <ref refid="structnpf__rule" kindref="compound">npf_rule</ref> _name = { \
		.<ref refid="structresult" kindref="compound">result</ref> = (_result), \
		.nb_tests = <ref refid="group__sys-util_1ga8a0e9835e0a8f864ffc2359b9c419cc2" kindref="member">NUM_VA_ARGS_LESS_1</ref>(__VA_ARGS__) + 1, \
		.<ref refid="timer__convert_8c_1a035367bcde305038de5052ea816afe0d" kindref="member">tests</ref> = { <ref refid="threads_2no-multithreading_2src_2main_8c_1af2de6cd2b60b623046744e6314a5efb6" kindref="member">FOR_EACH</ref>(Z_NPF_TEST_ADDR, (,), __VA_ARGS__) }, \
	}</initializer>
        <briefdescription>
<para>Statically define one packet filter rule. </para>
        </briefdescription>
        <detaileddescription>
<para>This creates a rule from a variable amount of filter conditions. This rule can then be inserted or appended to the rule list for a given network packet path.</para>
<para>Example:</para>
<para><programlisting filename=".c"><codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__npf__basic__cond_1gacd56b9bcf2b2ba4759402650a9bff67a" kindref="member">NPF_SIZE_MAX</ref>(maxsize_200,<sp/>200);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__npf__eth__cond_1gace7de72d4c64e128a825f28f94d8b1b2" kindref="member">NPF_ETH_TYPE_MATCH</ref>(ip_packet,<sp/>NET_ETH_PTYPE_IP);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__net__pkt__filter_1ga2f45093d5ad164d5c51a8996f7f04d32" kindref="member">NPF_RULE</ref>(small_ip_pkt,<sp/><ref refid="group__net__core_1gga8e5393f3bdd85491f221324e637c3896a2a49d766ffb9422176da8e4712fdb047" kindref="member">NET_OK</ref>,<sp/>ip_packet,<sp/>maxsize_200);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>install_my_filter(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__net__pkt__filter_1ga3f6ecadc4842b61731984968ab4c6b89" kindref="member">npf_insert_recv_rule</ref>(&amp;<ref refid="group__net__pkt__filter_1ga8fc592feedeceb5172f8747a29697dd7" kindref="member">npf_default_drop</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__net__pkt__filter_1ga3f6ecadc4842b61731984968ab4c6b89" kindref="member">npf_insert_recv_rule</ref>(&amp;small_ip_pkt);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>The above would accept IP packets that are 200 bytes or smaller, and drop all other packets.</para>
<para>Another (less efficient) way to create the same result could be:</para>
<para><programlisting filename=".c"><codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__npf__basic__cond_1gaf142455f9bea3dea8faa0a913072b63e" kindref="member">NPF_SIZE_MIN</ref>(minsize_201,<sp/>201);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__npf__eth__cond_1gab9bf6d58433e273220c5fab76f608545" kindref="member">NPF_ETH_TYPE_UNMATCH</ref>(not_ip_packet,<sp/>NET_ETH_PTYPE_IP);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__net__pkt__filter_1ga2f45093d5ad164d5c51a8996f7f04d32" kindref="member">NPF_RULE</ref>(reject_big_pkts,<sp/><ref refid="group__net__core_1gga8e5393f3bdd85491f221324e637c3896a464f79c041fb589d518eeef445c477c3" kindref="member">NET_DROP</ref>,<sp/>minsize_201);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__net__pkt__filter_1ga2f45093d5ad164d5c51a8996f7f04d32" kindref="member">NPF_RULE</ref>(reject_non_ip,<sp/><ref refid="group__net__core_1gga8e5393f3bdd85491f221324e637c3896a464f79c041fb589d518eeef445c477c3" kindref="member">NET_DROP</ref>,<sp/>not_ip_packet);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>install_my_filter(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__net__pkt__filter_1ga263c7ee6e3c860353b5720c613690b0a" kindref="member">npf_append_recv_rule</ref>(&amp;reject_big_pkts);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__net__pkt__filter_1ga263c7ee6e3c860353b5720c613690b0a" kindref="member">npf_append_recv_rule</ref>(&amp;reject_non_ip);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__net__pkt__filter_1ga263c7ee6e3c860353b5720c613690b0a" kindref="member">npf_append_recv_rule</ref>(&amp;<ref refid="group__net__pkt__filter_1gaac489d75c023952243589cba7ff7367a" kindref="member">npf_default_ok</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>The first rule in the list for which all conditions are true determines the fate of the packet. If one condition is false then the next rule in the list is evaluated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name for this rule. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_result</parametername>
</parameternamelist>
<parameterdescription>
<para>Fate of the packet if all conditions are true, either <computeroutput>NET_OK</computeroutput> or <computeroutput>NET_DROP</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>List of conditions for this rule. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="168" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__npf__basic__cond_1ga465578272b616c6267ecd13fd86ca73b" prot="public" static="no">
        <name>NPF_IFACE_MATCH</name>
        <param><defname>_name</defname></param>
        <param><defname>_iface</defname></param>
        <initializer>	struct npf_test_iface _name = { \
		.iface = (_iface), \
		.test.fn = npf_iface_match, \
	}</initializer>
        <briefdescription>
<para>Statically define an &quot;interface match&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to match </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="205" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__npf__basic__cond_1gac3607a6736d70b0ea044a2ec7ab6d313" prot="public" static="no">
        <name>NPF_IFACE_UNMATCH</name>
        <param><defname>_name</defname></param>
        <param><defname>_iface</defname></param>
        <initializer>	struct npf_test_iface _name = { \
		.iface = (_iface), \
		.test.fn = npf_iface_unmatch, \
	}</initializer>
        <briefdescription>
<para>Statically define an &quot;interface unmatch&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to exclude </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="217" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__npf__basic__cond_1ga55021acd131e4684568aaf6434b08789" prot="public" static="no">
        <name>NPF_ORIG_IFACE_MATCH</name>
        <param><defname>_name</defname></param>
        <param><defname>_iface</defname></param>
        <initializer>	struct npf_test_iface _name = { \
		.iface = (_iface), \
		.test.fn = npf_orig_iface_match, \
	}</initializer>
        <briefdescription>
<para>Statically define an &quot;orig interface match&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to match </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="229" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__npf__basic__cond_1gad959dc62d47ca3b4d2f24a6c862c7623" prot="public" static="no">
        <name>NPF_ORIG_IFACE_UNMATCH</name>
        <param><defname>_name</defname></param>
        <param><defname>_iface</defname></param>
        <initializer>	struct npf_test_iface _name = { \
		.iface = (_iface), \
		.test.fn = npf_orig_iface_unmatch, \
	}</initializer>
        <briefdescription>
<para>Statically define an &quot;orig interface unmatch&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to exclude </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="241" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__npf__basic__cond_1gaf142455f9bea3dea8faa0a913072b63e" prot="public" static="no">
        <name>NPF_SIZE_MIN</name>
        <param><defname>_name</defname></param>
        <param><defname>_size</defname></param>
        <initializer>	struct npf_test_size_bounds _name = { \
		.min = (_size), \
		.max = <ref refid="stdint_8h_1a3c75bb398badb69c7577b21486f9963f" kindref="member">SIZE_MAX</ref>, \
		.test.fn = npf_size_inbounds, \
	}</initializer>
        <briefdescription>
<para>Statically define a &quot;data minimum size&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound of the packet&apos;s data size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="265" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__npf__basic__cond_1gacd56b9bcf2b2ba4759402650a9bff67a" prot="public" static="no">
        <name>NPF_SIZE_MAX</name>
        <param><defname>_name</defname></param>
        <param><defname>_size</defname></param>
        <initializer>	struct npf_test_size_bounds _name = { \
		.min = 0, \
		.max = (_size), \
		.test.fn = npf_size_inbounds, \
	}</initializer>
        <briefdescription>
<para>Statically define a &quot;data maximum size&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Higher bound of the packet&apos;s data size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="278" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__npf__basic__cond_1gab402bb13c7899d57532d3dcf8a36ed4b" prot="public" static="no">
        <name>NPF_SIZE_BOUNDS</name>
        <param><defname>_name</defname></param>
        <param><defname>_min_size</defname></param>
        <param><defname>_max_size</defname></param>
        <initializer>	struct npf_test_size_bounds _name = { \
		.min = (_min_size), \
		.max = (_max_size), \
		.test.fn = npf_size_inbounds, \
	}</initializer>
        <briefdescription>
<para>Statically define a &quot;data bounded size&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_min_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound of the packet&apos;s data size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_max_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Higher bound of the packet&apos;s data size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="292" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__npf__eth__cond_1gad2141ad8d6639c9b92569d55130ca1b1" prot="public" static="no">
        <name>NPF_ETH_SRC_ADDR_MATCH</name>
        <param><defname>_name</defname></param>
        <param><defname>_addr_array</defname></param>
        <initializer>	struct npf_test_eth_addr _name = { \
		.addresses = (_addr_array), \
		.nb_addresses = <ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(_addr_array), \
		.test.fn = npf_eth_src_addr_match, \
		.mask.addr = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff }, \
	}</initializer>
        <briefdescription>
<para>Statically define a &quot;source address match&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para>This tests if the packet source address matches any of the Ethernet addresses contained in the provided set.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_addr_array</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of <computeroutput>struct net_eth_addr</computeroutput> items to test against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="332" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__npf__eth__cond_1ga228eaa3784f663d8f2e2711e26409043" prot="public" static="no">
        <name>NPF_ETH_SRC_ADDR_UNMATCH</name>
        <param><defname>_name</defname></param>
        <param><defname>_addr_array</defname></param>
        <initializer>	struct npf_test_eth_addr _name = { \
		.addresses = (_addr_array), \
		.nb_addresses = <ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(_addr_array), \
		.test.fn = npf_eth_src_addr_unmatch, \
		.mask.addr = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff }, \
	}</initializer>
        <briefdescription>
<para>Statically define a &quot;source address unmatch&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para>This tests if the packet source address matches none of the Ethernet addresses contained in the provided set.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_addr_array</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of <computeroutput>struct net_eth_addr</computeroutput> items to test against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="349" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__npf__eth__cond_1ga3d22d687bcd56b7727c51c7bc7f36cac" prot="public" static="no">
        <name>NPF_ETH_DST_ADDR_MATCH</name>
        <param><defname>_name</defname></param>
        <param><defname>_addr_array</defname></param>
        <initializer>	struct npf_test_eth_addr _name = { \
		.addresses = (_addr_array), \
		.nb_addresses = <ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(_addr_array), \
		.test.fn = npf_eth_dst_addr_match, \
		.mask.addr = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff }, \
	}</initializer>
        <briefdescription>
<para>Statically define a &quot;destination address match&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para>This tests if the packet destination address matches any of the Ethernet addresses contained in the provided set.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_addr_array</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of <computeroutput>struct net_eth_addr</computeroutput> items to test against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="366" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__npf__eth__cond_1ga3b8a8a22eb992c0e02223f70723c3641" prot="public" static="no">
        <name>NPF_ETH_DST_ADDR_UNMATCH</name>
        <param><defname>_name</defname></param>
        <param><defname>_addr_array</defname></param>
        <initializer>	struct npf_test_eth_addr _name = { \
		.addresses = (_addr_array), \
		.nb_addresses = <ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(_addr_array), \
		.test.fn = npf_eth_dst_addr_unmatch, \
		.mask.addr = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff }, \
	}</initializer>
        <briefdescription>
<para>Statically define a &quot;destination address unmatch&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para>This tests if the packet destination address matches none of the Ethernet addresses contained in the provided set.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_addr_array</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of <computeroutput>struct net_eth_addr</computeroutput> items to test against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="383" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__npf__eth__cond_1ga0e06ebc4c9a1a960651be1ba89eeb2fd" prot="public" static="no">
        <name>NPF_ETH_SRC_ADDR_MASK_MATCH</name>
        <param><defname>_name</defname></param>
        <param><defname>_addr_array</defname></param>
        <param><defname>...</defname></param>
        <initializer>	struct npf_test_eth_addr _name = { \
		.addresses = (_addr_array), \
		.nb_addresses = <ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(_addr_array), \
		.mask.addr = { __VA_ARGS__ }, \
		.test.fn = npf_eth_src_addr_match, \
	}</initializer>
        <briefdescription>
<para>Statically define a &quot;source address match with mask&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para>This tests if the packet source address matches any of the Ethernet addresses contained in the provided set after applying specified mask.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_addr_array</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of <computeroutput>struct net_eth_addr</computeroutput> items to test against </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>up to 6 mask bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="401" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__npf__eth__cond_1ga7cf793af7b91eccc6e675ff19ed59a14" prot="public" static="no">
        <name>NPF_ETH_DST_ADDR_MASK_MATCH</name>
        <param><defname>_name</defname></param>
        <param><defname>_addr_array</defname></param>
        <param><defname>...</defname></param>
        <initializer>	struct npf_test_eth_addr _name = { \
		.addresses = (_addr_array), \
		.nb_addresses = <ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(_addr_array), \
		.mask.addr = { __VA_ARGS__ }, \
		.test.fn = npf_eth_dst_addr_match, \
	}</initializer>
        <briefdescription>
<para>Statically define a &quot;destination address match with mask&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para>This tests if the packet destination address matches any of the Ethernet addresses contained in the provided set after applying specified mask.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_addr_array</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of <computeroutput>struct net_eth_addr</computeroutput> items to test against </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>up to 6 mask bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="419" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__npf__eth__cond_1gace7de72d4c64e128a825f28f94d8b1b2" prot="public" static="no">
        <name>NPF_ETH_TYPE_MATCH</name>
        <param><defname>_name</defname></param>
        <param><defname>_type</defname></param>
        <initializer>	struct npf_test_eth_type _name = { \
		.type = <ref refid="group__ip__4__6_1ga51799f5ebb4c7228ef7e95c247030f42" kindref="member">htons</ref>(_type), \
		.test.fn = npf_eth_type_match, \
	}</initializer>
        <briefdescription>
<para>Statically define an &quot;Ethernet type match&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Ethernet type to match </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="445" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__npf__eth__cond_1gab9bf6d58433e273220c5fab76f608545" prot="public" static="no">
        <name>NPF_ETH_TYPE_UNMATCH</name>
        <param><defname>_name</defname></param>
        <param><defname>_type</defname></param>
        <initializer>	struct npf_test_eth_type _name = { \
		.type = <ref refid="group__ip__4__6_1ga51799f5ebb4c7228ef7e95c247030f42" kindref="member">htons</ref>(_type), \
		.test.fn = npf_eth_type_unmatch, \
	}</initializer>
        <briefdescription>
<para>Statically define an &quot;Ethernet type unmatch&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Ethernet type to exclude </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="457" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="457" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__net__pkt__filter_1gaac489d75c023952243589cba7ff7367a" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structnpf__rule" kindref="compound">npf_rule</ref></type>
        <definition>struct npf_rule npf_default_ok</definition>
        <argsstring></argsstring>
        <name>npf_default_ok</name>
        <briefdescription>
<para>Default rule list termination for accepting a packet. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="56" column="22" declfile="include/net/net_pkt_filter.h" declline="56" declcolumn="22"/>
      </memberdef>
      <memberdef kind="variable" id="group__net__pkt__filter_1ga8fc592feedeceb5172f8747a29697dd7" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structnpf__rule" kindref="compound">npf_rule</ref></type>
        <definition>struct npf_rule npf_default_drop</definition>
        <argsstring></argsstring>
        <name>npf_default_drop</name>
        <briefdescription>
<para>Default rule list termination for rejecting a packet. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="58" column="22" declfile="include/net/net_pkt_filter.h" declline="58" declcolumn="22"/>
      </memberdef>
      <memberdef kind="variable" id="group__net__pkt__filter_1ga8017a041d3168c76e39bdfac011b9315" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structnpf__rule__list" kindref="compound">npf_rule_list</ref></type>
        <definition>struct npf_rule_list npf_send_rules</definition>
        <argsstring></argsstring>
        <name>npf_send_rules</name>
        <briefdescription>
<para>rule list applied to outgoing packets </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="67" column="27" declfile="include/net/net_pkt_filter.h" declline="67" declcolumn="27"/>
      </memberdef>
      <memberdef kind="variable" id="group__net__pkt__filter_1ga9714529658625e906264a46ad1a9be6f" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structnpf__rule__list" kindref="compound">npf_rule_list</ref></type>
        <definition>struct npf_rule_list npf_recv_rules</definition>
        <argsstring></argsstring>
        <name>npf_recv_rules</name>
        <briefdescription>
<para>rule list applied to incoming packets </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="69" column="27" declfile="include/net/net_pkt_filter.h" declline="69" declcolumn="27"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__net__pkt__filter_1ga3b2a85558b6756e76760d9a40c780e28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void npf_insert_rule</definition>
        <argsstring>(struct npf_rule_list *rules, struct npf_rule *rule)</argsstring>
        <name>npf_insert_rule</name>
        <param>
          <type>struct <ref refid="structnpf__rule__list" kindref="compound">npf_rule_list</ref> *</type>
          <declname>rules</declname>
        </param>
        <param>
          <type>struct <ref refid="structnpf__rule" kindref="compound">npf_rule</ref> *</type>
          <declname>rule</declname>
        </param>
        <briefdescription>
<para>Insert a rule at the front of given rule list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rules</parametername>
</parameternamelist>
<parameterdescription>
<para>the affected rule list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rule</parametername>
</parameternamelist>
<parameterdescription>
<para>the rule to be inserted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="77" column="6" declfile="include/net/net_pkt_filter.h" declline="77" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt__filter_1gadfa956e4af3c45460846fc22f863e697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void npf_append_rule</definition>
        <argsstring>(struct npf_rule_list *rules, struct npf_rule *rule)</argsstring>
        <name>npf_append_rule</name>
        <param>
          <type>struct <ref refid="structnpf__rule__list" kindref="compound">npf_rule_list</ref> *</type>
          <declname>rules</declname>
        </param>
        <param>
          <type>struct <ref refid="structnpf__rule" kindref="compound">npf_rule</ref> *</type>
          <declname>rule</declname>
        </param>
        <briefdescription>
<para>Append a rule at the end of given rule list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rules</parametername>
</parameternamelist>
<parameterdescription>
<para>the affected rule list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rule</parametername>
</parameternamelist>
<parameterdescription>
<para>the rule to be appended </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="85" column="6" declfile="include/net/net_pkt_filter.h" declline="85" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt__filter_1ga4d7426db901debff35e1de5805e06c71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool npf_remove_rule</definition>
        <argsstring>(struct npf_rule_list *rules, struct npf_rule *rule)</argsstring>
        <name>npf_remove_rule</name>
        <param>
          <type>struct <ref refid="structnpf__rule__list" kindref="compound">npf_rule_list</ref> *</type>
          <declname>rules</declname>
        </param>
        <param>
          <type>struct <ref refid="structnpf__rule" kindref="compound">npf_rule</ref> *</type>
          <declname>rule</declname>
        </param>
        <briefdescription>
<para>Remove a rule from the given rule list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rules</parametername>
</parameternamelist>
<parameterdescription>
<para>the affected rule list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rule</parametername>
</parameternamelist>
<parameterdescription>
<para>the rule to be removed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>if given rule was found in the rule list and removed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="94" column="6" declfile="include/net/net_pkt_filter.h" declline="94" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt__filter_1ga54916eb4943e4b47cd31eb23827d0dd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool npf_remove_all_rules</definition>
        <argsstring>(struct npf_rule_list *rules)</argsstring>
        <name>npf_remove_all_rules</name>
        <param>
          <type>struct <ref refid="structnpf__rule__list" kindref="compound">npf_rule_list</ref> *</type>
          <declname>rules</declname>
        </param>
        <briefdescription>
<para>Remove all rules from the given rule list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rules</parametername>
</parameternamelist>
<parameterdescription>
<para>the affected rule list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>if at least one rule was removed from the rule list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="102" column="6" declfile="include/net/net_pkt_filter.h" declline="102" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Network packet filtering public header file. </para>
    </briefdescription>
    <detaileddescription>
<para>The network packet filtering provides a mechanism for deciding the fate of an incoming or outgoing packet based on a set of basic rules. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2021<sp/>BayLibre<sp/>SAS</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_NET_PKT_FILTER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_NET_PKT_FILTER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="limits_8h" kindref="compound">limits.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdbool_8h" kindref="compound">stdbool.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="slist_8h" kindref="compound">sys/slist.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="net__core_8h" kindref="compound">net/net_core.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ethernet_8h" kindref="compound">net/ethernet.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnpf__test" kindref="compound">npf_test</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref><sp/>(npf_test_fn_t)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnpf__test" kindref="compound">npf_test</ref><sp/>*test,<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__pkt" kindref="compound">net_pkt</ref><sp/>*pkt);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="structnpf__test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnpf__test" kindref="compound">npf_test</ref><sp/>{</highlight></codeline>
<codeline lineno="44" refid="structnpf__test_1ac49921514690a71986ca4d07245cfe7d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>npf_test_fn_t<sp/>*<ref refid="structnpf__test_1ac49921514690a71986ca4d07245cfe7d" kindref="member">fn</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal">};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="structnpf__rule" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnpf__rule" kindref="compound">npf_rule</ref><sp/>{</highlight></codeline>
<codeline lineno="49" refid="structnpf__rule_1ad5ae58fbcee5112e2defde1d7f4320dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref><sp/><ref refid="structnpf__rule_1ad5ae58fbcee5112e2defde1d7f4320dc" kindref="member">node</ref>;</highlight></codeline>
<codeline lineno="50" refid="structnpf__rule_1a872daf53310dd8e20477eafd6808481f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__net__core_1ga8e5393f3bdd85491f221324e637c3896" kindref="member">net_verdict</ref><sp/><ref refid="structnpf__rule_1a872daf53310dd8e20477eafd6808481f" kindref="member">result</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="51" refid="structnpf__rule_1a06045c693cf06e6ebfc5a74b8c3f5ef7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structnpf__rule_1a06045c693cf06e6ebfc5a74b8c3f5ef7" kindref="member">nb_tests</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="52" refid="structnpf__rule_1a72c032c55535c82f365b2cd1229cb1e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnpf__test" kindref="compound">npf_test</ref><sp/>*<ref refid="structnpf__rule_1a72c032c55535c82f365b2cd1229cb1e0" kindref="member">tests</ref>[];<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal">};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnpf__rule" kindref="compound">npf_rule</ref><sp/><ref refid="group__net__pkt__filter_1gaac489d75c023952243589cba7ff7367a" kindref="member">npf_default_ok</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnpf__rule" kindref="compound">npf_rule</ref><sp/><ref refid="group__net__pkt__filter_1ga8fc592feedeceb5172f8747a29697dd7" kindref="member">npf_default_drop</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="structnpf__rule__list" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnpf__rule__list" kindref="compound">npf_rule_list</ref><sp/>{</highlight></codeline>
<codeline lineno="62" refid="structnpf__rule__list_1ab6aadf2d3479853c28e94972e7862931" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref><sp/><ref refid="structnpf__rule__list_1ab6aadf2d3479853c28e94972e7862931" kindref="member">rule_head</ref>;</highlight></codeline>
<codeline lineno="63" refid="structnpf__rule__list_1af4d539d930acb257b1496761219d26cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__spinlock" kindref="compound">k_spinlock</ref><sp/><ref refid="structnpf__rule__list_1af4d539d930acb257b1496761219d26cd" kindref="member">lock</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnpf__rule__list" kindref="compound">npf_rule_list</ref><sp/><ref refid="group__net__pkt__filter_1ga8017a041d3168c76e39bdfac011b9315" kindref="member">npf_send_rules</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnpf__rule__list" kindref="compound">npf_rule_list</ref><sp/><ref refid="group__net__pkt__filter_1ga9714529658625e906264a46ad1a9be6f" kindref="member">npf_recv_rules</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="group__net__pkt__filter_1ga3b2a85558b6756e76760d9a40c780e28" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__pkt__filter_1ga3b2a85558b6756e76760d9a40c780e28" kindref="member">npf_insert_rule</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnpf__rule__list" kindref="compound">npf_rule_list</ref><sp/>*rules,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnpf__rule" kindref="compound">npf_rule</ref><sp/>*rule);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="group__net__pkt__filter_1gadfa956e4af3c45460846fc22f863e697" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__pkt__filter_1gadfa956e4af3c45460846fc22f863e697" kindref="member">npf_append_rule</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnpf__rule__list" kindref="compound">npf_rule_list</ref><sp/>*rules,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnpf__rule" kindref="compound">npf_rule</ref><sp/>*rule);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="group__net__pkt__filter_1ga4d7426db901debff35e1de5805e06c71" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__net__pkt__filter_1ga4d7426db901debff35e1de5805e06c71" kindref="member">npf_remove_rule</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnpf__rule__list" kindref="compound">npf_rule_list</ref><sp/>*rules,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnpf__rule" kindref="compound">npf_rule</ref><sp/>*rule);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="group__net__pkt__filter_1ga54916eb4943e4b47cd31eb23827d0dd5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__net__pkt__filter_1ga54916eb4943e4b47cd31eb23827d0dd5" kindref="member">npf_remove_all_rules</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnpf__rule__list" kindref="compound">npf_rule_list</ref><sp/>*rules);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>convenience<sp/>shortcuts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="group__net__pkt__filter_1ga4d3592647f81cd44a84ded4fff8edcf5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>npf_insert_send_rule(rule)<sp/>npf_insert_rule(&amp;npf_send_rules,<sp/>rule)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="group__net__pkt__filter_1ga3f6ecadc4842b61731984968ab4c6b89" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>npf_insert_recv_rule(rule)<sp/>npf_insert_rule(&amp;npf_recv_rules,<sp/>rule)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="group__net__pkt__filter_1ga8cd06cba4360c1b56709e59ff06dbeb3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>npf_append_send_rule(rule)<sp/>npf_append_rule(&amp;npf_send_rules,<sp/>rule)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="group__net__pkt__filter_1ga263c7ee6e3c860353b5720c613690b0a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>npf_append_recv_rule(rule)<sp/>npf_append_rule(&amp;npf_recv_rules,<sp/>rule)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="group__net__pkt__filter_1ga43f03a0ce73d6dee52f43fd3577aa240" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>npf_remove_send_rule(rule)<sp/>npf_remove_rule(&amp;npf_send_rules,<sp/>rule)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="group__net__pkt__filter_1gae78cb092522564303a665d1a5d3596b9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>npf_remove_recv_rule(rule)<sp/>npf_remove_rule(&amp;npf_recv_rules,<sp/>rule)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="group__net__pkt__filter_1gaea48284508ee244bce6d78b29bc2f471" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>npf_remove_all_send_rules()<sp/>npf_remove_all_rules(&amp;npf_send_rules)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="group__net__pkt__filter_1gac08801a6e8bd14bfd6eeaf2f28a1ed1a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>npf_remove_all_recv_rules()<sp/>npf_remove_all_rules(&amp;npf_recv_rules)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="group__net__pkt__filter_1ga2f45093d5ad164d5c51a8996f7f04d32" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NPF_RULE(_name,<sp/>_result,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>npf_rule<sp/>_name<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.result<sp/>=<sp/>(_result),<sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.nb_tests<sp/>=<sp/>NUM_VA_ARGS_LESS_1(__VA_ARGS__)<sp/>+<sp/>1,<sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.tests<sp/>=<sp/>{<sp/>FOR_EACH(Z_NPF_TEST_ADDR,<sp/>(,),<sp/>__VA_ARGS__)<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_NPF_TEST_ADDR(arg)<sp/>&amp;arg.test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">npf_test_iface<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnpf__test" kindref="compound">npf_test</ref><sp/>test;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">};</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>npf_test_fn_t<sp/>npf_iface_match;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>npf_test_fn_t<sp/>npf_iface_unmatch;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>npf_test_fn_t<sp/>npf_orig_iface_match;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>npf_test_fn_t<sp/>npf_orig_iface_unmatch;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="group__npf__basic__cond_1ga465578272b616c6267ecd13fd86ca73b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NPF_IFACE_MATCH(_name,<sp/>_iface)<sp/>\</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>npf_test_iface<sp/>_name<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.iface<sp/>=<sp/>(_iface),<sp/>\</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test.fn<sp/>=<sp/>npf_iface_match,<sp/>\</highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="group__npf__basic__cond_1gac3607a6736d70b0ea044a2ec7ab6d313" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NPF_IFACE_UNMATCH(_name,<sp/>_iface)<sp/>\</highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>npf_test_iface<sp/>_name<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.iface<sp/>=<sp/>(_iface),<sp/>\</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test.fn<sp/>=<sp/>npf_iface_unmatch,<sp/>\</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="group__npf__basic__cond_1ga55021acd131e4684568aaf6434b08789" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NPF_ORIG_IFACE_MATCH(_name,<sp/>_iface)<sp/>\</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>npf_test_iface<sp/>_name<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.iface<sp/>=<sp/>(_iface),<sp/>\</highlight></codeline>
<codeline lineno="232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test.fn<sp/>=<sp/>npf_orig_iface_match,<sp/>\</highlight></codeline>
<codeline lineno="233"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="group__npf__basic__cond_1gad959dc62d47ca3b4d2f24a6c862c7623" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NPF_ORIG_IFACE_UNMATCH(_name,<sp/>_iface)<sp/>\</highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>npf_test_iface<sp/>_name<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="243"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.iface<sp/>=<sp/>(_iface),<sp/>\</highlight></codeline>
<codeline lineno="244"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test.fn<sp/>=<sp/>npf_orig_iface_unmatch,<sp/>\</highlight></codeline>
<codeline lineno="245"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">npf_test_size_bounds<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnpf__test" kindref="compound">npf_test</ref><sp/>test;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>min;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">};</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>npf_test_fn_t<sp/>npf_size_inbounds;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="group__npf__basic__cond_1gaf142455f9bea3dea8faa0a913072b63e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NPF_SIZE_MIN(_name,<sp/>_size)<sp/>\</highlight></codeline>
<codeline lineno="266"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>npf_test_size_bounds<sp/>_name<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="267"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.min<sp/>=<sp/>(_size),<sp/>\</highlight></codeline>
<codeline lineno="268"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.max<sp/>=<sp/>SIZE_MAX,<sp/>\</highlight></codeline>
<codeline lineno="269"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test.fn<sp/>=<sp/>npf_size_inbounds,<sp/>\</highlight></codeline>
<codeline lineno="270"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="group__npf__basic__cond_1gacd56b9bcf2b2ba4759402650a9bff67a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NPF_SIZE_MAX(_name,<sp/>_size)<sp/>\</highlight></codeline>
<codeline lineno="279"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>npf_test_size_bounds<sp/>_name<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.min<sp/>=<sp/>0,<sp/>\</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.max<sp/>=<sp/>(_size),<sp/>\</highlight></codeline>
<codeline lineno="282"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test.fn<sp/>=<sp/>npf_size_inbounds,<sp/>\</highlight></codeline>
<codeline lineno="283"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="group__npf__basic__cond_1gab402bb13c7899d57532d3dcf8a36ed4b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NPF_SIZE_BOUNDS(_name,<sp/>_min_size,<sp/>_max_size)<sp/>\</highlight></codeline>
<codeline lineno="293"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>npf_test_size_bounds<sp/>_name<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="294"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.min<sp/>=<sp/>(_min_size),<sp/>\</highlight></codeline>
<codeline lineno="295"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.max<sp/>=<sp/>(_max_size),<sp/>\</highlight></codeline>
<codeline lineno="296"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test.fn<sp/>=<sp/>npf_size_inbounds,<sp/>\</highlight></codeline>
<codeline lineno="297"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">npf_test_eth_addr<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnpf__test" kindref="compound">npf_test</ref><sp/>test;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_addresses;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">net_eth_addr<sp/>*addresses;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">net_eth_addr<sp/>mask;</highlight></codeline>
<codeline lineno="314"><highlight class="normal">};</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>npf_test_fn_t<sp/>npf_eth_src_addr_match;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>npf_test_fn_t<sp/>npf_eth_src_addr_unmatch;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>npf_test_fn_t<sp/>npf_eth_dst_addr_match;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>npf_test_fn_t<sp/>npf_eth_dst_addr_unmatch;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="group__npf__eth__cond_1gad2141ad8d6639c9b92569d55130ca1b1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NPF_ETH_SRC_ADDR_MATCH(_name,<sp/>_addr_array)<sp/>\</highlight></codeline>
<codeline lineno="333"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>npf_test_eth_addr<sp/>_name<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="334"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.addresses<sp/>=<sp/>(_addr_array),<sp/>\</highlight></codeline>
<codeline lineno="335"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.nb_addresses<sp/>=<sp/>ARRAY_SIZE(_addr_array),<sp/>\</highlight></codeline>
<codeline lineno="336"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test.fn<sp/>=<sp/>npf_eth_src_addr_match,<sp/>\</highlight></codeline>
<codeline lineno="337"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.mask.addr<sp/>=<sp/>{<sp/>0xff,<sp/>0xff,<sp/>0xff,<sp/>0xff,<sp/>0xff,<sp/>0xff<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="338"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="349" refid="group__npf__eth__cond_1ga228eaa3784f663d8f2e2711e26409043" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NPF_ETH_SRC_ADDR_UNMATCH(_name,<sp/>_addr_array)<sp/>\</highlight></codeline>
<codeline lineno="350"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>npf_test_eth_addr<sp/>_name<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="351"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.addresses<sp/>=<sp/>(_addr_array),<sp/>\</highlight></codeline>
<codeline lineno="352"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.nb_addresses<sp/>=<sp/>ARRAY_SIZE(_addr_array),<sp/>\</highlight></codeline>
<codeline lineno="353"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test.fn<sp/>=<sp/>npf_eth_src_addr_unmatch,<sp/>\</highlight></codeline>
<codeline lineno="354"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.mask.addr<sp/>=<sp/>{<sp/>0xff,<sp/>0xff,<sp/>0xff,<sp/>0xff,<sp/>0xff,<sp/>0xff<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="355"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="366" refid="group__npf__eth__cond_1ga3d22d687bcd56b7727c51c7bc7f36cac" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NPF_ETH_DST_ADDR_MATCH(_name,<sp/>_addr_array)<sp/>\</highlight></codeline>
<codeline lineno="367"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>npf_test_eth_addr<sp/>_name<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="368"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.addresses<sp/>=<sp/>(_addr_array),<sp/>\</highlight></codeline>
<codeline lineno="369"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.nb_addresses<sp/>=<sp/>ARRAY_SIZE(_addr_array),<sp/>\</highlight></codeline>
<codeline lineno="370"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test.fn<sp/>=<sp/>npf_eth_dst_addr_match,<sp/>\</highlight></codeline>
<codeline lineno="371"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.mask.addr<sp/>=<sp/>{<sp/>0xff,<sp/>0xff,<sp/>0xff,<sp/>0xff,<sp/>0xff,<sp/>0xff<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="372"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="383" refid="group__npf__eth__cond_1ga3b8a8a22eb992c0e02223f70723c3641" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NPF_ETH_DST_ADDR_UNMATCH(_name,<sp/>_addr_array)<sp/>\</highlight></codeline>
<codeline lineno="384"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>npf_test_eth_addr<sp/>_name<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="385"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.addresses<sp/>=<sp/>(_addr_array),<sp/>\</highlight></codeline>
<codeline lineno="386"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.nb_addresses<sp/>=<sp/>ARRAY_SIZE(_addr_array),<sp/>\</highlight></codeline>
<codeline lineno="387"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test.fn<sp/>=<sp/>npf_eth_dst_addr_unmatch,<sp/>\</highlight></codeline>
<codeline lineno="388"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.mask.addr<sp/>=<sp/>{<sp/>0xff,<sp/>0xff,<sp/>0xff,<sp/>0xff,<sp/>0xff,<sp/>0xff<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="389"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="401" refid="group__npf__eth__cond_1ga0e06ebc4c9a1a960651be1ba89eeb2fd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NPF_ETH_SRC_ADDR_MASK_MATCH(_name,<sp/>_addr_array,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="402"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>npf_test_eth_addr<sp/>_name<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="403"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.addresses<sp/>=<sp/>(_addr_array),<sp/>\</highlight></codeline>
<codeline lineno="404"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.nb_addresses<sp/>=<sp/>ARRAY_SIZE(_addr_array),<sp/>\</highlight></codeline>
<codeline lineno="405"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.mask.addr<sp/>=<sp/>{<sp/>__VA_ARGS__<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="406"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test.fn<sp/>=<sp/>npf_eth_src_addr_match,<sp/>\</highlight></codeline>
<codeline lineno="407"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="group__npf__eth__cond_1ga7cf793af7b91eccc6e675ff19ed59a14" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NPF_ETH_DST_ADDR_MASK_MATCH(_name,<sp/>_addr_array,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="420"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>npf_test_eth_addr<sp/>_name<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="421"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.addresses<sp/>=<sp/>(_addr_array),<sp/>\</highlight></codeline>
<codeline lineno="422"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.nb_addresses<sp/>=<sp/>ARRAY_SIZE(_addr_array),<sp/>\</highlight></codeline>
<codeline lineno="423"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.mask.addr<sp/>=<sp/>{<sp/>__VA_ARGS__<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="424"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test.fn<sp/>=<sp/>npf_eth_dst_addr_match,<sp/>\</highlight></codeline>
<codeline lineno="425"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">npf_test_eth_type<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnpf__test" kindref="compound">npf_test</ref><sp/>test;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>type;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>type<sp/>in<sp/>network<sp/>order<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal">};</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>npf_test_fn_t<sp/>npf_eth_type_match;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>npf_test_fn_t<sp/>npf_eth_type_unmatch;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="445" refid="group__npf__eth__cond_1gace7de72d4c64e128a825f28f94d8b1b2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NPF_ETH_TYPE_MATCH(_name,<sp/>_type)<sp/>\</highlight></codeline>
<codeline lineno="446"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>npf_test_eth_type<sp/>_name<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="447"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/>htons(_type),<sp/>\</highlight></codeline>
<codeline lineno="448"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test.fn<sp/>=<sp/>npf_eth_type_match,<sp/>\</highlight></codeline>
<codeline lineno="449"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="457" refid="group__npf__eth__cond_1gab9bf6d58433e273220c5fab76f608545" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NPF_ETH_TYPE_UNMATCH(_name,<sp/>_type)<sp/>\</highlight></codeline>
<codeline lineno="458"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>npf_test_eth_type<sp/>_name<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="459"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/>htons(_type),<sp/>\</highlight></codeline>
<codeline lineno="460"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test.fn<sp/>=<sp/>npf_eth_type_unmatch,<sp/>\</highlight></codeline>
<codeline lineno="461"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_NET_PKT_FILTER_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/net/net_pkt_filter.h"/>
  </compounddef>
</doxygen>
