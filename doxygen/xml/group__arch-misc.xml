<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__arch-misc" kind="group">
    <compoundname>arch-misc</compoundname>
    <title>Miscellaneous architecture APIs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__arch-misc_1ga6860efc93b8ba35911cfb0afbe372623" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arch_printk_char_out</definition>
        <argsstring>(int c)</argsstring>
        <name>arch_printk_char_out</name>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Early boot console output hook</para>
<para>Definition of this function is optional. If implemented, any invocation of <ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk()</ref> (or logging calls with CONFIG_LOG_MODE_MINIMAL which are backed by printk) will default to sending characters to this function. It is useful for early boot debugging before main serial or console drivers come up.</para>
<para>This can be overridden at runtime with __printk_hook_install().</para>
<para>The default __weak implementation of this does nothing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Character to print </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The character printed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kernel/include/kernel_arch_interface.h" line="550" column="5" declfile="kernel/include/kernel_arch_interface.h" declline="550" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-misc_1ga62cc65268b396d2683e47c09c9b62af5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void arch_kernel_init</definition>
        <argsstring>(void)</argsstring>
        <name>arch_kernel_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Architecture-specific kernel initialization hook</para>
<para>This function is invoked near the top of _Cstart, for additional architecture-specific setup before the rest of the kernel is brought up.</para>
<para>TODO: Deprecate, most arches are using a prep_c() function to do the same thing in a simpler way </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kernel/include/kernel_arch_interface.h" line="561" column="20" declfile="kernel/include/kernel_arch_interface.h" declline="561" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-misc_1gabb087b9e158824121212d65646ae4154" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void arch_nop</definition>
        <argsstring>(void)</argsstring>
        <name>arch_nop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Do nothing and return. Yawn. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kernel/include/kernel_arch_interface.h" line="564" column="20" declfile="kernel/include/kernel_arch_interface.h" declline="564" declcolumn="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
