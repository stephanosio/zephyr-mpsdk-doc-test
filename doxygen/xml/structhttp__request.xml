<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structhttp__request" kind="struct" language="C++" prot="public">
    <compoundname>http_request</compoundname>
    <includes refid="http__client_8h" local="no">http_client.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structhttp__request_1abb86ccd0e0801c278ef37a78a4b7a958" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structhttp__client__internal__data" kindref="compound">http_client_internal_data</ref></type>
        <definition>struct http_client_internal_data http_request::internal</definition>
        <argsstring></argsstring>
        <name>internal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HTTP client request internal data </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/http_client.h" line="192" column="32" bodyfile="include/net/http_client.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhttp__request_1adbfcd3bcaf57205360bad957a13999e6" prot="public" static="no" mutable="no">
        <type>enum <ref refid="http__parser_8h_1aacd5f203e33ac338ca5cb8f02a3ff3b8" kindref="member">http_method</ref></type>
        <definition>enum http_method http_request::method</definition>
        <argsstring></argsstring>
        <name>method</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The HTTP method: GET, HEAD, OPTIONS, POST, ... </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/http_client.h" line="197" column="17" bodyfile="include/net/http_client.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhttp__request_1aba8bf528f3e279d55662eedc9168d25c" prot="public" static="no" mutable="no">
        <type><ref refid="group__http__client_1ga89d05f5fdc0d4fa3a7cea390c027f2f8" kindref="member">http_response_cb_t</ref></type>
        <definition>http_response_cb_t http_request::response</definition>
        <argsstring></argsstring>
        <name>response</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>User supplied callback function to call when response is received. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/http_client.h" line="202" column="20" bodyfile="include/net/http_client.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhttp__request_1afbe0c199a4a58029bf2d83a0b463639c" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structhttp__parser__settings" kindref="compound">http_parser_settings</ref> *</type>
        <definition>const struct http_parser_settings* http_request::http_cb</definition>
        <argsstring></argsstring>
        <name>http_cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>User supplied list of HTTP callback functions if the calling application wants to know the parsing status or the HTTP fields. This is optional and normally not needed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/http_client.h" line="208" column="33" bodyfile="include/net/http_client.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhttp__request_1abaabd58d149720720ffd61025d58e4a9" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
        <definition>uint8_t* http_request::recv_buf</definition>
        <argsstring></argsstring>
        <name>recv_buf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>User supplied buffer where received data is stored </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/http_client.h" line="211" column="9" bodyfile="include/net/http_client.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhttp__request_1a9da5216bbd27ad54fd11368897ed660f" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t http_request::recv_buf_len</definition>
        <argsstring></argsstring>
        <name>recv_buf_len</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Length of the user supplied receive buffer </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/http_client.h" line="214" column="8" bodyfile="include/net/http_client.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhttp__request_1a6a7573252e31fddb5cad5a6764c486c1" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* http_request::url</definition>
        <argsstring></argsstring>
        <name>url</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The URL for this request, for example: /index.html </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/http_client.h" line="217" column="12" bodyfile="include/net/http_client.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhttp__request_1a38cad3f92ed5b712f749851bbeed9a2f" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* http_request::protocol</definition>
        <argsstring></argsstring>
        <name>protocol</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The HTTP protocol, for example &quot;HTTP/1.1&quot; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/http_client.h" line="220" column="12" bodyfile="include/net/http_client.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhttp__request_1a2d2f8be2634eb89d0b877b989307ac7b" prot="public" static="no" mutable="no">
        <type>const char **</type>
        <definition>const char** http_request::header_fields</definition>
        <argsstring></argsstring>
        <name>header_fields</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The HTTP header fields (application specific) The Content-Type may be specified here or in the next field. Depending on your application, the Content-Type may vary, however some header fields may remain constant through the application&apos;s life cycle. This is a NULL terminated list of header fields. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/http_client.h" line="228" column="12" bodyfile="include/net/http_client.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhttp__request_1a1e610f06e9a8ec05cb0de382163a8c79" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* http_request::content_type_value</definition>
        <argsstring></argsstring>
        <name>content_type_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The value of the Content-Type header field, may be NULL </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/http_client.h" line="231" column="12" bodyfile="include/net/http_client.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhttp__request_1a3ed1146d59f33e9042fae421619df27c" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* http_request::host</definition>
        <argsstring></argsstring>
        <name>host</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hostname to be used in the request </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/http_client.h" line="234" column="12" bodyfile="include/net/http_client.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhttp__request_1abe9fdaab40cac6afb16acc2560dfe7e7" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* http_request::port</definition>
        <argsstring></argsstring>
        <name>port</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Port number to be used in the request </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/http_client.h" line="237" column="12" bodyfile="include/net/http_client.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhttp__request_1a15551f2e8c772479fb7acac20765fa12" prot="public" static="no" mutable="no">
        <type><ref refid="group__http__client_1ga303918010a594ce52e08dc9c9c66ba48" kindref="member">http_payload_cb_t</ref></type>
        <definition>http_payload_cb_t http_request::payload_cb</definition>
        <argsstring></argsstring>
        <name>payload_cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>User supplied callback function to call when payload needs to be sent. This can be NULL in which case the payload field in <ref refid="structhttp__request" kindref="compound">http_request</ref> is used. The idea of this payload callback is to allow user to send more data that is practical to store in allocated memory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/http_client.h" line="245" column="19" bodyfile="include/net/http_client.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhttp__request_1af201ae38024233307ed2c87684ea70d3" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* http_request::payload</definition>
        <argsstring></argsstring>
        <name>payload</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Payload, may be NULL </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/http_client.h" line="248" column="12" bodyfile="include/net/http_client.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhttp__request_1a589615592c6c14bdecc03553c395c12f" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t http_request::payload_len</definition>
        <argsstring></argsstring>
        <name>payload_len</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Payload length is used to calculate Content-Length. Set to 0 for chunked transfers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/http_client.h" line="253" column="8" bodyfile="include/net/http_client.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhttp__request_1ab6fe0ec09c24302279124043e82f17ff" prot="public" static="no" mutable="no">
        <type><ref refid="group__http__client_1gad34656b7c3e6c2e77016b0613f1b4661" kindref="member">http_header_cb_t</ref></type>
        <definition>http_header_cb_t http_request::optional_headers_cb</definition>
        <argsstring></argsstring>
        <name>optional_headers_cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>User supplied callback function to call when optional headers need to be sent. This can be NULL, in which case the optional_headers field in <ref refid="structhttp__request" kindref="compound">http_request</ref> is used. The idea of this optional_headers callback is to allow user to send more HTTP header data that is practical to store in allocated memory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/http_client.h" line="261" column="18" bodyfile="include/net/http_client.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhttp__request_1aa29c2bcb70011c9776c959667e10bcf5" prot="public" static="no" mutable="no">
        <type>const char **</type>
        <definition>const char** http_request::optional_headers</definition>
        <argsstring></argsstring>
        <name>optional_headers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A NULL terminated list of any optional headers that should be added to the HTTP request. May be NULL. If the optional_headers_cb is specified, then this field is ignored. Note that there are two similar fields that contain headers, the header_fields above and this optional_headers. This is done like this to support Websocket use case where Websocket will use header_fields variable and any optional application specific headers will be placed into this field. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/http_client.h" line="272" column="12" bodyfile="include/net/http_client.h" bodystart="272" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>HTTP client request. This contains all the data that is needed when doing a HTTP request. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="11">
        <label>__thread_entry</label>
      </node>
      <node id="9">
        <label>_callee_saved</label>
      </node>
      <node id="13">
        <label>_mem_domain_info</label>
      </node>
      <node id="19">
        <label>_slist</label>
      </node>
      <node id="5">
        <label>_snode</label>
      </node>
      <node id="18">
        <label>_thread_arch</label>
      </node>
      <node id="8">
        <label>_thread_base</label>
      </node>
      <node id="12">
        <label>_thread_stack_info</label>
      </node>
      <node id="20">
        <label>_timeout</label>
      </node>
      <node id="10">
        <label>_wait_q_t</label>
      </node>
      <node id="2">
        <label>http_client_internal_data</label>
        <link refid="structhttp__client__internal__data"/>
        <childnode refid="3" relation="usage">
          <edgelabel>work</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>parser</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>parser_settings</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>response</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>timeout</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>http_parser</label>
        <link refid="structhttp__parser"/>
        <childnode refid="22" relation="usage">
          <edgelabel>addr</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>http_parser_settings</label>
        <link refid="structhttp__parser__settings"/>
        <childnode refid="21" relation="usage">
          <edgelabel>on_body</edgelabel>
          <edgelabel>on_chunk_complete</edgelabel>
          <edgelabel>on_chunk_header</edgelabel>
          <edgelabel>on_header_field</edgelabel>
          <edgelabel>on_header_value</edgelabel>
          <edgelabel>on_headers_complete</edgelabel>
          <edgelabel>on_message_begin</edgelabel>
          <edgelabel>on_message_complete</edgelabel>
          <edgelabel>on_status</edgelabel>
          <edgelabel>on_url</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>http_request</label>
        <link refid="structhttp__request"/>
        <childnode refid="2" relation="usage">
          <edgelabel>internal</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>response</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>http_cb</edgelabel>
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>optional_headers_cb</edgelabel>
          <edgelabel>payload_cb</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>http_response</label>
        <link refid="structhttp__response"/>
        <childnode refid="23" relation="usage">
          <edgelabel>http_cb</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>cb</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>k_heap</label>
        <link refid="structk__heap"/>
        <childnode refid="16" relation="usage">
          <edgelabel>heap</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>wait_q</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>lock</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>k_spinlock</label>
        <link refid="structk__spinlock"/>
      </node>
      <node id="7">
        <label>k_thread</label>
        <link refid="structk__thread"/>
        <childnode refid="8" relation="usage">
          <edgelabel>base</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>callee_saved</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>join_queue</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>entry</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>next_thread</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>stack_info</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>mem_domain_info</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>stack_obj</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>resource_pool</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>arch</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>k_timeout_t</label>
        <link refid="structk__timeout__t"/>
      </node>
      <node id="4">
        <label>k_work</label>
        <link refid="structk__work"/>
        <childnode refid="5" relation="usage">
          <edgelabel>node</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>handler</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>queue</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>k_work_delayable</label>
        <link refid="structk__work__delayable"/>
        <childnode refid="4" relation="usage">
          <edgelabel>work</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>timeout</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>queue</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>k_work_q</label>
        <link refid="structk__work__q"/>
        <childnode refid="7" relation="usage">
          <edgelabel>thread</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>pending</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>drainq</edgelabel>
          <edgelabel>notifyq</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>sockaddr</label>
        <link refid="structsockaddr"/>
      </node>
      <node id="16">
        <label>sys_heap</label>
        <link refid="structsys__heap"/>
      </node>
      <node id="14">
        <label>z_thread_stack_element</label>
      </node>
    </collaborationgraph>
    <location file="include/net/http_client.h" line="190" column="1" bodyfile="include/net/http_client.h" bodystart="190" bodyend="273"/>
    <listofallmembers>
      <member refid="structhttp__request_1a1e610f06e9a8ec05cb0de382163a8c79" prot="public" virt="non-virtual"><scope>http_request</scope><name>content_type_value</name></member>
      <member refid="structhttp__request_1a2d2f8be2634eb89d0b877b989307ac7b" prot="public" virt="non-virtual"><scope>http_request</scope><name>header_fields</name></member>
      <member refid="structhttp__request_1a3ed1146d59f33e9042fae421619df27c" prot="public" virt="non-virtual"><scope>http_request</scope><name>host</name></member>
      <member refid="structhttp__request_1afbe0c199a4a58029bf2d83a0b463639c" prot="public" virt="non-virtual"><scope>http_request</scope><name>http_cb</name></member>
      <member refid="structhttp__request_1abb86ccd0e0801c278ef37a78a4b7a958" prot="public" virt="non-virtual"><scope>http_request</scope><name>internal</name></member>
      <member refid="structhttp__request_1adbfcd3bcaf57205360bad957a13999e6" prot="public" virt="non-virtual"><scope>http_request</scope><name>method</name></member>
      <member refid="structhttp__request_1aa29c2bcb70011c9776c959667e10bcf5" prot="public" virt="non-virtual"><scope>http_request</scope><name>optional_headers</name></member>
      <member refid="structhttp__request_1ab6fe0ec09c24302279124043e82f17ff" prot="public" virt="non-virtual"><scope>http_request</scope><name>optional_headers_cb</name></member>
      <member refid="structhttp__request_1af201ae38024233307ed2c87684ea70d3" prot="public" virt="non-virtual"><scope>http_request</scope><name>payload</name></member>
      <member refid="structhttp__request_1a15551f2e8c772479fb7acac20765fa12" prot="public" virt="non-virtual"><scope>http_request</scope><name>payload_cb</name></member>
      <member refid="structhttp__request_1a589615592c6c14bdecc03553c395c12f" prot="public" virt="non-virtual"><scope>http_request</scope><name>payload_len</name></member>
      <member refid="structhttp__request_1abe9fdaab40cac6afb16acc2560dfe7e7" prot="public" virt="non-virtual"><scope>http_request</scope><name>port</name></member>
      <member refid="structhttp__request_1a38cad3f92ed5b712f749851bbeed9a2f" prot="public" virt="non-virtual"><scope>http_request</scope><name>protocol</name></member>
      <member refid="structhttp__request_1abaabd58d149720720ffd61025d58e4a9" prot="public" virt="non-virtual"><scope>http_request</scope><name>recv_buf</name></member>
      <member refid="structhttp__request_1a9da5216bbd27ad54fd11368897ed660f" prot="public" virt="non-virtual"><scope>http_request</scope><name>recv_buf_len</name></member>
      <member refid="structhttp__request_1aba8bf528f3e279d55662eedc9168d25c" prot="public" virt="non-virtual"><scope>http_request</scope><name>response</name></member>
      <member refid="structhttp__request_1a6a7573252e31fddb5cad5a6764c486c1" prot="public" virt="non-virtual"><scope>http_request</scope><name>url</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
