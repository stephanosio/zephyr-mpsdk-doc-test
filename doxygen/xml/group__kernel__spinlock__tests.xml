<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__kernel__spinlock__tests" kind="group">
    <compoundname>kernel_spinlock_tests</compoundname>
    <title>Spinlock Tests</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__kernel__spinlock__tests_1ga697ebb08bc8d9d10650f37802e166ef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_spinlock_basic</definition>
        <argsstring>(void)</argsstring>
        <name>test_spinlock_basic</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test basic spinlock. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__spinlock__apis_1gaac60da4347f5b29ff8c4e5f24c99b3bf" kindref="member">k_spin_lock()</ref>, <ref refid="group__spinlock__apis_1gaa54fc60d17d1033276aed4605671ed8e" kindref="member">k_spin_unlock()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/spinlock/src/main.c" line="41" column="6" bodyfile="tests/kernel/spinlock/src/main.c" bodystart="41" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__spinlock__tests_1gab7641d859ff374fc4f53ebba57b33b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_spinlock_bounce</definition>
        <argsstring>(void)</argsstring>
        <name>test_spinlock_bounce</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test spinlock with bounce. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__arch-smp_1gad25e65419116c6bb3e6d6362e780fb83" kindref="member">arch_start_cpu()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/spinlock/src/main.c" line="115" column="6" bodyfile="tests/kernel/spinlock/src/main.c" bodystart="115" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__spinlock__tests_1ga9b364f35317493ffcaf41490029b8e07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_spinlock_mutual_exclusion</definition>
        <argsstring>(void)</argsstring>
        <name>test_spinlock_mutual_exclusion</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test basic mutual exclusion using interrupt masking. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Spinlocks can be initialized at run-time.</para>
</listitem><listitem><para>Spinlocks in uniprocessor context should achieve mutual exclusion using interrupt masking.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__spinlock__apis_1gaac60da4347f5b29ff8c4e5f24c99b3bf" kindref="member">k_spin_lock()</ref>, <ref refid="group__spinlock__apis_1gaa54fc60d17d1033276aed4605671ed8e" kindref="member">k_spin_unlock()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/spinlock/src/main.c" line="144" column="6" bodyfile="tests/kernel/spinlock/src/main.c" bodystart="144" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__spinlock__tests_1ga3d916484a3e51c22207951c5cabcb10a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_spinlock_no_recursive</definition>
        <argsstring>(void)</argsstring>
        <name>test_spinlock_no_recursive</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test spinlock cannot be recursive. </para>
        </briefdescription>
        <detaileddescription>
<para>Validate using spinlock recursive will trigger assertion.</para>
<para><simplesect kind="see"><para><ref refid="group__spinlock__apis_1gaac60da4347f5b29ff8c4e5f24c99b3bf" kindref="member">k_spin_lock()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/spinlock/src/spinlock_error_case.c" line="73" column="6" bodyfile="tests/kernel/spinlock/src/spinlock_error_case.c" bodystart="73" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__spinlock__tests_1ga6b6ba9513a583bcb432f6474759eadcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_spinlock_unlock_error</definition>
        <argsstring>(void)</argsstring>
        <name>test_spinlock_unlock_error</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test unlocking incorrect spinlock. </para>
        </briefdescription>
        <detaileddescription>
<para>Validate unlocking incorrect spinlock will trigger assertion.</para>
<para><simplesect kind="see"><para><ref refid="group__spinlock__apis_1gaa54fc60d17d1033276aed4605671ed8e" kindref="member">k_spin_unlock()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/spinlock/src/spinlock_error_case.c" line="94" column="6" bodyfile="tests/kernel/spinlock/src/spinlock_error_case.c" bodystart="94" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__spinlock__tests_1gad1781ff4fa3122b7f552baf9519b8fda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_spinlock_release_error</definition>
        <argsstring>(void)</argsstring>
        <name>test_spinlock_release_error</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test unlocking incorrect spinlock. </para>
        </briefdescription>
        <detaileddescription>
<para>Validate unlocking incorrect spinlock will trigger assertion.</para>
<para><simplesect kind="see"><para><ref refid="group__spinlock__apis_1ga0380368fc016ee2a757ad02e1b6804b0" kindref="member">k_spin_release()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/spinlock/src/spinlock_error_case.c" line="113" column="6" bodyfile="tests/kernel/spinlock/src/spinlock_error_case.c" bodystart="113" bodyend="121"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Tests for spinlock. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
