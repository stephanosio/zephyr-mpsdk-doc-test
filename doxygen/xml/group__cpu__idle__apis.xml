<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__cpu__idle__apis" kind="group">
    <compoundname>cpu_idle_apis</compoundname>
    <title>CPU Idling APIs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__cpu__idle__apis_1ga7b25e1bed511a813b32fbd0f91b09356" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void k_cpu_idle</definition>
        <argsstring>(void)</argsstring>
        <name>k_cpu_idle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Make the CPU idle. </para>
        </briefdescription>
        <detaileddescription>
<para>This function makes the CPU idle until an event wakes it up.</para>
<para>In a regular system, the idle thread should be the only thread responsible for making the CPU idle and triggering any type of power management. However, in some more constrained systems, such as a single-threaded system, the only thread would be responsible for this if needed.</para>
<para><simplesect kind="note"><para>In some architectures, before returning, the function unmasks interrupts unconditionally. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5620" column="20" bodyfile="include/kernel.h" bodystart="5620" bodyend="5623"/>
      </memberdef>
      <memberdef kind="function" id="group__cpu__idle__apis_1gadf88ece6447b65b7d0d2f3a70ab4fe8f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void k_cpu_atomic_idle</definition>
        <argsstring>(unsigned int key)</argsstring>
        <name>k_cpu_atomic_idle</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Make the CPU idle in an atomic fashion. </para>
        </briefdescription>
        <detaileddescription>
<para>Similar to <ref refid="group__cpu__idle__apis_1ga7b25e1bed511a813b32fbd0f91b09356" kindref="member">k_cpu_idle()</ref>, but must be called with interrupts locked.</para>
<para>Enabling interrupts and entering a low-power mode will be atomic, i.e. there will be no period of time where interrupts are enabled before the processor enters a low-power mode.</para>
<para>After waking up from the low-power mode, the interrupt lockout state will be restored as if by <ref refid="group__isr__apis_1ga646045943b3b2a130738bcc48867bf57" kindref="member">irq_unlock(key)</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt locking key obtained from <ref refid="group__isr__apis_1ga19fdde73c3b02fcca6cf1d1e67631228" kindref="member">irq_lock()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5639" column="20" bodyfile="include/kernel.h" bodystart="5639" bodyend="5642"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
