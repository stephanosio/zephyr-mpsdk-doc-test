<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="x86_2arch_8h" kind="file" language="C++">
    <compoundname>arch.h</compoundname>
    <includes refid="devicetree_8h" local="no">devicetree.h</includes>
    <includes refid="sys_2sys__io_8h" local="no">sys/sys_io.h</includes>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes local="no">stddef.h</includes>
    <includes refid="stdbool_8h" local="no">stdbool.h</includes>
    <includes local="no">irq.h</includes>
    <includes refid="mmustructs_8h" local="no">arch/x86/mmustructs.h</includes>
    <includes refid="arch_2x86_2thread__stack_8h" local="no">arch/x86/thread_stack.h</includes>
    <includes refid="sections_8h" local="no">linker/sections.h</includes>
    <includes refid="sysapic_8h" local="no">drivers/interrupt_controller/sysapic.h</includes>
    <includes refid="x86_2ia32_2arch_8h" local="no">arch/x86/ia32/arch.h</includes>
    <includes refid="ffs_8h" local="no">arch/common/ffs.h</includes>
    <incdepgraph>
      <node id="59">
        <label>arch/common/addr_types.h</label>
        <link refid="addr__types_8h"/>
      </node>
      <node id="55">
        <label>arch/common/ffs.h</label>
        <link refid="ffs_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>arch/structs.h</label>
        <link refid="structs_8h"/>
      </node>
      <node id="1">
        <label>include/arch/x86/arch.h</label>
        <link refid="x86_2arch_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>arch/x86/ia32/arch.h</label>
        <link refid="x86_2ia32_2arch_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>arch/x86/ia32/gdbstub.h</label>
        <link refid="arch_2x86_2ia32_2gdbstub_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>arch/x86/ia32/segmentation.h</label>
        <link refid="segmentation_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>sys_io.h</label>
        <link refid="arch_2x86_2ia32_2sys__io_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>arch/x86/ia32/syscall.h</label>
        <link refid="arch_2x86_2ia32_2syscall_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>arch/x86/ia32/thread.h</label>
        <link refid="arch_2x86_2ia32_2thread_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>arch/x86/mmustructs.h</label>
        <link refid="mmustructs_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>arch/x86/msr.h</label>
        <link refid="msr_8h"/>
      </node>
      <node id="28">
        <label>arch/x86/thread_stack.h</label>
        <link refid="arch_2x86_2thread__stack_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>devicetree.h</label>
        <link refid="devicetree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>devicetree/clocks.h</label>
        <link refid="clocks_8h"/>
      </node>
      <node id="17">
        <label>devicetree/dma.h</label>
        <link refid="devicetree_2dma_8h"/>
      </node>
      <node id="19">
        <label>devicetree/fixed-partitions.h</label>
        <link refid="fixed-partitions_8h"/>
      </node>
      <node id="15">
        <label>devicetree/gpio.h</label>
        <link refid="devicetree_2gpio_8h"/>
      </node>
      <node id="13">
        <label>devicetree/io-channels.h</label>
        <link refid="io-channels_8h"/>
      </node>
      <node id="21">
        <label>devicetree/ordinals.h</label>
        <link refid="ordinals_8h"/>
      </node>
      <node id="22">
        <label>devicetree/pinctrl.h</label>
        <link refid="devicetree_2pinctrl_8h"/>
      </node>
      <node id="18">
        <label>devicetree/pwms.h</label>
        <link refid="pwms_8h"/>
      </node>
      <node id="16">
        <label>devicetree/spi.h</label>
        <link refid="devicetree_2spi_8h"/>
      </node>
      <node id="20">
        <label>devicetree/zephyr.h</label>
        <link refid="devicetree_2zephyr_8h"/>
      </node>
      <node id="33">
        <label>drivers/interrupt_controller/loapic.h</label>
        <link refid="loapic_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>drivers/interrupt_controller/sysapic.h</label>
        <link refid="sysapic_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>kernel/sched_priq.h</label>
        <link refid="sched__priq_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>kernel/stats.h</label>
        <link refid="kernel_2stats_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>kernel_structs.h</label>
        <link refid="kernel__structs_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>linker/section_tags.h</label>
        <link refid="section__tags_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>linker/sections.h</label>
        <link refid="sections_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>pm/pm.h</label>
        <link refid="pm_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>pm/state.h</label>
        <link refid="state_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="36">
        <label>sys/device_mmio.h</label>
        <link refid="device__mmio_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>sys/mem_manage.h</label>
        <link refid="mem__manage_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>sys/rb.h</label>
        <link refid="rb_8h"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>sys/sys_heap.h</label>
        <link refid="sys__heap_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>sys/sys_io.h</label>
        <link refid="sys_2sys__io_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="6">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="10">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="12">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="51">
        <label>alloca.h</label>
      </node>
      <node id="34">
        <label>arch/cpu.h</label>
      </node>
      <node id="4">
        <label>devicetree_fixups.h</label>
      </node>
      <node id="3">
        <label>devicetree_unfixed.h</label>
      </node>
      <node id="24">
        <label>irq.h</label>
      </node>
      <node id="41">
        <label>stdarg.h</label>
      </node>
      <node id="11">
        <label>stddef.h</label>
      </node>
      <node id="65">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="42">
        <label>syscalls/mem_manage.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="x86_2arch_8h_1a185a9d6bf53f3e815f6385c3f500f4fc" prot="public" static="no">
        <name>sys_bitfield_set_bit</name>
        <initializer><ref refid="x86_2arch_8h_1a04ab5115c17cc5ddfe2d788cb7bdcbbe" kindref="member">sys_set_bit</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="208" column="9" bodyfile="include/arch/x86/arch.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="x86_2arch_8h_1a7167fa52e3fb5416c93527fea091c446" prot="public" static="no">
        <name>sys_bitfield_clear_bit</name>
        <initializer><ref refid="x86_2arch_8h_1a3a7b18493a4a34f82c9409453277265d" kindref="member">sys_clear_bit</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="209" column="9" bodyfile="include/arch/x86/arch.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="x86_2arch_8h_1a6547612936cc24eae4ff0217ea654c4d" prot="public" static="no">
        <name>sys_bitfield_test_bit</name>
        <initializer><ref refid="x86_2arch_8h_1a43a2682b576dd69995dfdd203134f2a6" kindref="member">sys_test_bit</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="210" column="9" bodyfile="include/arch/x86/arch.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="x86_2arch_8h_1aa770dbc8057ea68ed43b5eac0db9b390" prot="public" static="no">
        <name>sys_bitfield_test_and_set_bit</name>
        <initializer><ref refid="x86_2arch_8h_1a036f93e32f1d1cc34cb2df3193650d48" kindref="member">sys_test_and_set_bit</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="211" column="9" bodyfile="include/arch/x86/arch.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="x86_2arch_8h_1ab27f26cae6ce9e528d078fd49b9b4952" prot="public" static="no">
        <name>sys_bitfield_test_and_clear_bit</name>
        <initializer><ref refid="x86_2arch_8h_1accf2bc65402198dda9d43ccd788163c6" kindref="member">sys_test_and_clear_bit</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="212" column="9" bodyfile="include/arch/x86/arch.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="x86_2arch_8h_1a203e02b994beba0d006dad9f6d797c27" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> void</type>
        <definition>static ALWAYS_INLINE void arch_irq_unlock</definition>
        <argsstring>(unsigned int key)</argsstring>
        <name>arch_irq_unlock</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="46" column="27" bodyfile="include/arch/x86/arch.h" bodystart="46" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1a4eb1822b6af401aef41646d01f900733" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> void</type>
        <definition>static ALWAYS_INLINE void sys_out8</definition>
        <argsstring>(uint8_t data, io_port_t port)</argsstring>
        <name>sys_out8</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="sys_2sys__io_8h_1a58c96361c27fa27c96d9dac998cbfa86" kindref="member">io_port_t</ref></type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="53" column="27" bodyfile="include/arch/x86/arch.h" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1a38e2ce31ef09cb5d903da6f0fbd7b174" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>static ALWAYS_INLINE uint8_t sys_in8</definition>
        <argsstring>(io_port_t port)</argsstring>
        <name>sys_in8</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1a58c96361c27fa27c96d9dac998cbfa86" kindref="member">io_port_t</ref></type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="58" column="30" bodyfile="include/arch/x86/arch.h" bodystart="58" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1a8700f40b9c9951083b9a729b7e50f47d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> void</type>
        <definition>static ALWAYS_INLINE void sys_out16</definition>
        <argsstring>(uint16_t data, io_port_t port)</argsstring>
        <name>sys_out16</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="sys_2sys__io_8h_1a58c96361c27fa27c96d9dac998cbfa86" kindref="member">io_port_t</ref></type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="67" column="27" bodyfile="include/arch/x86/arch.h" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1ab9823ccf71d78cbb0316e9c335081f6d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>static ALWAYS_INLINE uint16_t sys_in16</definition>
        <argsstring>(io_port_t port)</argsstring>
        <name>sys_in16</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1a58c96361c27fa27c96d9dac998cbfa86" kindref="member">io_port_t</ref></type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="72" column="31" bodyfile="include/arch/x86/arch.h" bodystart="72" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1ae60822b265f38b57b70a2925996aaa88" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> void</type>
        <definition>static ALWAYS_INLINE void sys_out32</definition>
        <argsstring>(uint32_t data, io_port_t port)</argsstring>
        <name>sys_out32</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="sys_2sys__io_8h_1a58c96361c27fa27c96d9dac998cbfa86" kindref="member">io_port_t</ref></type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="81" column="27" bodyfile="include/arch/x86/arch.h" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1af89948c04bd432f5fa14319f29d06968" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> <ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static ALWAYS_INLINE uint32_t sys_in32</definition>
        <argsstring>(io_port_t port)</argsstring>
        <name>sys_in32</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1a58c96361c27fa27c96d9dac998cbfa86" kindref="member">io_port_t</ref></type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="86" column="31" bodyfile="include/arch/x86/arch.h" bodystart="86" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1a3a565a29eb41eaf472034c9aaf49cc19" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> void</type>
        <definition>static ALWAYS_INLINE void sys_write8</definition>
        <argsstring>(uint8_t data, mm_reg_t addr)</argsstring>
        <name>sys_write8</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="95" column="27" bodyfile="include/arch/x86/arch.h" bodystart="95" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1ae0bbb10d24303e1d8505cbf373a1bcfb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>static ALWAYS_INLINE uint8_t sys_read8</definition>
        <argsstring>(mm_reg_t addr)</argsstring>
        <name>sys_read8</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="103" column="30" bodyfile="include/arch/x86/arch.h" bodystart="103" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1abacfedeea46690ae169b9636a94cfa5a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> void</type>
        <definition>static ALWAYS_INLINE void sys_write16</definition>
        <argsstring>(uint16_t data, mm_reg_t addr)</argsstring>
        <name>sys_write16</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="115" column="27" bodyfile="include/arch/x86/arch.h" bodystart="115" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1ab64ad3252d531096bc6ee1e1282d7e72" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>static ALWAYS_INLINE uint16_t sys_read16</definition>
        <argsstring>(mm_reg_t addr)</argsstring>
        <name>sys_read16</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="123" column="31" bodyfile="include/arch/x86/arch.h" bodystart="123" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1ae9b07f6441d8496a44a189b88cf061c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> void</type>
        <definition>static ALWAYS_INLINE void sys_write32</definition>
        <argsstring>(uint32_t data, mm_reg_t addr)</argsstring>
        <name>sys_write32</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="135" column="27" bodyfile="include/arch/x86/arch.h" bodystart="135" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1a63b36c1442f805db4d1bc5a51a035c42" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> <ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static ALWAYS_INLINE uint32_t sys_read32</definition>
        <argsstring>(mm_reg_t addr)</argsstring>
        <name>sys_read32</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="143" column="31" bodyfile="include/arch/x86/arch.h" bodystart="143" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1a04ab5115c17cc5ddfe2d788cb7bdcbbe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> void</type>
        <definition>static ALWAYS_INLINE void sys_set_bit</definition>
        <argsstring>(mem_addr_t addr, unsigned int bit)</argsstring>
        <name>sys_set_bit</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="155" column="27" bodyfile="include/arch/x86/arch.h" bodystart="155" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1a3a7b18493a4a34f82c9409453277265d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> void</type>
        <definition>static ALWAYS_INLINE void sys_clear_bit</definition>
        <argsstring>(mem_addr_t addr, unsigned int bit)</argsstring>
        <name>sys_clear_bit</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="163" column="27" bodyfile="include/arch/x86/arch.h" bodystart="163" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1a43a2682b576dd69995dfdd203134f2a6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> int</type>
        <definition>static ALWAYS_INLINE int sys_test_bit</definition>
        <argsstring>(mem_addr_t addr, unsigned int bit)</argsstring>
        <name>sys_test_bit</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="170" column="26" bodyfile="include/arch/x86/arch.h" bodystart="170" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1a036f93e32f1d1cc34cb2df3193650d48" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> int</type>
        <definition>static ALWAYS_INLINE int sys_test_and_set_bit</definition>
        <argsstring>(mem_addr_t addr, unsigned int bit)</argsstring>
        <name>sys_test_and_set_bit</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="182" column="26" bodyfile="include/arch/x86/arch.h" bodystart="182" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1accf2bc65402198dda9d43ccd788163c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> int</type>
        <definition>static ALWAYS_INLINE int sys_test_and_clear_bit</definition>
        <argsstring>(mem_addr_t addr, unsigned int bit)</argsstring>
        <name>sys_test_and_clear_bit</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="195" column="26" bodyfile="include/arch/x86/arch.h" bodystart="195" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1aa278d630653b33cb339621d725ed295a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arch_irq_enable</definition>
        <argsstring>(unsigned int irq)</argsstring>
        <name>arch_irq_enable</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>irq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="247" column="13" declfile="include/arch/x86/arch.h" declline="247" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1a216d692e87bfba955a60f8e570e127df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arch_irq_disable</definition>
        <argsstring>(unsigned int irq)</argsstring>
        <name>arch_irq_disable</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>irq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="248" column="13" declfile="include/arch/x86/arch.h" declline="248" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1a42dcd1878309a82246dbfa26510f868a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t sys_clock_cycle_get_32</definition>
        <argsstring>(void)</argsstring>
        <name>sys_clock_cycle_get_32</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="250" column="17" declfile="include/arch/x86/arch.h" declline="250" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1ad9de4b80c686a0cef1275e79fa755281" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__pinned_func <ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static __pinned_func uint32_t arch_k_cycle_get_32</definition>
        <argsstring>(void)</argsstring>
        <name>arch_k_cycle_get_32</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="253" column="24" bodyfile="include/arch/x86/arch.h" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1a25328a181bd0229ef5110c15e8452fc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>uint64_t sys_clock_cycle_get_64</definition>
        <argsstring>(void)</argsstring>
        <name>sys_clock_cycle_get_64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="258" column="17" declfile="include/arch/x86/arch.h" declline="258" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1a5f1c7486a4a76135dcec432198238167" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__pinned_func <ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>static __pinned_func uint64_t arch_k_cycle_get_64</definition>
        <argsstring>(void)</argsstring>
        <name>arch_k_cycle_get_64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="261" column="24" bodyfile="include/arch/x86/arch.h" bodystart="261" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1adb441b26ed6818fea4ebba6b8853354b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> <ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static ALWAYS_INLINE bool arch_irq_unlocked</definition>
        <argsstring>(unsigned int key)</argsstring>
        <name>arch_irq_unlocked</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="266" column="27" bodyfile="include/arch/x86/arch.h" bodystart="266" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="x86_2arch_8h_1a0af98dc5138e02248173c30b8f07210f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> void</type>
        <definition>static ALWAYS_INLINE void arch_nop</definition>
        <argsstring>(void)</argsstring>
        <name>arch_nop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/x86/arch.h" line="333" column="27" bodyfile="include/arch/x86/arch.h" bodystart="333" bodyend="336"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>Intel<sp/>Corp.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_ARCH_X86_ARCH_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_ARCH_X86_ARCH_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="devicetree_8h" kindref="compound">devicetree.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Changing<sp/>this<sp/>value<sp/>will<sp/>require<sp/>manual<sp/>changes<sp/>to<sp/>exception<sp/>and<sp/>IDT<sp/>setup</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>in<sp/>locore.S<sp/>for<sp/>intel64</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_X86_OOPS_VECTOR<sp/><sp/><sp/><sp/><sp/><sp/><sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(_ASMLANGUAGE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="sys_2sys__io_8h" kindref="compound">sys/sys_io.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdbool_8h" kindref="compound">stdbool.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;irq.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="mmustructs_8h" kindref="compound">arch/x86/mmustructs.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="arch_2x86_2thread__stack_8h" kindref="compound">arch/x86/thread_stack.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="sections_8h" kindref="compound">linker/sections.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_PCIE_MSI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">x86_msi_vector<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>irq;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>vector;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_INTEL_VTD_ICTL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>remap;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>irte;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">x86_msi_vector<sp/>arch_msi_vector_t;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_PCIE_MSI<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="x86_2arch_8h_1a203e02b994beba0d006dad9f6d797c27" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="x86_2arch_8h_1a203e02b994beba0d006dad9f6d797c27" kindref="member">arch_irq_unlock</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref><sp/>&amp;<sp/>0x00000200U)<sp/>!=<sp/>0U)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>&apos;IF&apos;<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;sti&quot;</highlight><highlight class="normal"><sp/>:::<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="x86_2arch_8h_1a4eb1822b6af401aef41646d01f900733" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="x86_2arch_8h_1a4eb1822b6af401aef41646d01f900733" kindref="member">sys_out8</ref>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/><ref refid="sys_2sys__io_8h_1a58c96361c27fa27c96d9dac998cbfa86" kindref="member">io_port_t</ref><sp/>port)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;outb<sp/>%b0,<sp/>%w1&quot;</highlight><highlight class="normal"><sp/>::<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">(<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>),<sp/></highlight><highlight class="stringliteral">&quot;Nd&quot;</highlight><highlight class="normal">(port));</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="x86_2arch_8h_1a38e2ce31ef09cb5d903da6f0fbd7b174" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="x86_2arch_8h_1a38e2ce31ef09cb5d903da6f0fbd7b174" kindref="member">sys_in8</ref>(<ref refid="sys_2sys__io_8h_1a58c96361c27fa27c96d9dac998cbfa86" kindref="member">io_port_t</ref><sp/>port)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;inb<sp/>%w1,<sp/>%b0&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=a&quot;</highlight><highlight class="normal">(<ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Nd&quot;</highlight><highlight class="normal">(port));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="x86_2arch_8h_1a8700f40b9c9951083b9a729b7e50f47d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="x86_2arch_8h_1a8700f40b9c9951083b9a729b7e50f47d" kindref="member">sys_out16</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/><ref refid="sys_2sys__io_8h_1a58c96361c27fa27c96d9dac998cbfa86" kindref="member">io_port_t</ref><sp/>port)</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;outw<sp/>%w0,<sp/>%w1&quot;</highlight><highlight class="normal"><sp/>::<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">(<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>),<sp/></highlight><highlight class="stringliteral">&quot;Nd&quot;</highlight><highlight class="normal">(port));</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="x86_2arch_8h_1ab9823ccf71d78cbb0316e9c335081f6d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="x86_2arch_8h_1ab9823ccf71d78cbb0316e9c335081f6d" kindref="member">sys_in16</ref>(<ref refid="sys_2sys__io_8h_1a58c96361c27fa27c96d9dac998cbfa86" kindref="member">io_port_t</ref><sp/>port)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;inw<sp/>%w1,<sp/>%w0&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=a&quot;</highlight><highlight class="normal">(<ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Nd&quot;</highlight><highlight class="normal">(port));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="x86_2arch_8h_1ae60822b265f38b57b70a2925996aaa88" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="x86_2arch_8h_1ae60822b265f38b57b70a2925996aaa88" kindref="member">sys_out32</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/><ref refid="sys_2sys__io_8h_1a58c96361c27fa27c96d9dac998cbfa86" kindref="member">io_port_t</ref><sp/>port)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;outl<sp/>%0,<sp/>%w1&quot;</highlight><highlight class="normal"><sp/>::<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">(<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>),<sp/></highlight><highlight class="stringliteral">&quot;Nd&quot;</highlight><highlight class="normal">(port));</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="x86_2arch_8h_1af89948c04bd432f5fa14319f29d06968" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="x86_2arch_8h_1af89948c04bd432f5fa14319f29d06968" kindref="member">sys_in32</ref>(<ref refid="sys_2sys__io_8h_1a58c96361c27fa27c96d9dac998cbfa86" kindref="member">io_port_t</ref><sp/>port)</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;inl<sp/>%w1,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=a&quot;</highlight><highlight class="normal">(<ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Nd&quot;</highlight><highlight class="normal">(port));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="x86_2arch_8h_1a3a565a29eb41eaf472034c9aaf49cc19" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="x86_2arch_8h_1a3a565a29eb41eaf472034c9aaf49cc19" kindref="member">sys_write8</ref>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/><ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref><sp/>addr)</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;movb<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;q&quot;</highlight><highlight class="normal">(<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>),<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal"><sp/>(*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*)(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>)<sp/>addr)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="x86_2arch_8h_1ae0bbb10d24303e1d8505cbf373a1bcfb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="x86_2arch_8h_1ae0bbb10d24303e1d8505cbf373a1bcfb" kindref="member">sys_read8</ref>(<ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref><sp/>addr)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;movb<sp/>%1,<sp/>%0&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=q&quot;</highlight><highlight class="normal">(<ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal"><sp/>(*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*)(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>)<sp/>addr)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="x86_2arch_8h_1abacfedeea46690ae169b9636a94cfa5a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="x86_2arch_8h_1abacfedeea46690ae169b9636a94cfa5a" kindref="member">sys_write16</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/><ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref><sp/>addr)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;movw<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>),<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal"><sp/>(*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*)(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>)<sp/>addr)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="x86_2arch_8h_1ab64ad3252d531096bc6ee1e1282d7e72" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="x86_2arch_8h_1ab64ad3252d531096bc6ee1e1282d7e72" kindref="member">sys_read16</ref>(<ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref><sp/>addr)</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;movw<sp/>%1,<sp/>%0&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(<ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal"><sp/>(*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*)(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>)<sp/>addr)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="x86_2arch_8h_1ae9b07f6441d8496a44a189b88cf061c6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="x86_2arch_8h_1ae9b07f6441d8496a44a189b88cf061c6" kindref="member">sys_write32</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/><ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref><sp/>addr)</highlight></codeline>
<codeline lineno="136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;movl<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>),<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal"><sp/>(*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*)(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>)<sp/>addr)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="x86_2arch_8h_1a63b36c1442f805db4d1bc5a51a035c42" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="x86_2arch_8h_1a63b36c1442f805db4d1bc5a51a035c42" kindref="member">sys_read32</ref>(<ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref><sp/>addr)</highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;movl<sp/>%1,<sp/>%0&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(<ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal"><sp/>(*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*)(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>)<sp/>addr)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="x86_2arch_8h_1a04ab5115c17cc5ddfe2d788cb7bdcbbe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="x86_2arch_8h_1a04ab5115c17cc5ddfe2d788cb7bdcbbe" kindref="member">sys_set_bit</ref>(<ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref><sp/>addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit)</highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;btsl<sp/>%1,<sp/>%0&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+m&quot;</highlight><highlight class="normal"><sp/>(*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*)<sp/>(addr))</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Ir&quot;</highlight><highlight class="normal"><sp/>(bit)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="x86_2arch_8h_1a3a7b18493a4a34f82c9409453277265d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="x86_2arch_8h_1a3a7b18493a4a34f82c9409453277265d" kindref="member">sys_clear_bit</ref>(<ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref><sp/>addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit)</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;btrl<sp/>%1,<sp/>%0&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+m&quot;</highlight><highlight class="normal"><sp/>(*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*)<sp/>(addr))</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Ir&quot;</highlight><highlight class="normal"><sp/>(bit));</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="x86_2arch_8h_1a43a2682b576dd69995dfdd203134f2a6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="x86_2arch_8h_1a43a2682b576dd69995dfdd203134f2a6" kindref="member">sys_test_bit</ref>(<ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref><sp/>addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit)</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;btl<sp/>%2,<sp/>%1;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sbb<sp/>%0,<sp/>%0&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>),<sp/></highlight><highlight class="stringliteral">&quot;+m&quot;</highlight><highlight class="normal"><sp/>(*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*)<sp/>(addr))</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Ir&quot;</highlight><highlight class="normal"><sp/>(bit));</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="x86_2arch_8h_1a036f93e32f1d1cc34cb2df3193650d48" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="x86_2arch_8h_1a036f93e32f1d1cc34cb2df3193650d48" kindref="member">sys_test_and_set_bit</ref>(<ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;btsl<sp/>%2,<sp/>%1;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sbb<sp/>%0,<sp/>%0&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>),<sp/></highlight><highlight class="stringliteral">&quot;+m&quot;</highlight><highlight class="normal"><sp/>(*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*)<sp/>(addr))</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Ir&quot;</highlight><highlight class="normal"><sp/>(bit));</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="x86_2arch_8h_1accf2bc65402198dda9d43ccd788163c6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="x86_2arch_8h_1accf2bc65402198dda9d43ccd788163c6" kindref="member">sys_test_and_clear_bit</ref>(<ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref><sp/>addr,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit)</highlight></codeline>
<codeline lineno="197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;btrl<sp/>%2,<sp/>%1;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sbb<sp/>%0,<sp/>%0&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>),<sp/></highlight><highlight class="stringliteral">&quot;+m&quot;</highlight><highlight class="normal"><sp/>(*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*)<sp/>(addr))</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Ir&quot;</highlight><highlight class="normal"><sp/>(bit));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="x86_2arch_8h_1a185a9d6bf53f3e815f6385c3f500f4fc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_bitfield_set_bit<sp/>sys_set_bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="x86_2arch_8h_1a7167fa52e3fb5416c93527fea091c446" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_bitfield_clear_bit<sp/>sys_clear_bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="x86_2arch_8h_1a6547612936cc24eae4ff0217ea654c4d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_bitfield_test_bit<sp/>sys_test_bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="x86_2arch_8h_1aa770dbc8057ea68ed43b5eac0db9b390" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_bitfield_test_and_set_bit<sp/>sys_test_and_set_bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="x86_2arch_8h_1ab27f26cae6ce9e528d078fd49b9b4952" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sys_bitfield_test_and_clear_bit<sp/>sys_test_and_clear_bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>Map<sp/>of<sp/>IRQ<sp/>numbers<sp/>to<sp/>their<sp/>assigned<sp/>vectors.<sp/>On<sp/>IA32,<sp/>this<sp/>is<sp/>generated</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>at<sp/>build<sp/>time<sp/>and<sp/>defined<sp/>via<sp/>the<sp/>linker<sp/>script.<sp/>On<sp/>Intel64,<sp/>it&apos;s<sp/>an<sp/>array.</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>_irq_to_interrupt_vector[];</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_IRQ_TO_INTERRUPT_VECTOR(irq)<sp/>\</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((unsigned<sp/>int)<sp/>_irq_to_interrupt_vector[irq])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_ASMLANGUAGE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="sysapic_8h" kindref="compound">drivers/interrupt_controller/sysapic.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_X86_64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="x86_2intel64_2arch_8h" kindref="compound">arch/x86/intel64/arch.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="x86_2ia32_2arch_8h" kindref="compound">arch/x86/ia32/arch.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ffs_8h" kindref="compound">arch/common/ffs.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_ASMLANGUAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="x86_2arch_8h_1aa278d630653b33cb339621d725ed295a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mips_2arch_8h_1aa278d630653b33cb339621d725ed295a" kindref="member">arch_irq_enable</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>irq);</highlight></codeline>
<codeline lineno="248" refid="x86_2arch_8h_1a216d692e87bfba955a60f8e570e127df" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mips_2arch_8h_1a216d692e87bfba955a60f8e570e127df" kindref="member">arch_irq_disable</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>irq);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="x86_2arch_8h_1a42dcd1878309a82246dbfa26510f868a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="mips_2arch_8h_1a42dcd1878309a82246dbfa26510f868a" kindref="member">sys_clock_cycle_get_32</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">__pinned_func</highlight></codeline>
<codeline lineno="253" refid="x86_2arch_8h_1ad9de4b80c686a0cef1275e79fa755281" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="x86_2arch_8h_1ad9de4b80c686a0cef1275e79fa755281" kindref="member">arch_k_cycle_get_32</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="mips_2arch_8h_1a42dcd1878309a82246dbfa26510f868a" kindref="member">sys_clock_cycle_get_32</ref>();</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="x86_2arch_8h_1a25328a181bd0229ef5110c15e8452fc1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="mips_2arch_8h_1a25328a181bd0229ef5110c15e8452fc1" kindref="member">sys_clock_cycle_get_64</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal">__pinned_func</highlight></codeline>
<codeline lineno="261" refid="x86_2arch_8h_1a5f1c7486a4a76135dcec432198238167" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="x86_2arch_8h_1a5f1c7486a4a76135dcec432198238167" kindref="member">arch_k_cycle_get_64</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="262"><highlight class="normal">{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="mips_2arch_8h_1a25328a181bd0229ef5110c15e8452fc1" kindref="member">sys_clock_cycle_get_64</ref>();</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="x86_2arch_8h_1adb441b26ed6818fea4ebba6b8853354b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="x86_2arch_8h_1adb441b26ed6818fea4ebba6b8853354b" kindref="member">arch_irq_unlocked</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>)</highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref><sp/>&amp;<sp/>0x200)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>z_do_read_cpu_timestamp32(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref>;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;rdtsc&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=a&quot;</highlight><highlight class="normal"><sp/>(<ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref>)<sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;%edx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref>;</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">__pinned_func</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>z_tsc_read(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>lo;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="asm-macro-32-bit-gnu_8h_1a0ef89636f8d03ae88717291e66d59527" kindref="member">hi</ref>;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><sp/>value;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref>;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_X86_64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>According<sp/>to<sp/>Intel<sp/>64<sp/>and<sp/>IA-32<sp/>Architectures<sp/>Software</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Developer’s<sp/>Manual,<sp/>volume<sp/>3,<sp/>chapter<sp/>8.2.5,<sp/>LFENCE<sp/>provides</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>a<sp/>more<sp/>efficient<sp/>method<sp/>of<sp/>controlling<sp/>memory<sp/>ordering<sp/>than</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>CPUID<sp/>instruction.<sp/>So<sp/>use<sp/>LFENCE<sp/>here,<sp/>as<sp/>all<sp/>64-bit</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>CPUs<sp/>have<sp/>LFENCE.</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;lfence&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>rdtsc<sp/>&amp;<sp/>cpuid<sp/>clobbers<sp/>eax,<sp/>ebx,<sp/>ecx<sp/>and<sp/>edx<sp/>registers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="comment">/*<sp/>serialize<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;xorl<sp/>%%eax,%%eax;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;cpuid&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;%eax&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%ebx&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%ecx&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%edx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_X86_64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>We<sp/>cannot<sp/>use<sp/>&quot;=A&quot;,<sp/>since<sp/>this<sp/>would<sp/>use<sp/>%rax<sp/>on<sp/>x86_64<sp/>and</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>return<sp/>only<sp/>the<sp/>lower<sp/>32bits<sp/>of<sp/>the<sp/>TSC</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;rdtsc&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=a&quot;</highlight><highlight class="normal"><sp/>(<ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref>.lo),<sp/></highlight><highlight class="stringliteral">&quot;=d&quot;</highlight><highlight class="normal"><sp/>(<ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref>.hi));</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;=A&quot;<sp/>means<sp/>that<sp/>value<sp/>is<sp/>in<sp/>eax:edx<sp/>pair.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;rdtsc&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=A&quot;</highlight><highlight class="normal"><sp/>(<ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref>.value));</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref>.value;</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333" refid="x86_2arch_8h_1a0af98dc5138e02248173c30b8f07210f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="x86_2arch_8h_1a0af98dc5138e02248173c30b8f07210f" kindref="member">arch_nop</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;nop&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_ASMLANGUAGE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_ARCH_X86_ARCH_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/arch/x86/arch.h"/>
  </compounddef>
</doxygen>
